/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 *
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntitydeltaDTOService.java.e.vm
 */
package com.incloud.hcp.service.delta.impl;

import com.ibm.icu.text.DateFormat;
import com.ibm.icu.text.SimpleDateFormat;
import com.incloud.hcp._security.SystemLoggedUser;
import com.incloud.hcp._security.UserSession;
import com.incloud.hcp.bean.custom.*;
import com.incloud.hcp.cmis.CmisFile;
import com.incloud.hcp.common.excel.ExcelDefault;
import com.incloud.hcp.domain.*;
import com.incloud.hcp.domain.response.CerCertificadoResponse;
import com.incloud.hcp.enums.*;
import com.incloud.hcp.mapper.*;
import com.incloud.hcp.repository.CerCertificadoDetalleRepository;
import com.incloud.hcp.repository.CerNotaPedidoDetalleRepository;
import com.incloud.hcp.repository.delta.*;
import com.incloud.hcp.service._framework.cmis.CmisService;
import com.incloud.hcp.service._framework.reportes.bean.ReporteParams;
import com.incloud.hcp.service._framework.reportes.enums.TipoReporteJasperEnum;
import com.incloud.hcp.service._framework.reportes.service.ReporteEjecucionService;
import com.incloud.hcp.service.delta.*;
import com.incloud.hcp.service.dto.*;
import com.incloud.hcp.service.impl.CerCertificadoServiceImpl;
import com.incloud.hcp.service.notificacion.CertificadoNotificacion;
import com.incloud.hcp.service.notificacion.CertificadoSinAprobarNotificacion;
import com.incloud.hcp.service.notificacion.CreacionCertificadoNotificacion;
import com.incloud.hcp.service.notificacion.MailSetting;
import com.incloud.hcp.service.requireNew.CerCertificadoRequireNewService;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.service.support.PageResponse;
import com.incloud.hcp.utils.Constants;
import com.incloud.hcp.utils.DateUtils;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.streaming.SXSSFSheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import javax.persistence.criteria.*;
import java.awt.Color;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.text.ParseException;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.*;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.atomic.AtomicReference;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

/**
 * A simple DTO Facility for CerCertificado.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public class CerCertificadoDeltaServiceImpl extends CerCertificadoServiceImpl implements CerCertificadoDeltaService {

    protected final String NAME_SHEET_DETALLE = "Certificado: ";
    protected final String CONFIG_TITLE_DETALLE = "com/incloud/hcp/excel/CerCertificado01Excel.xml";
    protected final String CONFIG_TITLE_DETALLE_PROVEEDOR = "com/incloud/hcp/excel/CerCertificadoProveedorExcel.xml";

    @Autowired
    protected CerHistorialDeltaRepository cerHistorialDeltaRepository;
    @Autowired
    protected CerHistorialDeltaService cerHistorialDeltaService;

    @Autowired
    protected AppProcesoLogDeltaRepository appProcesoLogDeltaRepository;

    @Autowired
    protected CertificadoNotificacion certificadoNotificacion;
    @Autowired
    protected CreacionCertificadoNotificacion creacionCertificadoNotificacion;
    @Autowired
    protected SapRfcDeltaService sapRfcDeltaService;

    @Autowired
    protected MtrCuentaImputacionDeltaRepository mtrCuentaImputacionDeltaRepository;

    @Autowired
    protected MtrCuentaMayorDeltaRepository mtrCuentaMayorDeltaRepository;

    @Autowired
    private CerCertificadoDeltaRepository cerCertificadoDeltaRepository;
    @Autowired
    private CerCertificadoDeltaService cerCertificadoDeltaService;
    @Autowired
    private CerCertificadoDetalleDeltaRepository cerCertificadoDetalleDeltaRepository;
    @Autowired
    private CerNotaPedidoDetalleRepository cerNotaPedidoDetalleRepository;
    @Autowired
    private CerNotaPedidoDetalleDeltaRepository cerNotaPedidoDetalleDeltaRepository;

    @Autowired
    private CerFirmaDeltaService cerFirmaDeltaService;
    @Autowired
    private MtrTipoFirmaDeltaService mtrTipoFirmaDeltaService;

    @Autowired
    private MtrAprobadorDeltaRepository mtrAprobadorDeltaRepository;
    @Autowired
    private CerCertificadoDetalleRepository cerCertificadoDetalleRepository;
    @Autowired
    private CerFirmaDeltaRepository cerFirmaDeltaRepository;
    @Autowired
    private CerCertificadoDetalleDeltaService cerCertificadoDetalleDeltaService;

    @Autowired
    private CerCertificadoDetalleSapDeltaRepository cerCertificadoDetalleSapDeltaRepository;

    @Autowired
    private CmisService cmisService;


    @Autowired
    private CerDocumentoAdjuntoDeltaService cerDocumentoAdjuntoDeltaService;

    @Autowired
    private CerDocumentoAdjuntoDeltaRepository cerDocumentoAdjuntoDeltaRepository;

    @Autowired
    private CerCertificadoFirmaDeltaRepository cerCertificadoFirmaDeltaRepository;
    @Autowired
    private MtrProveedorDeltaService mtrProveedorDeltaService;

    @Autowired
    private MtrTipoFirmaDeltaRepository mtrTipoFirmaDeltaRepository;

    @Autowired
    private SystemLoggedUser systemLoggedUser;

    @Autowired
    private MtrEstadoDeltaService mtrEstadoService;


    @Autowired
    private MtrEstadoDeltaRepository mtrEstadoDeltaRepository;

    @Autowired
    private MtrProveedorDeltaRepository mtrProveedorDeltaRepository;

    @Autowired
    private AppParametriaDeltaService appParametriaDeltaService;

    @Autowired
    private ReporteEjecucionService reporteEjecucionService;

    @Autowired
    private FacFacturaCertificadoDeltaRepository facFacturaCertificadoDeltaRepository;

    @Autowired
    private CerCertificadoMapper cerCertificadoMapper;

    @Autowired
    private CerHistorialMapper cerHistorialMapper;

    @Autowired
    private CerNotaPedidoMapper cerNotaPedidoMapper;

    @Autowired
    private MtrClaseDocumentoMapper mtrClaseDocumentoMapper;

    @Autowired
    private MtrEstadoMapper mtrEstadoMapper;

    @Autowired
    private MtrMonedaMapper mtrMonedaMapper;

    @Autowired
    private MtrProveedorMapper mtrProveedorMapper;

    @Autowired
    private MtrSociedadMapper mtrSociedadMapper;

    @Autowired
    private MtrCentroAlmacenMapper mtrCentroAlmacenMapper;

    @Autowired
    private CerCertificadoDetalleSapMapper cerCertificadoDetalleSapMapper;

    @Autowired
    private CerFirmaMapper cerFirmaMapper;

    @Autowired
    private CerHistorialDetalleSapDeltaRepository cerHistorialDetalleSapDeltaRepository;

    @Autowired
    private CerCertificadoRequireNewService cerCertificadoRequireNewService;

    @Autowired
    private CertificadoSinAprobarNotificacion certificadoSinAprobarNotificacion;


    //SMTP Values
    @Value("${spring.mail.username}")
    private String username;
    @Value("${spring.mail.password}")
    private String password;
    @Value("${spring.mail.host}")
    private String host;
    @Value("${spring.mail.port}")
    private String port;

    private DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");

    private DateTimeFormatter formatter = DateTimeFormatter.ISO_DATE_TIME;


//    protected CerCertificadoResponse setFindBeanCondicion(CerCertificadoResponse req) throws Exception {
//        CerCertificado cerCertificado = req.getBean();
//        String fechaDesdeIni = cerCertificado.getFechaDesdeIni();
//        String fechaHastaFin = cerCertificado.getFechaHastaFin();
//        if  (StringUtils.isNotBlank(fechaDesdeIni)) {
//            cerCertificado.setFechaCreacionDesde(fechaDesdeIni);
//        }
//        if  (StringUtils.isNotBlank(fechaHastaFin)) {
//            cerCertificado.setFechaCreacionHasta(fechaHastaFin);
//        }
//        req.setBean(cerCertificado);
//        return req;
//    }

    /**************************/
    /* Metodos Personalizados */
    /**************************/

    public CerCertificado eliminarCertificadoPorHES(CerCertificadoEliminarHESEntradaDto bean) throws Exception {
        String numeroHES = bean.getNroDocumentoSAP();
        List<CerCertificado> cerCertificadoList = this.cerCertificadoDetalleSapDeltaRepository
                .findByCerCertificadoNroDocumento02(numeroHES);

        if (cerCertificadoList == null || cerCertificadoList.size() <= 0) {
            throw new Exception("No se encontrÃ³ Certificado con HES: " + numeroHES);
        }
        if (cerCertificadoList.size() > 1) {
            throw new Exception("Se encontraron mas de un Certificado con HES: " + numeroHES);
        }
        CerCertificado cerCertificado = cerCertificadoList.get(0);
        CerCertificadoEliminarEntradaDto cerCertificadoEliminarEntradaDto = new CerCertificadoEliminarEntradaDto();
        cerCertificadoEliminarEntradaDto.setCerCertificadoId(cerCertificado.getId());
        cerCertificadoEliminarEntradaDto.setMotivoEliminacion(bean.getMotivoEliminacion());
        cerCertificadoEliminarEntradaDto.setNroDocumentoSAP(bean.getNroDocumentoSAP());
        CerCertificado cerCertificadoResult = this.eliminarCertificado(cerCertificadoEliminarEntradaDto);
        return cerCertificadoResult;
    }

    public CerCertificado eliminarCertificado(CerCertificadoEliminarEntradaDto bean) throws Exception {
        Optional<CerCertificado> optionalCerCertificado = this.cerCertificadoDeltaRepository.findById(bean.getCerCertificadoId());
        if (!optionalCerCertificado.isPresent()) {
            throw new Exception("No se encontrÃ³ Certificado con ID: " + bean.getCerCertificadoId());
        }
        CerCertificado cerCertificado = optionalCerCertificado.get();

        UserSession userSession = this.systemLoggedUser.getUserSession();
        if (!Optional.ofNullable(cerCertificado).isPresent()) {
            throw new Exception("No se encontrÃ³ Certificado con ID: " + bean.getCerCertificadoId());
        }
        if (!Optional.ofNullable(bean.getMotivoEliminacion()).isPresent()) {
            throw new Exception("Debe ingresar motivo de EliminaciÃ³n");
        }

        MtrEstado mtrEstado = cerCertificado.getMtrEstado();
        if (!mtrEstado.getCodigoEstado().equals(EstadoCertificadoEnum.APROBADO.getEstado())) {
            throw new Exception("Solo se pueden eliminar Certificados en Estado APROBADO");
        }
        List<FacFacturaCertificado> facFacturaCertificadoList =
                this.facFacturaCertificadoDeltaRepository.findByCerCertificado(cerCertificado);
        if (facFacturaCertificadoList != null && facFacturaCertificadoList.size() > 0) {
            throw new Exception("No se puede eliminar CERTIFICADO que posea Facturas asociadas");
        }
        MtrEstado mtrEstadoEliminar = this.mtrEstadoDeltaRepository.
                getByCodigoAgrupadoAndCodigoEstado(
                        Constants.CODIGO_AGRUPADO_CERTIFICADO,
                        EstadoCertificadoEnum.ELIMINADO.getEstado());
        cerCertificado.setMtrEstado(mtrEstadoEliminar);

        CerNotaPedido cerNotaPedido = cerCertificado.getCerNotaPedido();

        MtrEstado mtrEstadoNP = this.mtrEstadoDeltaRepository.
                getByCodigoAgrupadoAndCodigoEstado(
                        Constants.CODIGO_AGRUPADO_NOTA_PEDIDO,
                        EstadoNotaPedidoEnum.ACUSE_RECIBO.getEstado());
        cerNotaPedido.setMtrEstado(mtrEstadoNP);

        List<CerCertificadoDetalle> certificadoDetalleList =
                this.cerCertificadoDetalleDeltaRepository.findByCerCertificado(cerCertificado);
        if (certificadoDetalleList != null && certificadoDetalleList.size() > 0) {
            for (CerCertificadoDetalle beanDetalle : certificadoDetalleList) {
                BigDecimal cantidadAprobada = beanDetalle.getCantidadAprobada();
                CerNotaPedidoDetalle cerNotaPedidoDetalle =
                        this.cerNotaPedidoDetalleDeltaRepository.getOne(beanDetalle.getCerNotaPedidoDetalle().getId());
                BigDecimal cantidadEntregada = cerNotaPedidoDetalle.getCantidadEntregada();
                BigDecimal nCantidadEntregada =
                        new BigDecimal(cantidadEntregada.floatValue() - cantidadAprobada.floatValue())
                                .setScale(4, BigDecimal.ROUND_HALF_UP);
                cerNotaPedidoDetalle.setCantidadEntregada(nCantidadEntregada);

                this.cerNotaPedidoDetalleDeltaRepository.save(cerNotaPedidoDetalle);
            }
        }

        cerCertificado = this.cerCertificadoDeltaRepository.save(cerCertificado);
        log.error("this.cerCertificadoDeltaRepository.save_pprincipe_1 ::: " + cerCertificado.toString());
        this.cerNotaPedidoDeltaRepository.save(cerNotaPedido);

        CerHistorial cerHistorial = new CerHistorial();
        cerHistorial.setCerCertificado(cerCertificado);
        cerHistorial.setDescripcion(bean.getMotivoEliminacion());

        String user = userSession.getFirstName() != null ? userSession.getFirstName() : " ";
        user += " " + userSession.getLastName() != null ? userSession.getLastName() : "";
        user = user.trim();
        cerHistorial.setUsuarioHistoral(user);
        cerHistorial.setFechaHistorial(DateUtils.obtenerFechaHoraActual());
        cerHistorial.setNroDocumentoSapAsociado(bean.getNroDocumentoSAP());
        cerHistorial.setMtrEstado(mtrEstadoEliminar);
        this.cerHistorialDeltaRepository.save(cerHistorial);
        return cerCertificado;
    }

    public CerCertificadoAprobacionFirmaBDto aprobacionFirmaB(CerCertificadoAprobacionFirmaBDto bean) throws Exception {
        log.error("CBAZALAR aprobacionFirmaB 00 BEAN: " + bean.toString());
        CerCertificado cerCertificado = this.save(bean.getCerCertificado());

        log.error("CBAZALAR aprobacionFirmaB 01 cerCertificado: " + cerCertificado.toString());
        cerCertificado = this.cerCertificadoDeltaRepository.getOne(cerCertificado.getId());
        log.error("CBAZALAR aprobacionFirmaB 02 cerCertificado: " + cerCertificado.toString());

        bean.setCerCertificado(cerCertificado);
        CerCertificadoDetalleImputacionModificarDto beanImputacion = this.cerCertificadoDetalleDeltaService.
                saveImputacionAdjuntos(
                        bean.getBeanImputacion(),
                        cerCertificado);
        log.error("CBAZALAR aprobacionFirmaB 03 beanImputacion: " + beanImputacion.toString());
        bean.setBeanImputacion(beanImputacion);
        List<MensajeSap> mensajeSapList = this.realizarOperacion(bean.getOperacionCertificado());
        bean.setMensajeSapList(mensajeSapList);
        log.error("CBAZALAR aprobacionFirmaB FIN");
        return bean;
    }

    @Override
    public List<MensajeSap> uploadExcelCertificado(InputStream in) {
        //Numeric Descuento - Monto - Monto total -
        //Fecha desde -  hasta
        // numerico formateado (SAP) Nota de pedido , proveedor Descuento - Monto - Monto total
        //Nota de pedido, Clase doc, Estado, Moneda, Proveedor, Sociedad
        List<MensajeSap> lista = new ArrayList<MensajeSap>();
        try {
            Workbook workbook = new XSSFWorkbook(in);
            Sheet datatypeSheet = workbook.getSheetAt(0);
            Iterator<Row> iterator = datatypeSheet.iterator();
            int countRow = 0;
            int countCell = 0;


            java.text.SimpleDateFormat formatHana = new java.text.SimpleDateFormat("yyyy/MM/dd");

            while (iterator.hasNext()) {
                Row currentRow = iterator.next();
                if (countRow > 0) {
                    Iterator<Cell> cellIterator = currentRow.iterator();

                    String codigoCertificado = "";
                    String concepto = "";
                    String descuento = "";
                    String fechaAprobacion = "";
                    String fechaDesde = "";
                    String fechaHasta = "";
                    String grupoCompra = "";
                    String hojaServicio = "";
                    String lugarPrestacionServicio = "";
                    String monto = "";
                    String montoTotal = "";
                    String montoAjustado = "";
                    String notaRechazo = "";
                    String observacion = "";
                    String ocurrencia = "";
                    String responsableExterno = "";
                    String solicitante = "";
                    String notaPedido = "";
                    String claseDoc = "";
                    String estado = "";
                    String moneda = "";
                    String proveedor = "";
                    String sociedad = "";
                    String almacen = "";
                    String centro = "";
                    String indAutomatico = "";
                    String fechaContabilizacion = "";
                    String nroGuiaRemision = "";

                    Date fechaAprobacionD = null;
                    Date fechaDesdeD = null;
                    Date fechaHastaD = null;
                    Date fechaContabilizacionD = null;

                    while (cellIterator.hasNext()) {

                        Cell currentCell = cellIterator.next();
                        countCell++;
                        if (countCell == 1) {//codigoCertificado
                            //codigoCertificado = currentCell.getStringCellValue();
                            if (currentCell.getCellType() == CellType.STRING) {
                                codigoCertificado = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                codigoCertificado = currentCell.getNumericCellValue() + "";
                            }

                        } else if (countCell == 2) {//concepto
                            //concepto = currentCell.getNumericCellValue();
                            if (currentCell.getCellType() == CellType.STRING) {
                                concepto = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                concepto = currentCell.getNumericCellValue() + "";
                            }

                        } else if (countCell == 3) {//descuento

                            //Validacion descuento
                            if (currentCell.getCellType() == CellType.STRING) {
                                descuento = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                descuento = currentCell.getNumericCellValue() + "";
                            }

                        } else if (countCell == 4) {//fechaAprobacion

                            //Validacion fechaAprobacion
                            if (currentCell.getCellType() == CellType.STRING) {
                                fechaAprobacion = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                fechaAprobacion = currentCell.getNumericCellValue() + "";
                            }


                        } else if (countCell == 5) {//fechaDesde
                            //Validacion fechaDesde
                            if (currentCell.getCellType() == CellType.STRING) {
                                fechaDesde = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                fechaDesde = currentCell.getNumericCellValue() + "";
                            }

                        } else if (countCell == 6) {//fechaHasta
                            //Validacion fechaHasta
                            if (currentCell.getCellType() == CellType.STRING) {
                                fechaHasta = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                fechaHasta = currentCell.getNumericCellValue() + "";
                            }

                        } else if (countCell == 7) {//grupoCompra
                            //Validacion grupoCompra
                            if (currentCell.getCellType() == CellType.STRING) {
                                grupoCompra = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                grupoCompra = currentCell.getNumericCellValue() + "";
                            }

                        } else if (countCell == 8) {//hojaServicio
                            //Validacion hojaServicio
                            if (currentCell.getCellType() == CellType.STRING) {
                                hojaServicio = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                hojaServicio = currentCell.getNumericCellValue() + "";
                            }

                        } else if (countCell == 9) {//lugarPrestacionServicio
                            //Validacion lugarPrestacionServicio
                            if (currentCell.getCellType() == CellType.STRING) {
                                lugarPrestacionServicio = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                lugarPrestacionServicio = currentCell.getNumericCellValue() + "";
                            }

                        } else if (countCell == 10) {//monto
                            //Validacion monto
                            if (currentCell.getCellType() == CellType.STRING) {
                                monto = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                monto = currentCell.getNumericCellValue() + "";
                            }

                        } else if (countCell == 11) {//montoTotal
                            //Validacion montoTotal
                            if (currentCell.getCellType() == CellType.STRING) {
                                monto = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                monto = currentCell.getNumericCellValue() + "";
                            }

                        } else if (countCell == 12) {//montoAjustado
                            //Validacion montoAjustado
                            if (currentCell.getCellType() == CellType.STRING) {
                                montoAjustado = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                montoAjustado = currentCell.getNumericCellValue() + "";
                            }

                        } else if (countCell == 13) {//notaRechazo
                            //Validacion notaRechazo
                            if (currentCell.getCellType() == CellType.STRING) {
                                notaRechazo = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                notaRechazo = currentCell.getNumericCellValue() + "";
                            }

                        } else if (countCell == 14) {//observacion
                            //Validacion observacion
                            if (currentCell.getCellType() == CellType.STRING) {
                                observacion = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                observacion = currentCell.getNumericCellValue() + "";
                            }

                        } else if (countCell == 15) {//ocurrencia
                            //Validacion ocurrencia
                            if (currentCell.getCellType() == CellType.STRING) {
                                ocurrencia = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                ocurrencia = currentCell.getNumericCellValue() + "";
                            }

                        } else if (countCell == 16) {//responsableExterno
                            //Validacion responsableExterno
                            if (currentCell.getCellType() == CellType.STRING) {
                                responsableExterno = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                responsableExterno = currentCell.getNumericCellValue() + "";
                            }

                        } else if (countCell == 17) {//solicitante
                            //Validacion solicitante
                            if (currentCell.getCellType() == CellType.STRING) {
                                solicitante = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                solicitante = currentCell.getNumericCellValue() + "";
                            }

                        } else if (countCell == 18) {//notaPedido
                            //Validacion notaPedido
                            if (currentCell.getCellType() == CellType.STRING) {
                                notaPedido = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                notaPedido = currentCell.getNumericCellValue() + "";
                            }

                        } else if (countCell == 19) {//claseDoc
                            //Validacion claseDoc
                            if (currentCell.getCellType() == CellType.STRING) {
                                claseDoc = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                claseDoc = currentCell.getNumericCellValue() + "";
                            }

                        } else if (countCell == 20) {//estado
                            //Validacion estado
                            if (currentCell.getCellType() == CellType.STRING) {
                                estado = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                estado = currentCell.getNumericCellValue() + "";
                            }

                        } else if (countCell == 21) {//moneda
                            //Validacion moneda
                            if (currentCell.getCellType() == CellType.STRING) {
                                moneda = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                moneda = currentCell.getNumericCellValue() + "";
                            }

                        } else if (countCell == 22) {//proveedor
                            //Validacion proveedor
                            if (currentCell.getCellType() == CellType.STRING) {
                                proveedor = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                proveedor = currentCell.getNumericCellValue() + "";
                            }

                        } else if (countCell == 23) {//sociedad
                            //Validacion sociedad
                            if (currentCell.getCellType() == CellType.STRING) {
                                sociedad = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                sociedad = currentCell.getNumericCellValue() + "";
                            }

                        } else if (countCell == 24) {//almacen
                            //Validacion almacen
                            if (currentCell.getCellType() == CellType.STRING) {
                                almacen = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                almacen = currentCell.getNumericCellValue() + "";
                            }

                        } else if (countCell == 25) {//centro
                            //Validacion centro
                            if (currentCell.getCellType() == CellType.STRING) {
                                centro = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                centro = currentCell.getNumericCellValue() + "";
                            }

                        } else if (countCell == 26) {//indAutomatico
                            //Validacion indAutomatico
                            if (currentCell.getCellType() == CellType.STRING) {
                                indAutomatico = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                indAutomatico = currentCell.getNumericCellValue() + "";
                            }

                        } else if (countCell == 27) {//fechaContabilizacion
                            //Validacion fechaContabilizacion
                            if (currentCell.getCellType() == CellType.STRING) {
                                fechaContabilizacion = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                fechaContabilizacion = currentCell.getNumericCellValue() + "";
                            }

                        } else if (countCell == 28) {//nroGuiaRemision
                            //Validacion nroGuiaRemision
                            if (currentCell.getCellType() == CellType.STRING) {
                                nroGuiaRemision = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                nroGuiaRemision = currentCell.getNumericCellValue() + "";
                            }

                        }
                    }
                    log.error("uploadExcelCertificado :: numero fila : " + countRow + " codigoCertificado: " + codigoCertificado + " concepto: " + concepto +
                            " descuento: " + descuento + " fechaAprobacion: " + fechaAprobacion + " fechaDesde: " + fechaDesde + " fechaHasta: " + fechaHasta +
                            " grupoCompra: " + grupoCompra + " hojaServicio: " + hojaServicio + " lugarPrestacionServicio: " + lugarPrestacionServicio +
                            " monto: " + monto
                            + " montoTotal: " + montoTotal + " montoAjsutado: " + montoAjustado + " notaRechazo: " + notaRechazo +
                            " observacion: " + observacion + " ocurrencia: " + ocurrencia + " responsableExterno: " + responsableExterno +
                            " solicitante: " + solicitante + " notaPedido: " + notaPedido + " claseDoc: " + claseDoc
                            + " estado : " + estado + " moneda : " + moneda + " proveedor : " + proveedor + " sociedad : " + sociedad +
                            " almacen : " + almacen + " centro : " + centro + " indAutomatico : " + indAutomatico + " fechaContabilizacion : " +
                            fechaContabilizacion + " nroGuiaRemision : " + nroGuiaRemision);
                    //Validar Valores
                    boolean flagOk = true;
                    //Validar Obligatorios
                    //Nota de pedido, Clase doc, Estado, Moneda, Proveedor, Sociedad
                    if (StringUtils.isBlank(notaPedido) || StringUtils.isBlank(claseDoc) || StringUtils.isBlank(estado)
                            || StringUtils.isBlank(moneda) || StringUtils.isBlank(proveedor) || StringUtils.isBlank(sociedad) || StringUtils.isBlank(codigoCertificado)) {
                        lista.add(new MensajeSap("E", "", " Item " + countRow + "Ingresar Campos Obligatorios: Nota de pedido, Clase doc, Estado, Moneda, Proveedor, Sociedad"));
                        flagOk = false;
                    }
                    //Valores Numericos  formateado (SAP) Nota de pedido , proveedor
                    //Numerico Descuento - Monto - Monto total
                    if (flagOk) {
                        if ((!StringUtils.isBlank(notaPedido) && !this.isNumeric(notaPedido)) ||
                                (!StringUtils.isBlank(proveedor) && !this.isNumeric(proveedor)) ||
                                (!StringUtils.isBlank(descuento) && !this.isNumeric(descuento)) ||
                                (!StringUtils.isBlank(monto) && !this.isNumeric(monto)) ||
                                (!StringUtils.isBlank(montoTotal) && !this.isNumeric(montoTotal)) ||
                                (!StringUtils.isBlank(ocurrencia) && !this.isNumeric(ocurrencia)) ||
                                (!StringUtils.isBlank(montoAjustado) && !this.isNumeric(montoAjustado))) {
                            lista.add(new MensajeSap("E", "", " Item " + countRow + "Deben ser nÃºmericos: Nota de pedido, Ruc, Descuento, Monto, Monto total, Ocurrencia y Monto Ajustado"));
                            flagOk = false;
                        }
                    }
                    //Descuento - Monto - Monto total - notapedido - proveedor

                    if (flagOk) {
                        notaPedido = String.format("%010d", new Long(notaPedido));
                        //codigoSapFormateado = String.format("%018d", new Long(valueCodigoSap));

                        List<CerCertificado> listaCertificado = this.cerCertificadoMapper.findAllByCodesSap("'" + codigoCertificado + "'");
                        List<CerNotaPedido> listaNotaPedido = this.cerNotaPedidoMapper.findAllByCodesSap("'" + notaPedido + "'");
                        List<MtrClaseDocumento> listaClaseDoc = this.mtrClaseDocumentoMapper.findAllByCodesSap("'" + claseDoc + "'");
                        List<MtrEstado> listaEstado = this.mtrEstadoMapper.findAllByCodesSap("'" + estado + "'");
                        List<MtrMoneda> listaMoneda = this.mtrMonedaMapper.findAllByCodesSap("'" + moneda + "'");
                        List<MtrProveedor> listaProveedor = this.mtrProveedorMapper.findAllByCodesSap("'" + proveedor + "'");
                        List<MtrSociedad> listaSociedad = this.mtrSociedadMapper.findAllByCodesSap("'" + sociedad + "'");

                        List<MtrCentroAlmacen> listaCentro = null;
                        List<MtrCentroAlmacen> listaAlmacen = null;

                        CerCertificado certificado = new CerCertificado();
                        if (listaCertificado != null && listaCertificado.size() > 0)
                            certificado = listaCertificado.get(0);
                        if ((listaNotaPedido == null || listaNotaPedido.size() == 0)) {
                            lista.add(new MensajeSap("E", "", " Item " + countRow + "La nota de pedido numero " + notaPedido + " No existe en la tabla maestra"));
                            flagOk = false;
                        }
                        if ((listaClaseDoc == null || listaClaseDoc.size() == 0) && flagOk) {
                            lista.add(new MensajeSap("E", "", " Item " + countRow + "La Clase de documento " + claseDoc + " No existe en la tabla maestra"));
                            flagOk = false;
                        }
                        if ((listaEstado == null || listaEstado.size() == 0) && flagOk) {
                            lista.add(new MensajeSap("E", "", " Item " + countRow + "El estado " + estado + " No existe en la tabla maestra"));
                            flagOk = false;
                        }
                        if ((listaMoneda == null || listaMoneda.size() == 0) && flagOk) {
                            lista.add(new MensajeSap("E", "", " Item " + countRow + "La moneda " + moneda + " No existe en la tabla maestra"));
                            flagOk = false;
                        }
                        if ((listaProveedor == null || listaProveedor.size() == 0) && flagOk) {
                            lista.add(new MensajeSap("E", "", " Item " + countRow + "El Proveedor con Ruc " + proveedor + " No existe en la tabla maestra"));
                            flagOk = false;
                        }
                        if ((listaSociedad == null || listaSociedad.size() == 0) && flagOk) {
                            lista.add(new MensajeSap("E", "", " Item " + countRow + "La sociedad " + sociedad + " No existe en la tabla maestra"));
                            flagOk = false;
                        }
                        if (flagOk) {
                            if (!StringUtils.isBlank(almacen) && StringUtils.isBlank(centro)) {
                                lista.add(new MensajeSap("E", "", " Item " + countRow + "El almacen  " + almacen + " Debe tener tambien un centro ingresado"));
                                flagOk = false;
                            } else {
                                if (!StringUtils.isBlank(centro)) {
                                    listaCentro = this.mtrCentroAlmacenMapper.findByCodeUniquex(centro, 0, listaSociedad.get(0).getId());
                                    if (listaCentro == null || listaCentro.size() == 0) {
                                        lista.add(new MensajeSap("E", "", " Item " + countRow + "El Centro  " + centro + " No existe en la tabla Maestra"));
                                        flagOk = false;
                                    } else {
                                        if (!StringUtils.isBlank(almacen)) {
                                            listaAlmacen = this.mtrCentroAlmacenMapper.findByCodeUniquex(almacen, listaCentro.get(0).getId(), listaSociedad.get(0).getId());
                                            if (listaAlmacen == null || listaAlmacen.size() == 0) {
                                                lista.add(new MensajeSap("E", "", " Item " + countRow + "El Almacen  " + almacen + " No corresponde al centro " + centro));
                                                flagOk = false;
                                            }
                                        }
                                    }
                                }

                            }
                                /*if(flagOk) {
                                   if(!StringUtils.isBlank(centro)) {
                                       listaCentro = this.mtrCentroAlmacenMapper.findByCodeUniquex(centro,0,listaSociedad.get(0).getId());
                                       if(listaCentro == null || listaCentro.size() == 0) {
                                           lista.add(new MensajeSap("E",""," Item " + countRow + "El Centro  " + centro + " No existe en la tabla Maestra"));
                                           flagOk = false;
                                       }
                                       if(flagOk) {
                                           if(!StringUtils.isBlank(almacen)) {
                                               listaAlmacen = this.mtrCentroAlmacenMapper.findByCodeUniquex(almacen,listaCentro.get(0).getId(),listaSociedad.get(0).getId());
                                               if(listaAlmacen == null || listaAlmacen.size() == 0) {
                                                   lista.add(new MensajeSap("E",""," Item " + countRow + "El Almacen  " + almacen + " No corresponde al centro " + centro));
                                                   flagOk = false;
                                               }
                                           }
                                       }
                                   }
                                }*/
                        }
                        //Validar Fechas
                        try {
                            if (!StringUtils.isBlank(fechaAprobacion))
                                fechaAprobacionD = formatHana.parse(fechaAprobacion);
                            if (!StringUtils.isBlank(fechaDesde))
                                fechaDesdeD = formatHana.parse(fechaDesde);
                            if (!StringUtils.isBlank(fechaHasta))
                                fechaHastaD = formatHana.parse(fechaHasta);
                            if (!StringUtils.isBlank(fechaContabilizacion))
                                fechaContabilizacionD = formatHana.parse(fechaContabilizacion);
                        } catch (ParseException e) {
                            lista.add(new MensajeSap("E", "", " Item " + countRow + " Ingrese las fechas en Formato dd/MM/yyyy"));
                            flagOk = false;
                        }
                        //Grabar Registro
                        if (flagOk) {
                            certificado.setCodigoCertificado(codigoCertificado);
                            certificado.setConcepto(concepto);
                            if (!StringUtils.isBlank(descuento)) {
                                certificado.setDescuentoh(descuento);
                            }
                            if (fechaAprobacionD != null)
                                certificado.setFechaAprobacion(fechaAprobacionD);
                            if (fechaDesdeD != null)
                                certificado.setFechaDesde(fechaDesdeD);
                            if (fechaHastaD != null)
                                certificado.setFechaHasta(fechaHastaD);

                            if (!StringUtils.isBlank(grupoCompra)) {
                                certificado.setGrupoCompras(grupoCompra);
                            }
                            if (!StringUtils.isBlank(hojaServicio)) {
                                certificado.setHojaServicio(hojaServicio);
                            }
                            if (!StringUtils.isBlank(lugarPrestacionServicio)) {
                                certificado.setLugarPrestServ(lugarPrestacionServicio);
                            }

                            if (!StringUtils.isBlank(monto)) {
                                certificado.setMonto(new BigDecimal("" + monto));
                            }

                            if (!StringUtils.isBlank(montoTotal)) {
                                certificado.setMontoTotal(new BigDecimal("" + montoTotal));
                            }
                            if (!StringUtils.isBlank(montoAjustado)) {
                                certificado.setMontoTotalAdjustado(new BigDecimal("" + montoAjustado));
                            }

                            if (!StringUtils.isBlank(notaRechazo)) {
                                certificado.setNotasRechazo(notaRechazo);
                            }
                            if (!StringUtils.isBlank(observacion)) {
                                certificado.setObservacion(observacion);
                            }
                            if (!StringUtils.isBlank(ocurrencia)) {
                                certificado.setOcurrencia(Integer.parseInt("" + montoAjustado));
                            }

                            if (!StringUtils.isBlank(responsableExterno)) {
                                certificado.setRespoExterno(responsableExterno);
                            }

                            if (!StringUtils.isBlank(solicitante)) {
                                certificado.setSolicitante(solicitante);
                            }

                            certificado.setCerNotaPedido(listaNotaPedido.get(0));
                            certificado.setMtrClaseDocumento(listaClaseDoc.get(0));
                            certificado.setMtrEstado(listaEstado.get(0));
                            certificado.setMtrMoneda(listaMoneda.get(0));
                            certificado.setMtrProveedor(listaProveedor.get(0));
                            certificado.setMtrSociedad(listaSociedad.get(0));
                            if (listaAlmacen != null && listaAlmacen.size() > 0)
                                certificado.setMtrAlmacen(listaAlmacen.get(0));
                            if (listaCentro != null && listaCentro.size() > 0)
                                certificado.setMtrCentro(listaCentro.get(0));

                            if (!StringUtils.isBlank(indAutomatico)) {
                                certificado.setIndCreacionAutomatica(indAutomatico);
                            }
                            if (fechaContabilizacionD != null)
                                certificado.setFechaContabilizacion(fechaContabilizacionD);

                            if (!StringUtils.isBlank(nroGuiaRemision)) {
                                certificado.setNroGuiaRemision(nroGuiaRemision);
                            }

                            this.cerCertificadoDeltaRepository.save(certificado);
                            log.error("this.cerCertificadoDeltaRepository.save_pprincipe_2 ::: " + certificado.toString());
                            lista.add(new MensajeSap("S", "", "El certificado " + codigoCertificado + "Se actualizÃ³ correctamente"));
                            //flagOk = false;
                        }

                    }


                }
                countRow++;
            }
        } catch (UnsupportedEncodingException e) {
            log.error("uploadExcelCertificado :: UnsupportedEncodingException Error Carga masiva excel : " + e.toString());
            e.printStackTrace();
        } catch (IOException e) {
            log.error("uploadExcelCertificado :: IOException Error Carga masiva excel : " + e.toString());
            e.printStackTrace();

        }


        return lista;
    }

    public boolean isNumeric(String strNum) {
        try {

            BigDecimal d = new BigDecimal(strNum + "");
        } catch (Exception e) {
            return false;
        }
        return true;
    }

    public ByteArrayResource generarReportePdf(Integer cerCertificadoId) throws Exception {
        Map parameterMap = new HashMap();
        Optional<CerCertificado> optionalCerCertificado = this.cerCertificadoDeltaRepository.findById(cerCertificadoId);
        if (!optionalCerCertificado.isPresent()) {
            throw new Exception("No se encontrÃ³ Certificado con ID: " + cerCertificadoId);
        }
        CerCertificado cerCertificado = optionalCerCertificado.get();
        UsuarioFirmaCertificadoDto usuarioFirmaCertificadoDto = this.devuelveFirmaCertificado(cerCertificado);
        String userFirmaA = usuarioFirmaCertificadoDto.getUsuarioFirmaA();
        String userFirmaB = usuarioFirmaCertificadoDto.getUsuarioFirmaB();
        String hes = this.devuelveHES(cerCertificado);

        parameterMap.put("sociedad", cerCertificado.getMtrSociedad().getDescripcion());
        parameterMap.put("certificado", cerCertificado.getCodigoCertificado());
        parameterMap.put("notaPedido", cerCertificado.getCerNotaPedido().getCodigoNotaPedidoSap());
        parameterMap.put("proveedor", cerCertificado.getMtrProveedor().getRazonSocial());
        parameterMap.put("concepto", cerCertificado.getConcepto());
        parameterMap.put("usuarioSolicitante", cerCertificado.getSolicitante());
        parameterMap.put("responsableContratista", cerCertificado.getRespoExterno());
        parameterMap.put("moneda", cerCertificado.getMtrMoneda().getMonedaDescrip());
        parameterMap.put("montoTotal", cerCertificado.getMontoTotal());
        parameterMap.put("montoTotalAjustado", cerCertificado.getMontoTotalAdjustado());
        parameterMap.put("fechaDesde", cerCertificado.getFechaDesde());
        parameterMap.put("fechaHasta", cerCertificado.getFechaHasta());
        parameterMap.put("fechaAprobacion", cerCertificado.getFechaAprobacion());
        parameterMap.put("locacion", cerCertificado.getLugarPrestServ());
        parameterMap.put("firmaA", userFirmaA);
        parameterMap.put("firmaB", userFirmaB);
        parameterMap.put("observacion", cerCertificado.getObservacion());
        parameterMap.put("hojaServicio", hes);
        parameterMap.put("estado", cerCertificado.getMtrEstado().getDescripcion());

        List<CerCertificadoDetalleDto> listaDetalle = this.cerCertificadoDetalleDeltaService.
                findByDetalle(cerCertificadoId);

        List<CerCertificadoReporteSalidaDto> listaDetalleReporte = new ArrayList<CerCertificadoReporteSalidaDto>();
        if (listaDetalle != null && listaDetalle.size() > 0) {
            int subposicion = 0;
            for (CerCertificadoDetalleDto bean : listaDetalle) {
                String posicionSap = bean.getCerNotaPedidoDetalle().getPosicionSap();
                String tipoPosicion = bean.getTipoPosicion();
                try {
                    Integer nposicionSap = new Integer(posicionSap.trim());
                    posicionSap = nposicionSap.toString().trim();
                } catch (Exception e) {
                    posicionSap = bean.getCerNotaPedidoDetalle().getPosicionSap();
                }
                if (tipoPosicion.equals(NotaPedidoTipoPosicionEnum.POSICION.getEstado())) {
                    subposicion = 0;
                } else {
                    subposicion++;
                    try {
                        String subposicionS = bean.getCerNotaPedidoDetalle().getExtrow();
                        Integer subposicionI = new Integer(subposicionS);
                        posicionSap = posicionSap + "." + subposicionI.toString();
                    } catch (Exception expos) {
                        posicionSap = posicionSap + "." + new Integer(subposicion).toString();
                    }

                }

                CerCertificadoReporteSalidaDto beanReporte = new CerCertificadoReporteSalidaDto();
                beanReporte.setLinea(posicionSap);
                String descripcion =
                        bean.getCerNotaPedidoDetalle().getMtrBienServicio() != null ?
                                bean.getCerNotaPedidoDetalle().getMtrBienServicio().getDescripcion() :
                                bean.getCerNotaPedidoDetalle().getTextoItem();
                beanReporte.setDescripcion(descripcion);
                beanReporte.setUnidad(bean.getCerNotaPedidoDetalle().getUnidadTextoItem());

                if (Optional.ofNullable(bean.getCerCertificadoDetalle()).isPresent()) {
                    String ceCo =
                            bean.getCerCertificadoDetalle().getMtrCuentaImputacion() != null ?
                                    bean.getCerCertificadoDetalle().getMtrCuentaImputacion().getCodigoCuentaImputacion() :
                                    "";
                    String tipoImputacion =
                            bean.getCerCertificadoDetalle().getMtrCuentaImputacion() != null ?
                                    bean.getCerCertificadoDetalle().getMtrCuentaImputacion().getMtrTipoImputacion().getCodigoTipoImputacion() :
                                    "";
                    String cuenta =
                            bean.getCerCertificadoDetalle().getMtrCuentaMayor() != null ?
                                    bean.getCerCertificadoDetalle().getMtrCuentaMayor().getCodigoCuentaMayor() :
                                    "";
                    beanReporte.setTipoImputacion(tipoImputacion);
                    beanReporte.setCuenta(cuenta);
                    beanReporte.setCeCo(ceCo);
                    beanReporte.setPrecioBase(bean.getCerCertificadoDetalle().getPrecioUnitario());
                    beanReporte.setCantidadEntregada(bean.getCerCertificadoDetalle().getCantidadAprobada());
                    beanReporte.setTotalLinea(bean.getCerCertificadoDetalle().getTotalLinea());
                }
                beanReporte.setTipoPosicion(bean.getTipoPosicion());
                listaDetalleReporte.add(beanReporte);
            }
        }
        ReporteParams reporteParams = this.reporteEjecucionService.inicializaReporte(
                "reporteCertificado",
                TipoReporteJasperEnum.PDF,
                parameterMap,
                listaDetalleReporte
        );
        ByteArrayResource byteArrayResource =
                this.reporteEjecucionService.executeReporte(
                        reporteParams);
        return byteArrayResource;
    }

    public SXSSFWorkbook downloadExcelporFiltro(CerCertificado cerCertificado) throws Exception {
        CerCertificadoResponse cerCertificadoResponse = new CerCertificadoResponse();
        cerCertificadoResponse.setBean(cerCertificado);
        if (Optional.ofNullable(cerCertificado.getCodigoCertificado()).isPresent()) {
            cerCertificadoResponse.setCodigoCertificadoCondicion(ConditionEnum.CONTIENE.getEstado());
        }
        List<CerCertificado> cerCertificadoList = this.findCondicion(cerCertificadoResponse);

        SXSSFWorkbook book = new SXSSFWorkbook(100);
        XSSFWorkbook xbook = book.getXSSFWorkbook();
        SXSSFSheet sheet = book.createSheet();

        int numberOfSheets = book.getNumberOfSheets();
        book.setSheetName(numberOfSheets - 1, this.devuelveNombreSheet());
        int nroColumnas = ExcelDefault.createTitleAndWidth(
                xbook,
                sheet,
                this.CONFIG_TITLE_DETALLE,
                NAME_SHEET_DETALLE,
                null);

        sheet.untrackAllColumnsForAutoSizing();

        XSSFCellStyle cellStyle01 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 1), new Color(226, 239, 218), false, (short) 10);
        XSSFCellStyle cellStyle02 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 192), new Color(255, 255, 255), false, (short) 10);
        List<CellStyle> cellStyleList01 = ExcelDefault.generarCellStyle(xbook, cellStyle01);
        List<CellStyle> cellStyleList02 = ExcelDefault.generarCellStyle(xbook, cellStyle02);
        List<CellStyle> cellStyleList = cellStyleList01;
        boolean filaImpar = true;
        for (CerCertificado bean : cerCertificadoList) {
            UsuarioFirmaCertificadoDto usuarioFirmaCertificadoDto = this.devuelveFirmaCertificado(bean);
            String userFirmaA = usuarioFirmaCertificadoDto.getUsuarioFirmaA();
            String userFirmaB = usuarioFirmaCertificadoDto.getUsuarioFirmaB();
            String hes = this.devuelveHES(bean);

            int lastRow = sheet.getLastRowNum();
            int i = lastRow < 0 ? 0 : lastRow;
            Row dataRow = sheet.createRow(i + 1);
            int contador = 0;
            if (filaImpar) {
                cellStyleList = cellStyleList01;
            } else {
                cellStyleList = cellStyleList02;
            }
            filaImpar = !filaImpar;


            if (Optional.ofNullable(bean.getCerNotaPedido()).isPresent()) {
                ExcelDefault.setValueCell(bean.getCerNotaPedido().getCodigoNotaPedidoSap(), dataRow.createCell(contador), "S", cellStyleList);
                contador++;
            } else {
                ExcelDefault.setValueCell("", dataRow.createCell(contador), "S", cellStyleList);
                contador++;
            }
            ExcelDefault.setValueCell(bean.getCodigoCertificado(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getConcepto(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getSolicitante(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getMtrSociedad() != null ? bean.getMtrSociedad().getDescripcion() : "", dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getMtrProveedor() != null ? bean.getMtrProveedor().getRazonSocial() : "", dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getMtrEstado() != null ? bean.getMtrEstado().getDescripcion() : "", dataRow.createCell(contador), "S", cellStyleList);
            contador++;

            ExcelDefault.setValueCell(userFirmaA, dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(userFirmaB, dataRow.createCell(contador), "S", cellStyleList);
            contador++;

            ExcelDefault.setValueCell(bean.getFechaDesde(), dataRow.createCell(contador), "D", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getFechaHasta(), dataRow.createCell(contador), "D", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getMtrMoneda() != null ? bean.getMtrMoneda().getMonedaDescrip() : "", dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getMontoTotal(), dataRow.createCell(contador), "N2", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getMontoTotalAdjustado(), dataRow.createCell(contador), "N2", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getObservacion(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;

            ExcelDefault.setValueCell(hes, dataRow.createCell(contador), "S", cellStyleList);
            contador++;

            ExcelDefault.setValueCell(bean.getFechaAprobacion(), dataRow.createCell(contador), "D", cellStyleList);
            contador++;

        }
        return book;

    }

    public SXSSFWorkbook downloadExcelProveedorporFiltro(CerCertificado cerCertificado) throws Exception {
        CerCertificadoResponse cerCertificadoResponse = new CerCertificadoResponse();
        cerCertificadoResponse.setBean(cerCertificado);
        if (Optional.ofNullable(cerCertificado.getCodigoCertificado()).isPresent()) {
            cerCertificadoResponse.setCodigoCertificadoCondicion(ConditionEnum.CONTIENE.getEstado());
        }
        UserSession userSession = this.systemLoggedUser.getUserSession();
        MtrProveedor mtrProveedor = this.mtrProveedorDeltaRepository.findByCodigoIdp(userSession.getId());
        if (!Optional.ofNullable(mtrProveedor).isPresent()) {
            throw new Exception("El Proveedor con cÃ³digo IDP: " + userSession.getId() + " no se encuentra registrado en la Tabla MtrProveedor o no esta asociado al IDP en dicha Tabla");
        }
        MtrProveedor mtrProveedorCertificado = new MtrProveedor();
        mtrProveedorCertificado.setId(mtrProveedor.getId());
        cerCertificado.setMtrProveedor(mtrProveedorCertificado);

        List<CerCertificado> cerCertificadoList = this.findCondicionVersion02(cerCertificadoResponse);

        SXSSFWorkbook book = new SXSSFWorkbook(100);
        XSSFWorkbook xbook = book.getXSSFWorkbook();
        SXSSFSheet sheet = book.createSheet();

        int numberOfSheets = book.getNumberOfSheets();
        book.setSheetName(numberOfSheets - 1, this.devuelveNombreSheet());
        int nroColumnas = ExcelDefault.createTitleAndWidth(
                xbook,
                sheet,
                this.CONFIG_TITLE_DETALLE_PROVEEDOR,
                NAME_SHEET_DETALLE,
                null);

        sheet.untrackAllColumnsForAutoSizing();

        XSSFCellStyle cellStyle01 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 1), new Color(226, 239, 218), false, (short) 10);
        XSSFCellStyle cellStyle02 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 192), new Color(255, 255, 255), false, (short) 10);
        List<CellStyle> cellStyleList01 = ExcelDefault.generarCellStyle(xbook, cellStyle01);
        List<CellStyle> cellStyleList02 = ExcelDefault.generarCellStyle(xbook, cellStyle02);
        List<CellStyle> cellStyleList = cellStyleList01;
        boolean filaImpar = true;
        for (CerCertificado bean : cerCertificadoList) {
            UsuarioFirmaCertificadoDto usuarioFirmaCertificadoDto = this.devuelveFirmaCertificado(bean);

            String hes = this.devuelveHES(bean);

            int lastRow = sheet.getLastRowNum();
            int i = lastRow < 0 ? 0 : lastRow;
            Row dataRow = sheet.createRow(i + 1);
            int contador = 0;
            if (filaImpar) {
                cellStyleList = cellStyleList01;
            } else {
                cellStyleList = cellStyleList02;
            }
            filaImpar = !filaImpar;


            if (Optional.ofNullable(bean.getCerNotaPedido()).isPresent()) {
                ExcelDefault.setValueCell(bean.getCerNotaPedido().getCodigoNotaPedidoSap(), dataRow.createCell(contador), "S", cellStyleList);
                contador++;
            } else {
                ExcelDefault.setValueCell("", dataRow.createCell(contador), "S", cellStyleList);
                contador++;
            }
            ExcelDefault.setValueCell(bean.getCodigoCertificado(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getConcepto(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getSolicitante(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getMtrSociedad() != null ? bean.getMtrSociedad().getDescripcion() : "", dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getMtrProveedor() != null ? bean.getMtrProveedor().getRazonSocial() : "", dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getMtrEstado() != null ? bean.getMtrEstado().getDescripcion() : "", dataRow.createCell(contador), "S", cellStyleList);
            contador++;


            ExcelDefault.setValueCell(bean.getFechaDesde(), dataRow.createCell(contador), "D", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getFechaHasta(), dataRow.createCell(contador), "D", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getMtrMoneda() != null ? bean.getMtrMoneda().getMonedaDescrip() : "", dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getMontoTotal(), dataRow.createCell(contador), "N2", cellStyleList);
            contador++;

            ExcelDefault.setValueCell(bean.getObservacion(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;

            ExcelDefault.setValueCell(hes, dataRow.createCell(contador), "S", cellStyleList);
            contador++;

            ExcelDefault.setValueCell(bean.getFechaAprobacion(), dataRow.createCell(contador), "D", cellStyleList);
            contador++;

        }
        return book;

    }


    private String devuelveHES(CerCertificado bean) throws Exception {
        String hes = "";
        //Obteniendo documentos sap
        List<CerCertificadoDetalleSap> certificadoDetalleSapList =
                this.cerCertificadoDetalleSapDeltaRepository.
                        findByCerCertificadoHes(bean.getId());

        if (certificadoDetalleSapList != null && certificadoDetalleSapList.size() > 0) {
            hes = certificadoDetalleSapList.stream().map(this::toDatosHES)
                    .collect(Collectors.joining(", "));
        }
        return hes;
    }

    private String toDatosHES(CerCertificadoDetalleSap cerCertificadoDetalleSap) {
        String hes = cerCertificadoDetalleSap.getDocumentoGenerado();
        return hes;
    }


    private UsuarioFirmaCertificadoDto devuelveFirmaCertificado(CerCertificado bean) throws Exception {
        CerNotaPedido cerNotaPedido = bean.getCerNotaPedido();
        String usuarioFirmaA = "";
        String usuarioFirmaB = "";
        String firmaA = TipoFirmaEnum.FIRMA_A.getEstado();
        String firmaB = TipoFirmaEnum.FIRMA_B.getEstado();

        List<CerFirma> cerFirmaListA = new ArrayList<CerFirma>();
        List<CerFirma> cerFirmaListB = new ArrayList<CerFirma>();
        List<CerFirma> cerFirmaList = this.cerFirmaDeltaRepository.getByCodeNotaPedido(cerNotaPedido.getId());
        if (cerFirmaList != null && cerFirmaList.size() > 0) {
            for (CerFirma cerFirma : cerFirmaList) {
                String firma = cerFirma.getMtrTipoFirma().getCodigoTipoFirma();
                if (firma.equals(firmaA)) {
                    cerFirmaListA.add(cerFirma);
                }
                if (firma.equals(firmaB)) {
                    cerFirmaListB.add(cerFirma);
                }
            }
        }

        if (cerFirmaListA != null && cerFirmaListA.size() > 0) {
            usuarioFirmaA = cerFirmaListA.stream().map(this::toDatosAprobador)
                    .collect(Collectors.joining(", "));
        }
        if (cerFirmaListB != null && cerFirmaListB.size() > 0) {
            usuarioFirmaB = cerFirmaListB.stream().map(this::toDatosAprobador)
                    .collect(Collectors.joining(", "));
        }


        UsuarioFirmaCertificadoDto usuarioFirmaCertificadoDto = new UsuarioFirmaCertificadoDto();
        usuarioFirmaCertificadoDto.setUsuarioFirmaA(usuarioFirmaA);
        usuarioFirmaCertificadoDto.setUsuarioFirmaB(usuarioFirmaB);
        return usuarioFirmaCertificadoDto;
    }

    private String toDatosAprobador(CerFirma cerFirma) {
        String nombre = cerFirma.getMtrAprobador().getNombre() + " " + cerFirma.getMtrAprobador().getApellidos();
        return nombre;
    }

    public PageResponse<CerCertificado> findCondicionProveedorPaginated(
            CerCertificadoResponse req,
            PageRequest pageRequest) throws Exception {
        UserSession userSession = this.systemLoggedUser.getUserSession();

        CerCertificado cerCertificado = req.getBean();
        MtrProveedor mtrProveedor = this.mtrProveedorDeltaRepository.findByCodigoIdp(userSession.getId());
        if (!Optional.ofNullable(mtrProveedor).isPresent()) {
            throw new Exception("El Proveedor con cÃ³digo IDP: " + userSession.getId() + " no se encuentra registrado en la Tabla MtrProveedor o no esta asociado al IDP en dicha Tabla");
        }
        MtrProveedor mtrProveedorBuscar = new MtrProveedor();
        mtrProveedorBuscar.setId(mtrProveedor.getId());
        cerCertificado.setMtrProveedor(mtrProveedorBuscar);
        req.setBean(cerCertificado);
        PageResponse<CerCertificado> pageResponse = this.findCondicionPaginated(req, pageRequest);
        return pageResponse;
    }

    /*
     * Actualiza los Estados del Cdertificado
     * */
    public CerCertificado actualizarEstadoCertificado(EstadoCertificadoDto estadoDto) throws Exception {
        if (this.appParametriaDeltaService.devuelveApagarCertificado()) {
            throw new Exception(Constants.MENSAJE_SISTEMA_APAGADO);
        }

        log.error("actualizarEstadoCertificado - EstadoCertificadoDto: " + estadoDto.toString());
        if (StringUtils.isBlank(estadoDto.getEstado().getCodigoAgrupado())) {
            throw new Exception("Se debe ingresar CÃ³digo Agrupado en el Estado");
        }
        if (StringUtils.isBlank(estadoDto.getEstado().getCodigoEstado())) {
            throw new Exception("Se debe ingresar CÃ³digo en el Estado");
        }


        CerCertificado certificado = this.cerCertificadoDeltaRepository.getOne(estadoDto.getCerCertificadoId()); ////findById(paramStatus.getId()).getBody();
        mtrEstadoService.find(estadoDto.getEstado()).forEach(e -> {
            certificado.setMtrEstado(e);
        });

        certificado.setObservacion(estadoDto.getDescripcion());
        CerCertificado cer = this.cerCertificadoDeltaRepository.save(certificado);
        log.error("cerCertificadoDeltaRepository.save_pprincipe_3 ::: " + cer.toString());

        MtrEstado mtrEstado = this.mtrEstadoDeltaRepository.getByCodigoAgrupadoAndCodigoEstado(
                estadoDto.getEstado().getCodigoAgrupado(),
                estadoDto.getEstado().getCodigoEstado()
        );
        if (!Optional.ofNullable(mtrEstado).isPresent()) {
            throw new Exception("No se encontrÃ³ Estado con CÃ³digo Agrupado: " +
                    estadoDto.getEstado().getCodigoAgrupado() + " y CÃ³digo Estado: " + estadoDto.getEstado().getCodigoEstado());
        }

        UserSession user = this.systemLoggedUser.getUserSession();
        String nombreCompleto = user.getFirstName() + " " + user.getLastName();
        log.debug("---------------> Dislpay user name ----------------> ", user.getDisplayName());

        CerHistorial cerHistorial = new CerHistorial();
        cerHistorial.setCerCertificado(cer);
        cerHistorial.setDescripcion(estadoDto.getDescripcion());
        cerHistorial.setMtrEstado(mtrEstado);
        cerHistorial.setUsuarioHistoral(nombreCompleto);
        cerHistorial.setFechaHistorial(DateUtils.obtenerFechaHoraActual());
        this.cerHistorialDeltaRepository.save(cerHistorial);

        MailSetting setting = new MailSetting();
        setting.setEmailFrom(username);
        setting.setPassword(password);
        setting.setHost(host);
        setting.setNameFrom(username);
        setting.setPort(port);
        setting.setUser(username);

        //certificadoNotificacion.enviar(setting, cer.getMtrProveedor(), user, mtrEstado, certificado);

        return cer;
    }

    public List<MensajeHes> crearHes(CerCertificado certificado, String aprobadorFirmaB, MtrAprobador aprobador) throws Exception {
        if (this.appParametriaDeltaService.devuelveApagarCertificado()) {
            throw new Exception(Constants.MENSAJE_SISTEMA_APAGADO);
        }
        log.error("CBAZALAR crearHes INI");

        int count = 0;
        List<MensajeHes> listaMensaje = new ArrayList<MensajeHes>();
        List<CerCertificadoDetalle> listaDetalleCertificado = this.cerCertificadoDetalleDeltaRepository.findByCerCertificado(certificado);
        java.text.SimpleDateFormat formatOut = new java.text.SimpleDateFormat("yyyyMMdd");
        List<RemitoInSap> listaHesIn = new ArrayList<RemitoInSap>();
        log.error("CBAZALAR crearHes 01 crearHes_certif_incio " + certificado.getId());
        for (CerCertificadoDetalle ele : listaDetalleCertificado) {
            boolean pasa = false;
            String tipoAux = "S";
            List<CerCertificadoDetalleSap> listaDetalleSap = null;
            if (certificado.getCerNotaPedido().getTipo().equalsIgnoreCase("S")) {
                log.error("CBAZALAR crearHes 02 Tipo s");
                listaDetalleSap = this.cerCertificadoDetalleSapMapper.findCertificadoDetalleSapByCertificadoDetalleServicio(ele.getCerNotaPedidoDetalle().getIdPadre(), certificado.getId());
            } else {
                tipoAux = "M";
                log.error("CBAZALAR crearHes 03 Tipo M");
                listaDetalleSap = this.cerCertificadoDetalleSapMapper.findCertificadoDetalleSapByCertificadoDetalle(ele.getId(), ele.getCerNotaPedidoDetalle().getPosicionSap());
            }


            if (listaDetalleSap == null || listaDetalleSap.size() == 0) {
                pasa = true;
                log.error("CBAZALAR crearHes 04 " + certificado.getId() + "__" + ele.getId() + "---> pasas a crear hes1 ----------------> " + ele.getCerNotaPedidoDetalle().getPosicionSap());
            } else {
                log.error("CBAZALAR crearHes 05 " + certificado.getId() + "__" + ele.getId() + "-----> pasas a crear hes2 ---------------->  " + ele.getCerNotaPedidoDetalle().getPosicionSap());
                Optional<CerCertificadoDetalleSap> optionalCertDetalle = listaDetalleSap.stream()
                        .filter(x -> !StringUtils.isBlank(x.getDocumentoGenerado()))
                        .findFirst();
                if (!optionalCertDetalle.isPresent()) {
                    pasa = true;
                    log.error("CBAZALAR crearHes 06 Paasa ::: ok" + pasa);
                }

            }


            log.error("CBAZALAR crearHes 07 --------------> pasas a crear hes3 ----------------> listaDetalleSap == null || listaDetalleSap.size() == 0 " + pasa);
            if (!pasa)
                continue;

            count++;
            CerNotaPedidoDetalle pedidoDetalle = ele.getCerNotaPedidoDetalle();
            RemitoInSap remitoInSap = new RemitoInSap();
            remitoInSap.setEbeln(pedidoDetalle.getEbeln());
            remitoInSap.setPosicion(pedidoDetalle.getPosicionSap());
            remitoInSap.setIntrow(pedidoDetalle.getIntrow());
            remitoInSap.setIdCertificado("" + certificado.getId());
            //pedidoDetalle.geta
            String codeALmacenSap = "";
            if (certificado.getMtrAlmacen() != null)
                codeALmacenSap = certificado.getMtrAlmacen().getCodigoCentroSap();
            remitoInSap.setDlort(codeALmacenSap);
            //Inicio
            remitoInSap.setUsrsolic(ele.getCerCertificado().getSolicitante());
            remitoInSap.setUsraauto(aprobadorFirmaB);
            remitoInSap.setPrestServ(certificado.getLugarPrestServ());

            log.error("CBAZALAR crearHes 08 crear_hes_Usrsolic ::: " + remitoInSap.getUsrsolic());
            log.error("CBAZALAR crearHes 08 crear_hes_Usraauto ::: " + remitoInSap.getUsraauto());
            //Fin
            if (pedidoDetalle.getMtrCentro() != null)
                remitoInSap.setCentro(pedidoDetalle.getMtrCentro().getCodigoCentroSap());
            remitoInSap.setOcurrencia("1");
            if (pedidoDetalle.getMtrBienServicio() != null)
                remitoInSap.setUmedida(pedidoDetalle.getMtrBienServicio().getMtrUnidadMedida().getCodigoSap());
            else
                remitoInSap.setUmedida(pedidoDetalle.getUnidadTextoItem());
            log.error("CBAZALAR crearHes 08 crear hes 0 :::: " + count);
            //CerCertificado
            if (ele.getCantidadAprobada() != null) {
                remitoInSap.setQapro(ele.getCantidadAprobada().toString());
            }
            String rmprvAux = certificado.getCodigoCertificado();
            if(tipoAux.equalsIgnoreCase("M") && StringUtils.isNotBlank(rmprvAux)) {

                String [] arrCodeCertif = rmprvAux.split("-");
                rmprvAux = "";
                for(int i = 1; i < arrCodeCertif.length; i++) {
                   if(i != 2) {
                       if(i == 1 ) {
                           rmprvAux = Long.parseLong(arrCodeCertif[i]) + "";
                       }else {
                           rmprvAux = rmprvAux + "-" + arrCodeCertif[i];
                       }
                   }
                }
            }
            remitoInSap.setRmprv(rmprvAux);
            String tipoImputacion = "";
            if (ele.getCerNotaPedidoDetalle().getMtrCuentaImputacion() != null && ele.getCerNotaPedidoDetalle().getMtrCuentaImputacion().getMtrTipoImputacion() != null) {
                log.error("CBAZALAR crearHes 09 crear hes_impu 1 :::: " + count);
                tipoImputacion = ele.getCerNotaPedidoDetalle().getMtrCuentaImputacion().getMtrTipoImputacion().getCodigoTipoImputacion();
                log.error("CBAZALAR crearHes 09 crear tipoImputacion 1 :::: " + tipoImputacion);
                if (!StringUtils.isBlank(tipoImputacion) && tipoImputacion.equalsIgnoreCase("K")) {
                    remitoInSap.setKostl(ele.getCerNotaPedidoDetalle().getMtrCuentaImputacion().getCodigoCuentaImputacion());
                    log.error("CBAZALAR crearHes 10 crear tipoImputacion 1_k :::: " + ele.getCerNotaPedidoDetalle().getMtrCuentaImputacion().getCodigoCuentaImputacion());
                }

                if (!StringUtils.isBlank(tipoImputacion) && tipoImputacion.equalsIgnoreCase("P")) {
                    remitoInSap.setPosid(ele.getCerNotaPedidoDetalle().getMtrCuentaImputacion().getCodigoCuentaImputacion());
                    log.error("CBAZALAR crearHes 11 crear tipoImputacion 1_P :::: " + ele.getCerNotaPedidoDetalle().getMtrCuentaImputacion().getCodigoCuentaImputacion());
                }

                if (!StringUtils.isBlank(tipoImputacion) && tipoImputacion.equalsIgnoreCase("F")) {
                    remitoInSap.setAufnr(ele.getCerNotaPedidoDetalle().getMtrCuentaImputacion().getCodigoCuentaImputacion());
                    log.error("CBAZALAR crearHes 12 crear tipoImputacion_1_F :::: " + ele.getCerNotaPedidoDetalle().getMtrCuentaImputacion().getCodigoCuentaImputacion());
                }
            } else {
                log.error("CBAZALAR crearHes 13 crear hes 2 :::: " + count);
                if (ele.getMtrCuentaImputacion() != null && ele.getMtrCuentaImputacion().getMtrTipoImputacion() != null) {
                    log.error("CBAZALAR crearHes 14 crear hes 2 :::: " + count);
                    tipoImputacion = ele.getMtrCuentaImputacion().getMtrTipoImputacion().getCodigoTipoImputacion();
                    log.error("CBAZALAR crearHes 14 crear tipoImputacion 2:::: " + tipoImputacion);
                    if (!StringUtils.isBlank(tipoImputacion) && tipoImputacion.equalsIgnoreCase("K")) {
                        remitoInSap.setKostl(ele.getMtrCuentaImputacion().getCodigoCuentaImputacion());
                        log.error("CBAZALAR crearHes 15 crear tipoImputacion 2_K:::: " + ele.getMtrCuentaImputacion().getCodigoCuentaImputacion());
                    }

                    if (!StringUtils.isBlank(tipoImputacion) && tipoImputacion.equalsIgnoreCase("P")) {
                        remitoInSap.setPosid(ele.getMtrCuentaImputacion().getCodigoCuentaImputacion());
                        log.error("CBAZALAR crearHes 16 crear tipoImputacion 2_P:::: " + ele.getMtrCuentaImputacion().getCodigoCuentaImputacion());
                    }

                    if (!StringUtils.isBlank(tipoImputacion) && tipoImputacion.equalsIgnoreCase("F")) {
                        remitoInSap.setAufnr(ele.getMtrCuentaImputacion().getCodigoCuentaImputacion());
                        log.error("CBAZALAR crearHes 16 crear tipoImputacion 2_F:::: " + ele.getMtrCuentaImputacion().getCodigoCuentaImputacion());
                    }
                }
            }
            remitoInSap.setImputacion(tipoImputacion);
            log.error("CBAZALAR crearHes 17 crear hes 3-1:::: ");
            if (ele.getCerNotaPedidoDetalle().getMtrCuentaMayor() != null) {
                remitoInSap.setSaknr(ele.getCerNotaPedidoDetalle().getMtrCuentaMayor().getCodigoCuentaMayor());
                log.error("CBAZALAR crearHes 18 crear hes 4:::: " + count);
            } else {
                if (ele.getMtrCuentaMayor() != null)
                    remitoInSap.setSaknr(ele.getMtrCuentaMayor().getCodigoCuentaMayor());
                log.error("CBAZALAR crearHes 19 crear hes 5 :::: " + count);
            }

            remitoInSap.setEkgrp("");
            remitoInSap.setEkorg(pedidoDetalle.getCerNotaPedido().getMtrOrgCompra().getCodigoOrgCompraSap());
            /*if (!StringUtils.isBlank(pedidoDetalle.getCerNotaPedido().getTlugarPago())) {
                log.error("crear hes 6 :::: " + count);
                if (pedidoDetalle.getCerNotaPedido().getTlugarPago().length() > 25)
                    remitoInSap.setDlort(pedidoDetalle.getCerNotaPedido().getTlugarPago().substring(0, 25));
                else
                    remitoInSap.setDlort(pedidoDetalle.getCerNotaPedido().getTlugarPago());
            }*/
            log.error("CBAZALAR crearHes 20 crear_hes_dlort ::: " + remitoInSap.getDlort());
            remitoInSap.setMnd(certificado.getMtrMoneda().getDescBrv());
            if (pedidoDetalle.getPrecioUnitario() != null)
                remitoInSap.setPunitario(pedidoDetalle.getPrecioUnitario().toString());
            remitoInSap.setItemad("S");
            log.error("CBAZALAR crearHes 21 crear hes 7 :::: " + count);
            remitoInSap.setTxz01(pedidoDetalle.getTextoItem());
            if (pedidoDetalle.getMtrBienServicio() != null) {
                log.error("CBAZALAR crearHes 22 crear hes 8 :::: " + count);
                remitoInSap.setMatkl(pedidoDetalle.getMtrBienServicio().getMtrGrupoArticulo().getCodigoSap());
            }
            remitoInSap.setLifnr(pedidoDetalle.getCerNotaPedido().getMtrProveedor().getLifnr());
            //certificado.getfechade
            if (certificado.getFechaDesde() != null) {
                String strDate = formatOut.format(certificado.getFechaDesde());
                remitoInSap.setLzvon(strDate);
            }
            if (certificado.getFechaHasta() != null) {
                String strDate = formatOut.format(certificado.getFechaHasta());
                remitoInSap.setLzbis(strDate);
            }
            log.error("CBAZALAR crearHes 23 crear hes certificado  8_6 :::: " + certificado);
            if (certificado.getFechaContabilizacion() != null && certificado.getCerNotaPedido().getTipo().equalsIgnoreCase("M")) {
                String strBudat = formatOut.format(certificado.getFechaContabilizacion());
                remitoInSap.setBudat(strBudat);
                log.error("CBAZALAR crearHes 24 crear hes certificado  8_7 :::: " + strBudat);
            }
            remitoInSap.setGuiaRemision(certificado.getNroGuiaRemision());
            if (aprobador != null)
                remitoInSap.setFirma(aprobador.getAprobadorSap());
            listaHesIn.add(remitoInSap);
        }
        log.error("CBAZALAR crearHes 25 crearHes_certif_fin " + certificado.getId());
        log.error("CBAZALAR crearHes 26 crearHes hes 9 :::: " + listaHesIn);

        //MensajeSap msg = new MensajeSap("S", "", "La creaciÃ³n Hes para el certificado " + certificado.getCodigoCertificado() + " se realizÃ³ Correctamemte");
        if (listaHesIn.size() > 0) {
            List<RemitoOutSap> listaOut = this.sapRfcDeltaService.crearHes(listaHesIn);
            log.error("CBAZALAR crearHes 27 listaOut :::: " + listaOut.toString());

            //boolean flagOcurrenciaError = true;
            //boolean flagCreacionCorrecta = false;
            //String strMesError = "";
            //String strMesOk = "";
            //int countOk = 0;
            int countError = 0;
            //int countAux = 0;
            for (RemitoOutSap eleOut : listaOut) {
                /*countAux++;
                if (countAux == 1) {
                    if (!StringUtils.isBlank(eleOut.getState()) && eleOut.getState().equalsIgnoreCase("A")) {

                        throw new Exception(Constants.ERROR_ABAP);
                    } else if (!StringUtils.isBlank(eleOut.getState()) && eleOut.getState().equalsIgnoreCase("J")) {

                        throw new Exception(Constants.ERROR_JCO_JAVA);
                    }

                }*/
                log.error("CBAZALAR crearHes 28 eleOut.getState() :::: " + eleOut.getState());
                log.error("CBAZALAR crearHes 28 Detalle certificado pedido detalle :::: " + eleOut.getEbeln() + "---" + eleOut.getPosicion());

                Optional<CerCertificadoDetalle> optinalDetCertificado = listaDetalleCertificado.stream()
                        .filter(x -> eleOut.getEbeln().equalsIgnoreCase(x.getCerNotaPedidoDetalle().getEbeln()) && eleOut.getPosicion().equalsIgnoreCase(x.getCerNotaPedidoDetalle().getPosicionSap()))
                        .findFirst();
                if (optinalDetCertificado.isPresent()) {
                    log.error("CBAZALAR crearHes 29 Detalle certificado pedido detalle entroooo:::: " + eleOut.getImporte());
                    if (!StringUtils.isBlank(eleOut.getType()) && eleOut.getType().equalsIgnoreCase("E")) {
                        listaMensaje.add(new MensajeHes(optinalDetCertificado.get(), new MensajeSap(eleOut.getType(), "SAP", eleOut.getError()), eleOut.getImporte()));
                        log.error("CBAZALAR crearHes 30");
                    //jescudero
                    }else if( StringUtils.isBlank(eleOut.getEntrega())){
                            listaMensaje.add(new MensajeHes(null, new MensajeSap("E", "SAP", "Se obtuvo un error al crear la HES"), eleOut.getImporte()));
                            log.error("JESCUDERO crearHes 33");
                    //jescudero
                    }else {
                        log.error("CBAZALAR crearHes 31");
                        listaMensaje.add(new MensajeHes(optinalDetCertificado.get(), new MensajeSap(eleOut.getType(), eleOut.getEntrega(), eleOut.getError()), eleOut.getImporte()));
                    }
                }else{
                    if( eleOut.getPosicion().equalsIgnoreCase("0")){
                        if (!StringUtils.isBlank(eleOut.getType()) && eleOut.getType().equalsIgnoreCase("E")) {
                            listaMensaje.add(new MensajeHes(null, new MensajeSap(eleOut.getType(), "SAP", eleOut.getError()), eleOut.getImporte()));
                            log.error("CBAZALAR crearHes 32");
                        }

                    }
                }



                /*if(!StringUtils.isBlank(eleOut.getState()) && !eleOut.getState().equalsIgnoreCase("NULL")) {
                    countError++;
                    if(countError == 1)
                        strMesError = eleOut.getError();
                    else
                        strMesError = strMesError + " - " + eleOut.getError();
                    //break;
                }else{
                    countOk++;

                    flagCreacionCorrecta = true;
                   // msg = new MensajeSap("S", "", "La creaciÃ³n de la HES " + eleOut.getEntrega() + " se realizÃ³ Correctamemte");
                    if(countOk == 1) {
                        strMesOk = eleOut.getEntrega() ;

                    }
                    else{
                        strMesOk = strMesOk + "," + eleOut.getEntrega();

                    }


                }*/

            }
            /*if(flagCreacionCorrecta)
                msg = new MensajeSap("S", strMesOk, "Se aprobÃ³ el certificado con la HES: " + strMesOk);
            else
                msg = new MensajeSap("E", "", "Error al crear HES: " + strMesError);*/

            log.error("CBAZALAR crearHes 32 crear hes 10 :::: ");
        } else {
            listaMensaje.add(new MensajeHes(null, new MensajeSap("E", "", "No existen Items para crear Hes"), "0.0"));
            log.error("CBAZALAR crearHes 33 crear hes 11 :::: ");
        }
        log.error("CBAZALAR crearHes FIN");
        return listaMensaje;
    }

    /*Cerrar nota de pedido para un pedido abierto o cerradoo*/
    public void cerrarNotaPedido(CerCertificado certificado) {
        log.error("cerrarNotaPedido ]:: entro");
        CerNotaPedido cerNotapedido = certificado.getCerNotaPedido();
        MtrClaseDocumento mtrClaseDocumento = cerNotapedido.getMtrClaseDocumento();
        boolean pedidoAbierto = false;
        AppParametria appParametria = new AppParametria();
        appParametria.setModulo("NP_CD");
        appParametria.setStatus(Constants.UNO);
        List<AppParametria> appParametriaList = this.appParametriaDeltaService.find(appParametria);
        boolean cerrar = false;
        if (appParametriaList != null && appParametriaList.size() > 0) {
            for (AppParametria beanParametria : appParametriaList) {
                if (beanParametria.getValue1().equals(mtrClaseDocumento.getCodigoSap())) {
                    pedidoAbierto = true;
                }
            }
        }
        BigDecimal montoPedido = cerNotapedido.getMonto();
        BigDecimal totalMontoCertificado = new BigDecimal("0.0");
        log.error("cerrarNotaPedido ]:: pedidoAbierto  " + pedidoAbierto);
        if (pedidoAbierto) {//Cerrar Pedido abierto

            List<CerCertificado> listaCertificado = this.cerCertificadoDeltaRepository.findByIdNotaPedidoId(cerNotapedido.getId());
            if (listaCertificado != null && listaCertificado.size() > 0) {
                for (CerCertificado ele : listaCertificado) {
                    //CerNotaPedidoDetalle detPedido = ele.getCerNotaPedidoDetalle();
                    //ele.get
                    if (ele.getMontoTotal() != null)
                        totalMontoCertificado = totalMontoCertificado.add(ele.getMontoTotal());

                }
            }
            log.error("cantidad ]:: totalMontoCertificado  " + totalMontoCertificado);

            if (montoPedido != null) {
                if (montoPedido.compareTo(totalMontoCertificado) == 0)
                    cerrar = true;
            }
        } else {

            BigDecimal cantidad = this.cerNotaPedidoDetalleDeltaRepository.sumarCantidadPendiente(cerNotapedido.getId());
            log.error("cantidad ]:: cantidad  " + cantidad);
            if (cantidad.compareTo(new BigDecimal("0.0")) == 0)
                cerrar = true;
             /*List<CerNotaPedidoDetalle> listaNotaPedidaDetalle = this.cerNotaPedidoDetalleDeltaRepository.findByCerNotaPedido(cerNotapedido);
            if(listaNotaPedidaDetalle != null && listaNotaPedidaDetalle.size() > 0) {
                for(CerNotaPedidoDetalle ele: listaNotaPedidaDetalle) {
                    if(ele.get)

                }
            }*/
        }
        log.error("cerrarNotaPedido ]:: cerrar  " + cerrar);


        if (cerrar) {
            //Cambio para agregarle la apertura de nota de pedido de Materiales - Inicio
            boolean flagCierrePorTipoOrden = true;
            if (cerNotapedido.getTipo().equalsIgnoreCase("M")) {
                List<CerCertificado> listaCertificado = this.cerCertificadoDeltaRepository.findByIdNotaPedidoId(cerNotapedido.getId());
                for (CerCertificado ele : listaCertificado) {
                    if (!ele.getMtrEstado().getCodigoEstado().equalsIgnoreCase("CEAP"))
                        flagCierrePorTipoOrden = false;
                }
            }
            //la apertura de nota de pedido de Materiales -- Fin
            if (flagCierrePorTipoOrden) {
                MtrEstado estado = this.mtrEstadoDeltaRepository.getByCodigoAgrupadoAndCodigoEstado("NP", EstadoNotaPedidoEnum.CERRADA.getEstado());
                cerNotapedido.setMtrEstado(estado);
                this.cerNotaPedidoDeltaRepository.save(cerNotapedido);
            }
        }
    }
    public MensajeSap validarResultadoCreacionHes(List<MensajeHes> listaHes) {
        //return null;
        MensajeSap msg = null;
        if(listaHes == null || listaHes.size() == 0) {
            log.error("validarResultadoCreacionHes_1");
            msg = new MensajeSap("E","", "No hay Resultados obtenidos desde SAP al crear Hes");
            // return
        }else {
            log.error("validarResultadoCreacionHes_2");
            if(listaHes != null && listaHes.size() == 1 && listaHes.get(0).getMsg() != null  &&
                    listaHes.get(0).getMsg().getType().equalsIgnoreCase("E") && listaHes.get(0).getCertDetalle() == null) {
                log.error("validarResultadoCreacionHes_3");
                msg = listaHes.get(0).getMsg();
            }
        }
        return msg;
    }
    public void guardarLogCreacionHes(List<MensajeHes> listaHes, String aprobadorFirmab, String aprobador, String nexEstado, Integer idCertificado, String tipoEjecucion) {
        if(listaHes != null && listaHes.size() > 0) {
            for(MensajeHes msg : listaHes){
                AppProcesoLog log = new AppProcesoLog();
                log.setModulo("CERTIFICADO_" + idCertificado + "_" + tipoEjecucion);//40
                log.setMetodoProgramacion("Aprobacion "  + nexEstado);//100
                log.setDescripcionEstadoEjecucion("importe : " + msg.getImporte());//4000
                log.setParametroEntrada("aprobadorFirmab : " + aprobadorFirmab + "_ aprobador : " + aprobador + "_nexEstado : " + nexEstado);//4000
                if(msg.getMsg() != null){
                    log.setResultadoSalida("" + msg.getMsg().getType() + "___" + msg.getMsg().getCode() + "____" + msg.getMsg().getTexto());//4000
                }
                log.setFechaFinEjecucion(DateUtils.obtenerFechaHoraActual());

                this.appProcesoLogDeltaRepository.save(log);
            }
        }
    }
    @Override
    public List<MensajeSap> realizarOperacion(OperacionCertificado operacion) throws Exception {
        if (this.appParametriaDeltaService.devuelveApagarCertificado()) {
            throw new Exception(Constants.MENSAJE_SISTEMA_APAGADO);
        }
        log.error("CBAZALAR realizarOperacion INI 00 - OperacionCertificado: " + operacion.toString());
        Map<String, String> operations = new HashMap<String, String>();
        operations.put("AB", "AprobaciÃ³n firma A");
        operations.put("AA", "AprobaciÃ³n firma B");
        operations.put("A", "AprobaciÃ³n");
        operations.put("R", "Rechazo");
        List<MensajeSap> listaMensaje = new ArrayList<MensajeSap>();
        List<MensajeHes> listaHes = new ArrayList<MensajeHes>();
       /* if() {certificado.setMtrEstado

        }*/
        Pattern pattern = Pattern.compile("-?\\d+(\\.\\d+)?");
        //MensajeSap msg = new MensajeSap("S", "", "La operaciÃ³n " + operations.get(operacion.getOperacion()).toString() +" se realizÃ³ correctamente");
        CerCertificado certificado = this.cerCertificadoDeltaRepository.getOne(operacion.getIdCertificado());
        //CerNotaPedido notaPedido = certificado.getCerNotaPedido();
        List<CerFirma> listaFirma = this.cerFirmaDeltaRepository.getByCodeNotaPedido(certificado.getCerNotaPedido().getId());
        List<MtrTipoFirma> listaTipoFirma = this.mtrTipoFirmaDeltaRepository.findAll();
        log.error("CBAZALAR realizarOperacion 01 -  listaFirma.size() : " + listaFirma.size());
        log.error("CBAZALAR realizarOperacion 02 -  listaTipoFirma.size() : " + listaTipoFirma.size());
        UserSession user = this.systemLoggedUser.getUserSession();

        //Inicio Proceso realizarOperacion certificado
        List<AppProcesoLog> listaProcesoLog = new ArrayList<AppProcesoLog>();
        AppProcesoLog logInicio = new AppProcesoLog();
        logInicio.setModulo("CERTIFICADO :: ");
        logInicio.setDescripcionEstadoEjecucion("Inicio certificado ::: " + certificado.toString());
        logInicio.setFechaInicioEjecucion(DateUtils.obtenerFechaHoraActual());
        logInicio.setParametroEntrada("");
        logInicio.setResultadoSalida("");
        listaProcesoLog.add(logInicio);
        //Fin

        String nombreCompleto = user.getFirstName() + " " + user.getLastName();
        String nombreCompletoAux = nombreCompleto;
        log.error("Operacion Ruc usuario : " + user.getRuc());
        log.error("user.toString() :: " + user.toString() + " :: " + user.getDisplayName());
        String emailFirmaA = "";
        String emailFirmaB = "";
        String nombreAprobadorA = "";
        String nombreAprobadorB = "";
        String aprobadorFirmaB = "";
        boolean flagCreacionHes = false;

        int countFirmaA = 0;
        int countFirmaB = 0;

        boolean apruebaFirmaA = false;
        boolean apruebaFirmaB = false;
        for (CerFirma cerFirma : listaFirma) {
            log.error("CBAZALAR realizarOperacion 03 -  cerFirma : " + cerFirma.toString());
            if (cerFirma.getMtrTipoFirma().getCodigoTipoFirma().equalsIgnoreCase("FB")) {
                log.error("CBAZALAR realizarOperacion 03 FB");
                countFirmaB++;
                apruebaFirmaB = true;
                if (countFirmaB == 1) {
                    emailFirmaB = cerFirma.getMtrAprobador().getEmail();
                    nombreAprobadorB = cerFirma.getMtrAprobador().getNombre() + " " + cerFirma.getMtrAprobador().getApellidos();

                } else {
                    emailFirmaB = emailFirmaB + "," + cerFirma.getMtrAprobador().getEmail();
                }
                /*if (!StringUtils.isBlank(user.getRuc()) && user.getRuc().trim().equalsIgnoreCase(cerFirma.getMtrAprobador().getAprobadorSap().trim()))
                    aprobadorFirmaB = cerFirma.getMtrAprobador().getAprobadorSap();*/

            }

            if (cerFirma.getMtrTipoFirma().getCodigoTipoFirma().equalsIgnoreCase("FA")) {
                log.error("CBAZALAR realizarOperacion 03 FA");
                countFirmaA++;
                apruebaFirmaA = true;
                if (countFirmaA == 1) {
                    emailFirmaA = cerFirma.getMtrAprobador().getEmail();
                    nombreAprobadorA = cerFirma.getMtrAprobador().getNombre() + " " + cerFirma.getMtrAprobador().getApellidos();
                } else {
                    emailFirmaA = emailFirmaA + "," + cerFirma.getMtrAprobador().getEmail();
                }

            }

        }
        log.error("CBAZALAR realizarOperacion 04 apruebaFirmaB: " + apruebaFirmaB);
        log.error("CBAZALAR realizarOperacion 04 apruebaFirmaA: " + apruebaFirmaA);
        String currentOpe = operacion.getOperacion();

        log.error("CBAZALAR realizarOperacion 04 currentOpe: " + currentOpe);

        //Inicio Proceso realizarOperacion certificado
        AppProcesoLog logOperacion = new AppProcesoLog();
        logOperacion.setModulo("CERTIFICADO :: ");
        logOperacion.setDescripcionEstadoEjecucion("Inicio certificado ::: " + certificado.toString());
        logOperacion.setFechaInicioEjecucion(DateUtils.obtenerFechaHoraActual());
        logOperacion.setParametroEntrada(apruebaFirmaB + " ::: " + apruebaFirmaA + " ::: " + currentOpe + " ::: " + flagCreacionHes);
        logOperacion.setResultadoSalida("");
        listaProcesoLog.add(logOperacion);
        //Fin

        //Inicio aprobadores
        MtrAprobador aprobador = null;
        CerFirma cerFirma = null;
        if (currentOpe.equalsIgnoreCase("AB") || currentOpe.equalsIgnoreCase("AA")) {
            log.error("CBAZALAR realizarOperacion 05 AB || AA ");

            String descTipoFirma = "";
            if (currentOpe.equalsIgnoreCase("AB"))
                descTipoFirma = "FB";
            else if (currentOpe.equalsIgnoreCase("AA"))
                descTipoFirma = "FA";

            log.error("Cerfirma 1 :: ");
            String loginName = operacion.getLoginName();
            aprobador = this.mtrAprobadorDeltaRepository.getByAprobadorSap(loginName);

            if (aprobador != null) {
                log.error("CBAZALAR realizarOperacion 05 AB AA aprobador: " + aprobador.toString());
                if (currentOpe.equalsIgnoreCase("AB")) {
                    aprobadorFirmaB = aprobador.getAprobadorSap();
                    log.error("CBAZALAR realizarOperacion 05 AB aprobadorFirmaB: " + aprobadorFirmaB.toString());
                }

                log.error("CBAZALAR realizarOperacion 05b AB AA ");
                String finalDescTipoFirma = descTipoFirma;
                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                        .filter(x -> finalDescTipoFirma.equalsIgnoreCase(x.getCodigoTipoFirma()))
                        .findFirst();
                if (optionalTipoFirma.isPresent()) {
                    log.error("CBAZALAR realizarOperacion 05c AB AA ");
                    cerFirma = this.cerFirmaDeltaRepository.getByUniqueCode(certificado.getCerNotaPedido().getId(), optionalTipoFirma.get().getId(), aprobador.getId());
                    log.error("CBAZALAR realizarOperacion 05c AB AA cerFirma "  + cerFirma.toString());
                }
            }

        }
        //Fin aprobadores

        String codeNextEstado = "";
        String codeEstadoHistorial = "";
        //boolean flagCreaHes = true;
        //String codigoHes = "";
        //String descTipoFirma = "";
        String emailDestinatarios = "";
        String nombreDestinatario = "";
        //boolean flagRechazo = false;
        //String codigoTipoFirma = "";

        if (currentOpe.equalsIgnoreCase("AB")) {
            log.error("CBAZALAR realizarOperacion 06 AB");
            List<CerCertificadoDetalle> listaDetalleAux = this.cerCertificadoDetalleDeltaRepository.findByCerCertificado(certificado);
            log.error("CBAZALAR realizarOperacion 06 AB listaDetalleAux " + listaDetalleAux);
            boolean flagCuentaImputacion = false;
            boolean flagCuentaMayor = false;
            if (listaDetalleAux != null && listaDetalleAux.size() > 0) {
                if (listaDetalleAux.get(0).getCerNotaPedidoDetalle().getMtrCuentaImputacion() != null)
                    flagCuentaImputacion = true;
                if (listaDetalleAux.get(0).getCerNotaPedidoDetalle().getMtrCuentaMayor() != null)
                    flagCuentaMayor = true;
            }
            log.error("CBAZALAR realizarOperacion 06 AB listaDetalleAux_1 " + flagCuentaImputacion + " " + flagCuentaMayor);
            if (!this.validarCertificadoCerrado(certificado) &&
                    certificado.getCerNotaPedido().getTipo().equalsIgnoreCase("S")
                            ) {
            /*if (!this.validarCertificadoCerrado(certificado) &&
                    (certificado.getCerNotaPedido().getTipo().equalsIgnoreCase("S") ||
                            (certificado.getCerNotaPedido().getTipo().equalsIgnoreCase("M") && flagCuentaImputacion && flagCuentaMayor))) {*/

                List<MensajeSap> listaSapMensajeValidacion = this.sapRfcDeltaService.validarPresupuesto(certificado);
                if (listaSapMensajeValidacion != null && listaSapMensajeValidacion.size() > 0) {
                    log.error("CBAZALAR realizarOperacion 06 AB OOK_0 " + listaSapMensajeValidacion);
                    Optional<MensajeSap> optionalMensajeAux = listaSapMensajeValidacion.stream()
                            .filter(x -> "E".equalsIgnoreCase(x.getType()))
                            .findFirst();
                    if (optionalMensajeAux.isPresent()) {
                        log.error("CBAZALAR realizarOperacion 06 AB:: OOK_1 ");
                        return listaSapMensajeValidacion;

                    }
                }
                log.error("CBAZALAR realizarOperacion 06 AB:: OOK_PASO_VALIDACION_PRESUPUESTO ");
            }

            //this.sapRfcDeltaService.
            //codigoTipoFirma = "FB";
            //descTipoFirma = "FB";
            if (apruebaFirmaA) {
                log.error("CBAZALAR realizarOperacion 07 apruebaFirmaA");
                codeNextEstado = "CEFA";
                codeEstadoHistorial = "CEFA";
                //msg = new MensajeSap("S", "", "La AprobaciÃ³n de la Firma B se realizÃ³ correctamente");
                listaMensaje.add(new MensajeSap("S", "", "La AprobaciÃ³n de la Firma B se realizÃ³ correctamente"));
                emailDestinatarios = emailFirmaA;
                nombreDestinatario = nombreAprobadorA;

            } else {
                log.error("CBAZALAR realizarOperacion 07 not apruebaFirmaA");
                codeNextEstado = "CEAP";
                codeEstadoHistorial = "CEAP";
                //Invocar Rfc de creaciÃ³n Hes
                //msg = this.crearHes(certificado);
                //Inicio Proceso realizarOperacion certificado

                /*AppProcesoLog logOperacion =  new AppProcesoLog();
                logOperacion.setModulo("CERTIFICADO :: ");
                logOperacion.setDescripcionEstadoEjecucion("Inicio certificado ::: " + certificado.toString());
                logOperacion.setFechaInicioEjecucion(DateUtils.obtenerFechaHoraActual());
                logOperacion.setParametroEntrada(apruebaFirmaB + " ::: " + apruebaFirmaA + " ::: " + currentOpe + " ::: " + flagCreacionHes);
                logOperacion.setResultadoSalida("");
                listaProcesoLog.add(logOperacion);*/
                //Fin
                listaHes = this.crearHes(certificado, aprobadorFirmaB, aprobador);

                String aprobadorSap = "";
                if(aprobador != null)
                    aprobadorSap = aprobador.getAprobadorSap();
                this.guardarLogCreacionHes(listaHes, aprobadorFirmaB, aprobadorSap,  codeNextEstado, certificado.getId(), "single");

                log.error("realizarOperacion_1_listaHes :: " + listaHes);
                MensajeSap msgAuxiliarValidacion = (this.validarResultadoCreacionHes(listaHes));
                log.error("realizarOperacion_1_msgAuxiliarValidacion :: " + msgAuxiliarValidacion);
                log.error("CBAZALAR realizarOperacion 07 not apruebaFirmaA listaHes: " + listaHes);
                if(msgAuxiliarValidacion != null) {
                    log.error("CBAZALAR realizarOperacion 07 not apruebaFirmaA  SIMPLE:: OOK ::: " + msgAuxiliarValidacion);
                    listaMensaje = new ArrayList<MensajeSap>();
                    listaMensaje.add(msgAuxiliarValidacion);
                    return listaMensaje;
                }
                emailDestinatarios = certificado.getCerNotaPedido().getMtrProveedor().getEmailContacto();
                nombreDestinatario = certificado.getCerNotaPedido().getMtrProveedor().getRazonSocial();
                flagCreacionHes = true;
                //codigoHes = msg.getCode();
                //Se aprobÃ³ el certificado con la HES "XXXX
            }

        }

        if (currentOpe.equalsIgnoreCase("AA")) {
            log.error("CBAZALAR realizarOperacion 08 currentOpe AA");
            //descTipoFirma = "FA";
            codeNextEstado = "CEAP";
            codeEstadoHistorial = "CEAP";
            //codigoTipoFirma = "FA";
            List<CerCertificadoFirma> listaCertificadoFirma = cerCertificadoFirmaDeltaRepository.findByCertificadoAndTipoFirma(certificado.getId(), "FB");
            log.error("CBAZALAR realizarOperacion 08 currentOpe AA listaCertificadoFirma size: " + listaCertificadoFirma.size());

            if (listaCertificadoFirma != null) {
                Optional<CerCertificadoFirma> optionalCertifFirma = listaCertificadoFirma.stream()
                        .filter(x -> "FB".equalsIgnoreCase(x.getCerFirma().getMtrTipoFirma().getCodigoTipoFirma()))
                        .findFirst();
                if (optionalCertifFirma.isPresent())
                    aprobadorFirmaB = optionalCertifFirma.get().getCerFirma().getMtrAprobador().getAprobadorSap();
            }
            //Invocar Rfc de creaciÃ³n Hes
            //msg = this.crearHes(certificado);
            //codigoHes = msg.getCode();
            listaHes = this.crearHes(certificado, aprobadorFirmaB, aprobador);

            String aprobadorSap = "";
            if(aprobador != null)
                aprobadorSap = aprobador.getAprobadorSap();
            this.guardarLogCreacionHes(listaHes, aprobadorFirmaB, aprobadorSap,  codeNextEstado, certificado.getId(), "single");

            log.error("CBAZALAR realizarOperacion 08 currentOpe AA listaHes size: " + listaHes.size());
            log.error("realizarOperacion_2_listaHes :: " + listaHes);
            MensajeSap msgAuxiliarValidacion = (this.validarResultadoCreacionHes(listaHes));
            log.error("realizarOperacion_2_msgAuxiliarValidacion :: " + msgAuxiliarValidacion);
            if(msgAuxiliarValidacion != null) {
                log.error("CBAZALAR realizarOperacion 08 currentOpe AA :: OOK ::: " + msgAuxiliarValidacion);
                listaMensaje = new ArrayList<MensajeSap>();
                listaMensaje.add(msgAuxiliarValidacion);
                return listaMensaje;
            }
            emailDestinatarios = certificado.getCerNotaPedido().getMtrProveedor().getEmailContacto();
            nombreDestinatario = certificado.getCerNotaPedido().getMtrProveedor().getRazonSocial();
            flagCreacionHes = true;
            //Se aprobÃ³ el certificado con la HES "XXXX
        }
        if (currentOpe.equalsIgnoreCase("A")) {
            codeNextEstado = "CEAP";
            codeEstadoHistorial = "CEAP";
        }

        if (currentOpe.equalsIgnoreCase("RB")) {
            log.error("CBAZALAR realizarOperacion 09 currentOpe RB");
            listaMensaje.add(new MensajeSap("S", "", "Rechazo de la Firma B se realizÃ³ correctamente"));
            if (!StringUtils.isBlank(certificado.getIndCreacionAutomatica()) && certificado.getIndCreacionAutomatica().equalsIgnoreCase("S"))
                codeNextEstado = "CERE";
            else
                codeNextEstado = "CEBO";

            codeEstadoHistorial = "CERE";
            //codigoTipoFirma = "FB";
            emailDestinatarios = certificado.getCerNotaPedido().getMtrProveedor().getEmailContacto() + "," + certificado.getCerNotaPedido().getEmailUserCompra();
            nombreDestinatario = certificado.getCerNotaPedido().getMtrProveedor().getRazonSocial();
            //flagRechazo = true;
        }
        if (currentOpe.equalsIgnoreCase("RA")) {
            log.error("CBAZALAR realizarOperacion 10 currentOpe RA");
            listaMensaje.add(new MensajeSap("S", "", "Rechazo de la Firma A se realizÃ³ correctamente"));
            emailDestinatarios = emailFirmaB;
            nombreDestinatario = nombreAprobadorB;
            //codigoTipoFirma = "FA";
            if (!StringUtils.isBlank(certificado.getIndCreacionAutomatica()) && certificado.getIndCreacionAutomatica().equalsIgnoreCase("S"))
                codeNextEstado = "CERE";
            else
                codeNextEstado = "CEFB";

            codeEstadoHistorial = "CERE";
            //flagRechazo = true;
        }

        String breakLine = System.lineSeparator();
        log.error("CBAZALAR realizarOperacion 11 codeNextEstado :: " + codeNextEstado);
        log.error("CBAZALAR realizarOperacion 11 codeEstadoHistorial :: " + codeEstadoHistorial);
        boolean flagErrorSap = false;
        //Guardar log de SAP creacion de Hes
        String textoSapAdicional = "";
        String textoSapAdicionalAux = "";
        String auxCodeEntrega = "XYZ";
        BigDecimal totalImporteAjustado = new BigDecimal("0.0");
        MtrEstado estadoRechazoGeneral = this.mtrEstadoDeltaRepository.getByCodigoAgrupadoAndCodigoEstado("CE", "CERE");
        String textoMensajeSapError = "";
        String textoMensajeSapErrorDetalle = "";
        List<MensajeSap> listaAuxiliar = new ArrayList<MensajeSap>();

        //Inicio Proceso realizarOperacion certificado

        AppProcesoLog logOperacionHes = new AppProcesoLog();
        logOperacionHes.setModulo("CERTIFICADO :: ");
        logOperacionHes.setDescripcionEstadoEjecucion("Inicio certificado ::: " + certificado.toString());
        logOperacionHes.setFechaInicioEjecucion(DateUtils.obtenerFechaHoraActual());
        logOperacionHes.setParametroEntrada(apruebaFirmaB + " ::: " + apruebaFirmaA + " ::: " + currentOpe + " ::: " + flagCreacionHes);
        logOperacionHes.setResultadoSalida("");
        listaProcesoLog.add(logOperacion);
        //Fin

        //String docGenerado_ = "";
        //String docGeneradoTexto_ = "";
        // String docGeneradoPosicion_ = "";
        log.error("CBAZALAR realizarOperacion 11 totalImporteAjustado :: " + totalImporteAjustado);
        log.error("CBAZALAR realizarOperacion 11 listaHes :: " + listaHes.size());
        //int num
        for (MensajeHes hes : listaHes) {
            log.error("CBAZALAR realizarOperacion 12 hes: " + hes.toString());
            if (!StringUtils.isBlank(hes.getMsg().getCode())) {
                log.error("CBAZALAR realizarOperacion 12b");
                CerCertificadoDetalleSap detSap = new CerCertificadoDetalleSap();
                detSap.setCerCertificadoDetalle(hes.getCertDetalle());
                detSap.setDocumentoGenerado((hes.getMsg().getCode().trim().equalsIgnoreCase("SAP")) ? null : hes.getMsg().getCode());
                detSap.setTextoError(hes.getMsg().getTexto());//pprincipe add
                detSap.setPosicionSap(hes.getCertDetalle().getCerNotaPedidoDetalle().getPosicionSap());
                log.error("CBAZALAR realizarOperacion 12b detSap " + detSap.toString());
                this.cerCertificadoDetalleSapDeltaRepository.save(detSap);

                if (!StringUtils.isBlank(textoSapAdicional))
                    textoSapAdicional = textoSapAdicional + "///" + hes.getMsg().getTexto();
                else
                    textoSapAdicional = hes.getMsg().getTexto();

                if (!StringUtils.isBlank(hes.getMsg().getType()) && hes.getMsg().getType().equalsIgnoreCase("S")) {
                    if(certificado.getCerNotaPedido().getTipo().equalsIgnoreCase("S")) {
                        if (!hes.getMsg().getCode().equalsIgnoreCase(auxCodeEntrega)) {
                            log.error("CBAZALAR realizarOperacion 12c");
                            if (!StringUtils.isBlank(hes.getImporte()))
                                totalImporteAjustado = totalImporteAjustado.add(new BigDecimal(hes.getImporte().trim()));
                        }
                    }else {//Para Materiales
                        log.error("PPRINCIPE realizarOperacion 12c_MATERIALES");
                        if (!StringUtils.isBlank(hes.getImporte()))
                            totalImporteAjustado = new BigDecimal(hes.getImporte().trim());
                    }
                    auxCodeEntrega = hes.getMsg().getCode();
                    //hes.getCertDetalle().getCerNotaPedidoDetalle()
                    log.error("CBAZALAR realizarOperacion 12d totalImporteAjustado " + totalImporteAjustado);
                }

                if (!StringUtils.isBlank(hes.getMsg().getType()) && hes.getMsg().getType().equalsIgnoreCase("E")) {
                    log.error("CBAZALAR realizarOperacion 12e");
                    if (!StringUtils.isBlank(textoMensajeSapErrorDetalle))
                        textoMensajeSapErrorDetalle = textoMensajeSapErrorDetalle + "///" + hes.getMsg().getTexto();
                    else
                        textoMensajeSapErrorDetalle = hes.getMsg().getTexto();

                    //textoMensajeSapErrorDetalle = textoMensajeSapErrorDetalle + " " + hes.getMsg().getTexto();
                    textoMensajeSapError = "Rechazo error SAP";
                    flagErrorSap = true;

                    //textoMensajeSap = textoMensajeSap + breakLine;
                }


            }
            if (hes.getMsg().getType().equalsIgnoreCase("E"))
                listaAuxiliar.add(hes.getMsg());

            listaMensaje.add(hes.getMsg());

        }
        log.error("CBAZALAR realizarOperacion 13 totalImporteAjustado Suma SAP ::: " + totalImporteAjustado);

        //Agregar Certififcado detalle SAP para materiales
       /* if(certificado.getCerNotaPedido().getTipo().equalsIgnoreCase("M")) {
            List<CerCertificadoDetalle> listaDetalleCertificado = this.cerCertificadoDetalleDeltaRepository.findByCerCertificado(certificado);
            for (CerCertificadoDetalle ele : listaDetalleCertificado) {
                if(ele.getCantidadAprobada() != null && ele.getCantidadAprobada().compareTo(new BigDecimal("0.0")) > 0) {
                    CerCertificadoDetalleSap detSap = new CerCertificadoDetalleSap();
                    detSap.setCerCertificadoDetalle(ele);
                    detSap.setDocumentoGenerado(docGenerado_);
                    detSap.setTextoError(docGeneradoTexto_);//pprincipe add
                    detSap.setPosicionSap(docGeneradoPosicion_);
                    this.cerCertificadoDetalleSapDeltaRepository.save(detSap);
                }

            }

        }*/
        //Fin
        textoSapAdicionalAux = textoSapAdicional;
        //gUARDAR TEXTO DEVUELTO POR SAP EN HISTORIAL  SOLO PARA ERRORES
        //Guardar error de SAP en historial
        boolean errorSapAprobacionA = false;//Error SAP
        if (!StringUtils.isBlank(textoMensajeSapError)) {
            log.error("CBAZALAR realizarOperacion 13 textoMensajeSapError ::: " + textoMensajeSapError);
            if (currentOpe.equalsIgnoreCase("AA")) {
                operacion.setDescripcion("");
                log.error("CBAZALAR realizarOperacion 14  AA ::: ");
                currentOpe = "RA";
                nombreCompletoAux = "SAP";
                errorSapAprobacionA = true;
                emailDestinatarios = emailFirmaB;
                nombreDestinatario = nombreAprobadorB;
                textoSapAdicionalAux = textoMensajeSapErrorDetalle;

                listaMensaje.removeIf(e -> e.getType().equalsIgnoreCase("E"));
                //codigoTipoFirma = "FA";
                if (!StringUtils.isBlank(certificado.getIndCreacionAutomatica()) && certificado.getIndCreacionAutomatica().equalsIgnoreCase("S"))
                    codeNextEstado = "CERE";
                else
                    codeNextEstado = "CEFB";

                codeEstadoHistorial = "CERE";

            } else {
                log.error("CBAZALAR realizarOperacion 15 not AA ::: ");
                CerHistorial cerHistorialSap = new CerHistorial();
                cerHistorialSap.setCerCertificado(certificado);
                cerHistorialSap.setDescripcion(textoMensajeSapError);
                cerHistorialSap.setMtrEstado(estadoRechazoGeneral);
                cerHistorialSap.setUsuarioHistoral("SAP");
                cerHistorialSap.setFechaHistorial(DateUtils.obtenerFechaHoraActualMasSegundos(1));
                log.error("CBAZALAR realizarOperacion 15 not AA cerHistorialSap " + cerHistorialSap.toString());
                CerHistorial cerHistorialSapOut = this.cerHistorialDeltaRepository.save(cerHistorialSap);
                log.error("CBAZALAR realizarOperacion 15 not AA cerHistorialSapOut " + cerHistorialSapOut.toString());

                String[] msgAux = textoMensajeSapErrorDetalle.split("///");

                for (String ele : msgAux) {
                    //System.out.println("" + ele);
                    if (!StringUtils.isBlank(ele)) {
                        log.error("CBAZALAR realizarOperacion 15 not AA ele " + ele);
                        CerHistorialDetalleSap detHistorial = new CerHistorialDetalleSap();
                        detHistorial.setCerHistorial(cerHistorialSapOut);
                        detHistorial.setDescripcion(ele);
                        detHistorial.setPosicionSap("");
                        log.error("CBAZALAR realizarOperacion 15 not AA detHistorialdetHistorial " + detHistorial);
                        this.cerHistorialDetalleSapDeltaRepository.save(detHistorial);
                    }
                }

            }
        }
        log.error("CBAZALAR realizarOperacion 16 codeNextEstado :: " + codeNextEstado);
        log.error("CBAZALAR realizarOperacion 16 codeNextEstadoHistorial :: " + codeEstadoHistorial);

        //Fin

        /*for (MensajeHes hes : listaHes) {
            listaMensaje.add(hes.getMsg());
            log.error("hes.getMsg() :: " + hes.getMsg());
        }*/

        log.error("CBAZALAR realizarOperacion 16 cerFirma :: " + cerFirma);
        log.error("CBAZALAR realizarOperacion 16 listaMensaje :: " + listaMensaje);
        //Verificar si por lo menos hay un error
        Optional<MensajeSap> optionalMensaje = listaMensaje.stream()
                .filter(x -> "E".equalsIgnoreCase(x.getType()))
                .findFirst();

        //if (!optionalMensaje.isPresent() && listaMensaje.size() > 0) {
        if (!optionalMensaje.isPresent()) {
            log.error("CBAZALAR realizarOperacion 17 ok :: ");
            MtrEstado estado = this.mtrEstadoDeltaRepository.getByCodigoAgrupadoAndCodigoEstado("CE", codeNextEstado);
            MtrEstado estadoHistorial = this.mtrEstadoDeltaRepository.getByCodigoAgrupadoAndCodigoEstado("CE", codeEstadoHistorial);
            String[] msgAux = textoSapAdicionalAux.split("///");

            CerHistorial cerHistorial = new CerHistorial();
            cerHistorial.setCerCertificado(certificado);
            //cerHistorial.setDescripcion(operacion.getDescripcion() + " " + breakLine + textoSapAdicionalAux);
            cerHistorial.setDescripcion(operacion.getDescripcion());
            cerHistorial.setMtrEstado(estadoHistorial);
            cerHistorial.setUsuarioHistoral(nombreCompletoAux);
            cerHistorial.setFechaHistorial(DateUtils.obtenerFechaHoraActualMasSegundos(2));
            log.error("CBAZALAR realizarOperacion 17 cerHistorial " + cerHistorial.toString());
            CerHistorial cerHistorialOut = this.cerHistorialDeltaRepository.save(cerHistorial);
            log.error("CBAZALAR realizarOperacion 17 cerHistorialOut " + cerHistorialOut.toString());

            if (currentOpe.equalsIgnoreCase("RB") || currentOpe.equalsIgnoreCase("RA")) {
                log.error("CBAZALAR realizarOperacion 18 - OperacionCertificado: RB || RA");
                CerHistorial cerHistorial2 = new CerHistorial();
                cerHistorial2.setCerCertificado(certificado);
                cerHistorial2.setDescripcion(operacion.getDescripcion());
                //cerHistorial2.setDescripcion(operacion.getDescripcion() + " " + breakLine + textoSapAdicionalAux);
                cerHistorial2.setMtrEstado(estado);
                cerHistorial2.setUsuarioHistoral(nombreCompleto);
                cerHistorial2.setFechaHistorial(DateUtils.obtenerFechaHoraActualMasSegundos(3));
                log.error("CBAZALAR realizarOperacion 18 cerHistorial2 " + cerHistorial2.toString());
                CerHistorial cerHistorialOut2 = this.cerHistorialDeltaRepository.save(cerHistorial2);
                log.error("CBAZALAR realizarOperacion 18 cerHistorialOut2 " + cerHistorialOut2.toString());

                /*for(String ele: msgAux) {
                    //System.out.println("" + ele);
                    if(!StringUtils.isBlank(ele)) {
                        CerHistorialDetalleSap detHistorial = new CerHistorialDetalleSap();
                        detHistorial.setCerHistorial(cerHistorialOut2);
                        detHistorial.setDescripcion(ele);
                        detHistorial.setPosicionSap("");
                        this.cerHistorialDetalleSapDeltaRepository.save(detHistorial);
                    }

                }*/

            } else {

                /*for(String ele: msgAux) {
                    //System.out.println("" + ele);
                    if(!StringUtils.isBlank(ele)) {
                        CerHistorialDetalleSap detHistorial = new CerHistorialDetalleSap();
                        detHistorial.setCerHistorial(cerHistorialOut);
                        detHistorial.setDescripcion(ele);
                        detHistorial.setPosicionSap("");
                        this.cerHistorialDetalleSapDeltaRepository.save(detHistorial);
                    }

                }*/
            }
            for (String ele : msgAux) {
                //System.out.println("" + ele);
                if (!StringUtils.isBlank(ele)) {
                    CerHistorialDetalleSap detHistorial = new CerHistorialDetalleSap();
                    detHistorial.setCerHistorial(cerHistorialOut);
                    detHistorial.setDescripcion(ele);
                    detHistorial.setPosicionSap("");
                    this.cerHistorialDetalleSapDeltaRepository.save(detHistorial);
                }

            }

            /*CerHistorial cerHistorial2 = new CerHistorial();
            cerHistorial2.setCerCertificado(certificado);
            cerHistorial2.setDescripcion(msg.getTexto());
            cerHistorial2.setMtrEstado(estado);
            cerHistorial2.setUsuarioHistoral(nombreCompleto);
            cerHistorial2.setFechaHistorial(DateUtils.obtenerFechaHoraActual());*/

            //CerHistorial cerHistorialOut2 = this.cerHistorialDeltaRepository.save(cerHistorial2);

            //guardar certificado firma
            log.error("CBAZALAR realizarOperacion 19 - OperacionCertificado: PREVIO cerHistorialOut != null");
            if (cerHistorialOut != null) {
                log.error("CBAZALAR realizarOperacion 19 - OperacionCertificado: cerHistorialOut != null");
                boolean flagCerFirma = true;
                log.error("CBAZALAR realizarOperacion 19 - OperacionCertificado: flagCerFirma 01 " + flagCerFirma);
                if (cerFirma != null) {
                    log.error("CBAZALAR realizarOperacion 20 - cerFirma != null");
                    if (!StringUtils.isBlank(currentOpe)) {
                        log.error("CBAZALAR realizarOperacion 21  - !StringUtils.isBlank(currentOpe)");
                        log.error("CBAZALAR realizarOperacion 21 datos cerfirma :: " + cerFirma.toString());
                        String opeAux = "A";
                        if (currentOpe.equalsIgnoreCase("AB") || currentOpe.equalsIgnoreCase("AA"))
                            opeAux = "A";
                        else
                            opeAux = "R";
                        log.error("CBAZALAR realizarOperacion 21 - opeAux " + opeAux);
                        CerCertificadoFirma cerCertificadoFirma = new CerCertificadoFirma();
                        cerCertificadoFirma.setCreatedBy(user.getDisplayName());
                        cerCertificadoFirma.setDescripcion(operacion.getDescripcion());
                        cerCertificadoFirma.setFechaAprobacion(DateUtils.obtenerFechaHoraActual());
                        cerCertificadoFirma.setCerCertificado(certificado);
                        cerCertificadoFirma.setCerFirma(cerFirma);
                        cerCertificadoFirma.setIndAprobacionRechazo(opeAux);
                        CerCertificadoFirma cerCertificadoFirmaOut = this.cerCertificadoFirmaDeltaRepository.save(cerCertificadoFirma);
                        if (cerCertificadoFirmaOut == null) {
                            log.error("CBAZALAR realizarOperacion 21 Error al actualizar Certificado Firma");
                            flagCerFirma = false;
                            listaMensaje.add(new MensajeSap("E", "", "Error al actualizar Certificado Firma en Hana"));
                        }
                        log.error("CBAZALAR realizarOperacion 21 - OperacionCertificado: flagCerFirma 02 " + flagCerFirma);
                    }
                }
                if (flagCerFirma) {
                    log.error("CBAZALAR realizarOperacion 22 - flagCerFirma - actualizar certificado ");
                    log.error("CBAZALAR realizarOperacion 22 - flagCerFirma - totalImporteAjustado " + totalImporteAjustado);

                    certificado.setMtrEstado(estado);
                    //certificado.setFechaAprobacion(DateUtils.obtenerFechaHoraActual());
                    if (flagCreacionHes) {
                        log.error("CBAZALAR realizarOperacion 23 - flagCerFirma - flagCreacionHes totalImporteAjustado " + totalImporteAjustado);
                        totalImporteAjustado = totalImporteAjustado.setScale(2, BigDecimal.ROUND_HALF_EVEN);

                        if (certificado.getMontoTotalAdjustado() != null && totalImporteAjustado != null) {
                            log.error("CBAZALAR realizarOperacion 23 - flagCerFirma - flagCreacionHes 01");
                            log.error("CBAZALAR realizarOperacion 23 - flagCerFirma - flagCreacionHes 01a certificado getMontoTotalAdjustado " + certificado.getMontoTotalAdjustado());
                            if(certificado.getCerNotaPedido().getTipo().equalsIgnoreCase("S")){
                                certificado.setMontoTotalAdjustado(certificado.getMontoTotalAdjustado().add(totalImporteAjustado).setScale(2, BigDecimal.ROUND_HALF_EVEN));
                                log.error("CBAZALAR realizarOperacion 23_1 - servicex");
                            }else{
                                log.error("CBAZALAR realizarOperacion 23_2 - servicey");
                                certificado.setMontoTotalAdjustado(totalImporteAjustado);
                            }

                            log.error("CBAZALAR realizarOperacion 23 - flagCerFirma - flagCreacionHes 01b certificado getMontoTotalAdjustado " + certificado.getMontoTotalAdjustado());
                        } else {
                            log.error("CBAZALAR realizarOperacion 23 - flagCerFirma - flagCreacionHes 02");
                            log.error("CBAZALAR realizarOperacion 23 - flagCerFirma - flagCreacionHes 02a certificado getMontoTotalAdjustado " + certificado.getMontoTotalAdjustado());
                            certificado.setMontoTotalAdjustado(totalImporteAjustado);
                            log.error("CBAZALAR realizarOperacion 23 - flagCerFirma - flagCreacionHes 02b certificado getMontoTotalAdjustado " + certificado.getMontoTotalAdjustado());
                        }

                        if (!flagErrorSap)
                            certificado.setFechaAprobacion(DateUtils.obtenerFechaHoraActual());
                    }

                    //certificado.setHojaServicio(codigoHes);
                    CerCertificado cerificadoOut = this.cerCertificadoDeltaRepository.save(certificado);
                    log.error("CBAZALAR realizarOperacion 24 - cerificadoOut " + cerificadoOut.toString());
                    if (cerificadoOut == null) {
                        log.error("CBAZALAR realizarOperacion 24 - Error al actualizar estado de certificado");
                        // msg = ;
                        listaMensaje.add(new MensajeSap("E", "", "Error al actualizar estado de certificado en Hana"));
                    } else {
                        /*for (MensajeHes hes : listaHes) {
                            log.error("hes.getMsg().getCode() : " + hes.getMsg().getCode() + " - " + hes.getMsg().getTexto());
                            if (!StringUtils.isBlank(hes.getMsg().getCode())) {
                                CerCertificadoDetalleSap detSap = new CerCertificadoDetalleSap();
                                detSap.setCerCertificadoDetalle(hes.getCertDetalle());
                                detSap.setDocumentoGenerado(hes.getMsg().getCode());
                                detSap.setTextoError(hes.getMsg().getTexto());
                                this.cerCertificadoDetalleSapDeltaRepository.save(detSap);
                            }

                        }*/


                    }
                }


            } else {
                //Fallo grabacion de historial
                log.error("CBAZALAR realizarOperacion 25 - Error al actualizar Historial");
                log.error("Error al actualizar Historial");
                listaMensaje.add(new MensajeSap("E", "", "Error al actualizar Historial en Hana"));
                //msg = new MensajeSap("E","","Error al actualizar Historial en Hana");
            }

            //Actualizar certificado
            //certificado.getIndCreacionAutomatica().equalsIgnoreCase("F")
            //Enviar correo A PROVVEDORES
            optionalMensaje = listaMensaje.stream()
                    .filter(x -> "E".equalsIgnoreCase(x.getType()))
                    .findFirst();
            if (!optionalMensaje.isPresent()) {
                log.error("CBAZALAR realizarOperacion 26 - !optionalMensaje.isPresent() ");
                List<CerCertificadoDetalle> listaDetalleCertificado = this.cerCertificadoDetalleDeltaRepository.findByCerCertificado(certificado);
                if (currentOpe.equalsIgnoreCase("RB")) {
                    log.error("CBAZALAR realizarOperacion 26 - currentOpe.equalsIgnoreCase RB " + currentOpe);
                    log.error("CBAZALAR realizarOperacion 26 - Actualizar cantidad entregada por poisicion");
                    log.error("CBAZALAR realizarOperacion 26 - Actualizar cantidad entregada listaDetalleCertificado.size() ::: " + listaDetalleCertificado.size());
                    if (listaDetalleCertificado != null && listaDetalleCertificado.size() > 0) {

                        for (CerCertificadoDetalle ele : listaDetalleCertificado) {
                            CerNotaPedidoDetalle detPedido = ele.getCerNotaPedidoDetalle();
                            log.error("CBAZALAR realizarOperacion 27 - detPedido.getCantidadEntregada() :::: " + detPedido.getCantidadEntregada() + " - " + ele.getCantidadAprobada());
                            //BigDecimal newCantidad = new BigDecimal("0.0");
                            if (detPedido.getCantidadEntregada() != null && ele.getCantidadAprobada() != null) {
                                log.error("CBAZALAR realizarOperacion 27 - Actualizar Operacion :: detPedido.getCantidadEntregada() != null && ele.getCantidadAprobada() != null");
                                BigDecimal decAux = detPedido.getCantidadEntregada().subtract(ele.getCantidadAprobada()).setScale(2, BigDecimal.ROUND_HALF_EVEN);
                                log.error("CBAZALAR realizarOperacion 27 - Actualizar cantidad decAux ::: " + decAux);
                                detPedido.setCantidadEntregada(decAux);
                                log.error("CBAZALAR realizarOperacion 27 detPedido " + detPedido.toString());
                                this.cerNotaPedidoDetalleDeltaRepository.save(detPedido);
                            }

                        }
                    }

                    log.error("Fin --- Actualizar cantidad entregada por poisicion");

                }
                //Validar suma de cantidades
                boolean flagValido = true;
                BigDecimal cantidadTotalAux = new BigDecimal("0.0");
                if (listaDetalleCertificado != null && listaDetalleCertificado.size() > 0) {
                    log.error("CBAZALAR realizarOperacion 28 - Actualizar Operacion :: listaDetalleCertificado != null && listaDetalleCertificado.size() > 0");
                    for (CerCertificadoDetalle ele : listaDetalleCertificado) {
                        if (ele.getCantidadTotal() != null && ele.getCantidadAprobada() != null) {
                            cantidadTotalAux = cantidadTotalAux.add(ele.getCantidadTotal().subtract(ele.getCantidadAprobada()));
                            //cantidadTotal = cantidadTotal.setScale(2,BigDecimal.ROUND_HALF_EVEN);
                        }

                    }
                }
                if (cantidadTotalAux.compareTo(new BigDecimal("0.0")) == 0)
                    flagValido = false;
                //Crear certificado adicional
                log.error("CBAZALAR realizarOperacion 29 - cantidadTotalAux certtificado detalle ::: - " + cantidadTotalAux);
                if (flagValido && flagCreacionHes && !StringUtils.isBlank(certificado.getIndCreacionAutomatica()) && certificado.getIndCreacionAutomatica().equalsIgnoreCase("S")) {
                    log.error("CBAZALAR realizarOperacion 29 - Crear Certificado adicional Hes - Inicio");
                    //Clonar cetificado
                    //
                    log.error("CBAZALAR realizarOperacion 29 - certificado_original::: " + certificado);

                    CerCertificado certifAdicional = new CerCertificado();
                    //certifAdicional.get
                    //certifAdicional.setCodigoCertificado(certificado.getCodigoCertificado());
                    String code = certificado.getCodigoCertificado();
                    if (!StringUtils.isBlank(code)) {
                        log.error("CBAZALAR realizarOperacion 30 - Actualizar Operacion_s :: !StringUtils.isBlank(code)");
                        /*int newCount = Integer.parseInt( code.substring(code.length() - 1));
                        newCount = newCount + 100;
                        code = code.substring(0,code.length() - 1) + "" + newCount;
                        certifAdicional.setCodigoCertificado(code);*/
                        String[] codes = code.split("-");
                        /*if (pattern.matcher(codes[codes.length - 2]).matches()) {
                            code = code.substring(0,code.length() - 3);
                        }else {
                            code = code.substring(0,code.length() - 1);
                        }*/
                        String codeAux = "";
                        if (pattern.matcher(codes[codes.length - 2]).matches()) {
                            codeAux = codes[0];
                            for (int i = 1; i < codes.length - 1; i++) {

                                codeAux = codeAux + "-" + codes[i];
                            }
                            code = code.substring(0, code.length() - 3);
                        } else {
                            codeAux = code;
                        }

                        code = codeAux + "-" + certificado.getId();
                        certifAdicional.setCodigoCertificado(code);
                    }
                    MtrEstado estadoFirmaB = this.mtrEstadoDeltaRepository.getByCodigoAgrupadoAndCodigoEstado("CE", "CEFB");
                    certifAdicional.setId(0);
                    certifAdicional.setFechaAprobacion(null);
                    certifAdicional.setMtrEstado(estadoFirmaB);

                    certifAdicional.setConcepto(certificado.getConcepto());
                    certifAdicional.setDescuentoh(certificado.getDescuentoh());
                    certifAdicional.setFechaContabDocument(certificado.getFechaContabDocument());
                    certifAdicional.setFechaDesde(certificado.getFechaDesde());
                    certifAdicional.setFechaHasta(certificado.getFechaHasta());
                    certifAdicional.setGrupoCompras(certificado.getGrupoCompras());
                    certifAdicional.setHojaServicio(certificado.getHojaServicio());
                    certifAdicional.setIndTieneFactura(certificado.getIndTieneFactura());
                    certifAdicional.setLugarPrestServ(certificado.getLugarPrestServ());
                    certifAdicional.setMonto(certificado.getMonto());
                    certifAdicional.setMontoTotal(certificado.getMontoTotal());
                    certifAdicional.setMontoTotalAdjustado(certificado.getMontoTotalAdjustado());
                    certifAdicional.setNotasRechazo(certificado.getNotasRechazo());
                    certifAdicional.setObservacion(certificado.getObservacion());
                    certifAdicional.setOcurrencia(certificado.getOcurrencia());
                    certifAdicional.setRespoExterno(certificado.getRespoExterno());
                    certifAdicional.setSolicitante(certificado.getSolicitante());
                    certifAdicional.setCerNotaPedido(certificado.getCerNotaPedido());
                    certifAdicional.setMtrClaseDocumento(certificado.getMtrClaseDocumento());
                    certifAdicional.setMtrMoneda(certificado.getMtrMoneda());
                    certifAdicional.setMtrProveedor(certificado.getMtrProveedor());
                    certifAdicional.setMtrSociedad(certificado.getMtrSociedad());
                    certifAdicional.setMtrAlmacen(certificado.getMtrAlmacen());
                    certifAdicional.setMtrCentro(certificado.getMtrCentro());
                    certifAdicional.setIndCreacionAutomatica(certificado.getIndCreacionAutomatica());
                    //certifAdicional.setMonto();
                    log.error("CBAZALAR realizarOperacion 30 - certificado_certifAdicional::: " + certifAdicional);
                    CerCertificado certifAdicionalOut = this.cerCertificadoDeltaRepository.save(certifAdicional);
                    log.error("this.cerCertificadoDeltaRepository.save_pprincipe_4 ::: " + certifAdicionalOut.toString());
                    BigDecimal montoNuevo = new BigDecimal("0.0");
                    BigDecimal montoUpdateCertificado = new BigDecimal("0.0");

                    if (listaDetalleCertificado != null && listaDetalleCertificado.size() > 0) {
                        log.error("CBAZALAR realizarOperacion 31 - Actualizar Operacion_s :: listaDetalleCertificado != null && listaDetalleCertificado.size() > 0");
                        for (CerCertificadoDetalle ele : listaDetalleCertificado) {
                            //Inicio actualizar cantidad total para cada posicion
                            //BigDecimal newCantidadPosicion = new BigDecimal("0.0");

                            //fIn para cantiodad total de cada
                            BigDecimal cantidadTotal = new BigDecimal("0.0");
                            if (ele.getCantidadTotal() != null && ele.getCantidadAprobada() != null) {
                                cantidadTotal = ele.getCantidadTotal().subtract(ele.getCantidadAprobada());
                                cantidadTotal = cantidadTotal.setScale(2, BigDecimal.ROUND_HALF_EVEN);
                            }


                            if (ele.getCantidadAprobada() != null && ele.getPrecioUnitario() != null) {
                                montoUpdateCertificado = montoUpdateCertificado.add(ele.getCantidadAprobada().multiply(ele.getPrecioUnitario()));
                            }
                            if (certifAdicionalOut != null) {
                                log.error("CBAZALAR realizarOperacion 32 - Actualizar Operacion_s :: certifAdicionalOut != null");
                                CerCertificadoDetalle cerDetAdicional = (CerCertificadoDetalle) BeanUtils.cloneBean(ele);
                                cerDetAdicional.setId(0);
                                cerDetAdicional.setCerCertificado(certifAdicionalOut);
                                //CerNotaPedidoDetalle detPedido = ele.getCerNotaPedidoDetalle();
                                if (ele.getCantidadTotal() != null && ele.getCantidadAprobada() != null
                                        && ele.getCantidadTotal().compareTo(ele.getCantidadAprobada()) > 0) {
                                    log.error("CBAZALAR realizarOperacion 33 - ele.getCantidadTotal()__adicional :::: " + ele.getCantidadTotal() + " - " + ele.getCantidadAprobada());
                                    BigDecimal auxDecimalCantidadAprobada = ele.getCantidadTotal().subtract(ele.getCantidadAprobada()).setScale(2, BigDecimal.ROUND_HALF_EVEN);
                                    cerDetAdicional.setCantidadAprobada(auxDecimalCantidadAprobada);
                                    montoNuevo = montoNuevo.add(cerDetAdicional.getCantidadAprobada().multiply(cerDetAdicional.getPrecioUnitario()));
                                    BigDecimal totalLinea = new BigDecimal(
                                            cerDetAdicional.getCantidadAprobada().floatValue() * cerDetAdicional.getPrecioUnitario().floatValue()
                                    );
                                    cerDetAdicional.setTotalLinea(totalLinea.setScale(2, BigDecimal.ROUND_HALF_EVEN));

                                    //this.cerNotaPedidoDetalleDeltaRepository.save(detPedido);
                                }
                                //certdetAnexMontoTotal
                                cerDetAdicional.setCantidadTotal(cantidadTotal);
                                if (cerDetAdicional.getCantidadTotal().compareTo(new BigDecimal("0.0")) > 0) {
                                    if (Optional.ofNullable(cerDetAdicional.getTotalLinea()).isPresent()) {
                                        BigDecimal totalLinea = cerDetAdicional.getTotalLinea().setScale(2, BigDecimal.ROUND_HALF_UP);
                                        cerDetAdicional.setTotalLinea(totalLinea);
                                    }
                                    this.cerCertificadoDetalleDeltaRepository.save(cerDetAdicional);
                                }
                            }

                        }
                    }
                    log.error("CBAZALAR realizarOperacion 34 - Crear Certificado montoNuevo :: " + montoNuevo);
                    montoNuevo = montoNuevo.setScale(2, BigDecimal.ROUND_HALF_EVEN);
                    certifAdicionalOut.setMontoTotal(montoNuevo);
                    log.error("CBAZALAR realizarOperacion 34 - Actualizar certificado :: copia");
                    this.cerCertificadoDeltaRepository.save(certifAdicionalOut);
                    log.error("cerCertificadoDeltaRepository.save_pprincipe_5 ::: " + certifAdicionalOut.toString());
                    //Actualizar Certificado original
                    montoUpdateCertificado = montoUpdateCertificado.setScale(2, BigDecimal.ROUND_HALF_EVEN);
                    log.error("CBAZALAR realizarOperacion 34 - Actualizar certificado :: original");
                    certificado.setMontoTotal(montoUpdateCertificado);
                    log.error("CBAZALAR realizarOperacion 34 - Crear Certificado montoUpdateCertificado :: " + montoUpdateCertificado);
                    this.cerCertificadoDeltaRepository.save(certificado);
                    log.error("cerCertificadoDeltaRepository.save_pprincipe_6 ::: " + certificado.toString());
                    log.error("CBAZALAR realizarOperacion 34 - Crear Certificado adicional Hes - Fin");
                    log.error("CBAZALAR realizarOperacion 34 - flagCreacionHes - " + flagCreacionHes);
                    if (flagCreacionHes) {
                        log.error("CBAZALAR realizarOperacion 35 - Actualizar Operacion_s :: flagCreacionHesl " + flagCreacionHes);
                        this.cerrarNotaPedido(certificado);
                    }

                }

                log.error("CBAZALAR realizarOperacion 36 - Enviar correo A PROVVEDORES_");
                MailSetting setting = new MailSetting();
                setting.setEmailFrom(username);
                setting.setPassword(password);
                setting.setHost(host);
                setting.setNameFrom(username);
                setting.setPort(port);
                setting.setUser(username);
                log.error("CBAZALAR realizarOperacion 36 - certificadoNotificacion.enviarMail ::. ");
                this.certificadoNotificacion.enviarMail(setting, nombreDestinatario, certificado.getMtrProveedor(), estado, certificado, emailDestinatarios);

                /*if (codeNextEstado.equals(EstadoCertificadoEnum.PENDIENTE_FIRMA_A.getEstado()) ||
                        codeNextEstado.equals(EstadoCertificadoEnum.PENDIENTE_FIRMA_B.getEstado())) {
                    MtrTipoFirma mtrTipoFirma = new MtrTipoFirma();
                    if (codeNextEstado.equals(EstadoCertificadoEnum.PENDIENTE_FIRMA_A.getEstado())) {
                        mtrTipoFirma = this.mtrTipoFirmaDeltaRepository.
                                getByCodigoTipoFirma(TipoFirmaEnum.FIRMA_A.getEstado());
                    }
                    if (codeNextEstado.equals(EstadoCertificadoEnum.PENDIENTE_FIRMA_B.getEstado())) {
                        mtrTipoFirma = this.mtrTipoFirmaDeltaRepository.
                                getByCodigoTipoFirma(TipoFirmaEnum.FIRMA_B.getEstado());
                    }

                    List<MtrAprobador> mtrAprobadorList = this.cerFirmaDeltaRepository.
                            devuelveAprobadorByNotaPedidoAndTipoFirma(
                                    certificado.getCerNotaPedido().getId(),
                                    mtrTipoFirma.getId()
                            );
                    for (MtrAprobador mtrAprobador : mtrAprobadorList) {
                        this.certifica  doNotificacion.enviarFirma(
                                setting,
                                certificado.getMtrProveedor(),
                                mtrAprobador,
                                certificado.getMtrEstado(),
                                certificado);
                    }

                }*/

                //certificadoNotificacion.enviar(setting, certificado.getMtrProveedor(), user, estado, certificado, destinatarios);
            }

        }
        log.error("CBAZALAR realizarOperacion 37 - realizaroperacion :: errorSapAprobacionA " + errorSapAprobacionA);
        log.error("CBAZALAR realizarOperacion 37 - realizaroperacion :: errorSapAprobacionA lista " + listaAuxiliar);
        if (listaAuxiliar.size() > 0 && errorSapAprobacionA) {
            for (MensajeSap ele : listaAuxiliar) {
                listaMensaje.add(ele);
            }
        }
        log.error("CBAZALAR realizarOperacion 37 - FIN realizarOperacion - OperacionCertificado: " + operacion.toString());
        log.error("CBAZALAR realizarOperacion- FIN");
        return listaMensaje;

    }

    /*
     *Split Certificados seleccionados JSON
     */
    public List<CerCertificado> splitCertificados(String param) {
        List<CerCertificado> listData = new ArrayList<CerCertificado>();
        String[] result = param.split(",");
        log.debug("Ingresando listado cerficado: {}", param);
        for (int i = 0; i < result.length; i++)
            listData.add(this.cerCertificadoDeltaRepository.getOne(Integer.valueOf(result[i])));
        return listData;
    }

    public List<CertificadoCustom> splitCertificadosNotaPedidoDetalle(String param) {
        List<CertificadoCustom> listData = new ArrayList<CertificadoCustom>();
        String[] result = param.split(",");
        log.debug("Ingresando listado cerficadoCustom: {}", param);
        for (int i = 0; i < result.length; i++) {
            CertificadoCustom certificadoCustom = new CertificadoCustom();
            CerCertificado certificado = this.cerCertificadoDeltaRepository.getOne(Integer.valueOf(result[i]));
            List<CerCertificadoDetalle> listaDetalleCertificado = this.cerCertificadoDetalleDeltaRepository.obtenerListaDetallePorCertificadoId(Integer.valueOf(result[i]));
            List<CerNotaPedidoDetalle> listaNotaPedidoDetalle = new ArrayList<CerNotaPedidoDetalle>();
            Set<CerNotaPedidoDetalle> linkedSetAux = new LinkedHashSet<CerNotaPedidoDetalle>();

            List<NotaPedidoCustom> listaNotaPedidoDetalleAux = new ArrayList<NotaPedidoCustom>();
            if(certificado.getCerNotaPedido().getTipo().equalsIgnoreCase("M")) { //Materiales
                for (CerCertificadoDetalle ele: listaDetalleCertificado) {
                    NotaPedidoCustom notaPedidoCustom = new NotaPedidoCustom();
                    notaPedidoCustom.setParent(ele.getCerNotaPedidoDetalle());
                    listaNotaPedidoDetalleAux.add(notaPedidoCustom);
                }


            }else {
                for (CerCertificadoDetalle ele: listaDetalleCertificado) {
                    CerNotaPedidoDetalle notaPedidoDetallePadre = this.cerNotaPedidoDetalleDeltaRepository.findByDetallePadre(ele.getCerNotaPedidoDetalle().getIdPadre());

                    log.error("splitCertificadosNotaPedidoDetalle_ Ingresando listado notaPedidoDetallePadre: {} " + notaPedidoDetallePadre);
                    if(notaPedidoDetallePadre != null) {
                        listaNotaPedidoDetalle.add(notaPedidoDetallePadre);
                    }

                }
                linkedSetAux.addAll(listaNotaPedidoDetalle);
                listaNotaPedidoDetalle.clear();
                listaNotaPedidoDetalle.addAll(linkedSetAux);
                //Ordenar primero padre luego Hijos


                for(CerNotaPedidoDetalle ele: listaNotaPedidoDetalle) {

                    boolean flagSeAgregoPadre = false;
                    NotaPedidoCustom notaPedidoCustom = new NotaPedidoCustom();
                    List<CerCertificadoDetalle> listaNotaPedidoChild = new ArrayList<CerCertificadoDetalle>();
                    log.error("splitCertificadosNotaPedidoDetalle ele.getId() :: " + ele.getId());
                    for(CerCertificadoDetalle cd: listaDetalleCertificado) {
                        log.error("splitCertificadosNotaPedidoDetalle cd.getCerNotaPedidoDetalle() :: " + cd.getCerNotaPedidoDetalle().getIdPadre());
                        if(ele.getId().equals(cd.getCerNotaPedidoDetalle().getIdPadre())) {
                            log.error("splitCertificadosNotaPedidoDetalle encuentra hijo :: ");
                            if(!flagSeAgregoPadre) {
                                //listaNotaPedidoDetalleAux.add(ele);
                                notaPedidoCustom.setParent(ele);
                                flagSeAgregoPadre = true;
                            }
                            listaNotaPedidoChild.add(cd);
                        }
                    }
                    notaPedidoCustom.setListChild(listaNotaPedidoChild);
                    listaNotaPedidoDetalleAux.add(notaPedidoCustom);
                }
            }



            certificadoCustom.setCertificado(certificado);
            certificadoCustom.setListaNotaPedidoDetalle(listaNotaPedidoDetalleAux);
            listData.add(certificadoCustom);
        }


           // listData.add();
        return listData;
    }

    public List<MensajeSap> crearCertificadoExterno(CertificadoExternoInput input) throws Exception {

        List<MensajeSap> lista = new ArrayList<MensajeSap>();
        boolean flagOk = true;
        log.error("crearCertificadoExterno__1 ::  " + input);
        log.error("crearCertificadoExterno__2 ::  " + input.getLista());

        java.text.SimpleDateFormat formatDate = new java.text.SimpleDateFormat("dd/MM/yyyy");
        CerNotaPedido notaPedido =
                this.cerNotaPedidoDeltaRepository.getByCodigoNotaPedidoSap(String.format("%010d", new Long(input.getNumeropedido())));

        if (notaPedido == null) {
            //throw new Exception("No se encontrÃ³ la nota de pedido con ID: " + input.getNumeroPedido());
            lista.add(new MensajeSap("E", "", "No se encontrÃ³ la nota de pedido con ID: " + input.getNumeropedido()));
            flagOk = false;
        }
        if (!notaPedido.getTipo().equalsIgnoreCase("S")) {
            //throw new Exception("La nota de pedido " + input.getNumeroPedido() + " no es de tipo servicio");
            lista.add(new MensajeSap("E", "", "La nota de pedido " + input.getNumeropedido() + " no es de tipo servicio"));
            flagOk = false;
        }
        MtrEstado mtrEstadoAprobado = this.mtrEstadoDeltaRepository.
                getByCodigoAgrupadoAndCodigoEstado(
                        Constants.CODIGO_AGRUPADO_CERTIFICADO,
                        EstadoCertificadoEnum.APROBADO.getEstado());


       // MtrClaseDocumento mtrClase = this.mtrClaseDocumentoDeltaRepository.getByCodigoSap(input.getClaseDocumento());
        MtrClaseDocumento mtrClase = notaPedido.getMtrClaseDocumento();
        if (mtrClase == null) {
            //throw new Exception("No se encontrÃ³ clase de documento : " + input.getClaseDocumento());
            lista.add(new MensajeSap("E", "", "No se encontrÃ³ clase de documento : " + input.getNumeropedido()));
            flagOk = false;
        }

        //MtrMoneda moneda = this.mtrMonedaDeltaRepository.getByDescBrv(input.getMoneda());
        MtrMoneda moneda = notaPedido.getMtrMoneda();

        if (moneda == null) {
            //throw new Exception("No se encontrÃ³ moneda para : " + input.getMoneda());
            lista.add(new MensajeSap("E", "", "No se encontrÃ³ moneda para : " + input.getNumeropedido()));
            flagOk = false;
        }

        MtrProveedor proveedor = notaPedido.getMtrProveedor();
        //MtrProveedor proveedor = this.mtrProveedorDeltaRepository.getByRuc(input.getRuc());
        if (proveedor == null) {
            //throw new Exception("No se encontrÃ³ moneda para : " + input.getRuc());
           lista.add(new MensajeSap("E", "", "No se encontrÃ³ moneda para : " + input.getNumeropedido()));
            flagOk = false;
        }

        //MtrSociedad sociedad = this.mtrSociedadDeltaRepository.findByDescripcionBreve(input.getSociedad());
        MtrSociedad sociedad = notaPedido.getMtrSociedad();
        if (proveedor == null) {
            //throw new Exception("No se encontrÃ³ sociedad para : " + input.getSociedad());
            lista.add(new MensajeSap("E", "", "No se encontrÃ³ sociedad para : " + input.getNumeropedido()));
            flagOk = false;
        }

        //Guardar Historial
        if (flagOk) {
            log.error("crearCertificadoExterno__3 ::  " );
            lista.add(new MensajeSap("S", "", "El certificado " + input.getNumerocertificado() + " se creÃ³ correctamente"));
            //Cabecera Certificado
            CerCertificado certificado = new CerCertificado();
            certificado.setCerNotaPedido(notaPedido);
            certificado.setMtrEstado(mtrEstadoAprobado);
            certificado.setMtrClaseDocumento(mtrClase);
            certificado.setMtrProveedor(proveedor);
            certificado.setMtrSociedad(sociedad);
            //Inicio -Adicional
            certificado.setConcepto(input.getConcepto());
            if (StringUtils.isNotBlank(input.getMontototal()))
                certificado.setMontoTotal(new BigDecimal(input.getMontototal()));
            if (StringUtils.isNotBlank(input.getMontototalajustado()))
                certificado.setMontoTotalAdjustado(new BigDecimal(input.getMontototalajustado()));
            if (StringUtils.isNotBlank(input.getFechaaprobacion()))
                certificado.setFechaAprobacion(formatDate.parse(input.getFechaaprobacion()));
            //private String aprobadorfirmaa;
            //private String aprobadorfirmab;
            //Fin adicional
            certificado.setMtrMoneda(moneda);
            certificado.setIndTieneFactura("N");
            certificado.setCodigoCertificado(input.getNumerocertificado());
            certificado.setLugarPrestServ(input.getLugar());
            if (StringUtils.isNotBlank(input.getFechadesde()))
                certificado.setFechaDesde(formatDate.parse(input.getFechadesde()));
            if (StringUtils.isNotBlank(input.getFechahasta()))
                certificado.setFechaHasta(formatDate.parse(input.getFechahasta()));

            CerCertificado certificadoOut = this.cerCertificadoDeltaRepository.save(certificado);
            log.error("cerCertificadoDeltaRepository.save_pprincipe_7 :: " + certificadoOut.toString());

            //Detalle certificado
            int countDetalleSap = 0;
            if (input.getLista() != null && input.getLista().size() > 0) {
                for (PosicionExternoInput ele : input.getLista()) {
                    countDetalleSap ++;
                    log.error("crearCertificadoExterno__5 ::  ");
                    CerCertificadoDetalle detalle = new CerCertificadoDetalle();
                    CerNotaPedidoDetalle notaPedidoDetalle = this.cerNotaPedidoDetalleDeltaRepository.
                            findByDetalleSubPosicionServicio(notaPedido.getId(), String.format("%010d", new Long(ele.getExtrow())), input.getPosicionnotapedido());
                    log.error("crearCertificadoExterno__5_1 ::  ");
                    detalle.setCerCertificado(certificadoOut);
                    detalle.setCantidadAprobada(new BigDecimal(ele.getCantidad()));
                    BigDecimal cantidadPendiente = new BigDecimal("0.0");
                    if(notaPedidoDetalle.getCantidadRequerida() != null &&  StringUtils.isNotBlank(ele.getCantidad())) {
                        cantidadPendiente = notaPedidoDetalle.getCantidadRequerida().subtract(new BigDecimal(ele.getCantidad())).setScale(2,BigDecimal.ROUND_HALF_EVEN);
                    }
                    log.error("crearCertificadoExterno__5_2 ::  ");
                    detalle.setCantidadPendiente(cantidadPendiente);
                    detalle.setPrecioUnitario(new BigDecimal(ele.getPreciobase()));
                    detalle.setCantidadTotal(notaPedidoDetalle.getCantidadEntregada());
                    BigDecimal totalLinea = new BigDecimal("0.0");
                    if(StringUtils.isNotBlank(ele.getPreciobase()) && StringUtils.isNotBlank(ele.getCantidad())) {
                        totalLinea = new BigDecimal(ele.getPreciobase()).multiply(new BigDecimal(ele.getCantidad())).setScale(2,BigDecimal.ROUND_HALF_EVEN);
                    }
                    log.error("crearCertificadoExterno__5_3 ::  ");
                    detalle.setTotalLineaAjustado(totalLinea);
                    detalle.setTotalLinea(totalLinea);
                    detalle.setCerNotaPedidoDetalle(notaPedidoDetalle);

                    detalle.setMtrCuentaImputacion(this.mtrCuentaImputacionDeltaRepository.
                            findByCodigoTipoImputacion(ele.getCodigoimputacion(), ele.getTipoimputacion(), notaPedido.getMtrSociedad().getId()));
                    detalle.setMtrCuentaMayor(this.mtrCuentaMayorDeltaRepository.
                            findByCodigoTipoImputacion(ele.getCodigocuentamayor(), ele.getTipoimputacion(), notaPedido.getMtrSociedad().getId()));
                    CerCertificadoDetalle detalleOut = this.cerCertificadoDetalleDeltaRepository.save(detalle);
                    log.error("crearCertificadoExterno__6 ::  ");
                    //Guardar detalle Certificado
                    if(countDetalleSap == 1) {
                        CerCertificadoDetalleSap detalleSaP = new CerCertificadoDetalleSap();
                        detalleSaP.setPosicionSap(notaPedidoDetalle.getPosicionSap());
                        //detalleSaP.set
                        detalleSaP.setCerCertificadoDetalle(detalleOut);
                        detalleSaP.setDocumentoGenerado(input.getNumerohes());
                        detalleSaP.setTextoError("La hes " + input.getNumerohes() + " se creÃ³ correctamente");
                        this.cerCertificadoDetalleSapDeltaRepository.save(detalleSaP);
                        log.error("crearCertificadoExterno__7 ::  ");
                    }

                }
            }

            log.error("crearCertificadoExterno__8 ::  ");
            if(StringUtils.isNotBlank(input.getAprobadorfirmab())) {
                log.error("crearCertificadoExterno__9 ::  ");
                CerHistorial historialb = new CerHistorial();
                MtrEstado mtrEstadoFirmab = this.mtrEstadoDeltaRepository.
                        getByCodigoAgrupadoAndCodigoEstado(
                                Constants.CODIGO_AGRUPADO_CERTIFICADO,
                                EstadoCertificadoEnum.PENDIENTE_FIRMA_B.getEstado());
                historialb.setCerCertificado(certificadoOut);
                historialb.setDescripcion("AprobaciÃ³n firma B");
                historialb.setIndSgmm("X");
                historialb.setUsuarioHistoral(input.getAprobadorfirmab());
                historialb.setFechaHistorial(DateUtils.obtenerFechaHoraActual());
                historialb.setMtrEstado(mtrEstadoFirmab);
                this.cerHistorialDeltaRepository.save(historialb);
            }

            if(StringUtils.isNotBlank(input.getAprobadorfirmaa())) {
                log.error("crearCertificadoExterno__10 ::  ");
                CerHistorial historiala = new CerHistorial();
                MtrEstado mtrEstadoFirmaa = this.mtrEstadoDeltaRepository.
                        getByCodigoAgrupadoAndCodigoEstado(
                                Constants.CODIGO_AGRUPADO_CERTIFICADO,
                                EstadoCertificadoEnum.PENDIENTE_FIRMA_A.getEstado());

                historiala.setCerCertificado(certificadoOut);
                historiala.setDescripcion("AprobaciÃ³n firma A");
                historiala.setUsuarioHistoral(input.getAprobadorfirmaa());
                historiala.setIndSgmm("X");
                historiala.setFechaHistorial(DateUtils.obtenerFechaHoraActual());
                historiala.setMtrEstado(mtrEstadoFirmaa);
                this.cerHistorialDeltaRepository.save(historiala);

            }
            CerHistorial historial = new CerHistorial();
            historial.setCerCertificado(certificadoOut);
            historial.setDescripcion("Generado desde SAP");
            historial.setUsuarioHistoral("SAP");
            historial.setIndSgmm("X");
            historial.setFechaHistorial(DateUtils.obtenerFechaHoraActual());
            historial.setMtrEstado(mtrEstadoAprobado);
            this.cerHistorialDeltaRepository.save(historial);
        }

        log.error("crearCertificadoExterno__10 ::  ");
        return lista;
    }

    public boolean validarCertificadoCerrado(CerCertificado certificado) {
        List<AppParametria> listaDoc = this.appParametriaDeltaRepository.findByModuloAndStatus(Constants.TIPO_NP_CD, "1");
        boolean flagCerrado = true;
        Optional<AppParametria> optionalClase = listaDoc.stream()
                .filter(x -> certificado.getCerNotaPedido().getMtrClaseDocumento().getCodigoSap().equalsIgnoreCase(x.getValue1()))
                .findFirst();
        log.error(" validarCertificadoCerrado :: " + certificado.getCerNotaPedido().getMtrClaseDocumento().getCodigoSap());
        //dddffA
        if (optionalClase.isPresent())
            flagCerrado = false;

        if (flagCerrado) {
            List<CerCertificadoDetalle> listaDetalle = this.cerCertificadoDetalleDeltaRepository.findByCerCertificado(certificado);
            if (listaDetalle != null && listaDetalle.size() > 0) {
                for (CerCertificadoDetalle ele : listaDetalle) {

                    log.error(" validarCertificadoCerrado :: ALL " + ele.getCerNotaPedidoDetalle().getMtrCuentaImputacion() + " - " + ele.getCerNotaPedidoDetalle().getMtrCuentaMayor());
                    if (ele.getCerNotaPedidoDetalle().getMtrCuentaImputacion() != null && ele.getCerNotaPedidoDetalle().getMtrCuentaMayor() != null) {
                        log.error(" validarCertificadoCerrado :: impuXX  " + ele.getCerNotaPedidoDetalle().getMtrCuentaImputacion() + " - " + ele.getCerNotaPedidoDetalle().getMtrCuentaMayor());
                        flagCerrado = false;
                    }
                }
            }
        }
        log.error(" validarCertificadoCerrado :: fin " + flagCerrado);
        return flagCerrado;

    }

    /**
     * Listar document of Cetificado
     */
    public List listaAdjuntos(Integer idCertificado) throws Exception {

        if (!Optional.ofNullable(idCertificado).isPresent()) {
            throw new Exception("No existe Certificado con ID: " + idCertificado);
        }
        CerCertificado cer = this.cerCertificadoDeltaRepository.getOne(idCertificado);
        CerDocumentoAdjunto cerDocumentoAdjunto = new CerDocumentoAdjunto();
        cerDocumentoAdjunto.setCerCertificado(cer);
        return cerDocumentoAdjuntoDeltaService.find(cerDocumentoAdjunto);
    }

    public List deleteAllFilesCMIS(CerDeleteAllFilesDto cerDeleteAllFilesDto) throws Exception {
        if (this.appParametriaDeltaService.devuelveApagarCertificado()) {
            throw new Exception(Constants.MENSAJE_SISTEMA_APAGADO);
        }

        List<CerDocumentoAdjunto> adjuntosDeleteCmisFile = new ArrayList<CerDocumentoAdjunto>();

        cerDeleteAllFilesDto.getCerDocumentoAdjuntoList().forEach(e -> {
            cmisService.deleteFile(e.getArchivoId());//Delete from CMIS
            ///cerDocumentoAdjuntoDeltaRepository.deleteById(e.getId());//Delete from HANA
            cerDocumentoAdjuntoDeltaRepository.delete(e);
            cerDocumentoAdjuntoDeltaRepository.flush();
            adjuntosDeleteCmisFile.add(e);
        });

        return adjuntosDeleteCmisFile;
    }

    public List deleteAllFiles(String DIRECTORY) throws Exception {
        if (this.appParametriaDeltaService.devuelveApagarCertificado()) {
            throw new Exception(Constants.MENSAJE_SISTEMA_APAGADO);
        }

        List<CmisFile> adjuntosDeleteCmisFile = new ArrayList<CmisFile>();
        UserSession user = this.systemLoggedUser.getUserSession();
        cmisService.getListFileByFolderId(DIRECTORY).stream().forEach(e -> {
            cmisService.deleteFile(e.getId());
            adjuntosDeleteCmisFile.add(e);
        });
        return adjuntosDeleteCmisFile;
    }

    public List deleteOneFile(String archivoID) throws Exception {
        if (this.appParametriaDeltaService.devuelveApagarCertificado()) {
            throw new Exception(Constants.MENSAJE_SISTEMA_APAGADO);
        }


        //Delete from HANA
        CerDocumentoAdjunto req = new CerDocumentoAdjunto();
        req.setArchivoId(archivoID);
        cerDocumentoAdjuntoDeltaService.find(req).forEach(e -> {
            cerDocumentoAdjuntoDeltaRepository.delete(e);
        });
        //Delete form CMIS
        List<String> deleteCmisFile = new ArrayList<String>();
        cmisService.deleteFile(archivoID);
        deleteCmisFile.add("Delete file id " + archivoID);
        return deleteCmisFile;
    }

    ///Pendient get information user login into get RUC search
    public List listadoCertificadoByProveedor(String rucProveedor) {

        List<CertificadoProveedorDto> certificadoProveedorDto = new ArrayList<CertificadoProveedorDto>();
        //  UserSession user = this.systemLoggedUser.getUserSession();
        MtrProveedor proveedor = new MtrProveedor();
        proveedor.setRuc(rucProveedor);
        //  proveedor.setRuc( user.getRuc());

        CerCertificado cer = new CerCertificado();
        cer.setMtrProveedor(proveedor);
        cerCertificadoDeltaService.find(cer).stream().forEach(certificado -> {
            CertificadoProveedorDto certificadoDto = new CertificadoProveedorDto();
            certificadoDto.setIdCertificado(certificado.getId());
            certificadoDto.setIdNotaPedido(certificado.getCerNotaPedido().getId());
            certificadoDto.setNroCertificado(certificado.getCodigoCertificado());
            ///convertLocalDateTimeToDateUsingInstant(certificado.getCreatedDate());
            LocalDateTime dateTime = LocalDateTime.parse(certificado.getCreatedDate().toString(), formatter);
            certificadoDto.setFechaCreacion(LocalDateTime.parse(certificado.getCreatedDate().toString(), formatter));
            certificadoDto.setMonto(certificado.getMontoTotal());
            certificadoDto.setMontoAdjuntado(certificado.getMontoTotalAdjustado());
            certificadoDto.setTipo(certificado.getMtrClaseDocumento().getDescripcion());
            certificadoDto.setEstado(certificado.getMtrEstado().getDescripcion());
            certificadoDto.setEstadoCodigo(certificado.getMtrEstado().getCodigoEstado());
            certificadoDto.setMoneda(certificado.getMtrMoneda().getDescBrv());
            certificadoProveedorDto.add(certificadoDto);
        });

        return certificadoProveedorDto;
    }

    private Date convertLocalDateTimeToDateUsingInstant(LocalDateTime dateToConvert) {
        return java.util.Date
                .from(dateToConvert.atZone(ZoneId.systemDefault())
                        .toInstant());
    }

    public List<CertificadoConglomeradoDto> listadoCertificadoConglomerado(Integer idCertificado) throws Exception {

        if (!Optional.ofNullable(idCertificado).isPresent()) {
            throw new Exception("No existe Certificado con ID: " + idCertificado);
        }

        List<CertificadoConglomeradoDto> LcertificadoConglomerado = new ArrayList<CertificadoConglomeradoDto>();
        CertificadoConglomeradoDto certificadoConglomeradoDto = new CertificadoConglomeradoDto();

        CerCertificado cerCertificado = this.cerCertificadoDeltaService.findOne(idCertificado).get();
        certificadoConglomeradoDto.setCertificadoCabeceraDto(cerCertificado);

        List<CerCertificadoDetalleDto> listaFinal = this.cerCertificadoDetalleDeltaService.findByDetalle(idCertificado);
        certificadoConglomeradoDto.setCerCertificadoDetalleDto(listaFinal);
        if (listaFinal != null && listaFinal.size() > 0) {
            CerCertificadoDetalleDto cerCertificadoDetalleDto = listaFinal.get(0);
            CerNotaPedidoDetalle cerNotaPedidoDetalle = cerCertificadoDetalleDto.getCerNotaPedidoDetalle();
            MtrCentroAlmacen mtrCentroAlmacen = cerNotaPedidoDetalle.getMtrCentro();
            certificadoConglomeradoDto.setCentroNotaPedido1erRegistro(mtrCentroAlmacen);
        }


        //create array Historial
        CerHistorial cerHistorial = new CerHistorial();
        cerHistorial.setCerCertificado(cerCertificado);
        List<CertificadoHistorialConglomeradoDto> lcertificadoHistorial = new ArrayList<CertificadoHistorialConglomeradoDto>();
        cerHistorialDeltaService.find(cerHistorial).stream().forEach(historialEach -> {
            CertificadoHistorialConglomeradoDto historial = new CertificadoHistorialConglomeradoDto();
            historial.setFecha((historialEach.getFechaHistorial() != null ?
                    DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", historialEach.getFechaHistorial()) : ""));
            historial.setEstado(historialEach.getMtrEstado().getDescripcion());
            historial.setCodigo(historialEach.getMtrEstado().getCodigoEstado());
            historial.setUsuario(historialEach.getUsuarioHistoral());
            historial.setObservacion(historialEach.getDescripcion());
            lcertificadoHistorial.add(historial);
        });
        List<CerHistorial> cerHistorialList = cerHistorialDeltaService.find(cerHistorial);
        for (int i = 0; i < cerHistorialList.size(); i++) {
            CerHistorial bean = cerHistorialList.get(i);
            bean.setFechaHistorialString(bean.getFechaHistorial() != null ?
                    DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaHistorial()) : "");
            cerHistorialList.set(i, bean);
        }
        certificadoConglomeradoDto.setCerHistorialList(cerHistorialList);

        if (!lcertificadoHistorial.isEmpty())
            certificadoConglomeradoDto.setCerHistorialConglomeradoDto(lcertificadoHistorial);

        //Create to array Firmas
        CerNotaPedido cerNotaPedido = cerCertificado.getCerNotaPedido();
        List<CerFirma> cerFirmaList = this.cerFirmaDeltaRepository.findByCerNotaPedido(cerNotaPedido);
        certificadoConglomeradoDto.setCertificadoFirmaConglomeradoDto(cerFirmaList);

        //Obteniendo documentos sap
        List<CerCertificadoDetalleSap> certificadoDetalleSapList =
                this.cerCertificadoDetalleSapDeltaRepository.
                        findByCerCertificadoHes(cerCertificado.getId());

        //Add all elements DTO
        certificadoConglomeradoDto.setCerCertificadoDetalleSapList(certificadoDetalleSapList);
        LcertificadoConglomerado.add(certificadoConglomeradoDto);

        certificadoConglomeradoDto.setCerCertificadoDetalleSapList(this.cerCertificadoDetalleSapMapper.findByIdCertificado(idCertificado));

        return LcertificadoConglomerado;
    }


    public List<CertificadoConglomeradoDto> listadoCertificadoConglomerado02(Integer idCertificado) throws Exception {

        if (!Optional.ofNullable(idCertificado).isPresent()) {
            throw new Exception("No existe Certificado con ID: " + idCertificado);
        }
        CertificadoConglomeradoDto certificadoConglomeradoDto = new CertificadoConglomeradoDto();
        CerCertificado cerCertificado = new CerCertificado();
        CerCertificado cerCertificadoBuscar = new CerCertificado();
        cerCertificadoBuscar.setId(idCertificado);

        //Cabecera
        List<CerCertificado> cerCertificadoList = this.cerCertificadoMapper.getLista(cerCertificadoBuscar);
        if (cerCertificadoList != null && cerCertificadoList.size() > 0) {
            cerCertificado = cerCertificadoList.get(0);
            certificadoConglomeradoDto.setCertificadoCabeceraDto(cerCertificado);
        }

        //Historial
        CerHistorial cerHistorial = new CerHistorial();
        cerHistorial.setCerCertificado(cerCertificadoBuscar);
        List<CerHistorial> cerHistorialList = this.cerHistorialMapper.getLista(cerHistorial);
        certificadoConglomeradoDto.setCerHistorialList(cerHistorialList);


        //Obteniendo documentos sap
        List<CerCertificadoDetalleSap> certificadoDetalleSapList =
                this.cerCertificadoDetalleSapMapper.findByIdCertificado(idCertificado);
        certificadoConglomeradoDto.setCerCertificadoDetalleSapList(certificadoDetalleSapList);


        //Create to array Firmas
        CerNotaPedido cerNotaPedido = cerCertificado.getCerNotaPedido();
        CerFirma cerFirma = new CerFirma();
        cerFirma.setCerNotaPedido(cerNotaPedido);
        List<CerFirma> cerFirmaList = this.cerFirmaMapper.getLista(cerFirma);
        certificadoConglomeradoDto.setCertificadoFirmaConglomeradoDto(cerFirmaList);

        // Detalle
        List<CerCertificadoDetalleDto> listaFinal = this.cerCertificadoDetalleDeltaService.findByDetalle(cerCertificado);
        certificadoConglomeradoDto.setCerCertificadoDetalleDto(listaFinal);
        if (listaFinal != null && listaFinal.size() > 0) {
            CerCertificadoDetalleDto cerCertificadoDetalleDto = listaFinal.get(0);
            CerNotaPedidoDetalle cerNotaPedidoDetalle = cerCertificadoDetalleDto.getCerNotaPedidoDetalle();
            MtrCentroAlmacen mtrCentroAlmacen = cerNotaPedidoDetalle.getMtrCentro();
            certificadoConglomeradoDto.setCentroNotaPedido1erRegistro(mtrCentroAlmacen);
        }

        List<CertificadoConglomeradoDto> LcertificadoConglomerado = new ArrayList<CertificadoConglomeradoDto>();
        LcertificadoConglomerado.add(certificadoConglomeradoDto);

        return LcertificadoConglomerado;
    }


    public List<CertificadoConglomeradoDto> listadoCertificadoConglomeradoCompleteFuture(Integer idCertificado) throws Exception {

        if (!Optional.ofNullable(idCertificado).isPresent()) {
            throw new Exception("No existe Certificado con ID: " + idCertificado);
        }
        CertificadoConglomeradoDto certificadoConglomeradoDto = new CertificadoConglomeradoDto();
        CerCertificado cerCertificado = new CerCertificado();
        CerCertificado cerCertificadoBuscar = new CerCertificado();
        cerCertificadoBuscar.setId(idCertificado);

        //Cabecera
        List<CerCertificado> cerCertificadoList = this.cerCertificadoMapper.getLista(cerCertificadoBuscar);
        if (cerCertificadoList != null && cerCertificadoList.size() > 0) {
            cerCertificado = cerCertificadoList.get(0);

        }

        //Historial
        CompletableFuture<List<CerHistorial>> cerHistorialList =
                this.cerCertificadoRequireNewService.getCerHistorialListConglomeradoComplete(cerCertificadoBuscar);

        //DetalleSap
        CompletableFuture<List<CerCertificadoDetalleSap>> certificadoDetalleSapList =
                this.cerCertificadoRequireNewService.getCerCertificadoDetalleSapListComplete(idCertificado);


        //Create to array Firmas
        CompletableFuture<List<CerFirma>> cerFirmaList =
                this.cerCertificadoRequireNewService.getCerFirmasComplete(cerCertificado);

        // Detalle
        CompletableFuture<List<CerCertificadoDetalleDto>> cerCertificadoDetalleDtoList =
                this.cerCertificadoRequireNewService.getCerCertificadoDetalleDtoListComplete(cerCertificado);

        CompletableFuture.
                allOf(cerHistorialList, certificadoDetalleSapList, cerFirmaList, cerCertificadoDetalleDtoList);


        List<CertificadoConglomeradoDto> LcertificadoConglomerado = new ArrayList<CertificadoConglomeradoDto>();
        certificadoConglomeradoDto.setCertificadoCabeceraDto(cerCertificado);
        certificadoConglomeradoDto.setCerHistorialList(cerHistorialList.get());
        certificadoConglomeradoDto.setCerCertificadoDetalleSapList(certificadoDetalleSapList.get());
        certificadoConglomeradoDto.setCertificadoFirmaConglomeradoDto(cerFirmaList.get());
        certificadoConglomeradoDto.setCerCertificadoDetalleDto(cerCertificadoDetalleDtoList.get());
        if (cerCertificadoDetalleDtoList.get() != null && cerCertificadoDetalleDtoList.get().size() > 0) {
            CerCertificadoDetalleDto cerCertificadoDetalleDto = cerCertificadoDetalleDtoList.get().get(0);
            CerNotaPedidoDetalle cerNotaPedidoDetalle = cerCertificadoDetalleDto.getCerNotaPedidoDetalle();
            MtrCentroAlmacen mtrCentroAlmacen = cerNotaPedidoDetalle.getMtrCentro();
            certificadoConglomeradoDto.setCentroNotaPedido1erRegistro(mtrCentroAlmacen);
        }

        LcertificadoConglomerado.add(certificadoConglomeradoDto);
        return LcertificadoConglomerado;
    }


    /**
     * Agrega document to Cetificado
     */
    public CerDocumentoAdjunto agregarDocumentoCerificado(MultipartFile file) throws Exception {
        if (this.appParametriaDeltaService.devuelveApagarCertificado()) {
            throw new Exception(Constants.MENSAJE_SISTEMA_APAGADO);
        }


        log.error("agregarDocumentoCerificado 00 file: " + file.toString());
        UserSession user = this.systemLoggedUser.getUserSession();
        Long current = System.currentTimeMillis();
        int valorCurrent = Math.abs(current.intValue());
        MtrProveedor mtrProveedor = new MtrProveedor();
        mtrProveedor.setCodigoIdp(user.getId());

        mtrProveedorDeltaService.find(mtrProveedor).stream().forEach(e -> {
            mtrProveedor.setRuc(e.getRuc());
        });

        if (!Optional.ofNullable(mtrProveedor.getRuc()).isPresent()) {
            log.error("No exits RUC for IDP user : " + user.getId());
            throw new Exception("No exits RUC for IDP user : " + user.getId());
        }

        log.info("RUC proveedor : " + mtrProveedor.getRuc());
        String TEMP_DIRECTORY = "COGA-TEMP-" + mtrProveedor.getRuc();
        String folderId = cmisService.createFolder(TEMP_DIRECTORY);
        log.debug("agregarDocumentoCerificado 01 ---> folderId  [" + folderId + " ]");

        CmisFile cmisFile = cmisService.createOrReplaceDocumento(folderId, file);

        log.error("agregarDocumentoCerificado 02 ---> cmisFile  [" + cmisFile.toString() + " ]");

        CerDocumentoAdjunto cerDocumentoAdjunto = new CerDocumentoAdjunto();
        cerDocumentoAdjunto.setId(valorCurrent);
        cerDocumentoAdjunto.setCarpetaId(folderId);
        cerDocumentoAdjunto.setArchivoId(cmisFile.getId());
        cerDocumentoAdjunto.setArchivoNombre(cmisFile.getName());
        cerDocumentoAdjunto.setRutaCatalogo(cmisFile.getUrl());
        cerDocumentoAdjunto.setArchivoTipo(cmisFile.getType());
        cerDocumentoAdjunto.setSize(cmisFile.getSize());
        cerDocumentoAdjunto.setTipoAdjunto("CER-OTROS");

        log.error("agregarDocumentoCerificado 03 Agregrando adjuntos Certificado Respuesta CerDocumentoAdjunto  [" + file.getName() + " , " +
                file.getSize() + " temp directory " + TEMP_DIRECTORY + " ]");

        log.error("agregarDocumentoCerificado 04 cerDocumentoAdjunto: " + cerDocumentoAdjunto);
        return cerDocumentoAdjunto;
    }

    public CerDocumentoAdjunto adjuntosAprobador(MultipartFile file, Integer certificadoId) throws Exception {
        if (this.appParametriaDeltaService.devuelveApagarCertificado()) {
            throw new Exception(Constants.MENSAJE_SISTEMA_APAGADO);
        }


        log.error("adjuntosAprobador 00 file: " + file.toString());
        UserSession user = this.systemLoggedUser.getUserSession();
        Long current = System.currentTimeMillis();
        int valorCurrent = Math.abs(current.intValue());
        CerCertificado cerCertificado = this.cerCertificadoDeltaRepository.getOne(certificadoId);
        if (!Optional.ofNullable(cerCertificado).isPresent()) {
            throw new Exception("No se encontrÃ³ Certificado con ID: " + certificadoId);
        }
        MtrProveedor mtrProveedor = cerCertificado.getMtrProveedor();
        mtrProveedor = this.mtrProveedorDeltaRepository.getOne(mtrProveedor.getId());
        if (!Optional.ofNullable(mtrProveedor.getRuc()).isPresent()) {
            log.error("No exits RUC for IDP user : " + user.getId());
            throw new Exception("No exits RUC for IDP user : " + user.getId());
        }
        log.info("RUC proveedor : " + mtrProveedor.getRuc());

        String nameFolder = "COGA-CERTIFICADO-" + mtrProveedor.getRuc() + "-" + cerCertificado.getId();
        String folderId = cmisService.createFolder(nameFolder);
        log.debug("adjuntosAprobador 01 ---> folderId  [" + folderId + " ]");

        CmisFile cmisFile = cmisService.createOrReplaceDocumento(folderId, file);
        log.error("adjuntosAprobador 02 ---> cmisFile  [" + cmisFile.toString() + " ]");

        CerDocumentoAdjunto cerDocumentoAdjunto = new CerDocumentoAdjunto();
        cerDocumentoAdjunto.setId(valorCurrent);
        cerDocumentoAdjunto.setCarpetaId(folderId);
        cerDocumentoAdjunto.setArchivoId(cmisFile.getId());
        cerDocumentoAdjunto.setArchivoNombre(cmisFile.getName());
        cerDocumentoAdjunto.setRutaCatalogo(cmisFile.getUrl());
        cerDocumentoAdjunto.setArchivoTipo(cmisFile.getType());
        cerDocumentoAdjunto.setSize(cmisFile.getSize());
        cerDocumentoAdjunto.setTipoAdjunto("CER-OTROS");

        log.error("adjuntosAprobador 03 Agregrando adjuntos Certificado Respuesta CerDocumentoAdjunto  [" + file.getName() + " , " +
                file.getSize() + " folder: " + nameFolder + " ]");

        log.error("adjuntosAprobador 04 cerDocumentoAdjunto: " + cerDocumentoAdjunto);
        return cerDocumentoAdjunto;
    }


    /*
     * Se crea una segunda lista con los adjuntos no guardados
     * Se mueven los adjuntos al folder destino y se obtiene la lista de los mismos con su nuevo URL
     */
    public CertificadoCabezeraDetallesAdjuntosDto saveAllCertificado(
            CertificadoCabezeraDetallesAdjuntosDto certificadoAdjuntos) throws Exception {
        if (this.appParametriaDeltaService.devuelveApagarCertificado()) {
            throw new Exception(Constants.MENSAJE_SISTEMA_APAGADO);
        }


        UserSession user = this.systemLoggedUser.getUserSession();

        log.error("saveAllCertificado 0001 user: (user)" + user.toString());

        MtrProveedor mtrProveedor = this.mtrProveedorDeltaRepository.findByCodigoIdp(user.getId());
        if (!Optional.ofNullable(mtrProveedor).isPresent()) {
            throw new Exception("No se encontrÃ³ Proveedor con Codigo IDP :" + user.getId());
        }
        log.error("saveAllCertificado 01 mtrProveedor: (ruc)" + mtrProveedor.getRuc());
        String nombreCompleto = mtrProveedor.getRazonSocial();

        //Validaciones previas
        this.validacionesPreviasSaveCertificado(certificadoAdjuntos, true);
        String state = EstadoCertificadoEnum.BORRADOR.getEstado();
        if (certificadoAdjuntos.getTypeState().equals("P")) {
            state = EstadoCertificadoEnum.PENDIENTE_FIRMA_B.getEstado();
        }
        //The firt state is PUBLICATE whem Code Group==CE and Code State==CECEO IF TypeStat==P else State==CECEO for default condition
        MtrEstado mtrEstado = this.mtrEstadoDeltaRepository.
                getByCodigoAgrupadoAndCodigoEstado(
                        Constants.CODIGO_AGRUPADO_CERTIFICADO,
                        state);

        //Check here..validation
        List<CerCertificadoDetalle> lcerCertificadoDetalle = new ArrayList<CerCertificadoDetalle>();

        //Save Certificado Header
        certificadoAdjuntos.getCerCertificado().setIndTieneFactura(Constants.NO);//Setter factura
        certificadoAdjuntos.getCerCertificado().setMtrEstado(mtrEstado);

        CerNotaPedido cerNotaPedido = certificadoAdjuntos.getCerCertificado().getCerNotaPedido();
        CerCertificado cerCertificado = certificadoAdjuntos.getCerCertificado();
        cerCertificado.setFechaAprobacion(null);
        certificadoAdjuntos.setCerCertificado(cerCertificado);
        CerCertificado cer = this.cerCertificadoDeltaRepository.save(certificadoAdjuntos.getCerCertificado());
        log.error("cerCertificadoDeltaRepository.save_pprincipe_8 :: " + cer.toString());
        log.error("saveAllCertificado 01 cer: (cer)" + cer.toString());
        certificadoAdjuntos.setCerCertificado(cer);

        ///Save Record into table cerHistorial
        if (certificadoAdjuntos.getTypeState().equals("P")) {
            log.error("saveAllCertificado B: ");
            CerHistorial cerHistorial = new CerHistorial();
            cerHistorial.setCerCertificado(certificadoAdjuntos.getCerCertificado());
            MtrEstado mtrEstadoPublicado = this.mtrEstadoDeltaRepository.
                    getByCodigoAgrupadoAndCodigoEstado(
                            Constants.CODIGO_AGRUPADO_CERTIFICADO,
                            EstadoCertificadoEnum.PUBLICADO.getEstado()
                    );
            cerHistorial.setMtrEstado(mtrEstadoPublicado);
            cerHistorial.setDescripcion(certificadoAdjuntos.getHistorialDescripcion());
            cerHistorial.setUsuarioHistoral(nombreCompleto);//get session user logo On portal
            cerHistorial.setFechaHistorial(DateUtils.obtenerFechaHoraActualMasSegundos(1));
            log.error("saveAllCertificado C cerHistorial: " + cerHistorial);
            this.cerHistorialDeltaRepository.save(cerHistorial);
        }

        CerHistorial cerHistorial02 = new CerHistorial();
        cerHistorial02.setCerCertificado(certificadoAdjuntos.getCerCertificado());
        cerHistorial02.setMtrEstado(mtrEstado);
        cerHistorial02.setDescripcion(certificadoAdjuntos.getHistorialDescripcion());
        cerHistorial02.setUsuarioHistoral(nombreCompleto);//get session user logo On portal
        cerHistorial02.setFechaHistorial(DateUtils.obtenerFechaHoraActualMasSegundos(2));
        log.error("saveAllCertificado C cerHistorial: " + cerHistorial02);
        this.cerHistorialDeltaRepository.save(cerHistorial02);


        //Save Certificado All Details and check Total
        if (!certificadoAdjuntos.getCerCertificadoDetalle().isEmpty())
            certificadoAdjuntos.getCerCertificadoDetalle().stream().forEach(detalleCertificado -> {
                //update-save one for one
                detalleCertificado.setCerCertificado(certificadoAdjuntos.getCerCertificado());
                BigDecimal totalLinea = detalleCertificado.getTotalLinea();
                if (Optional.ofNullable(totalLinea).isPresent()) {
                    totalLinea = totalLinea.setScale(2, BigDecimal.ROUND_HALF_UP);
                    detalleCertificado.setTotalLinea(totalLinea);
                }
                lcerCertificadoDetalle.add(cerCertificadoDetalleRepository.save(detalleCertificado));
                log.error("saveAllCertificado 0-05a");
            });

        log.error("saveAllCertificado D lcerCertificadoDetalle: " + lcerCertificadoDetalle.size());
        certificadoAdjuntos.setCerCertificadoDetalle(lcerCertificadoDetalle);

        if (state.equals(EstadoCertificadoEnum.PENDIENTE_FIRMA_B.getEstado())) {
            lcerCertificadoDetalle.stream().forEach(certficadD -> {
                CerNotaPedidoDetalle cerNotaPedidoDetalle = cerNotaPedidoDetalleRepository.getOne(
                        certficadD.getCerNotaPedidoDetalle().getId());

                BigDecimal cantidadEntregada = cerNotaPedidoDetalle.getCantidadEntregada();
                if (!Optional.ofNullable(cantidadEntregada).isPresent()) {
                    cantidadEntregada = new BigDecimal(0.00);
                }
                cantidadEntregada = new BigDecimal(cantidadEntregada.floatValue() +
                        certficadD.getCantidadAprobada().floatValue()).setScale(4, BigDecimal.ROUND_HALF_UP);
                cerNotaPedidoDetalle.setCantidadEntregada(cantidadEntregada);

                cerNotaPedidoDetalle = cerNotaPedidoDetalleRepository.save(cerNotaPedidoDetalle);
                log.error("Update field CantidadEntregada replace CantidadAprobada Certificado Detalle ", cerNotaPedidoDetalle);

            });

//            //Nota de Pedido
//            List<CerNotaPedidoDetalle> cerNotaPedidoDetalleVerificar =
//                    this.cerNotaPedidoDetalleDeltaRepository.findByCerNotaPedido(cerNotaPedido);
//            BigDecimal cantidadRequeridaSuma = new BigDecimal(0.0);
//            BigDecimal cantidadEntregadaSuma = new BigDecimal(0.0);
//            for (CerNotaPedidoDetalle cerNotaPedidoDetalle : cerNotaPedidoDetalleVerificar) {
//                cantidadRequeridaSuma = new BigDecimal(cantidadRequeridaSuma.floatValue() +
//                        cerNotaPedidoDetalle.getCantidadRequerida().floatValue());
//                cantidadEntregadaSuma = new BigDecimal(cantidadEntregadaSuma.floatValue() +
//                        cerNotaPedidoDetalle.getCantidadEntregada().floatValue());
//            }
//            if (cantidadRequeridaSuma.floatValue() > 0.00) {
//                if (cantidadRequeridaSuma.floatValue() == cantidadEntregadaSuma.floatValue()) {
//                    cerNotaPedido = this.cerNotaPedidoDeltaRepository.getOne(cerNotaPedido.getId());
//                    MtrEstado mtrEstadoNota = this.mtrEstadoDeltaRepository.
//                            getByCodigoAgrupadoAndCodigoEstado(
//                                    Constants.CODIGO_AGRUPADO_NOTA_PEDIDO,
//                                    EstadoNotaPedidoEnum.CERRADA.getEstado());
//                    cerNotaPedido.setMtrEstado(mtrEstadoNota);
//                    cerNotaPedido = this.cerNotaPedidoDeltaRepository.save(cerNotaPedido);
//                }
//            }
        }


        // Adjuntos
        List<CerDocumentoAdjunto> listAdjunto = certificadoAdjuntos.getAdjuntos();
        log.error("saveAllCertificado 02 listAdjunto: (size)" + listAdjunto.size());
        log.error("saveAllCertificado 03 listAdjunto: " + listAdjunto.toString());

        String nameFolder = "COGA-CERTIFICADO-" + mtrProveedor.getRuc() + "-" + cer.getId();
        log.error("saveAllCertificado 04 NOMBRE FOLDER " + nameFolder);


        //is Empty elements attach
        if (listAdjunto != null && listAdjunto.size() > 0) {
            //if (!listAdjunto.isEmpty()) {

            String folderId = cmisService.createFolder(nameFolder);
            log.debug("saveAllCertificado 05 FOLDER_DESTINO: " + folderId);

            //Creo una segunda lista con los adjuntos no guardados -
            List<CmisFile> listAdjuntoNew = new ArrayList<CmisFile>();
            if (listAdjunto.size() > 0) {
                listAdjunto.forEach(item -> {
                    listAdjuntoNew.add(
                            new CmisFile(item.getArchivoId(), item.getArchivoNombre(), item.getRutaCatalogo(), item.getArchivoTipo()));

                });
            }
            log.error("saveAllCertificado 06 - listAdjuntoNew: size: " + listAdjuntoNew.size());
            log.error("saveAllCertificado 07 - listAdjuntoNew: " + listAdjuntoNew.toString());


            //Se mueven los adjuntos al folder destino y se obtiene la lista de los mismos con su nuevo URL
            Optional<List<CmisFile>> listAdjuntoMove = Optional.ofNullable(listAdjuntoNew)
                    .map(list -> {
                        log.error("saveAllCertificado 08 - Actualizando la version de los archivos catalogos");
                        return cmisService.updateFileAndMove(listAdjuntoNew, folderId);
                    });
            log.error("saveAllCertificado 09");
            if (Optional.ofNullable(listAdjuntoMove.get()).isPresent()) {
                for (CmisFile cmisFile : listAdjuntoMove.get()) {
                    CerDocumentoAdjunto documento = new CerDocumentoAdjunto();
                    documento.setCarpetaId(folderId);
                    documento.setArchivoId(cmisFile.getId());
                    documento.setArchivoNombre(cmisFile.getName());
                    documento.setRutaCatalogo(cmisFile.getUrl());
                    documento.setArchivoTipo(cmisFile.getType());
                    documento.setSize(cmisFile.getSize());
                    documento.setTipoAdjunto("CER-OTROS");
                    documento.setCerCertificado(certificadoAdjuntos.getCerCertificado());//Setter Certificado
                    cerDocumentoAdjuntoDeltaRepository.save(documento);
                }
            }

        }

        //Get setting SMTP properties
        log.error("saveAllCertificado 10");
        MailSetting setting = new MailSetting();
        setting.setUser(username);
        setting.setEmailFrom(username);
        setting.setPassword(password);
        setting.setHost(host);
        setting.setNameFrom(username);
        setting.setPort(port);
        log.error("saveAllCertificado 11");
        log.error("saveAllCertificado 11a mtEstado: " + mtrEstado.toString());
        log.error("saveAllCertificado 11b setting: " + setting.toString());

        //When firt condition state is Code Group==CE and Code State==CECO them
        //send email to aproveer email adress and Code Signed is == FB is PUBLICATE
        if (mtrEstado.getCodigoAgrupado().equals(Constants.CODIGO_AGRUPADO_CERTIFICADO) &&
                (mtrEstado.getCodigoEstado().equals(EstadoCertificadoEnum.PUBLICADO.getEstado()) ||
                        mtrEstado.getCodigoEstado().equals(EstadoCertificadoEnum.PENDIENTE_FIRMA_B.getEstado())
                )
        ) {

            //Setter refence to AtomicReference...
            AtomicReference<MtrTipoFirma> AtomMtrTipoFirma = new AtomicReference<MtrTipoFirma>();

            MtrTipoFirma mtrTipoFirma = new MtrTipoFirma();
            mtrTipoFirma.setCodigoTipoFirma(TipoFirmaEnum.FIRMA_B.getEstado());
            mtrTipoFirmaDeltaService.find(mtrTipoFirma).forEach(LamdaMtrFirma -> {
                AtomMtrTipoFirma.set(LamdaMtrFirma);
            });
            log.error("saveAllCertificado 12");

            CerFirma cerfirma = new CerFirma();
            cerfirma.setCerNotaPedido(cer.getCerNotaPedido());
            cerfirma.setMtrTipoFirma(AtomMtrTipoFirma.get());

            log.error("saveAllCertificado 13");

            //enviando correo aprobadores firma B
            cerFirmaDeltaService.find(cerfirma).stream().forEach(eSignature -> {
                log.error("saveAllCertificado 14");
                log.info("Sending alert to" + eSignature.getMtrAprobador().getEmail());
                if (eSignature.getMtrAprobador().getEmail() != null)
                    try {
                        log.error("saveAllCertificado 15");
                        creacionCertificadoNotificacion.enviarFirma(setting,
                                eSignature.getMtrAprobador(),
                                eSignature.getMtrAprobador().getEmail(),//Here---> Aproveer email changed when address is correct
                                cer);
                    } catch (IOException ex) {
                        log.error("saveAllCertificado error 16");
                        ex.printStackTrace();
                        log.error("Error in send smtp -> " + ex);
                    }

            });

            //enviando correo al proveedor
            creacionCertificadoNotificacion.enviarProveedor(setting,
                    mtrProveedor,
                    mtrProveedor.getEmailContacto(),//Here---> Aproveer email changed when address is correct
                    cer);

        }
        log.error("saveAllCertificado 18");
        //When second condition state is Group==CE and Code State==CEBO them send Alert to
        if (mtrEstado.getCodigoAgrupado().equals(Constants.CODIGO_AGRUPADO_CERTIFICADO) &&
                mtrEstado.getCodigoEstado().equals(EstadoCertificadoEnum.BORRADOR.getEstado())) {
        }

        log.error("saveAllCertificado FIN");
        return certificadoAdjuntos;
    }


    private void validacionesPreviasSaveCertificado(
            CertificadoCabezeraDetallesAdjuntosDto certificadoAdjuntos,
            boolean insertar
    ) throws Exception {
        CerCertificado cerCertificado = certificadoAdjuntos.getCerCertificado();
        CerNotaPedido cerNotaPedido = cerCertificado.getCerNotaPedido();

        Optional<CerNotaPedido> optionalCerNotaPedido = this.cerNotaPedidoDeltaRepository.findById(cerNotaPedido.getId());
        if (!optionalCerNotaPedido.isPresent()) {
            throw new Exception("No se encontrÃ³ Nota de Pedido con ID: " + cerNotaPedido.getId());
        }
        cerNotaPedido = optionalCerNotaPedido.get();

        certificadoAdjuntos.getCerCertificado().setCerNotaPedido(cerNotaPedido);
        MtrEstado mtrEstadoNotaPedido = cerNotaPedido.getMtrEstado();
        if (!mtrEstadoNotaPedido.getCodigoEstado().equals(EstadoNotaPedidoEnum.ACUSE_RECIBO.getEstado())) {
            throw new Exception("Nota de Pedido se encuentra en estado diferente a: " + mtrEstadoNotaPedido.getDescripcion() + ". No es posible Grabar Certificado");
        }

        if (!insertar) {
            CerCertificado cerCertificadoBD = this.cerCertificadoDeltaRepository.getOne(cerCertificado.getId());
            MtrEstado mtrEstadoCertificado = cerCertificadoBD.getMtrEstado();
            if (!mtrEstadoCertificado.getCodigoEstado().equals(EstadoCertificadoEnum.BORRADOR.getEstado())) {
                throw new Exception("Certificado se encuentra en estado diferente a: " + mtrEstadoCertificado.getDescripcion() + ". No es posible Grabar Certificado");
            }
        }
        if (cerCertificado.getMontoTotal().floatValue() <= 0) {
            throw new Exception("Monto Total del Certificado debe ser mayor a CERO");
        }

        List<CerCertificadoDetalle> certificadoDetalleList = certificadoAdjuntos.getCerCertificadoDetalle();
        if (certificadoDetalleList != null && certificadoDetalleList.size() > 0) {

            for (CerCertificadoDetalle beanDetalle : certificadoDetalleList) {
                Optional<CerNotaPedidoDetalle> optionalDetalle = this.cerNotaPedidoDetalleRepository.
                        findById(beanDetalle.getCerNotaPedidoDetalle().getId());
                if (!optionalDetalle.isPresent()) {
                    throw new Exception("No se encontrÃ³ Nota Pedido Detalle con ID: " +
                            beanDetalle.getCerNotaPedidoDetalle().getId());
                }
                CerNotaPedidoDetalle cerNotaPedidoDetalle = optionalDetalle.get();

                BigDecimal cantidadRequerida = cerNotaPedidoDetalle.getCantidadRequerida();
                beanDetalle.setCantidadTotal(cantidadRequerida.setScale(4, BigDecimal.ROUND_HALF_UP));
                BigDecimal cantidadPendiente =
                        new BigDecimal(cantidadRequerida.floatValue() - beanDetalle.getCantidadAprobada().floatValue());
                beanDetalle.setCantidadPendiente(cantidadPendiente.setScale(4, BigDecimal.ROUND_HALF_UP));
//                if (cantidadPendiente.floatValue() < 0) {
//                    throw new Exception("Cantidad Pendiente : " + cantidadPendiente.floatValue() + " es menor a Cero");
//                }

                BigDecimal cantidadEntregada = cerNotaPedidoDetalle.getCantidadEntregada();
                if (!Optional.ofNullable(cantidadEntregada).isPresent()) {
                    cantidadEntregada = new BigDecimal(0.00);
                }

                cantidadEntregada = new BigDecimal(
                        cantidadEntregada.floatValue() + beanDetalle.getCantidadAprobada().floatValue());

//                if (cantidadEntregada.floatValue() > cantidadRequerida.floatValue()) {
//                    throw new Exception("Suma Cantidad Entregada: " + cantidadEntregada.floatValue() +
//                            " es mayor a la Cantidad Requerida: " + cantidadRequerida.floatValue() +
//                            " correspondiente a la PosiciÃ³n " + cerNotaPedidoDetalle.getPosicionSap() +
//                            " de la Nota de Pedido: " + cerNotaPedido.getCodigoNotaPedidoSap());
//                }

                BigDecimal totalLinea = new BigDecimal(beanDetalle.getPrecioUnitario().floatValue() * beanDetalle.getCantidadAprobada().floatValue());
                beanDetalle.setTotalLinea(totalLinea.setScale(2, BigDecimal.ROUND_HALF_UP));
                BigDecimal totalLineaAjustado = new BigDecimal(totalLinea.floatValue() - beanDetalle.getDescuento().floatValue());
                beanDetalle.setTotalLineaAjustado(totalLineaAjustado.setScale(2, BigDecimal.ROUND_HALF_UP));
            }
        }
    }


    @Override
    public List<MensajeSap> ejecutarWorkflow(OperacionCertificado operacion) throws Exception {
        if (this.appParametriaDeltaService.devuelveApagarCertificado()) {
            throw new Exception(Constants.MENSAJE_SISTEMA_APAGADO);
        }


        log.error("Inicio ejecutarWorkflow - OperacionCertificado: " + operacion.toString());
        Map<String, String> operations = new HashMap<String, String>();
        operations.put("AB", "AprobaciÃ³n firma A");
        operations.put("AA", "AprobaciÃ³n firma B");
        operations.put("A", "AprobaciÃ³n");
        operations.put("R", "Rechazo");
        List<MensajeSap> listaMensaje = new ArrayList<MensajeSap>();
        List<MensajeHes> listaHes = new ArrayList<MensajeHes>();
       /* if() {certificado.setMtrEstado

        }*/
        Pattern pattern = Pattern.compile("-?\\d+(\\.\\d+)?");
        //MensajeSap msg = new MensajeSap("S", "", "La operaciÃ³n " + operations.get(operacion.getOperacion()).toString() +" se realizÃ³ correctamente");
        CerCertificado certificado = this.cerCertificadoDeltaRepository.getOne(operacion.getIdCertificado());
        //CerNotaPedido notaPedido = certificado.getCerNotaPedido();
        List<CerFirma> listaFirma = this.cerFirmaDeltaRepository.getByCodeNotaPedido(certificado.getCerNotaPedido().getId());
        List<MtrTipoFirma> listaTipoFirma = this.mtrTipoFirmaDeltaRepository.findAll();
        log.error(" ejecutarWorkflow :: listaFirma.size() : " + listaFirma.size());
        UserSession user = this.systemLoggedUser.getUserSession();
        String nombreCompleto = user.getFirstName() + " " + user.getLastName();
        String nombreCompletoAux = nombreCompleto;
        String loginName = operacion.getLoginName();
        log.error("ejecutarWorkflow :: Operacion Ruc usuario : " + user.getRuc());
        log.error("ejecutarWorkflow :: user.toString() :: " + user.toString() + " :: " + user.getDisplayName());
        String emailFirmaA = "";
        String emailFirmaB = "";
        String nombreAprobadorA = "";
        String nombreAprobadorB = "";
        String aprobadorFirmaB = "";
        boolean flagCreacionHes = false;

        int countFirmaA = 0;
        int countFirmaB = 0;

        boolean apruebaFirmaA = false;
        boolean apruebaFirmaB = false;
        for (CerFirma cerFirma : listaFirma) {
            log.error("ejecutarWorkflow :: cerFirma.getMtrTipoFirma().getCodigoTipoFirma() ::: " + cerFirma.getMtrTipoFirma().getCodigoTipoFirma());
            if (cerFirma.getMtrTipoFirma().getCodigoTipoFirma().equalsIgnoreCase("FB")) {
                countFirmaB++;
                apruebaFirmaB = true;
                if (countFirmaB == 1) {
                    emailFirmaB = cerFirma.getMtrAprobador().getEmail();
                    nombreAprobadorB = cerFirma.getMtrAprobador().getNombre() + " " + cerFirma.getMtrAprobador().getApellidos();

                } else {
                    emailFirmaB = emailFirmaB + "," + cerFirma.getMtrAprobador().getEmail();
                }
                /*if (!StringUtils.isBlank(user.getRuc()) && user.getRuc().trim().equalsIgnoreCase(cerFirma.getMtrAprobador().getAprobadorSap().trim()))
                    aprobadorFirmaB = cerFirma.getMtrAprobador().getAprobadorSap();*/

            }

            if (cerFirma.getMtrTipoFirma().getCodigoTipoFirma().equalsIgnoreCase("FA")) {
                countFirmaA++;
                apruebaFirmaA = true;
                if (countFirmaA == 1) {
                    emailFirmaA = cerFirma.getMtrAprobador().getEmail();
                    nombreAprobadorA = cerFirma.getMtrAprobador().getNombre() + " " + cerFirma.getMtrAprobador().getApellidos();
                } else {
                    emailFirmaA = emailFirmaA + "," + cerFirma.getMtrAprobador().getEmail();
                }

            }

        }
        log.error("ejecutarWorkflow : apruebaFirmaB : " + apruebaFirmaB);
        log.error("ejecutarWorkflow : apruebaFirmaA : " + apruebaFirmaA);
        String currentOpe = operacion.getOperacion();
        //Inicio aprobadores
        MtrAprobador aprobador = null;
        CerFirma cerFirma = null;
        if (currentOpe.equalsIgnoreCase("AB") || currentOpe.equalsIgnoreCase("AA")) {
            //log.error("user.toString() :: " + user.toString());
            String descTipoFirma = "";
            if (currentOpe.equalsIgnoreCase("AB"))
                descTipoFirma = "FB";
            else if (currentOpe.equalsIgnoreCase("AA"))
                descTipoFirma = "FA";

            log.error("ejecutarWorkflow :: Cerfirma 1 :: ");

            aprobador = this.mtrAprobadorDeltaRepository.getByAprobadorSap(loginName);
            log.error("ejecutarWorkflow ::: aprobador ::: " + aprobador);

            if (aprobador != null) {
                if (currentOpe.equalsIgnoreCase("AB"))
                    aprobadorFirmaB = aprobador.getAprobadorSap();

                log.error("ejecutarWorkflow ::: Cerfirma 2 :: ");
                String finalDescTipoFirma = descTipoFirma;
                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                        .filter(x -> finalDescTipoFirma.equalsIgnoreCase(x.getCodigoTipoFirma()))
                        .findFirst();
                if (optionalTipoFirma.isPresent()) {
                    log.error("ejecutarWorkflow ::: Cerfirma 3 :: ");
                    cerFirma = this.cerFirmaDeltaRepository.getByUniqueCode(certificado.getCerNotaPedido().getId(), optionalTipoFirma.get().getId(), aprobador.getId());
                }
            }

        }
        //Fin aprobadores

        String codeNextEstado = "";
        String codeEstadoHistorial = "";
        //boolean flagCreaHes = true;
        //String codigoHes = "";
        //String descTipoFirma = "";
        String emailDestinatarios = "";
        String nombreDestinatario = "";
        //String codigoTipoFirma = "";
        log.error("ejecutarWorkflow :: currentOpe.equalsIgnoreCase(AB)");
        if (currentOpe.equalsIgnoreCase("AB")) {
            List<CerCertificadoDetalle> listaDetalleAux = this.cerCertificadoDetalleDeltaRepository.findByCerCertificado(certificado);
            log.error("ejecutarWorkflow listaDetalleAux_1 " + listaDetalleAux);
            boolean flagCuentaImputacion = false;
            boolean flagCuentaMayor = false;
            if (listaDetalleAux != null && listaDetalleAux.size() > 0) {
                if (listaDetalleAux.get(0).getCerNotaPedidoDetalle().getMtrCuentaImputacion() != null)
                    flagCuentaImputacion = true;
                if (listaDetalleAux.get(0).getCerNotaPedidoDetalle().getMtrCuentaMayor() != null)
                    flagCuentaMayor = true;
            }
            log.error("ejecutarWorkflow listaDetalleAux_1 " + flagCuentaImputacion + " " + flagCuentaMayor);
            if (!this.validarCertificadoCerrado(certificado) &&
                    certificado.getCerNotaPedido().getTipo().equalsIgnoreCase("S")
                            ) {
            /*if (!this.validarCertificadoCerrado(certificado) &&
                    (certificado.getCerNotaPedido().getTipo().equalsIgnoreCase("S") ||
                            (certificado.getCerNotaPedido().getTipo().equalsIgnoreCase("M") && flagCuentaImputacion && flagCuentaMayor))) {*/
                log.error("ejecutarWorkflow AB:: OOK");
                List<MensajeSap> listaSapMensajeValidacion = this.sapRfcDeltaService.validarPresupuesto(certificado);
                if (listaSapMensajeValidacion != null && listaSapMensajeValidacion.size() > 0) {
                    log.error("ejecutarWorkflow AB:: OOK_0 " + listaSapMensajeValidacion);
                    Optional<MensajeSap> optionalMensajeAux = listaSapMensajeValidacion.stream()
                            .filter(x -> "E".equalsIgnoreCase(x.getType()))
                            .findFirst();
                    if (optionalMensajeAux.isPresent()) {
                        log.error("ejecutarWorkflow AB:: OOK_1 ");
                        return listaSapMensajeValidacion;

                    }
                }

                log.error("ejecutarWorkflow AB:: OOK_PASO_VALIDACION_PRESUPUESTO ");
            }

            //codigoTipoFirma = "FB";
            //descTipoFirma = "FB";
            if (apruebaFirmaA) {
                codeNextEstado = "CEFA";
                codeEstadoHistorial = "CEFA";
                //msg = new MensajeSap("S", "", "La AprobaciÃ³n de la Firma B se realizÃ³ correctamente");
                listaMensaje.add(new MensajeSap("S", "", "La AprobaciÃ³n de la Firma B se realizÃ³ correctamente"));
                emailDestinatarios = emailFirmaA;
                nombreDestinatario = nombreAprobadorA;

            } else {
                codeNextEstado = "CEAP";
                codeEstadoHistorial = "CEAP";
                //Invocar Rfc de creaciÃ³n Hes
                //msg = this.crearHes(certificado);
                listaHes = this.crearHes(certificado, aprobadorFirmaB, aprobador);

                String aprobadorSap = "";
                if(aprobador != null)
                    aprobadorSap = aprobador.getAprobadorSap();
                this.guardarLogCreacionHes(listaHes, aprobadorFirmaB, aprobadorSap,  codeNextEstado, certificado.getId(), "masivo");

                log.error("ejecutarWorkflow_1_listaHes :: " + listaHes);
                MensajeSap msgAuxiliarValidacion = (this.validarResultadoCreacionHes(listaHes));
                log.error("ejecutarWorkflow_1_msgAuxiliarValidacion :: " + msgAuxiliarValidacion);
                if(msgAuxiliarValidacion != null) {
                    log.error("MASIVO:: OOK ::: " + msgAuxiliarValidacion);
                    listaMensaje = new ArrayList<MensajeSap>();
                    listaMensaje.add(msgAuxiliarValidacion);
                    return listaMensaje;
                }

                emailDestinatarios = certificado.getCerNotaPedido().getMtrProveedor().getEmailContacto();
                nombreDestinatario = certificado.getCerNotaPedido().getMtrProveedor().getRazonSocial();
                flagCreacionHes = true;
                //codigoHes = msg.getCode();
                //Se aprobÃ³ el certificado con la HES "XXXX
            }

        }
        log.error("ejecutarWorkflow :::: AA ");
        if (currentOpe.equalsIgnoreCase("AA")) {
            log.error("ejecutarWorkflow :: AA:: OOK");
            //descTipoFirma = "FA";
            codeNextEstado = "CEAP";
            codeEstadoHistorial = "CEAP";
            //codigoTipoFirma = "FA";
            List<CerCertificadoFirma> listaCertificadoFirma = cerCertificadoFirmaDeltaRepository.findByCertificadoAndTipoFirma(certificado.getId(), "FB");
            if (listaCertificadoFirma != null) {
                Optional<CerCertificadoFirma> optionalCertifFirma = listaCertificadoFirma.stream()
                        .filter(x -> "FB".equalsIgnoreCase(x.getCerFirma().getMtrTipoFirma().getCodigoTipoFirma()))
                        .findFirst();
                if (optionalCertifFirma.isPresent())
                    aprobadorFirmaB = optionalCertifFirma.get().getCerFirma().getMtrAprobador().getAprobadorSap();
            }
            //Invocar Rfc de creaciÃ³n Hes
            //msg = this.crearHes(certificado);
            //codigoHes = msg.getCode();

            listaHes = this.crearHes(certificado, aprobadorFirmaB, aprobador);

            String aprobadorSap = "";
            if(aprobador != null)
                aprobadorSap = aprobador.getAprobadorSap();
            this.guardarLogCreacionHes(listaHes, aprobadorFirmaB, aprobadorSap,  codeNextEstado, certificado.getId(), "masivo");

            log.error("ejecutarWorkflow_2_listaHes :: " + listaHes);
            MensajeSap msgAuxiliarValidacion = (this.validarResultadoCreacionHes(listaHes));
            log.error("ejecutarWorkflow_2_msgAuxiliarValidacion :: " + msgAuxiliarValidacion);
            if(msgAuxiliarValidacion != null) {
                log.error("MASIVO:: OOK ::: " + msgAuxiliarValidacion);
                listaMensaje = new ArrayList<MensajeSap>();
                listaMensaje.add(msgAuxiliarValidacion);
                return listaMensaje;
            }
            emailDestinatarios = certificado.getCerNotaPedido().getMtrProveedor().getEmailContacto();
            nombreDestinatario = certificado.getCerNotaPedido().getMtrProveedor().getRazonSocial();
            flagCreacionHes = true;
            //Se aprobÃ³ el certificado con la HES "XXXX
        }
        if (currentOpe.equalsIgnoreCase("A")) {
            codeNextEstado = "CEAP";
            codeEstadoHistorial = "CEAP";
        }

        if (currentOpe.equalsIgnoreCase("RB")) {
            listaMensaje.add(new MensajeSap("S", "", "Rechazo de la Firma B se realizÃ³ correctamente"));
            if (!StringUtils.isBlank(certificado.getIndCreacionAutomatica()) && certificado.getIndCreacionAutomatica().equalsIgnoreCase("S"))
                codeNextEstado = "CERE";
            else
                codeNextEstado = "CEBO";

            codeEstadoHistorial = "CERE";
            //codigoTipoFirma = "FB";
            emailDestinatarios = certificado.getCerNotaPedido().getMtrProveedor().getEmailContacto() + "," + certificado.getCerNotaPedido().getEmailUserCompra();
            nombreDestinatario = certificado.getCerNotaPedido().getMtrProveedor().getRazonSocial();
        }
        log.error("ejecutarWorkflow ::: RA");
        if (currentOpe.equalsIgnoreCase("RA")) {
            listaMensaje.add(new MensajeSap("S", "", "Rechazo de la Firma A se realizÃ³ correctamente"));
            emailDestinatarios = emailFirmaB;
            nombreDestinatario = nombreAprobadorB;
            //codigoTipoFirma = "FA";
            if (!StringUtils.isBlank(certificado.getIndCreacionAutomatica()) && certificado.getIndCreacionAutomatica().equalsIgnoreCase("S"))
                codeNextEstado = "CERE";
            else
                codeNextEstado = "CEFB";

            codeEstadoHistorial = "CERE";
        }

        String breakLine = System.lineSeparator();
        log.error("ejecutarWorkflow  codeNextEstado :: " + codeNextEstado);
        log.error("ejecutarWorkflow codeNextEstadoHistorial :: " + codeEstadoHistorial);
        //Guardar log de SAP creacion de Hes
        log.error("ejecutarWorkflow listaHes.size :: " + listaHes.size());
        String textoSapAdicional = "";
        String textoSapAdicionalAux = "";
        String auxCodeEntrega = "XYZ";
        BigDecimal totalImporteAjustado = new BigDecimal("0.0");
        MtrEstado estadoRechazoGeneral = this.mtrEstadoDeltaRepository.getByCodigoAgrupadoAndCodigoEstado("CE", "CERE");
        String textoMensajeSapError = "";
        String textoMensajeSapErrorDetalle = "";
        List<MensajeSap> listaAuxiliar = new ArrayList<MensajeSap>();
        log.error("ejecutarWorkflow  textoMensajeSap :: ");
        for (MensajeHes hes : listaHes) {
            log.error("ejecutarWorkflow hes.getMsg().getCode() : " + hes.getMsg().getCode() + " - " + hes.getMsg().getTexto());
            if (!StringUtils.isBlank(hes.getMsg().getCode())) {
                CerCertificadoDetalleSap detSap = new CerCertificadoDetalleSap();
                detSap.setCerCertificadoDetalle(hes.getCertDetalle());
                detSap.setDocumentoGenerado((hes.getMsg().getCode().trim().equalsIgnoreCase("SAP")) ? null : hes.getMsg().getCode());
                detSap.setTextoError(hes.getMsg().getTexto());//pprincipe add
                detSap.setPosicionSap(hes.getCertDetalle().getCerNotaPedidoDetalle().getPosicionSap());
                this.cerCertificadoDetalleSapDeltaRepository.save(detSap);
                //textoSapAdicional = textoSapAdicional + " " + hes.getMsg().getTexto() + "" + breakLine;
                if (!StringUtils.isBlank(textoSapAdicional))
                    textoSapAdicional = textoSapAdicional + "///" + hes.getMsg().getTexto();
                else
                    textoSapAdicional = hes.getMsg().getTexto();

                if (!StringUtils.isBlank(hes.getMsg().getType()) && hes.getMsg().getType().equalsIgnoreCase("S")) {
                    if(certificado.getCerNotaPedido().getTipo().equalsIgnoreCase("S")) {
                        if (!hes.getMsg().getCode().equalsIgnoreCase(auxCodeEntrega)) {
                            log.error("hes.getImporte() ::: " + hes.getImporte());
                            if (!StringUtils.isBlank(hes.getImporte()))
                                totalImporteAjustado = totalImporteAjustado.add(new BigDecimal(hes.getImporte().trim()));
                        }
                    }else {//Materiales
                        if (!StringUtils.isBlank(hes.getImporte()))
                            totalImporteAjustado = new BigDecimal(hes.getImporte().trim());
                    }
                    auxCodeEntrega = hes.getMsg().getCode();
                }

                if (!StringUtils.isBlank(hes.getMsg().getType()) && hes.getMsg().getType().equalsIgnoreCase("E")) {
                    //textoMensajeSapError = textoMensajeSapError + " " + hes.getMsg().getTexto() + "" + breakLine;
                    textoMensajeSapError = "Rechazo error SAP";
                    //textoMensajeSap = textoMensajeSap + breakLine;
                    if (!StringUtils.isBlank(textoMensajeSapErrorDetalle))
                        textoMensajeSapErrorDetalle = textoMensajeSapErrorDetalle + "///" + hes.getMsg().getTexto();
                    else
                        textoMensajeSapErrorDetalle = hes.getMsg().getTexto();
                }


            }
            if (hes.getMsg().getType().equalsIgnoreCase("E"))
                listaAuxiliar.add(hes.getMsg());

            listaMensaje.add(hes.getMsg());

        }
        textoSapAdicionalAux = textoSapAdicional;

        if (certificado.getMontoTotalAdjustado() != null && totalImporteAjustado != null) {
            if(certificado.getCerNotaPedido().getTipo().equalsIgnoreCase("S")){
                totalImporteAjustado = certificado.getMontoTotalAdjustado().add(totalImporteAjustado).setScale(2, BigDecimal.ROUND_HALF_EVEN);
                log.error("CBAZALAR ejecutarWorkflow 23_1 - servicex");
            }

        }

        //gUARDAR TEXTO DEVUELTO POR SAP EN HISTORIAL  SOLO PARA ERRORES
        //Guardar error de SAP en historialx
        log.error("ejecutarWorkflow textoMensajeSap ::: " + textoMensajeSapError);

        boolean errorSapAprobacionA = false;//Error SAP
        if (!StringUtils.isBlank(textoMensajeSapError)) {

            if (currentOpe.equalsIgnoreCase("AA")) {
                log.error("ejecutarWorkflow currentOpe.equalsIgnoreCase(AA) ::: ");
                operacion.setDescripcion("");
                currentOpe = "RA";
                nombreCompletoAux = "SAP";
                errorSapAprobacionA = true;
                emailDestinatarios = emailFirmaB;
                nombreDestinatario = nombreAprobadorB;
                textoSapAdicionalAux = textoMensajeSapErrorDetalle;

                listaMensaje.removeIf(e -> e.getType().equalsIgnoreCase("E"));
                //codigoTipoFirma = "FA";
                if (!StringUtils.isBlank(certificado.getIndCreacionAutomatica()) && certificado.getIndCreacionAutomatica().equalsIgnoreCase("S"))
                    codeNextEstado = "CERE";
                else
                    codeNextEstado = "CEFB";

                codeEstadoHistorial = "CERE";

            } else {
                CerHistorial cerHistorialSap = new CerHistorial();
                cerHistorialSap.setCerCertificado(certificado);
                cerHistorialSap.setDescripcion(textoMensajeSapError);
                cerHistorialSap.setMtrEstado(estadoRechazoGeneral);
                cerHistorialSap.setUsuarioHistoral("SAP");
                cerHistorialSap.setFechaHistorial(DateUtils.obtenerFechaHoraActualMasSegundos(1));
                CerHistorial cerHistorialSapOut = this.cerHistorialDeltaRepository.save(cerHistorialSap);

                String[] msgAux = textoMensajeSapErrorDetalle.split("///");

                for (String ele : msgAux) {
                    //System.out.println("" + ele);
                    if (!StringUtils.isBlank(ele)) {
                        CerHistorialDetalleSap detHistorial = new CerHistorialDetalleSap();
                        detHistorial.setCerHistorial(cerHistorialSapOut);
                        detHistorial.setDescripcion(ele);
                        detHistorial.setPosicionSap("");
                        this.cerHistorialDetalleSapDeltaRepository.save(detHistorial);
                    }

                }
            }
        }
        //if(!StringUtils.isBlank(textoSapAdicionalAux)) {
        //   operacion.setDescripcion(operacion.getDescripcion());
        //operacion.setDescripcion(operacion.getDescripcion() + " " + breakLine + textoSapAdicionalAux);
        //}

        log.error("ejecutarWorkflow codeNextEstado :: " + codeNextEstado);
        log.error("ejecutarWorkflow codeNextEstadoHistorial :: " + codeEstadoHistorial);

        //Fin

        /*for (MensajeHes hes : listaHes) {
            listaMensaje.add(hes.getMsg());
            log.error("hes.getMsg() :: " + hes.getMsg());
        }*/

        log.error("ejecutarWorkflow ::: optionalMensaje22 :: " + cerFirma);
        log.error("ejecutarWorkflow listaMensaje :: " + listaMensaje);
        //Verificar si por lo menos hay un error
        Optional<MensajeSap> optionalMensaje = listaMensaje.stream()
                .filter(x -> "E".equalsIgnoreCase(x.getType()))
                .findFirst();
        log.error("ejecutarWorkflow ::: optionalMensaje23 :: ");
        int ind_error_previo = 1;
        Integer idCerFirma = (cerFirma != null) ? cerFirma.getId() : 0;
        int indCreacionHes = (flagCreacionHes) ? 1 : 0;

        String newCode = "";
        if (flagCreacionHes && !StringUtils.isBlank(certificado.getIndCreacionAutomatica()) && certificado.getIndCreacionAutomatica().equalsIgnoreCase("S")) {
            newCode = this.obtenerCodeCertificadoHijo(certificado.getCodigoCertificado(), certificado.getId());
        }
        log.error("ejecutarWorkflow ::: optionalMensaje24 :: " + newCode);
        //if (!optionalMensaje.isPresent() && listaMensaje.size() > 0)
        if (!optionalMensaje.isPresent())
            ind_error_previo = 0;

        MensajeSap msgHana = new MensajeSap("", "", "");
        //String operacionSp = (!StringUtils.isBlank(operacion.getOperacion())) ? operacion.getOperacion() : "";
        textoMensajeSapError = (!StringUtils.isBlank(textoMensajeSapError)) ? textoMensajeSapError : "";
        loginName = (!StringUtils.isBlank(loginName)) ? loginName : "";
        totalImporteAjustado = (totalImporteAjustado != null) ? totalImporteAjustado : new BigDecimal("0.0");
        nombreCompleto = (!StringUtils.isBlank(nombreCompleto)) ? nombreCompleto : "";
        String operacioDescSp = (!StringUtils.isBlank(operacion.getDescripcion())) ? operacion.getDescripcion() : "";
        newCode = (!StringUtils.isBlank(newCode)) ? newCode : "";
        if (!StringUtils.isBlank(textoSapAdicionalAux) && textoSapAdicionalAux.length() > 3999)
            textoSapAdicionalAux = textoSapAdicionalAux.substring(0, 3999);

        log.error("ejecutarWorkflow ::: datos masivo :: " + operacion.getIdCertificado() + " currentope: "
                + currentOpe + " codeNextEstado: " + codeNextEstado + " codeEstadoHistorial: " + codeEstadoHistorial +
                " textoMensajeSap: " + textoMensajeSapError + " loginName: " + loginName + " ind_error_previo: " +
                ind_error_previo + " totalImporteAjustado: " + totalImporteAjustado + " nombreCompleto: " + nombreCompleto + " nombreCompletoAux: " + nombreCompletoAux
                + " operacion.getDescripcion(): " + operacioDescSp + " idCerFirma: " + idCerFirma
                + " indCreacionHes: " + indCreacionHes + " newCode: " + newCode + " textoSapAdicionalAux: " + textoSapAdicionalAux + " msgSap: " + msgHana);
        this.cerCertificadoMapper.registrarDatosAprobacion(operacion.getIdCertificado(),
                currentOpe,
                codeNextEstado,
                codeEstadoHistorial,
                //textoMensajeSapError,
                loginName, ind_error_previo,
                totalImporteAjustado, nombreCompleto,
                nombreCompletoAux,
                operacioDescSp, idCerFirma,
                indCreacionHes, newCode, textoSapAdicionalAux, msgHana);
        log.error("ejecutarWorkflow ::: optionalMensaje25 :: " + msgHana);
        if (msgHana.getType().equalsIgnoreCase("S")) {
            MtrEstado estado = this.mtrEstadoDeltaRepository.getByCodigoAgrupadoAndCodigoEstado("CE", codeNextEstado);
            MailSetting setting = new MailSetting();
            setting.setEmailFrom(username);
            setting.setPassword(password);
            setting.setHost(host);
            setting.setNameFrom(username);
            setting.setPort(port);
            setting.setUser(username);
            log.error("ejecutarWorkflow certificadoNotificacion.enviarMail ::. ");
            this.certificadoNotificacion.enviarMail(setting, nombreDestinatario, certificado.getMtrProveedor(), estado, certificado, emailDestinatarios);
        }
        if (msgHana.getType().equalsIgnoreCase("E")) {
            listaMensaje.add(msgHana);
        }
        log.error("ejecutarWorkflow :: errorSapAprobacionA " + errorSapAprobacionA);
        log.error("ejecutarWorkflow :: errorSapAprobacionA lista " + listaAuxiliar);
        if (listaAuxiliar.size() > 0 && errorSapAprobacionA) {
            for (MensajeSap ele : listaAuxiliar) {
                listaMensaje.add(ele);
            }
        }
        log.error("Fin ejecutarWorkflow - OperacionCertificado: " + operacion.toString());
        return listaMensaje;

    }

    public String obtenerCodeCertificadoHijo(String code, Integer idCertificado) {
        // String code = certificado.getCodigoCertificado();
        Pattern pattern = Pattern.compile("-?\\d+(\\.\\d+)?");
        if (!StringUtils.isBlank(code)) {
            log.error("Actualizar Operacion_s :: !StringUtils.isBlank(code)");
                        /*int newCount = Integer.parseInt( code.substring(code.length() - 1));
                        newCount = newCount + 100;
                        code = code.substring(0,code.length() - 1) + "" + newCount;
                        certifAdicional.setCodigoCertificado(code);*/
            String[] codes = code.split("-");
                        /*if (pattern.matcher(codes[codes.length - 2]).matches()) {
                            code = code.substring(0,code.length() - 3);
                        }else {
                            code = code.substring(0,code.length() - 1);
                        }*/
            String codeAux = "";
            if (pattern.matcher(codes[codes.length - 2]).matches()) {
                codeAux = codes[0];
                for (int i = 1; i < codes.length - 1; i++) {

                    codeAux = codeAux + "-" + codes[i];
                }
                code = code.substring(0, code.length() - 3);
            } else {
                codeAux = code;
            }

            code = codeAux + "-" + idCertificado;

            //certifAdicional.setCodigoCertificado(code);
        } else {
            code = "";
        }
        return code;
    }

    @Override
    public List<MensajeSap> actualizarHes(ActualizaHesInput input) throws Exception {
        List<MensajeSap> lista = new ArrayList<MensajeSap>();
        Optional<CerCertificado> certificadoOptional = this.cerCertificadoDeltaRepository.findById(input.getIdCertificado());
        if (!certificadoOptional.isPresent()) {
            throw new Exception("No existe Certificado con id " + input.getIdCertificado());
        }
        CerCertificado certificado = certificadoOptional.get();


        MtrEstado mtrEstadoAprobacion = this.mtrEstadoDeltaRepository.
                getByCodigoAgrupadoAndCodigoEstado(
                        Constants.CODIGO_AGRUPADO_CERTIFICADO,
                        EstadoCertificadoEnum.APROBADO.getEstado());

        boolean flagActualizo = false;
        log.error("actualizarHes ");
        if (certificado.getCerNotaPedido().getTipo().equalsIgnoreCase("M")) {//Materiales
            List<CerCertificadoDetalle> listaDetalleCertificado = this.cerCertificadoDetalleDeltaRepository.findByCerCertificado(certificado);
            log.error("actualizarHes_1 " + listaDetalleCertificado);
            if (listaDetalleCertificado != null && listaDetalleCertificado.size() > 0) {
                for (CerCertificadoDetalle ele : listaDetalleCertificado) {
                    List<CerCertificadoDetalleSap> detalleSapList = this.cerCertificadoDetalleSapDeltaRepository.findByCertificadoDetalleId(ele.getId());
                    log.error("actualizarHes_2 " + detalleSapList);
                    CerCertificadoDetalleSap detalleSap = new CerCertificadoDetalleSap();
                    if (detalleSapList != null && detalleSapList.size() > 0) {
                        detalleSap = detalleSapList.get(0);

                        detalleSap.setPosicionSap(ele.getCerNotaPedidoDetalle().getPosicionSap());
                        detalleSap.setDocumentoGenerado(input.getNumeroHes());
                        detalleSap.setCerCertificadoDetalle(ele);
                        this.cerCertificadoDetalleSapDeltaRepository.save(detalleSap);

                    }


                }
            }
            flagActualizo = true;
        } else {//Servicios
            log.error("actualizarHes_3 " + input.getLista());
            if (input.getLista() != null && input.getLista().size() > 0) {
                for (CertificadoDetalleInput ele : input.getLista()) {
                    CerCertificadoDetalle eleDetalle = this.cerCertificadoDetalleDeltaRepository.getOne(ele.getIdDetalle());
                    List<CerCertificadoDetalleSap> detalleSapList = this.cerCertificadoDetalleSapDeltaRepository.findByCertificadoDetalleId(eleDetalle.getId());
                    log.error("actualizarHes_4 " + detalleSapList);
                    CerCertificadoDetalleSap detalleSap = new CerCertificadoDetalleSap();
                    if (detalleSapList != null && detalleSapList.size() > 0) {
                        detalleSap = detalleSapList.get(0);
                    }
                    detalleSap.setPosicionSap(eleDetalle.getCerNotaPedidoDetalle().getPosicionSap());
                    detalleSap.setDocumentoGenerado(ele.getNumeroHes());
                    detalleSap.setCerCertificadoDetalle(eleDetalle);
                    this.cerCertificadoDetalleSapDeltaRepository.save(detalleSap);

                }
            }
            flagActualizo = true;
        }
        log.error("actualizarHes_5 " + flagActualizo);
        if (flagActualizo) {
            if (certificado.getCerNotaPedido().getTipo().equalsIgnoreCase("S")) {
                certificado.setMontoTotalAdjustado(input.getMontoAjustado());
            }
            certificado.setMtrEstado(mtrEstadoAprobacion);
            this.cerCertificadoDeltaRepository.save(certificado);
            log.error("cerCertificadoDeltaRepository.save_pprincipe_9 ::: " + certificado.toString());
            lista.add(new MensajeSap("S", "", "La actualizaciÃ³n de el numero de Hes se realizÃ³ correctamente"));

        } else {
            lista.add(new MensajeSap("E", "", "Hubo un error en la actualizaciÃ³n de el numero de Hes"));
        }
        return lista;
    }

    public CertificadoCabezeraDetallesAdjuntosDto updateAllCertificado(
            CertificadoCabezeraDetallesAdjuntosDto certificadoAdjuntos) throws Exception {
        if (this.appParametriaDeltaService.devuelveApagarCertificado()) {
            throw new Exception(Constants.MENSAJE_SISTEMA_APAGADO);
        }
        if (!Optional.ofNullable(certificadoAdjuntos.getCerCertificado().getId()).isPresent()) {
            throw new Exception("No existe Certificado con ID del certificado: ");
        }

        //Validaciones previas
        UserSession user = this.systemLoggedUser.getUserSession();
        MtrProveedor mtrProveedor = this.mtrProveedorDeltaRepository.findByCodigoIdp(user.getId());
        if (!Optional.ofNullable(mtrProveedor).isPresent()) {
            throw new Exception("No se encontrÃ³ Proveedor con Codigo IDP :" + user.getId());
        }
        log.error("saveAllCertificado 01 mtrProveedor: (ruc)" + mtrProveedor.getRuc());
        String nombreCompleto = mtrProveedor.getRazonSocial();

        List<CerCertificadoDetalle> lcerCertificadoDetalle = new ArrayList<CerCertificadoDetalle>();
        this.validacionesPreviasSaveCertificado(certificadoAdjuntos, false);
        String state = "";
        if (certificadoAdjuntos.getTypeState().equals("P")) {
            state = EstadoCertificadoEnum.PENDIENTE_FIRMA_B.getEstado();
        } else {
            state = EstadoCertificadoEnum.BORRADOR.getEstado();
        }
        MtrEstado mtrEstado = this.mtrEstadoDeltaRepository.
                getByCodigoAgrupadoAndCodigoEstado(Constants.CODIGO_AGRUPADO_CERTIFICADO, state);
        CerCertificado cerCertificado = certificadoAdjuntos.getCerCertificado();
        cerCertificado.setMtrEstado(mtrEstado);
        cerCertificado.setFechaAprobacion(null);
        certificadoAdjuntos.setCerCertificado(cerCertificado);

        CerCertificado cert = this.cerCertificadoDeltaRepository.save(certificadoAdjuntos.getCerCertificado());
        log.error("cerCertificadoDeltaRepository.save_pprincipe_10 :: " + cert.toString());
        CerNotaPedido cerNotaPedido = certificadoAdjuntos.getCerCertificado().getCerNotaPedido();

        ///Add redcord on table cerHistorial
        CerHistorial cerHistorial = new CerHistorial();
        cerHistorial.setCerCertificado(certificadoAdjuntos.getCerCertificado());
        cerHistorial.setMtrEstado(certificadoAdjuntos.getCerCertificado().getMtrEstado());
        cerHistorial.setDescripcion(certificadoAdjuntos.getHistorialDescripcion());
        cerHistorial.setUsuarioHistoral(nombreCompleto);//get session user logo On portal
        cerHistorial.setFechaHistorial(DateUtils.obtenerFechaHoraActual());
        log.error("updateAllCertificado 0-04");
        this.cerHistorialDeltaRepository.save(cerHistorial);
        log.error("updateAllCertificado 0-05");

        //Form Two
        //Return the difference between two lists
        List<CerCertificadoDetalle> resultCerDet = cerCertificadoDetalleDeltaRepository.findByCerCertificado(cert).stream().
                filter(aObject -> !certificadoAdjuntos.getCerCertificadoDetalle().contains(aObject)).
                collect(Collectors.toList());
        //Delete difference between CertificadDetalle
        resultCerDet.stream().forEach(e -> {
            ///e.getCerCertificado().getId()
            this.cerCertificadoDetalleDeltaRepository.delete(e);
            this.cerCertificadoDetalleDeltaRepository.flush();
        });
        //Add new Elements
        certificadoAdjuntos.getCerCertificadoDetalle().forEach(detalleCertificado -> {
            //save one for one
            detalleCertificado.setCerCertificado(cert);
            BigDecimal totalLinea = detalleCertificado.getTotalLinea();
            if (Optional.ofNullable(totalLinea).isPresent()) {
                totalLinea = totalLinea.setScale(2, BigDecimal.ROUND_HALF_UP);
                detalleCertificado.setTotalLinea(totalLinea);
            }

            CerCertificadoDetalle cerD = this.cerCertificadoDetalleDeltaRepository.save(detalleCertificado);
            lcerCertificadoDetalle.add(cerD);
            log.error("Add new Item details certificado--> ", cerD);
        });


        CerDocumentoAdjunto cerDocumentoAdjunto = new CerDocumentoAdjunto();
        cerDocumentoAdjunto.setCerCertificado(cert);
        //Return the difference between two lists
        List<CerDocumentoAdjunto> result = cerDocumentoAdjuntoDeltaService.find(cerDocumentoAdjunto).stream().
                filter(aObject -> !certificadoAdjuntos.getAdjuntos().contains(aObject)).
                collect(Collectors.toList());
        //Delete files difference between
        result.stream().forEach(e -> {
            cerDocumentoAdjuntoDeltaRepository.delete(e);
            cerDocumentoAdjuntoDeltaRepository.flush();
        });
        //Add new files not exits on HANA
        String nameFolder = "COGA-CERTIFICADO-" + mtrProveedor.getRuc() + "-" + cert.getId();
        List<CerDocumentoAdjunto> listAdjunto = certificadoAdjuntos.getAdjuntos();
        if (listAdjunto != null && listAdjunto.size() > 0) {

            String folderId = cmisService.createFolder(nameFolder);
            List<CmisFile> listAdjuntoNew = new ArrayList<CmisFile>();
            if (listAdjunto.size() > 0) {
                listAdjunto.forEach(item -> {
                    listAdjuntoNew.add(
                            new CmisFile(
                                    item.getArchivoId(),
                                    item.getArchivoNombre(),
                                    item.getRutaCatalogo(),
                                    item.getArchivoTipo()));

                });
            }

            //Se mueven los adjuntos al folder destino y se obtiene la lista de los mismos con su nuevo URL
            Optional<List<CmisFile>> listAdjuntoMove = Optional.ofNullable(listAdjuntoNew)
                    .map(list -> {
                        return cmisService.updateFileAndMoveVerificar(listAdjuntoNew, folderId);
                    });
            if (Optional.ofNullable(listAdjuntoMove.get()).isPresent()) {
                for (CmisFile cmisFile : listAdjuntoMove.get()) {
                    CerDocumentoAdjunto documento = new CerDocumentoAdjunto();
                    documento.setCarpetaId(folderId);
                    documento.setArchivoId(cmisFile.getId());
                    documento.setArchivoNombre(cmisFile.getName());
                    documento.setRutaCatalogo(cmisFile.getUrl());
                    documento.setArchivoTipo(cmisFile.getType());
                    documento.setSize(cmisFile.getSize());
                    documento.setTipoAdjunto("CER-OTROS");
                    documento.setCerCertificado(cert);//Setter Certificado
                    cerDocumentoAdjuntoDeltaRepository.save(documento);
                }
            }

        }
//
//
//        certificadoAdjuntos.getAdjuntos().forEach(documento -> {
//            documento.setCerCertificado(cert);
//            cerDocumentoAdjuntoDeltaRepository.save(documento);
//        });

        if (state.equals(EstadoCertificadoEnum.PENDIENTE_FIRMA_B.getEstado())) {
            lcerCertificadoDetalle.stream().forEach(certficadD -> {
                CerNotaPedidoDetalle cerNotaPedidoDetalle = cerNotaPedidoDetalleRepository.getOne(
                        certficadD.getCerNotaPedidoDetalle().getId());

                BigDecimal cantidadEntregada = cerNotaPedidoDetalle.getCantidadEntregada();
                if (!Optional.ofNullable(cantidadEntregada).isPresent()) {
                    cantidadEntregada = new BigDecimal(0.00);
                }
                cantidadEntregada = new BigDecimal(cantidadEntregada.floatValue() +
                        certficadD.getCantidadAprobada().floatValue()).setScale(4, BigDecimal.ROUND_HALF_UP);
                cerNotaPedidoDetalle.setCantidadEntregada(cantidadEntregada);

                cerNotaPedidoDetalle = cerNotaPedidoDetalleRepository.save(cerNotaPedidoDetalle);
                log.error("Update field CantidadEntregada replace CantidadAprobada Certificado Detalle ", cerNotaPedidoDetalle);

            });

            //Nota de Pedido
//            List<CerNotaPedidoDetalle> cerNotaPedidoDetalleVerificar =
//                    this.cerNotaPedidoDetalleDeltaRepository.findByCerNotaPedido(cerNotaPedido);
//            BigDecimal cantidadRequeridaSuma = new BigDecimal(0.0);
//            BigDecimal cantidadEntregadaSuma = new BigDecimal(0.0);
//            for (CerNotaPedidoDetalle cerNotaPedidoDetalle : cerNotaPedidoDetalleVerificar) {
//                cantidadRequeridaSuma = new BigDecimal(cantidadRequeridaSuma.floatValue() +
//                        cerNotaPedidoDetalle.getCantidadRequerida().floatValue());
//                cantidadEntregadaSuma = new BigDecimal(cantidadEntregadaSuma.floatValue() +
//                        cerNotaPedidoDetalle.getCantidadEntregada().floatValue());
//            }
//            if (cantidadRequeridaSuma.floatValue() > 0.00) {
//                if (cantidadRequeridaSuma.floatValue() == cantidadEntregadaSuma.floatValue()) {
//                    cerNotaPedido = this.cerNotaPedidoDeltaRepository.getOne(cerNotaPedido.getId());
//                    MtrEstado mtrEstadoNota = this.mtrEstadoDeltaRepository.
//                            getByCodigoAgrupadoAndCodigoEstado(
//                                    Constants.CODIGO_AGRUPADO_NOTA_PEDIDO,
//                                    EstadoNotaPedidoEnum.CERRADA.getEstado());
//                    cerNotaPedido.setMtrEstado(mtrEstadoNota);
//                    cerNotaPedido = this.cerNotaPedidoDeltaRepository.save(cerNotaPedido);
//                }
//            }
        }


        if (mtrEstado.getCodigoAgrupado().equals(Constants.CODIGO_AGRUPADO_CERTIFICADO) &&
                (mtrEstado.getCodigoEstado().equals(EstadoCertificadoEnum.PUBLICADO.getEstado()) ||
                        mtrEstado.getCodigoEstado().equals(EstadoCertificadoEnum.PENDIENTE_FIRMA_B.getEstado())
                )
        ) {

            MailSetting setting = new MailSetting();
            setting.setUser(username);
            setting.setEmailFrom(username);
            setting.setPassword(password);
            setting.setHost(host);
            setting.setNameFrom(username);
            setting.setPort(port);

            MtrTipoFirma mtrTipoFirma = this.mtrTipoFirmaDeltaRepository.
                    getByCodigoTipoFirma(TipoFirmaEnum.FIRMA_B.getEstado());

            CerFirma cerfirma = new CerFirma();
            cerfirma.setCerNotaPedido(cerNotaPedido);
            cerfirma.setMtrTipoFirma(mtrTipoFirma);
            log.error("saveAllCertificado 13");

            //enviando correos firma b
            cerFirmaDeltaService.find(cerfirma).stream().forEach(eSignature -> {
                log.error("saveAllCertificado 14");
                log.info("Sending alert to" + eSignature.getMtrAprobador().getEmail());
                if (eSignature.getMtrAprobador().getEmail() != null)
                    try {
                        log.error("saveAllCertificado 15");
                        log.error("updateAllCertificado 15 getMtrAprobador: " + eSignature.getMtrAprobador().toString());
                        creacionCertificadoNotificacion.enviarFirma(setting,
                                eSignature.getMtrAprobador(),
                                eSignature.getMtrAprobador().getEmail(),//Here---> Aproveer email changed when address is correct
                                cerCertificado);
                        log.error("updateAllCertificado 15 OK");
                    } catch (IOException ex) {
                        log.error("saveAllCertificado error 16");
                        ex.printStackTrace();
                        log.error("Error in send smtp -> " + ex);
                    }
            });

            //enviando correo al proveedor
            creacionCertificadoNotificacion.enviarProveedor(setting,
                    mtrProveedor,
                    mtrProveedor.getEmailContacto(),//Here---> Aproveer email changed when address is correct
                    cert);

        }
        return certificadoAdjuntos;
    }

    //Delete file
    public CerCertificado deleteDocumento(Integer id) throws Exception {
        if (this.appParametriaDeltaService.devuelveApagarCertificado()) {
            throw new Exception(Constants.MENSAJE_SISTEMA_APAGADO);
        }

        CerCertificado cert = this.cerCertificadoDeltaRepository.getOne(id);
        CerDocumentoAdjunto cerDocumentoAdjunto = new CerDocumentoAdjunto();
        cerDocumentoAdjunto.setCerCertificado(cert);
        List<CerDocumentoAdjunto> cerDocumentoAdjuntoList = this.cerDocumentoAdjuntoDeltaService.find(cerDocumentoAdjunto);
        for (CerDocumentoAdjunto bean : cerDocumentoAdjuntoList) {
            this.cerDocumentoAdjuntoDeltaRepository.delete(bean);
            deleteAllFiles(bean.getCarpetaId());
        }
//        cerDocumentoAdjuntoDeltaService.find(cerDocumentoAdjunto).stream().forEach(e -> {
//            cerDocumentoAdjuntoDeltaRepository.delete(e);
//            deleteAllFiles(e.getCarpetaId());//Check
//
//        });
        return cert;
    }

    //Delete all elements Certificado
    public CerCertificado deleteAllCertificado(Integer idCertificado) throws Exception {
        if (this.appParametriaDeltaService.devuelveApagarCertificado()) {
            throw new Exception(Constants.MENSAJE_SISTEMA_APAGADO);
        }

        CerCertificado certificado = this.cerCertificadoDeltaRepository.getOne(idCertificado);

        CerCertificadoDetalle cerCertificadoDetalle = new CerCertificadoDetalle();
        cerCertificadoDetalle.setCerCertificado(certificado);
        cerCertificadoDetalleDeltaService.find(cerCertificadoDetalle).stream().forEach(e -> {
            cerCertificadoDetalleRepository.delete(e);
        });

        CerHistorial cerHistorial = new CerHistorial();
        cerHistorial.setCerCertificado(certificado);
        cerHistorialDeltaService.find(cerHistorial).stream().forEach(e -> {
            this.cerHistorialDeltaRepository.delete(e);
        });

        CerDocumentoAdjunto cerDocumentoAdjunto = new CerDocumentoAdjunto();
        cerDocumentoAdjunto.setCerCertificado(certificado);
        List<CerDocumentoAdjunto> cerDocumentoAdjuntoList = this.cerDocumentoAdjuntoDeltaService.find(cerDocumentoAdjunto);
        for (CerDocumentoAdjunto bean : cerDocumentoAdjuntoList) {
            this.cerDocumentoAdjuntoDeltaRepository.delete(bean);
            deleteAllFiles(bean.getCarpetaId());
        }
//
//        cerDocumentoAdjuntoDeltaService.find(cerDocumentoAdjunto).stream().forEach(e -> {
//            cerDocumentoAdjuntoDeltaRepository.delete(e);
//            deleteAllFiles(e.getCarpetaId());//Check
//        });

        this.cerCertificadoDeltaRepository.delete(certificado);

        return certificado;
    }


    private String createTempDate() {
        SimpleDateFormat formatterDate = new SimpleDateFormat("HH:mm:ss", Locale.ENGLISH);
        return formatterDate.format(new Date());
    }

    private String formatDate(Date inputDate) {
        SimpleDateFormat formatterDate = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH);
        return formatterDate.format(inputDate);
    }

    public String actualizarRutaCatalogoTemp() throws Exception {
        String rutaCatalogoTemp = "%COGA_TEMP%";
        List<CerDocumentoAdjunto> cerDocumentoAdjuntoList = this.cerDocumentoAdjuntoDeltaRepository.
                devuelveListaRutaCatologoLike(rutaCatalogoTemp);
        if (cerDocumentoAdjuntoList != null && cerDocumentoAdjuntoList.size() > 0) {

            for (CerDocumentoAdjunto bean : cerDocumentoAdjuntoList) {
                CerCertificado cert = bean.getCerCertificado();
                MtrProveedor mtrProveedor = cert.getMtrProveedor();
                String nameFolder = "COGA-CERTIFICADO-" + mtrProveedor.getRuc() + "-" + cert.getId();
                String folderId = cmisService.createFolder(nameFolder);

                CmisFile cmisFileAdd = new CmisFile(
                        bean.getArchivoId(),
                        bean.getArchivoNombre(),
                        bean.getRutaCatalogo(),
                        bean.getArchivoTipo());

                List<CmisFile> listAdjuntoNew = new ArrayList<CmisFile>();
                listAdjuntoNew.add(cmisFileAdd);

                //Se mueven los adjuntos al folder destino y se obtiene la lista de los mismos con su nuevo URL
                Optional<List<CmisFile>> listAdjuntoMove = Optional.ofNullable(listAdjuntoNew)
                        .map(list -> {
                            return cmisService.updateFileAndMoveVerificar(listAdjuntoNew, folderId);
                        });
                if (Optional.ofNullable(listAdjuntoMove.get()).isPresent()) {
                    for (CmisFile cmisFile : listAdjuntoMove.get()) {
                        CerDocumentoAdjunto documento = new CerDocumentoAdjunto();
                        documento.setId(bean.getId());
                        documento.setCarpetaId(folderId);
                        documento.setArchivoId(cmisFile.getId());
                        documento.setArchivoNombre(cmisFile.getName());
                        documento.setRutaCatalogo(cmisFile.getUrl());
                        documento.setArchivoTipo(cmisFile.getType());
                        documento.setSize(cmisFile.getSize());
                        documento.setTipoAdjunto("CER-OTROT");
                        documento.setCerCertificado(cert);//Setter Certificado
                        this.cerDocumentoAdjuntoDeltaRepository.save(documento);
                    }
                }

            }

        }
        return "OK";
    }

    public String actualizarRutaCatalogoTemp02() throws Exception {
        String rutaCatalogoTemp = "%COGA_TEMP%";
        List<CerDocumentoAdjunto> cerDocumentoAdjuntoList = this.cerDocumentoAdjuntoDeltaRepository.
                devuelveListaRutaCatologoLike(rutaCatalogoTemp);
        if (cerDocumentoAdjuntoList != null && cerDocumentoAdjuntoList.size() > 0) {

            for (CerDocumentoAdjunto bean : cerDocumentoAdjuntoList) {
                CerCertificado cert = bean.getCerCertificado();
                MtrProveedor mtrProveedor = cert.getMtrProveedor();
                String nameFolder = "/9a79c9a072f847986e8ddbe5/root/COGA-CERTIFICADO-" + mtrProveedor.getRuc() + "-" + cert.getId() + "/" + bean.getArchivoNombre();
                bean.setRutaCatalogo(nameFolder);
                bean.setTipoAdjunto("CER-OTROT");
                this.cerDocumentoAdjuntoDeltaRepository.save(bean);

            }

        }
        return "OK";
    }

    public void jobEnviarCorreoCertificadoSinAprobar() throws Exception {
        CerFirma cerFirma = new CerFirma();
        List<CerFirmaSinAprobarDto> lista = this.cerFirmaMapper.findByCertificadoSinAprobarFirma(cerFirma);
        if (lista == null || lista.size() <= 0) {
            return;
        }
        int aprobadorId = -1;
        List<CerFirmaSinAprobarCorreoDto> listaAprobador = new ArrayList<>();
        List<CerFirmaSinAprobarDto> cerCertificadoList = new ArrayList<>();

        for(CerFirmaSinAprobarDto bean : lista) {
            if (aprobadorId != bean.getCerFirma().getMtrAprobador().getId()) {
                aprobadorId = bean.getCerFirma().getMtrAprobador().getId();

                CerFirmaSinAprobarCorreoDto beanAprobador = new CerFirmaSinAprobarCorreoDto();
                beanAprobador.setMtrAprobador(bean.getCerFirma().getMtrAprobador());
                cerCertificadoList = new ArrayList<>();
                beanAprobador.setCerCertificadoList(cerCertificadoList);

                listaAprobador.add(beanAprobador);
            }
            CerFirmaSinAprobarDto cerFirmaSinAprobarDto = new CerFirmaSinAprobarDto();
            cerFirmaSinAprobarDto.setCerCertificado(bean.getCerCertificado());
            cerFirmaSinAprobarDto.setCerFirma(bean.getCerFirma());
            cerCertificadoList.add(cerFirmaSinAprobarDto);
        }

        log.error("jobEnviarCorreoCertificadoSinAprobar 0 listaAprobador size: " + listaAprobador.size());

        if (listaAprobador != null && listaAprobador.size() > 0) {
            log.error("jobEnviarCorreoCertificadoSinAprobar 0 listaAprobador: " + listaAprobador.toString());
            for(CerFirmaSinAprobarCorreoDto bean : listaAprobador) {
                this.enviarEmailSinAprobarCertificado(bean);
            }
        }
    }

    private void enviarEmailSinAprobarCertificado(CerFirmaSinAprobarCorreoDto bean) throws Exception {
            this.certificadoSinAprobarNotificacion.enviar(bean);
    }


    /***********************/
    /* Metodos de Busqueda */

    /***********************/

    protected Sort setFindAll(Sort sort) {
        sort = Sort.by(
                new Sort.Order(Sort.Direction.DESC, "mtrProveedor.razonSocial"),
                new Sort.Order(Sort.Direction.DESC, "fechaDesde"),
                new Sort.Order(Sort.Direction.ASC, "codigoCertificado")
        );
        return sort;
    }

    protected Sort setFind(CerCertificado req, ExampleMatcher matcher, Example<CerCertificado> example, Sort
            sort) {
        sort = Sort.by(
                new Sort.Order(Sort.Direction.DESC, "mtrProveedor.razonSocial"),
                new Sort.Order(Sort.Direction.DESC, "fechaDesde"),
                new Sort.Order(Sort.Direction.ASC, "codigoCertificado")
        );
        return sort;
    }

    protected void setFindPaginated(PageRequestByExample<CerCertificado> req, ExampleMatcher
            matcher, Example<CerCertificado> example) {
        return;
    }


    protected List<Predicate> setAdicionalDeltaPredicate(
            List<Predicate> predicates,
            CerCertificadoResponse bean,
            CriteriaBuilder cb,
            CriteriaQuery<CerCertificado> query,
            Root<CerCertificado> root) throws Exception {
        CerCertificado entity = bean.getBean();
        if (Optional.ofNullable(entity.getCerNotaPedido()).isPresent()) {
            Join<CerCertificado, CerNotaPedido> fromCerNotaPedido = root.join("cerNotaPedido", JoinType.INNER);
            if (Optional.ofNullable(entity.getCerNotaPedido().getId()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromCerNotaPedido.get("id"), entity.getCerNotaPedido().getId());
                predicates.add(thirdCondition);
            }
            if (Optional.ofNullable(entity.getCerNotaPedido().getCodigoNotaPedidoSap()).isPresent()) {
                Predicate thirdCondition = cb.like(cb.upper(fromCerNotaPedido.get("codigoNotaPedidoSap")), "%" + entity.getCerNotaPedido().getCodigoNotaPedidoSap().toUpperCase().trim() + "%");
                predicates.add(thirdCondition);
            }
            if (Optional.ofNullable(entity.getCerNotaPedido().getTipo()).isPresent()) {
                Predicate thirdCondition = cb.equal(cb.upper(fromCerNotaPedido.get("tipo")), entity.getCerNotaPedido().getTipo());
                predicates.add(thirdCondition);
            }
        }

        if (Optional.ofNullable(entity.getMtrProveedor()).isPresent()) {
            Join<CerCertificado, MtrProveedor> fromMtrProveedor = root.join("mtrProveedor", JoinType.INNER);
            if (Optional.ofNullable(entity.getMtrProveedor().getId()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtrProveedor.get("id"), entity.getMtrProveedor().getId());
                predicates.add(thirdCondition);
            }
            if (Optional.ofNullable(entity.getMtrProveedor().getRuc()).isPresent()) {
                Predicate thirdCondition = cb.equal(cb.upper(fromMtrProveedor.get("ruc")), entity.getMtrProveedor().getRuc());
                predicates.add(thirdCondition);
            }
            if (Optional.ofNullable(entity.getMtrProveedor().getRazonSocial()).isPresent()) {
                Predicate thirdCondition = cb.like(cb.upper(fromMtrProveedor.get("razonSocial")), "%" + entity.getMtrProveedor().getRazonSocial().toUpperCase().trim() + "%");
                predicates.add(thirdCondition);
            }
        }
        if (Optional.ofNullable(entity.getMtrSociedad()).isPresent()) {
            Join<CerCertificado, MtrSociedad> fromMtrSociedad = root.join("mtrSociedad", JoinType.INNER);
            if (Optional.ofNullable(entity.getMtrSociedad().getId()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtrSociedad.get("id"), entity.getMtrSociedad().getId());
                predicates.add(thirdCondition);
            }
            if (Optional.ofNullable(entity.getMtrSociedad().getDescripcion()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtrSociedad.get("descripcion"), entity.getMtrSociedad().getDescripcion());
                predicates.add(thirdCondition);
            }
        }
        if (Optional.ofNullable(entity.getMtrEstado()).isPresent()) {
            Join<CerCertificado, MtrEstado> fromMtrEstado = root.join("mtrEstado", JoinType.INNER);
            if (Optional.ofNullable(entity.getMtrEstado().getId()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtrEstado.get("id"), entity.getMtrEstado().getId());
                predicates.add(thirdCondition);
            }
            if (Optional.ofNullable(entity.getMtrEstado().getCodigoAgrupado()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtrEstado.get("codigoAgrupado"), entity.getMtrEstado().getCodigoAgrupado());
                predicates.add(thirdCondition);
            }
            if (Optional.ofNullable(entity.getMtrEstado().getCodigoEstado()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtrEstado.get("codigoEstado"), entity.getMtrEstado().getCodigoEstado());
                predicates.add(thirdCondition);
            }
        }
        if (Optional.ofNullable(entity.getMtrClaseDocumento()).isPresent()) {
            Join<CerCertificado, MtrClaseDocumento> fromMtr = root.join("mtrClaseDocumento", JoinType.INNER);
            if (Optional.ofNullable(entity.getMtrClaseDocumento().getId()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtr.get("id"), entity.getMtrClaseDocumento().getId());
                predicates.add(thirdCondition);
            }
        }
        if (Optional.ofNullable(entity.getMtrMoneda()).isPresent()) {
            Join<CerCertificado, MtrMoneda> fromMtr = root.join("mtrMoneda", JoinType.INNER);
            if (Optional.ofNullable(entity.getMtrMoneda().getId()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtr.get("id"), entity.getMtrMoneda().getId());
                predicates.add(thirdCondition);
            }
            if (Optional.ofNullable(entity.getMtrMoneda().getSigla()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtr.get("sigla"), entity.getMtrMoneda().getSigla());
                predicates.add(thirdCondition);
            }
            if (Optional.ofNullable(entity.getMtrMoneda().getMonedaDescrip()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtr.get("monedaDescrip"), entity.getMtrMoneda().getMonedaDescrip());
                predicates.add(thirdCondition);
            }
        }
        if (Optional.ofNullable(entity.getFechaCreacion()).isPresent()) {
            Date fecha = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaCreacion());
            Date fechaSiguiente = DateUtils.sumarRestarDias(fecha, 1);
            entity.setCreatedDate(DateUtils.convertToLocalDateTime(fecha));
            LocalDateTime dateTimeSgte = DateUtils.convertToLocalDateTime(fechaSiguiente);
            predicates.add(cb.greaterThanOrEqualTo(root.<LocalDateTime>get("createdDate"), entity.getCreatedDate()));
            predicates.add(cb.lessThan(root.<LocalDateTime>get("createdDate"), dateTimeSgte));
        }

        if (Optional.ofNullable(entity.getFechaCreacionDesde()).isPresent() &&
                Optional.ofNullable(entity.getFechaCreacionHasta()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaCreacionDesde());
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaCreacionHasta());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);

            LocalDateTime dateTime = DateUtils.convertToLocalDateTime(fechaDesde);
            LocalDateTime dateTimeSgte = DateUtils.convertToLocalDateTime(fechaHasta);

            predicates.add(cb.greaterThanOrEqualTo(root.<LocalDateTime>get("createdDate"), dateTime));
            predicates.add(cb.lessThan(root.<LocalDateTime>get("createdDate"), dateTimeSgte));
        }
        if (Optional.ofNullable(entity.getFechaCreacionDesde()).isPresent() &&
                !Optional.ofNullable(entity.getFechaCreacionHasta()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaCreacionDesde());
            LocalDateTime dateTime = DateUtils.convertToLocalDateTime(fechaDesde);
            predicates.add(cb.greaterThanOrEqualTo(root.<LocalDateTime>get("createdDate"), dateTime));
        }
        if (!Optional.ofNullable(entity.getFechaCreacionDesde()).isPresent() &&
                Optional.ofNullable(entity.getFechaCreacionHasta()).isPresent()) {
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaCreacionHasta());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);
            LocalDateTime dateTimeSgte = DateUtils.convertToLocalDateTime(fechaHasta);
            predicates.add(cb.lessThan(root.<LocalDateTime>get("createdDate"), dateTimeSgte));
        }

//        if (Optional.ofNullable(entity.getFechaDesde()).isPresent()) {
//            String sfecha = DateUtils.convertDateToString("dd/MM/yyyy", entity.getFechaDesde());
//            Date fecha = DateUtils.convertStringToDate("dd/MM/yyyy", sfecha);
//            Date fechaSiguiente = DateUtils.sumarRestarDias(fecha, 1);
//            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaDesde"), fecha));
//            predicates.add(cb.lessThan(root.<Date>get("fechaDesde"), fechaSiguiente));
//        }

        if (Optional.ofNullable(entity.getFechaDesdeIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaDesdeFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaDesdeIni());
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaDesdeFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);

            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaDesde"), fechaDesde));
            predicates.add(cb.lessThan(root.<Date>get("fechaDesde"), fechaHasta));
        }
        if (Optional.ofNullable(entity.getFechaDesdeIni()).isPresent() &&
                !Optional.ofNullable(entity.getFechaDesdeFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaDesdeIni());
            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaDesde"), fechaDesde));
        }
        if (!Optional.ofNullable(entity.getFechaDesdeIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaDesdeFin()).isPresent()) {
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaDesdeFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);
            predicates.add(cb.lessThan(root.<Date>get("fechaDesde"), fechaHasta));
        }

        if (Optional.ofNullable(entity.getFechaHastaIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaHastaFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaHastaIni());
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaHastaFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);

            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaHasta"), fechaDesde));
            predicates.add(cb.lessThan(root.<Date>get("fechaHasta"), fechaHasta));
        }
        if (Optional.ofNullable(entity.getFechaHastaIni()).isPresent() &&
                !Optional.ofNullable(entity.getFechaHastaFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaHastaIni());
            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaHasta"), fechaDesde));
        }
        if (!Optional.ofNullable(entity.getFechaHastaIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaHastaFin()).isPresent()) {
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaHastaFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);
            predicates.add(cb.lessThan(root.<Date>get("fechaHasta"), fechaHasta));
        }

        if (Optional.ofNullable(entity.getNroDocumentoSap()).isPresent()) {
            Subquery<CerCertificadoDetalle> cerCertificadoDetalleSubquery = query.subquery(CerCertificadoDetalle.class);
            Root<CerCertificadoDetalle> cerCertificadoDetalleRoot =
                    cerCertificadoDetalleSubquery.from(CerCertificadoDetalle.class);

            Join<CerCertificadoDetalle, CerCertificado> joinCerCertificado =
                    cerCertificadoDetalleRoot.join("cerCertificado", JoinType.INNER);
            List<Predicate> predicateDetalle = new ArrayList<>();
            Predicate condicionDetalle = cb.equal(joinCerCertificado, root);
            predicateDetalle.add(condicionDetalle);


            Subquery<CerCertificadoDetalleSap> cerCertificadoDetalleSapSubquery =
                    cerCertificadoDetalleSubquery.subquery(CerCertificadoDetalleSap.class);
            Root<CerCertificadoDetalleSap> cerCertificadoDetalleSapRoot =
                    cerCertificadoDetalleSapSubquery.from(CerCertificadoDetalleSap.class);
//            Join<CerCertificadoDetalleSap, CerCertificadoDetalle> cerCertificadoDetalleSapJoin =
//                    cerCertificadoDetalleSapRoot.join("cerCertificadoDetalle", JoinType.INNER);

            List<Predicate> predicateDetalleSap = new ArrayList<>();
            Predicate condicionNro = cb.equal(cerCertificadoDetalleSapRoot.get("documentoGenerado"), entity.getNroDocumentoSap());
            predicateDetalleSap.add(condicionNro);
            Predicate condicionCerCertificadoDetalle =
                    cb.equal(cerCertificadoDetalleSapRoot.get("cerCertificadoDetalle"), cerCertificadoDetalleRoot);
            predicateDetalleSap.add(condicionCerCertificadoDetalle);
            cerCertificadoDetalleSapSubquery.select(cerCertificadoDetalleSapRoot).
                    where(predicateDetalleSap.toArray(new Predicate[predicateDetalleSap.size()]));
            Predicate predicateSubquery02 = cb.exists(cerCertificadoDetalleSapSubquery);
            predicateDetalle.add(predicateSubquery02);

            cerCertificadoDetalleSubquery.select(cerCertificadoDetalleRoot).
                    where(predicateDetalle.toArray(new Predicate[predicateDetalle.size()]));
            Predicate predicateSubquery01 = cb.exists(cerCertificadoDetalleSubquery);
            predicates.add(predicateSubquery01);
        }

        query.orderBy(cb.desc(root.get("createdDate")));
        return predicates;
    }

    protected Root<CerCertificado> setAdicionalDeltaTotalPredicate(
            CerCertificadoResponse bean,
            Root<CerCertificado> countRoot) throws Exception {
        CerCertificado entity = bean.getBean();
        if (Optional.ofNullable(entity.getCerNotaPedido()).isPresent()) {
            Join<CerCertificado, CerNotaPedido> fromMtr = countRoot.join("cerNotaPedido", JoinType.INNER);
        }
        if (Optional.ofNullable(entity.getMtrProveedor()).isPresent()) {
            Join<CerCertificado, MtrProveedor> fromMtrProveedor = countRoot.join("mtrProveedor", JoinType.INNER);
        }
        if (Optional.ofNullable(entity.getMtrSociedad()).isPresent()) {
            Join<CerCertificado, MtrSociedad> fromMtrSociedad = countRoot.join("mtrSociedad", JoinType.INNER);
        }
        if (Optional.ofNullable(entity.getMtrEstado()).isPresent()) {
            Join<CerCertificado, MtrEstado> fromMtrEstado = countRoot.join("mtrEstado", JoinType.INNER);
        }
        if (Optional.ofNullable(entity.getMtrClaseDocumento()).isPresent()) {
            Join<CerCertificado, MtrClaseDocumento> fromMtrClase = countRoot.join("mtrClaseDocumento", JoinType.INNER);
        }
        if (Optional.ofNullable(entity.getMtrMoneda()).isPresent()) {
            Join<CerCertificado, MtrMoneda> fromMtrClase = countRoot.join("mtrMoneda", JoinType.INNER);
        }
        return countRoot;
    }

    /****************/
    /* METODOS CRUD */

    /****************/

    protected String setValidacionesPrevias(CerCertificado bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected CerCertificado setCreate(CerCertificado bean) throws Exception {
        return bean;
    }

    protected void setSave(CerCertificado dto) throws Exception {
        return;
    }

    protected void setDelete(Integer id) throws Exception {

    }

    protected void setDeleteAll() throws Exception {

    }

    /************************/
    /* METODOS CRUD Masivos */

    /************************/

    protected CerCertificado setUploadExcel(Cell currentCell, CerCertificado cerCertificado, int contador) throws
            Exception {
        cerCertificado = super.setUploadExcel(currentCell, cerCertificado, contador);
        return cerCertificado;
    }

    protected String setSaveMasivo(CerCertificado dto) throws Exception {
        return "";
    }

    protected List<CerCertificado> setBeforeDeleteMasivo(List<CerCertificado> listaDto) throws Exception {
        return listaDto;
    }

    protected void setAfterDeleteMasivo() throws Exception {
        return;
    }

    /*****************************/
    /* Metodos que generan Excel */

    /*****************************/

    protected void setDownloadExcelItem(CerCertificado bean, HSSFRow dataRow) {

    }

    protected void setDownloadExcel(HSSFSheet sheet) {

    }

    /*****************/
    /* Otros Metodos */

    /*****************/

    protected String setGraphDescripcionByCerNotaPedido(CerNotaPedido cerNotaPedido) {
        return cerNotaPedido.getId().toString();
    }

    protected String setGraphPieChartTituloByCerNotaPedido() {
        return "CerNotaPedido";
    }

    protected String setGraphBarChartTituloByCerNotaPedido() {
        return "CerNotaPedido";
    }

    protected String setGraphDescripcionByMtrProveedor(MtrProveedor cerProveedor) {
        return cerProveedor.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrProveedor() {
        return "MtrProveedor";
    }

    protected String setGraphBarChartTituloByMtrProveedor() {
        return "MtrProveedor";
    }

    protected String setGraphDescripcionByMtrSociedad(MtrSociedad mtrSociedad) {
        return mtrSociedad.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrSociedad() {
        return "MtrSociedad";
    }

    protected String setGraphBarChartTituloByMtrSociedad() {
        return "MtrSociedad";
    }

    protected String setGraphDescripcionByMtrMoneda(MtrMoneda mtrMoneda) {
        return mtrMoneda.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrMoneda() {
        return "MtrMoneda";
    }

    protected String setGraphBarChartTituloByMtrMoneda() {
        return "MtrMoneda";
    }

    protected String setGraphDescripcionByMtrClaseDocumento(MtrClaseDocumento mtrClaseDocumento) {
        return mtrClaseDocumento.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrClaseDocumento() {
        return "MtrClaseDocumento";
    }

    protected String setGraphBarChartTituloByMtrClaseDocumento() {
        return "MtrClaseDocumento";
    }

    protected String setGraphDescripcionByMtrEstado(MtrEstado mtrEstado) {
        return mtrEstado.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrEstado() {
        return "MtrEstado";
    }

    protected String setGraphBarChartTituloByMtrEstado() {
        return "MtrEstado";
    }

}
/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.incloud.hcp.service._gproveedor.impl;

import com.incloud.hcp.common.excel.ExcelDefault;
import com.incloud.hcp.domain._gproveedor.domain.ProveedorPorValidarInfo;
import com.incloud.hcp.domain._gproveedor.domain.ProveedorPorValidarInfo_;
import com.incloud.hcp.repository._gproveedor.ProveedorPorValidarInfoRepository;
import com.incloud.hcp.repository._gproveedor.ProveedorRepository;
import com.incloud.hcp.service._gproveedor.ProveedorPorValidarInfoService;
import com.incloud.hcp.service._gproveedor.ProveedorService;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.service.support.PageResponse;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.DataFormat;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.streaming.SXSSFSheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.awt.*;
import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;


/**
 * A simple DTO Facility for ProveedorPorValidarInfo.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public abstract class ProveedorPorValidarInfoServiceImpl implements ProveedorPorValidarInfoService {

    protected final Logger log = LoggerFactory.getLogger(ProveedorPorValidarInfoServiceImpl.class);

    protected final String NAME_SHEET = "ProveedorPorValidarInfo";
    protected final String CONFIG_TITLE = "com/incloud/hcp/excel/ProveedorPorValidarInfoExcel.xml";

    @Autowired
    protected MessageSource messageSource;

    @Autowired
    protected ProveedorPorValidarInfoRepository proveedorPorValidarInfoRepository;

    @Autowired
    protected ProveedorService proveedorService;

    @Autowired
    protected ProveedorRepository proveedorRepository;

    @Transactional(readOnly = true)
    public Optional<ProveedorPorValidarInfo> findOne(Integer id) {
        log.debug("Ingresando findOne: ", id);
        return this.proveedorPorValidarInfoRepository.findById(id);
    }

    @Transactional(readOnly = true)
    public List<ProveedorPorValidarInfo> findAll() {
        log.debug("Ingresando findAll");
        Sort sort = Sort.by("id");
        sort = this.setFindAll(sort);
        List<ProveedorPorValidarInfo> lista = this.proveedorPorValidarInfoRepository.findAll(sort);
        return lista;
    }

    protected abstract Sort setFindAll(Sort sort);

    @Transactional(readOnly = true)
    public List<ProveedorPorValidarInfo> find(ProveedorPorValidarInfo req) {
        log.debug("Ingresando find: ", req);
        Example<ProveedorPorValidarInfo> example = null;
        ProveedorPorValidarInfo proveedorPorValidarInfo = req;
        ExampleMatcher matcher = null;
        if (proveedorPorValidarInfo != null) {
            matcher = ExampleMatcher.matching() //
                    .withMatcher(ProveedorPorValidarInfo_.nombreCampoBd.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorPorValidarInfo_.indEsLista.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorPorValidarInfo_.valorActual.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorPorValidarInfo_.valorNuevo.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorPorValidarInfo_.valorListaActual.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorPorValidarInfo_.valorListaNuevo.getName(), match -> match.ignoreCase().startsWith());
            example = Example.of(proveedorPorValidarInfo, matcher);
        }
        Sort sort = Sort.by("id");
        sort = this.setFind(req, matcher, example, sort);
        List<ProveedorPorValidarInfo> lista = this.proveedorPorValidarInfoRepository.findAll(example, sort);
        return lista;
    }

    protected abstract Sort setFind(ProveedorPorValidarInfo req, ExampleMatcher matcher, Example<ProveedorPorValidarInfo> example, Sort sort);

    @Transactional(readOnly = true)
    public PageResponse<ProveedorPorValidarInfo> findPaginated(PageRequestByExample<ProveedorPorValidarInfo> req) {
        log.debug("Ingresando findPaginated: ", req);
        Example<ProveedorPorValidarInfo> example = null;
        ProveedorPorValidarInfo proveedorPorValidarInfo = toEntity(req.bean);
        ExampleMatcher matcher = null;
        if (proveedorPorValidarInfo != null) {
            matcher = ExampleMatcher.matching() //
                    .withMatcher(ProveedorPorValidarInfo_.nombreCampoBd.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorPorValidarInfo_.indEsLista.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorPorValidarInfo_.valorActual.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorPorValidarInfo_.valorNuevo.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorPorValidarInfo_.valorListaActual.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorPorValidarInfo_.valorListaNuevo.getName(), match -> match.ignoreCase().startsWith());
            example = Example.of(proveedorPorValidarInfo, matcher);
        }

        Page<ProveedorPorValidarInfo> page;
        Sort sort = Sort.by("id");
        sort = this.setFind(proveedorPorValidarInfo, matcher, example, sort);
        req.generarLazyDefecto();
        this.setFindPaginated(req, matcher, example);
        if (example != null) {
            page = this.proveedorPorValidarInfoRepository.findAll(example, req.toPageable(sort));
        } else {
            page = this.proveedorPorValidarInfoRepository.findAll(req.toPageable(sort));
        }

        List<ProveedorPorValidarInfo> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    protected abstract void setFindPaginated(PageRequestByExample<ProveedorPorValidarInfo> req, ExampleMatcher matcher,
            Example<ProveedorPorValidarInfo> example);

    @Transactional(readOnly = true)
    public XSSFWorkbook downloadExcelXLSX(ProveedorPorValidarInfo req) {
        log.debug("Ingresando downloadExcelXLSX: ", req);
        List<ProveedorPorValidarInfo> lista = this.find(req);
        Optional<List<ProveedorPorValidarInfo>> oList = Optional.ofNullable(lista);
        if (!oList.isPresent()) {
            return null;
        }

        XSSFWorkbook book = new XSSFWorkbook();
        XSSFSheet sheet = book.createSheet();
        int numberOfSheets = book.getNumberOfSheets();
        book.setSheetName(numberOfSheets - 1, NAME_SHEET);
        ExcelDefault.createTitle(sheet, CONFIG_TITLE, book.createCellStyle(), book.createFont());
        CellStyle cellStyle = book.createCellStyle();
        DataFormat dataFormat = book.createDataFormat();

        lista.forEach(proveedorPorValidarInfo -> {
            int lastRow = sheet.getLastRowNum();
            int i = lastRow < 0 ? 0 : lastRow;
            XSSFRow dataRow = sheet.createRow(i + 1);
            int contador = 0;
            ExcelDefault.setValueCell(proveedorPorValidarInfo.getId(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(proveedorPorValidarInfo.getNombreCampoBd(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(proveedorPorValidarInfo.getIndEsLista(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(proveedorPorValidarInfo.getValorActual(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(proveedorPorValidarInfo.getValorNuevo(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(proveedorPorValidarInfo.getValorListaActual(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(proveedorPorValidarInfo.getValorListaNuevo(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            /* Agregar aqui si desean colocar mas campos del BEAN */
            this.setDownloadExcelItem(proveedorPorValidarInfo, dataRow);

        });
        this.setDownloadExcel(sheet);
        int totalColumn = sheet.getRow(0).getLastCellNum();
        for (int i = 0; i < totalColumn; i++) {
            sheet.autoSizeColumn(i, true);
        }
        return book;
    }

    protected void setDownloadExcelItem(ProveedorPorValidarInfo bean, XSSFRow dataRow) {

    }

    protected void setDownloadExcel(XSSFSheet sheet) {

    }

    @Transactional(readOnly = true)
    public SXSSFWorkbook downloadExcelSXLSX(ProveedorPorValidarInfo req) {
        log.debug("Ingresando downloadExcelSXLSX: ", req);
        List<ProveedorPorValidarInfo> lista = this.find(req);
        Optional<List<ProveedorPorValidarInfo>> oList = Optional.ofNullable(lista);
        if (!oList.isPresent()) {
            return null;
        }

        SXSSFWorkbook book = new SXSSFWorkbook(100);
        XSSFWorkbook xbook = book.getXSSFWorkbook();
        SXSSFSheet sheet = book.createSheet();
        sheet.trackAllColumnsForAutoSizing();
        int numberOfSheets = book.getNumberOfSheets();
        book.setSheetName(numberOfSheets - 1, NAME_SHEET);
        int nroColumnas = ExcelDefault.createTitle(xbook, sheet, CONFIG_TITLE);
        for (int i = 0; i < nroColumnas; i++) {
            sheet.autoSizeColumn(i, true);
        }
        sheet.untrackAllColumnsForAutoSizing();

        XSSFCellStyle cellStyle01 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 1), new Color(226, 239, 218), false, (short) 10);
        XSSFCellStyle cellStyle02 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 192), new Color(255, 255, 255), false, (short) 10);
        List<CellStyle> cellStyleList = null;
        List<CellStyle> cellStyleList01 = ExcelDefault.generarCellStyle(xbook, cellStyle01);
        List<CellStyle> cellStyleList02 = ExcelDefault.generarCellStyle(xbook, cellStyle02);
        boolean filaImpar = true;

        for (ProveedorPorValidarInfo proveedorPorValidarInfo : lista) {
            int lastRow = sheet.getLastRowNum();
            int i = lastRow < 0 ? 0 : lastRow;
            Row dataRow = sheet.createRow(i + 1);
            int contador = 0;
            if (filaImpar) {
                cellStyleList = cellStyleList01;
            } else {
                cellStyleList = cellStyleList02;
            }
            filaImpar = !filaImpar;

            ExcelDefault.setValueCell(proveedorPorValidarInfo.getId(), dataRow.createCell(contador), "I", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(proveedorPorValidarInfo.getNombreCampoBd(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(proveedorPorValidarInfo.getIndEsLista(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(proveedorPorValidarInfo.getValorActual(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(proveedorPorValidarInfo.getValorNuevo(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(proveedorPorValidarInfo.getValorListaActual(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(proveedorPorValidarInfo.getValorListaNuevo(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            /* Agregar aqui si desean colocar mas campos del BEAN */
            this.setDownloadExcelItem(proveedorPorValidarInfo, dataRow);

        }
        this.setDownloadExcel(sheet);
        return book;
    }

    protected void setDownloadExcelItem(ProveedorPorValidarInfo bean, Row dataRow) {

    }

    protected void setDownloadExcel(Sheet sheet) {

    }

    @Transactional(readOnly = true)
    public SXSSFWorkbook generateInsertExcelSXLSX(ProveedorPorValidarInfo req) {
        log.debug("Ingresando generateInsertExcelSXLSX: ", req);
        List<ProveedorPorValidarInfo> lista = this.find(req);
        Optional<List<ProveedorPorValidarInfo>> oList = Optional.ofNullable(lista);
        if (!oList.isPresent()) {
            return null;
        }

        SXSSFWorkbook book = new SXSSFWorkbook(100);
        XSSFWorkbook xbook = book.getXSSFWorkbook();
        SXSSFSheet sheet = book.createSheet();
        sheet.trackAllColumnsForAutoSizing();
        int numberOfSheets = book.getNumberOfSheets();
        book.setSheetName(numberOfSheets - 1, NAME_SHEET);
        int nroColumnas = 1;
        for (int i = 0; i < nroColumnas; i++) {
            sheet.autoSizeColumn(i, true);
        }
        sheet.untrackAllColumnsForAutoSizing();
        XSSFCellStyle cellStyle01 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 1), new Color(226, 239, 218), false, (short) 10);
        XSSFCellStyle cellStyle02 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 192), new Color(255, 255, 255), false, (short) 10);
        List<CellStyle> cellStyleList = null;
        List<CellStyle> cellStyleList01 = ExcelDefault.generarCellStyle(xbook, cellStyle01);
        List<CellStyle> cellStyleList02 = ExcelDefault.generarCellStyle(xbook, cellStyle02);
        boolean filaImpar = true;

        for (ProveedorPorValidarInfo proveedorPorValidarInfo : lista) {
            int lastRow = sheet.getLastRowNum();
            int i = lastRow < 0 ? 0 : lastRow;
            Row dataRow = sheet.createRow(i + 1);
            int contador = 0;
            if (filaImpar) {
                cellStyleList = cellStyleList01;
            } else {
                cellStyleList = cellStyleList02;
            }
            filaImpar = !filaImpar;
            String sqlInsert = "INSERT INTO proveedor_por_validar_info(";
            sqlInsert = sqlInsert + "id_proveedor_por_validar_info" + ", ";
            sqlInsert = sqlInsert + "nombre_campo_bd" + ", ";
            sqlInsert = sqlInsert + "ind_es_lista" + ", ";
            sqlInsert = sqlInsert + "valor_actual" + ", ";
            sqlInsert = sqlInsert + "valor_nuevo" + ", ";
            sqlInsert = sqlInsert + "valor_lista_actual" + ", ";
            sqlInsert = sqlInsert + "valor_lista_nuevo" + ")";
            sqlInsert = sqlInsert + " VALUES (";
            sqlInsert = sqlInsert + proveedorPorValidarInfo.getId() + ", ";
            if (StringUtils.isBlank(proveedorPorValidarInfo.getNombreCampoBd())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + proveedorPorValidarInfo.getNombreCampoBd() + "'" + ", ";
            }
            if (StringUtils.isBlank(proveedorPorValidarInfo.getIndEsLista())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + proveedorPorValidarInfo.getIndEsLista() + "'" + ", ";
            }
            if (StringUtils.isBlank(proveedorPorValidarInfo.getValorActual())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + proveedorPorValidarInfo.getValorActual() + "'" + ", ";
            }
            if (StringUtils.isBlank(proveedorPorValidarInfo.getValorNuevo())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + proveedorPorValidarInfo.getValorNuevo() + "'" + ", ";
            }
            if (StringUtils.isBlank(proveedorPorValidarInfo.getValorListaActual())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + proveedorPorValidarInfo.getValorListaActual() + "'" + ", ";
            }
            if (StringUtils.isBlank(proveedorPorValidarInfo.getValorListaNuevo())) {
                sqlInsert = sqlInsert + "null";
            } else {
                sqlInsert = sqlInsert + "'" + proveedorPorValidarInfo.getValorListaNuevo() + "'";
            }
            sqlInsert = sqlInsert + " );";
            ExcelDefault.setValueCell(sqlInsert, dataRow.createCell(contador), "S", cellStyleList);
            contador++;
        }
        return book;
    }

    protected ProveedorPorValidarInfo completarDatosBean(ProveedorPorValidarInfo bean) {
        BigDecimal data = new BigDecimal(0.00);
        bean = this.setCompletarDatosBean(bean);
        return bean;
    }

    protected ProveedorPorValidarInfo setCompletarDatosBean(ProveedorPorValidarInfo bean) {
        return bean;
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    public ProveedorPorValidarInfo save(ProveedorPorValidarInfo dto) {
        log.debug("Ingresando save: ", dto);
        if (dto == null) {
            return null;
        }
        dto = this.completarDatosBean(dto);
        dto = this.setBeforeSave(dto);
        this.setSave(dto);
        dto = this.proveedorPorValidarInfoRepository.save(dto);
        dto = this.setAfterSave(dto);
        return dto;
    }

    protected abstract void setSave(ProveedorPorValidarInfo dto);

    protected ProveedorPorValidarInfo setBeforeSave(ProveedorPorValidarInfo dto) {
        return dto;
    }

    protected ProveedorPorValidarInfo setAfterSave(ProveedorPorValidarInfo dto) {
        return dto;
    }

    /**
    * Save new entity or update the corresponding entity if any.
    */
    public ProveedorPorValidarInfo create(ProveedorPorValidarInfo dto) {
        log.debug("Ingresando create: ", dto);
        if (dto == null) {
            return null;
        }

        ProveedorPorValidarInfo proveedorPorValidarInfo;
        proveedorPorValidarInfo = new ProveedorPorValidarInfo();

        proveedorPorValidarInfo.setNombreCampoBd(dto.getNombreCampoBd());
        proveedorPorValidarInfo.setIndEsLista(dto.getIndEsLista());
        proveedorPorValidarInfo.setValorActual(dto.getValorActual());
        proveedorPorValidarInfo.setValorNuevo(dto.getValorNuevo());
        proveedorPorValidarInfo.setValorListaActual(dto.getValorListaActual());
        proveedorPorValidarInfo.setValorListaNuevo(dto.getValorListaNuevo());
        proveedorPorValidarInfo = this.completarDatosBean(proveedorPorValidarInfo);
        this.setCreate(proveedorPorValidarInfo);
        return this.proveedorPorValidarInfoRepository.save(proveedorPorValidarInfo);
    }

    protected abstract void setCreate(ProveedorPorValidarInfo dto);

    protected String validacionesPrevias(ProveedorPorValidarInfo dto) {
        return "";
    }

    /**
     * Delete the passed dto as a new entity or update the corresponding entity if any.
     */
    public void delete(Integer id) {
        log.debug("Ingresando delete: ", id);
        if (id == null) {
            return;
        }
        this.setDelete(id);
        this.proveedorPorValidarInfoRepository.deleteById(id);
    }

    protected abstract void setDelete(Integer id);

    public void deleteAll() {
        log.debug("Ingresando deleteAll");
        this.setDeleteAll();
        this.proveedorPorValidarInfoRepository.deleteAll();
    }

    protected abstract void setDeleteAll();

    /**
     * Converts the passed proveedorPorValidarInfo to a DTO.
     */
    protected ProveedorPorValidarInfo toDTO(ProveedorPorValidarInfo proveedorPorValidarInfo) {
        return proveedorPorValidarInfo;
    }

    /**
     * Converts the passed dto to a ProveedorPorValidarInfo.
     * Convenient for query by example.
     */
    protected ProveedorPorValidarInfo toEntity(ProveedorPorValidarInfo dto) {
        return dto;
    }

}
/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.incloud.hcp.service.impl;

import com.incloud.hcp.common.enums.AppParametriaLabelEnum;
import com.incloud.hcp.common.enums.AppParametriaModuloEnum;
import com.incloud.hcp.common.excel.ExcelDefault;
import com.incloud.hcp.common.graph.GraphBarChart;
import com.incloud.hcp.common.graph.GraphBean;
import com.incloud.hcp.common.graph.GraphDataset;
import com.incloud.hcp.common.graph.GraphPieChart;
import com.incloud.hcp.domain.AppParametria;
import com.incloud.hcp.domain.MtrProveedor;
import com.incloud.hcp.domain.MtrVendedor;
import com.incloud.hcp.domain.MtrVendedor_;
import com.incloud.hcp.domain.response.MtrVendedorResponse;
import com.incloud.hcp.exception.ServiceException;
import com.incloud.hcp.repository.delta.AppParametriaDeltaRepository;
import com.incloud.hcp.repository.delta.MtrProveedorDeltaRepository;
import com.incloud.hcp.repository.delta.MtrVendedorDeltaRepository;
import com.incloud.hcp.service.MtrVendedorService;
import com.incloud.hcp.service._framework.bean.BeanCargaMasivoDTO;
import com.incloud.hcp.service._framework.bean.BeanListaMasivoDTO;
import com.incloud.hcp.service._framework.impl.JPACustomServiceImpl;
import com.incloud.hcp.service.delta.MtrProveedorDeltaService;
import com.incloud.hcp.service.requireNew.MtrVendedorRequireNewService;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.utils.Constants;
import com.incloud.hcp.utils.PredicateUtils;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * A simple DTO Facility for MtrVendedor.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public abstract class MtrVendedorServiceImpl extends JPACustomServiceImpl<MtrVendedorResponse, MtrVendedor, Integer> implements MtrVendedorService {

    protected final String NAME_SHEET = "MtrVendedor";
    protected final String CONFIG_TITLE = "com/incloud/hcp/excel/MtrVendedorExcel.xml";
    private final Integer REGISTROS_COLOR = 10;

    @Autowired
    protected AppParametriaDeltaRepository appParametriaDeltaRepository;

    @Autowired
    protected MtrVendedorDeltaRepository mtrVendedorDeltaRepository;

    @Autowired
    protected MtrVendedorRequireNewService mtrVendedorRequireNewService;

    @Autowired
    protected MtrProveedorDeltaService mtrProveedorDeltaService;

    @Autowired
    protected MtrProveedorDeltaRepository mtrProveedorDeltaRepository;

    /*****************************/
    /* Metodos de Busqueda       */
    /*****************************/

    protected final ExampleMatcher setAbstractFind(ExampleMatcher matcher) {
        matcher = ExampleMatcher.matching() //
                .withMatcher(MtrVendedor_.nroDocumento.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(MtrVendedor_.telefono.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(MtrVendedor_.nombre.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(MtrVendedor_.apellidoParterno.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(MtrVendedor_.apellidoMaterno.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(MtrVendedor_.estado.getName(), match -> match.ignoreCase().startsWith());
        return matcher;
    }

    protected abstract Sort setFindAll(Sort sort);

    protected abstract Sort setFind(MtrVendedor req, ExampleMatcher matcher, Example<MtrVendedor> example, Sort sort);

    protected abstract void setFindPaginated(PageRequestByExample<MtrVendedor> req, ExampleMatcher matcher, Example<MtrVendedor> example);

    protected final MtrVendedor setObtenerBeanResponse(MtrVendedorResponse bean) {
        return bean.getBean();
    }

    protected final Class<MtrVendedor> setObtenerClassBean() {
        return MtrVendedor.class;
    }

    protected List<Predicate> setAbstractPredicate(MtrVendedorResponse bean, CriteriaBuilder cb, Root<MtrVendedor> root) {
        List<Predicate> predicates = new ArrayList<>();
        MtrVendedor entity = bean.getBean();
        /* Obtener condiciones */
        PredicateUtils.addPredicates(predicates, bean.getIdCondicion(), "id", entity.getId(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getNroDocumentoCondicion(), "nroDocumento", entity.getNroDocumento(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getTelefonoCondicion(), "telefono", entity.getTelefono(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getNombreCondicion(), "nombre", entity.getNombre(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getApellidoParternoCondicion(), "apellidoParterno", entity.getApellidoParterno(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getApellidoMaternoCondicion(), "apellidoMaterno", entity.getApellidoMaterno(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getEstadoCondicion(), "estado", entity.getEstado(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrProveedorCondicion(), "mtrProveedor", entity.getMtrProveedor(), cb, root);
        /* Obtener valores de Lista */
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "id", bean.getIdList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "nroDocumento", bean.getNroDocumentoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "telefono", bean.getTelefonoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "nombre", bean.getNombreList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "apellidoParterno", bean.getApellidoParternoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "apellidoMaterno", bean.getApellidoMaternoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "estado", bean.getEstadoList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrProveedor", bean.getMtrProveedorList(), cb, root);
        return predicates;
    }

    /****************/
    /* METODOS CRUD */
    /****************/

    protected final String validacionesPrevias(MtrVendedor bean) throws Exception {
        String mensaje = "";
        String msg = this.setValidacionesPrevias(bean);
        if (StringUtils.isNotBlank(msg)) {
            mensaje += "* " + msg + "<br/>";
        }
        return mensaje;
    }

    protected String setValidacionesPrevias(MtrVendedor bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected String validacionesPreviasCreate(MtrVendedor bean) throws Exception {
        String msg = null;
        MtrVendedor validar = null;
        return msg;
    }

    protected String validacionesPreviasSave(MtrVendedor bean) throws Exception {
        String msg = null;
        MtrVendedor validar = null;
        return msg;
    }

    protected MtrVendedor completarDatosBean(MtrVendedor bean) throws Exception {
        BigDecimal data = new BigDecimal(0.00);
        bean = this.setCompletarDatosBean(bean);
        return bean;
    }

    protected MtrVendedor setCompletarDatosBean(MtrVendedor bean) throws Exception {
        return bean;
    }

    protected final MtrVendedor setAbstractCreate(MtrVendedor dto) throws Exception {
        MtrVendedor bean = new MtrVendedor();
        bean = (MtrVendedor) BeanUtils.cloneBean(dto);
        return bean;
    }

    /************************/
    /* METODOS CRUD Masivos */
    /************************/

    protected MtrVendedor setUploadExcel(Cell currentCell, MtrVendedor mtrVendedor, int contador) throws Exception {
        Double valorDouble = new Double(0);
        BigDecimal valorDecimal = new BigDecimal(0);
        Boolean valorBoolean = new Boolean(true);
        String valorCadena = "";
        switch (contador) {
        case 1:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 40) {
                    throw new ServiceException("Valor Campo nroDocumento contiene mas de 40 caracter(es)");
                }
                mtrVendedor.setNroDocumento(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo nroDocumento estÃ¡ en formato incorrecto");
            }
            break;
        case 2:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 20) {
                    throw new ServiceException("Valor Campo telefono contiene mas de 20 caracter(es)");
                }
                mtrVendedor.setTelefono(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo telefono estÃ¡ en formato incorrecto");
            }
            break;
        case 3:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 80) {
                    throw new ServiceException("Valor Campo nombre contiene mas de 80 caracter(es)");
                }
                mtrVendedor.setNombre(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo nombre estÃ¡ en formato incorrecto");
            }
            break;
        case 4:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 80) {
                    throw new ServiceException("Valor Campo apellidoParterno contiene mas de 80 caracter(es)");
                }
                mtrVendedor.setApellidoParterno(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo apellidoParterno estÃ¡ en formato incorrecto");
            }
            break;
        case 5:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 80) {
                    throw new ServiceException("Valor Campo apellidoMaterno contiene mas de 80 caracter(es)");
                }
                mtrVendedor.setApellidoMaterno(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo apellidoMaterno estÃ¡ en formato incorrecto");
            }
            break;
        case 6:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 1) {
                    throw new ServiceException("Valor Campo estado contiene mas de 1 caracter(es)");
                }
                mtrVendedor.setEstado(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo estado estÃ¡ en formato incorrecto");
            }
            break;
        default:
            break;
        }
        return mtrVendedor;
    }

    protected AppParametria setObtenerRegistroConfiguracionUploadExcel() {
        AppParametria appParametriaData = this.appParametriaDeltaRepository.getByModuloAndLabelAndStatus(AppParametriaModuloEnum.CARGA_EXCEL.getEstado(),
                AppParametriaLabelEnum.INICIO_REGISTRO_DATA.getEstado(), Constants.ESTADO_ACTIVO);
        return appParametriaData;
    }

    protected MtrVendedor setInicializarBeanUpdateExcel() {
        MtrVendedor bean = new MtrVendedor();
        bean.setId(null);
        return bean;
    }

    protected final Integer setObtenerId(MtrVendedor bean) {
        return bean.getId();
    }

    /************************/
    /* Instancia de Bean    */
    /************************/

    protected final MtrVendedor createInstance() {
        MtrVendedor mtrVendedor = new MtrVendedor();
        return mtrVendedor;
    }

    protected final BeanCargaMasivoDTO<MtrVendedor> createInstanceMasivoDTO() {
        BeanCargaMasivoDTO<MtrVendedor> beanCargaMasivoDTO = new BeanCargaMasivoDTO<MtrVendedor>();
        return beanCargaMasivoDTO;

    }

    protected final BeanListaMasivoDTO<BeanCargaMasivoDTO<MtrVendedor>> createInstanceListaMasivoDTO() {
        BeanListaMasivoDTO<BeanCargaMasivoDTO<MtrVendedor>> beanCargaMasivoDTOBeanListaMasivoDTO = new BeanListaMasivoDTO<BeanCargaMasivoDTO<MtrVendedor>>();
        return beanCargaMasivoDTOBeanListaMasivoDTO;
    }

    /*****************************/
    /* Metodos que generan Excel */
    /*****************************/

    protected String devuelveNombreSheet() {
        return this.NAME_SHEET;
    }

    protected String devuelveListaHeaderExcelXML() {
        return this.CONFIG_TITLE;
    }

    protected int setAbstractDownloadExcel(MtrVendedor bean, HSSFRow dataRow) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getNroDocumento(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getTelefono(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getNombre(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getApellidoParterno(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getApellidoMaterno(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getEstado(), dataRow.createCell(contador));
        contador++;
        return contador;
    }

    protected int setAbstractDownloadExcelSXLSX(MtrVendedor bean, Row dataRow, List<CellStyle> cellStyleList) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getNroDocumento(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getTelefono(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getNombre(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getApellidoParterno(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getApellidoMaterno(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getEstado(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        return contador;
    }

    protected String setAbstractGenerateInsertExcelSXLSX(MtrVendedor bean) {
        String fechaS = "";
        String sqlInsert = "INSERT INTO mtr_vendedor(";
        sqlInsert = sqlInsert + "cer_vendedor_id" + ", ";
        sqlInsert = sqlInsert + "nro_documento" + ", ";
        sqlInsert = sqlInsert + "telefono" + ", ";
        sqlInsert = sqlInsert + "nombre" + ", ";
        sqlInsert = sqlInsert + "apellido_parterno" + ", ";
        sqlInsert = sqlInsert + "apellido_materno" + ", ";
        sqlInsert = sqlInsert + "estado" + ", ";
        sqlInsert = sqlInsert + "mtr_proveedor_id" + ")";
        sqlInsert = sqlInsert + " VALUES (";
        sqlInsert = sqlInsert + bean.getId() + ", ";
        if (StringUtils.isBlank(bean.getNroDocumento())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getNroDocumento() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getTelefono())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getTelefono() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getNombre())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getNombre() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getApellidoParterno())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getApellidoParterno() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getApellidoMaterno())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getApellidoMaterno() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getEstado())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getEstado() + "'" + ", ";
        }
        sqlInsert = sqlInsert + bean.getMtrProveedor().getId();
        sqlInsert = sqlInsert + " );";
        return sqlInsert;
    }

    /*****************/
    /* Otros Metodos */
    /*****************/

    public Long countByMtrProveedor(MtrProveedor mtrProveedor) {
        return this.mtrVendedorDeltaRepository.countByMtrProveedor(mtrProveedor);
    }

    public GraphBean graphByMtrProveedor() {
        List<MtrProveedor> lista = this.mtrProveedorDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrProveedor bean : lista) {
            Long valor = this.mtrVendedorDeltaRepository.countByMtrProveedor(bean);
            String descripcion = this.setGraphDescripcionByMtrProveedor(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrProveedor();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrProveedor();
        contador = 0;
        contadorColor = 0;
        for (MtrProveedor bean : lista) {
            Long valor = this.mtrVendedorDeltaRepository.countByMtrProveedor(bean);
            String descripcion = this.setGraphDescripcionByMtrProveedor(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrProveedor(MtrProveedor mtrProveedor) {
        return mtrProveedor.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrProveedor() {
        return "MtrProveedor";
    }

    protected String setGraphBarChartTituloByMtrProveedor() {
        return "MtrProveedor";
    }

}

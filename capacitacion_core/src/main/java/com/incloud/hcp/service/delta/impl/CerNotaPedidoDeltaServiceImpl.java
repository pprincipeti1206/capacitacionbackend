/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 *
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntitydeltaDTOService.java.e.vm
 */
package com.incloud.hcp.service.delta.impl;

import com.incloud.hcp._security.SystemLoggedUser;
import com.incloud.hcp._security.UserSession;
import com.incloud.hcp.cmis.CmisFile;
import com.incloud.hcp.common.excel.ExcelDefault;
import com.incloud.hcp.domain.*;
import com.incloud.hcp.domain.response.CerNotaPedidoResponse;
import com.incloud.hcp.enums.*;
import com.incloud.hcp.repository.delta.*;
import com.incloud.hcp.service._framework.bean.BeanFinalDatosPredicateDto;
import com.incloud.hcp.service._framework.cmis.CmisService;
import com.incloud.hcp.service.delta.*;
import com.incloud.hcp.service.dto.*;
import com.incloud.hcp.service.impl.CerNotaPedidoServiceImpl;
import com.incloud.hcp.service.notificacion.CertificadoNotaPedidoNotificacion;
import com.incloud.hcp.service.notificacion.CertificadoNotificacion;
import com.incloud.hcp.service.notificacion.MailSetting;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.service.support.PageResponse;
import com.incloud.hcp.utils.Constants;
import com.incloud.hcp.utils.DateUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.streaming.SXSSFSheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import javax.persistence.criteria.*;
import java.awt.*;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

/**
 * A simple DTO Facility for CerNotaPedido. prueba
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public class CerNotaPedidoDeltaServiceImpl extends CerNotaPedidoServiceImpl implements CerNotaPedidoDeltaService {

    protected final String NAME_SHEET_DETALLE = "Nota Pedido: ";
    protected final String CONFIG_TITLE_DETALLE = "com/incloud/hcp/excel/CerNotaPedido01Excel.xml";
    protected final String GENERADO = "GENERADO";

    protected final String CODIGO_ESTADO_CERRADO = EstadoNotaPedidoEnum.CERRADA.getEstado();

    @Autowired
    private CerNotaPedidoDetalleDeltaService cerNotaPedidoDetalleDeltaService;

    @Autowired
    private MtrEstadoDeltaRepository mtrEstadoDeltaRepository;

    @Autowired
    private SystemLoggedUser systemLoggedUser;

    @Autowired
    private CerNotaPedidoHistorialDeltaService cerNotaPedidoHistorialDeltaService;

    @Autowired
    protected CertificadoNotaPedidoNotificacion certificadoNotaPedidoNotificacion;

    @Autowired
    private CerNotaPedidoDetalleDeltaRepository cerNotaPedidoDetalleDeltaRepository;

    @Autowired
    private CerCertificadoDeltaRepository cerCertificadoDeltaRepository;

    @Autowired
    private CerCertificadoDetalleDeltaRepository cerCertificadoDetalleDeltaRepository;

    @Autowired
    private CerHistorialDeltaRepository cerHistorialDeltaRepository;

    @Autowired
    private CerFirmaDeltaRepository cerFirmaDeltaRepository;

    @Autowired
    private CertificadoNotificacion certificadoNotificacion;

    @Autowired
    private MtrTipoFirmaDeltaRepository mtrTipoFirmaDeltaRepository;

    @Autowired
    private CerNotaPedidoAdjuntoDeltaRepository cerNotaPedidoAdjuntoDeltaRepository;

    @Autowired
    private CerNotaPedidoAdjuntoDeltaService cerNotaPedidoAdjuntoDeltaService;

    @Autowired
    private CerNotaPedidoHistorialDeltaRepository cerNotaPedidoHistorialDeltaRepository;

    @Autowired
    private AppParametriaDeltaService appParametriaDeltaService;

    @Autowired
    private CmisService cmisService;

    //SMTP Values
    @Value("${spring.mail.username}")
    private String username;
    @Value("${spring.mail.password}")
    private String password;
    @Value("${spring.mail.host}")
    private String host;
    @Value("${spring.mail.port}")
    private String port;

    /**************************/
    /* Metodos Personalizados */
    /**************************/

    public CerNotaPedidoGrabarAdjuntoDto grabarListaAdjunto(CerNotaPedidoGrabarAdjuntoDto bean) throws Exception {
        Optional<CerNotaPedido> optionalCerNota = this.cerNotaPedidoDeltaRepository.findById(bean.getCerNotaPedidoId());
        if (!optionalCerNota.isPresent()) {
            throw new Exception("No se encontr√≥ Nota de Pedido con ID: " + bean.getCerNotaPedidoId());
        }
        CerNotaPedido cerNotapedido = optionalCerNota.get();

        UserSession userSession = this.systemLoggedUser.getUserSession();
        List<CerNotaPedidoAdjunto> cerNotaPedidoAdjuntoList = bean.getCerNotaPedidoAdjuntoList();
        log.error("grabarListaAdjunto 02 cerNotaPedidoAdjuntoList: (size)" + cerNotaPedidoAdjuntoList.size());
        log.error("grabarListaAdjunto 03 cerNotaPedidoAdjuntoList: " + cerNotaPedidoAdjuntoList.toString());

        String nameFolder = "COGA-NOTAPEDIDO-" + bean.getCerNotaPedidoId();
        log.error("grabarListaAdjunto 04 NOMBRE FOLDER " + nameFolder);

        //is Empty elements attach
        if (cerNotaPedidoAdjuntoList != null && cerNotaPedidoAdjuntoList.size() > 0) {
            String folderId = cmisService.createFolder(nameFolder);

            //Creo una segunda lista con los adjuntos no guardados -
            List<CmisFile> listAdjuntoNew = new ArrayList<CmisFile>();
            if (cerNotaPedidoAdjuntoList.size() > 0) {
                cerNotaPedidoAdjuntoList.forEach(item -> {
                    listAdjuntoNew.add(
                            new CmisFile(item.getArchivoId(), item.getArchivoNombre(), item.getRutaCatalogo(), item.getArchivoTipo()));
                });
            }
            log.error("grabarListaAdjunto 06 - listAdjuntoNew: size: " + listAdjuntoNew.size());
            log.error("grabarListaAdjunto 07 - listAdjuntoNew: " + listAdjuntoNew.toString());

            //Se mueven los adjuntos al folder destino y se obtiene la lista de los mismos con su nuevo URL
            Optional<List<CmisFile>> listAdjuntoMove = Optional.ofNullable(listAdjuntoNew)
                    .map(list -> {
                        log.error("grabarListaAdjunto 08 - Actualizando la version de los archivos catalogos");
                        return cmisService.updateFileAndMove(listAdjuntoNew, folderId);
                    });
            if (Optional.ofNullable(listAdjuntoMove.get()).isPresent()) {
                for (CmisFile cmisFile : listAdjuntoMove.get()) {
                    CerNotaPedidoAdjunto documento = new CerNotaPedidoAdjunto();
                    documento.setCarpetaId(folderId);
                    documento.setArchivoId(cmisFile.getId());
                    documento.setArchivoNombre(cmisFile.getName());
                    documento.setRutaCatalogo(cmisFile.getUrl());
                    documento.setArchivoTipo(cmisFile.getType());
                    documento.setSize(cmisFile.getSize());
                    documento.setTipoAdjunto("NPED-OTROS");
                    documento.setCerNotaPedido(cerNotapedido);
                    this.cerNotaPedidoAdjuntoDeltaRepository.save(documento);
                }
            }
        }
        return bean;
    }

    public String deleteAdjunto(String archivoID) throws Exception {
        if (this.appParametriaDeltaService.devuelveApagarCertificado()) {
            throw new Exception(Constants.MENSAJE_SISTEMA_APAGADO);
        }
        //Delete from HANA
        CerNotaPedidoAdjunto req = new CerNotaPedidoAdjunto();
        req.setArchivoId(archivoID);
        this.cerNotaPedidoAdjuntoDeltaService.find(req).forEach(e -> {
            this.cerNotaPedidoAdjuntoDeltaRepository.delete(e);
        });

        //Delete form CMIS
        cmisService.deleteFile(archivoID);
        return archivoID;
    }

    public CerNotaPedidoAdjunto agregarAdjuntoTemporal(MultipartFile file) throws Exception {

        if (this.appParametriaDeltaService.devuelveApagarCertificado()) {
            throw new Exception(Constants.MENSAJE_SISTEMA_APAGADO);
        }
        CerNotaPedidoAdjunto cerNotaPedidoAdjunto = new CerNotaPedidoAdjunto();
        log.error("agregarAdjunto 00 file: " + file.toString());
        UserSession user = this.systemLoggedUser.getUserSession();

        String TEMP_DIRECTORY = "COGA-TEMP";
        String folderId = this.cmisService.createFolder(TEMP_DIRECTORY);
        log.debug("agregarAdjunto 01 ---> folderId  [" + folderId + " ]");
        CmisFile cmisFile = cmisService.createOrReplaceDocumento(folderId, file);

        log.error("agregarAdjunto 02 ---> cmisFile  [" + cmisFile.toString() + " ]");
        Long current = System.currentTimeMillis();
        int valorCurrent = Math.abs(current.intValue());

        cerNotaPedidoAdjunto.setId(valorCurrent);
        cerNotaPedidoAdjunto.setCarpetaId(folderId);
        cerNotaPedidoAdjunto.setArchivoId(cmisFile.getId());
        cerNotaPedidoAdjunto.setArchivoNombre(cmisFile.getName());
        cerNotaPedidoAdjunto.setRutaCatalogo(cmisFile.getUrl());
        cerNotaPedidoAdjunto.setArchivoTipo(cmisFile.getType());
        cerNotaPedidoAdjunto.setSize(cmisFile.getSize());
        cerNotaPedidoAdjunto.setTipoAdjunto("NPED-OTROS");

        log.error("agregarAdjunto 03 cerNotaPedidoAdjunto  [" + file.getName() + " , " +
                file.getSize() + " temp directory " + TEMP_DIRECTORY + " ]");

        log.error("agregarDocumentoCerificado 04 cerNotaPedidoAdjunto: " + cerNotaPedidoAdjunto);
        return cerNotaPedidoAdjunto;
    }



    public CerNotaPedidoDto devuelveNotaPedido(Integer notaPedidoId) throws Exception {

        Optional<CerNotaPedido> optionalCerNota = this.cerNotaPedidoDeltaRepository.findById(notaPedidoId);
        if (!optionalCerNota.isPresent()) {
            throw new Exception("No se encontr√≥ Nota de Pedido con ID: " + notaPedidoId);
        }
        CerNotaPedido cerNotapedido = optionalCerNota.get();

        CerNotaPedidoDto cerNotaPedidoDto = new CerNotaPedidoDto();
        cerNotaPedidoDto.setCerNotaPedido(cerNotapedido);
        List<CerNotaPedidoDetalleDto> cerNotaPedidoDetalleDtoList =
                this.cerNotaPedidoDetalleDeltaService.findByDetalle(notaPedidoId);
        cerNotaPedidoDto.setCerNotaPedidoDetalleDtoList(cerNotaPedidoDetalleDtoList);
        List<CerNotaPedidoAdjunto> cerNotaPedidoAdjuntoList =
                this.cerNotaPedidoAdjuntoDeltaRepository.findByCerNotaPedidoOrderByArchivoNombre(cerNotapedido);
        cerNotaPedidoDto.setCerNotaPedidoAdjuntoList(cerNotaPedidoAdjuntoList);
        List<CerNotaPedidoHistorial> cerNotaPedidoHistorialList =
                this.cerNotaPedidoHistorialDeltaRepository.findByCerNotaPedidoOrderByFechaHistorialDesc(cerNotapedido);
        return cerNotaPedidoDto;

    }

    public CerNotaPedidoValidarMontoDto validarMontoPendiente(Integer notaPedidoId) throws Exception {
        CerNotaPedidoValidarMontoDto cerNotaPedidoValidarMontoDto = new CerNotaPedidoValidarMontoDto();

        Optional<CerNotaPedido> optionalCerNota = this.cerNotaPedidoDeltaRepository.findById(notaPedidoId);
        if (!optionalCerNota.isPresent()) {
            throw new Exception("No se encontr√≥ Nota de Pedido con ID: " + notaPedidoId);
        }
        CerNotaPedido cerNotapedido = optionalCerNota.get();

        String tipoMaterialServicio = cerNotapedido.getTipo();
        cerNotaPedidoValidarMontoDto.setTipoMaterialServicio(tipoMaterialServicio);
        cerNotaPedidoValidarMontoDto.setMontoPendiente(new BigDecimal(0.00));
        cerNotaPedidoValidarMontoDto.setTipoAbiertoCerrada(Constants.NP_CERRADA);

        MtrClaseDocumento mtrClaseDocumento = cerNotapedido.getMtrClaseDocumento();
        AppParametria appParametria = new AppParametria();
        appParametria.setModulo(Constants.TIPO_NP_CD);
        appParametria.setStatus(Constants.UNO);
        List<AppParametria> appParametriaList = this.appParametriaDeltaService.find(appParametria);

        boolean abierta = false;
        if (appParametriaList != null && appParametriaList.size() > 0) {
            for (AppParametria beanParametria : appParametriaList) {
                if (beanParametria.getValue1().equals(mtrClaseDocumento.getCodigoSap())) {
                    abierta = true;
                }
            }
        }
        if (abierta) {
            cerNotaPedidoValidarMontoDto.setTipoAbiertoCerrada(Constants.NP_ABIERTA);
            MtrEstado mtrEstado = this.mtrEstadoDeltaRepository.
                    getByCodigoAgrupadoAndCodigoEstado(
                            Constants.CODIGO_AGRUPADO_CERTIFICADO,
                            EstadoCertificadoEnum.BORRADOR.getEstado()
                    );
            MtrEstado mtrEstadoEliminado = this.mtrEstadoDeltaRepository.
                    getByCodigoAgrupadoAndCodigoEstado(
                            Constants.CODIGO_AGRUPADO_CERTIFICADO,
                            EstadoCertificadoEnum.ELIMINADO.getEstado()
                    );
            List<CerCertificado> cerCertificadoList = this.cerCertificadoDeltaRepository.
                    findByIdNotaPedidoIdAndNotEstado(cerNotapedido.getId(), mtrEstado.getId(), mtrEstadoEliminado.getId());
            BigDecimal sumaMonto = new BigDecimal(0.00);
            if (cerCertificadoList != null && cerCertificadoList.size() > 0) {
                for(CerCertificado beanCertificado : cerCertificadoList) {
                    BigDecimal montoTotal = beanCertificado.getMontoTotal() != null ?
                            beanCertificado.getMontoTotal() : new BigDecimal(0.00);
                    sumaMonto = new BigDecimal(sumaMonto.floatValue() + montoTotal.floatValue());
                }
            }
            BigDecimal montoNotaPedido = cerNotapedido.getMonto() != null ?
                    cerNotapedido.getMonto() : new BigDecimal(0.00);
            BigDecimal montoPendiente = new BigDecimal(
                    montoNotaPedido.floatValue() - sumaMonto.floatValue()
            );
            cerNotaPedidoValidarMontoDto.setMontoPendiente(montoPendiente);
        }
        return cerNotaPedidoValidarMontoDto;
    }

    public List<CerNotaPedido> findProveedor(CerNotaPedido bean) throws Exception {
        UserSession userSession = this.systemLoggedUser.getUserSession();
        MtrProveedor mtrProveedor = this.mtrProveedorDeltaRepository.findByCodigoIdp(userSession.getId());
        if (!Optional.ofNullable(mtrProveedor).isPresent()) {
            throw new Exception("El Proveedor con c√≥digo IDP: " + userSession.getId() + " no se encuentra registrado en la Tabla MtrProveedor o no esta asociado al IDP en dicha Tabla");
        }
        bean.setMtrProveedor(mtrProveedor);
        return this.find(bean);
    }

    public PageResponse<CerNotaPedido> findCondicionProveedorPaginated(
            CerNotaPedidoResponse req,
            PageRequest pageRequest) throws Exception {
        UserSession userSession = this.systemLoggedUser.getUserSession();

        CerNotaPedido cerNotaPedido = req.getBean();
        MtrProveedor mtrProveedor = this.mtrProveedorDeltaRepository.findByCodigoIdp(userSession.getId());
        if (!Optional.ofNullable(mtrProveedor).isPresent()) {
            throw new Exception("El Proveedor con c√≥digo IDP: " + userSession.getId() + " no se encuentra registrado en la Tabla MtrProveedor o no esta asociado al IDP en dicha Tabla");
        }
        MtrProveedor mtrProveedorBuscar = new MtrProveedor();
        mtrProveedorBuscar.setId(mtrProveedor.getId());
        cerNotaPedido.setMtrProveedor(mtrProveedorBuscar);
        req.setBean(cerNotaPedido);
        PageResponse<CerNotaPedido> pageResponse = this.findCondicionPaginated(req, pageRequest);
        return pageResponse;
    }



    public void actualizarNoVigente() throws Exception {
        if (this.appParametriaDeltaService.devuelveApagarCertificado()) {
            throw new Exception(Constants.MENSAJE_SISTEMA_APAGADO);
        }
        List<CerNotaPedido> cerNotaPedidoList = this.cerNotaPedidoDeltaRepository.findByVerificarNoVigente();
        Date fechaSistema = DateUtils.obtenerFechaHoraActual();
        MtrEstado mtrEstado = this.mtrEstadoDeltaRepository.
                getByCodigoAgrupadoAndCodigoEstado(
                        Constants.CODIGO_AGRUPADO_NOTA_PEDIDO,
                        EstadoNotaPedidoEnum.NO_VIGENTE.getEstado());
        for (CerNotaPedido bean : cerNotaPedidoList) {
            Date fechaFinVigencia = bean.getFechaFinVigencia();
            if (Optional.ofNullable(fechaFinVigencia).isPresent()) {
                Integer plazo = bean.getPlazo();
                if (!Optional.ofNullable(plazo).isPresent()) {
                    plazo = new Integer(0);
                }
                Date fechaFinPlazo = DateUtils.
                        sumarRestarDias(fechaFinVigencia, plazo + 1);
                if (fechaFinPlazo.before(fechaSistema)) {
                    //log.error("actualizarNoVigente fechaFin: " + fechaFinPlazo);
                    //log.error("actualizarNoVigente fechaSistema: " + fechaSistema);
                    bean.setMtrEstado(mtrEstado);
                    this.cerNotaPedidoDeltaRepository.save(bean);

                    CerNotaPedidoHistorial cerNotaPedidoHistorial = new CerNotaPedidoHistorial();
                    cerNotaPedidoHistorial.setCerNotaPedido(bean);
                    cerNotaPedidoHistorial.setDescripcion("CAMBIADO A NO VIGENTE POR JOB fechaFinVigencia: " + fechaFinVigencia +
                            " Plazo: " + plazo +
                            " fechaFinPlazo: " + fechaFinPlazo +
                            " F.Sistema: " + fechaSistema );
                    cerNotaPedidoHistorial.setUsuarioHistoral("JOB");
                    cerNotaPedidoHistorial.setMtrEstado(mtrEstado);
                    cerNotaPedidoHistorial.setFechaHistorial(DateUtils.obtenerFechaHoraActual());
                    cerNotaPedidoHistorial.setFechaFinVigencia(fechaFinVigencia);
                    cerNotaPedidoHistorial.setPlazo(plazo);
                    this.cerNotaPedidoHistorialDeltaRepository.save(cerNotaPedidoHistorial);

                }
            }
        }
    }


    public SXSSFWorkbook downloadExcelporFiltro(CerNotaPedido cerNotaPedido) throws Exception {
        CerNotaPedidoResponse cerNotaPedidoResponse = new CerNotaPedidoResponse();
        cerNotaPedidoResponse.setBean(cerNotaPedido);
        if (Optional.ofNullable(cerNotaPedido.getCodigoNotaPedidoSap()).isPresent()) {
            cerNotaPedidoResponse.setCodigoNotaPedidoSapCondicion(ConditionEnum.CONTIENE.getEstado());
        }
        if (Optional.ofNullable(cerNotaPedido.getUserCompra()).isPresent()) {
            cerNotaPedidoResponse.setUserCompraCondicion(ConditionEnum.CONTIENE.getEstado());
        }
        if (Optional.ofNullable(cerNotaPedido.getFechaInicio()).isPresent()) {
            cerNotaPedidoResponse.setFechaInicioCondicion(ConditionEnum.MAYOR_IGUAL.getEstado());
        }
        if (Optional.ofNullable(cerNotaPedido.getFechaFin()).isPresent()) {
            cerNotaPedidoResponse.setFechaFinCondicion(ConditionEnum.MENOR_IGUAL.getEstado());
        }
        List<CerNotaPedido> cerNotaPedidoList = this.findCondicion(cerNotaPedidoResponse);

        SXSSFWorkbook book = new SXSSFWorkbook(100);
        XSSFWorkbook xbook = book.getXSSFWorkbook();
        SXSSFSheet sheet = book.createSheet();

        int numberOfSheets = book.getNumberOfSheets();
        book.setSheetName(numberOfSheets - 1, this.devuelveNombreSheet());
        int nroColumnas = ExcelDefault.createTitleAndWidth(
                xbook,
                sheet,
                this.CONFIG_TITLE_DETALLE,
                NAME_SHEET_DETALLE,
                null);

        sheet.untrackAllColumnsForAutoSizing();

        XSSFCellStyle cellStyle01 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 1), new Color(226, 239, 218), false, (short) 10);
        XSSFCellStyle cellStyle02 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 192), new Color(255, 255, 255), false, (short) 10);
        List<CellStyle> cellStyleList01 = ExcelDefault.generarCellStyle(xbook, cellStyle01);
        List<CellStyle> cellStyleList02 = ExcelDefault.generarCellStyle(xbook, cellStyle02);
        List<CellStyle> cellStyleList = cellStyleList01;
        boolean filaImpar = true;
        for (CerNotaPedido bean : cerNotaPedidoList) {
            int lastRow = sheet.getLastRowNum();
            int i = lastRow < 0 ? 0 : lastRow;
            Row dataRow = sheet.createRow(i + 1);
            int contador = 0;
            if (filaImpar) {
                cellStyleList = cellStyleList01;
            } else {
                cellStyleList = cellStyleList02;
            }
            filaImpar = !filaImpar;

            ExcelDefault.setValueCell(bean.getCodigoNotaPedidoSap(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getUserCompra(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getTnotasAclaratorias(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getTlugarPago(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getTformaPago(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getTdocParticulares(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getTconcepto(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getPlazo(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getNroPedidoOriginal(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getCodigoNotaPedidoSap(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getNroBid(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getMonto(), dataRow.createCell(contador), "N", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getFechaInicio(), dataRow.createCell(contador), "D", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getFechaFin(), dataRow.createCell(contador), "D", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getFechaDocumento(), dataRow.createCell(contador), "D", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getFechaCierre(), dataRow.createCell(contador), "D", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getFechaAcuseRecibo(), dataRow.createCell(contador), "D", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getDescripcion(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
        }
        return book;

    }

    public List<CerNotaPedido> findListaCrearCertificado() throws Exception {
        MtrEstado mtrEstado = this.mtrEstadoDeltaRepository.
                getByCodigoAgrupadoAndCodigoEstado(
                        Constants.CODIGO_AGRUPADO_NOTA_PEDIDO,
                        EstadoNotaPedidoEnum.ACUSE_RECIBO.getEstado());

        UserSession userSession = this.systemLoggedUser.getUserSession();
        MtrProveedor mtrProveedor = this.mtrProveedorDeltaRepository.findByCodigoIdp(userSession.getId());
        if (!Optional.ofNullable(mtrProveedor).isPresent()) {
            throw new Exception("No se encontr√≥ Proveedor con C√≥digo IDP: " + userSession.getId());
        }
        List<CerNotaPedido> cerNotaPedidoList = this.cerNotaPedidoDeltaRepository.
                findByMtrProveedorAndMtrEstadoAndTipoAndNroBid(mtrProveedor, mtrEstado, Constants.TIPO_SERVICIO, null);
        return cerNotaPedidoList;

    }


    public List<CertificadoNotaPedidoDetalleDto> listNotaPedidoAndDetails(String nroPedido) {

        final List<CertificadoNotaPedidoDetalleDto> listData = new ArrayList<CertificadoNotaPedidoDetalleDto>();

        CertificadoNotaPedidoDetalleDto certificadoNotaPedidoDetalleDto = new CertificadoNotaPedidoDetalleDto();
        CerNotaPedido req = new CerNotaPedido();
        req.setCodigoNotaPedidoSap(nroPedido);
        find(req).forEach(e -> {
            certificadoNotaPedidoDetalleDto.setCerNotaPedido(e);
        });
        CerNotaPedidoDetalle reqNotaDetalle = new CerNotaPedidoDetalle();
        reqNotaDetalle.setCerNotaPedido(certificadoNotaPedidoDetalleDto.getCerNotaPedido());
        certificadoNotaPedidoDetalleDto.setCerNotaPedidoDetallelist(cerNotaPedidoDetalleDeltaService.find(reqNotaDetalle));
        listData.add(certificadoNotaPedidoDetalleDto);

        return listData;
    }

    public CerNotaPedidoIntermedioAprobarDto aprobarNotaPedido(Integer notaPedidoId) throws Exception {
        if (this.appParametriaDeltaService.devuelveApagarCertificado()) {
            throw new Exception(Constants.MENSAJE_SISTEMA_APAGADO);
        }
        CerNotaPedidoIntermedioAprobarDto cerNotaPedidoIntermedioAprobarDto = new CerNotaPedidoIntermedioAprobarDto();
        List<CerCertificado> certificadoCreadasAutomaticaList = new ArrayList<CerCertificado>();

        Optional<CerNotaPedido> optionalCerNota = this.cerNotaPedidoDeltaRepository.findById(notaPedidoId);
        if (!optionalCerNota.isPresent()) {
            throw new Exception("No se encontr√≥ Nota de Pedido con ID: " + notaPedidoId);
        }
        CerNotaPedido cerNotapedido = optionalCerNota.get();

        MtrEstado mtrEstadoNotaPedido = cerNotapedido.getMtrEstado();
        if (!mtrEstadoNotaPedido.getCodigoEstado().equals(EstadoNotaPedidoEnum.SIN_ACUSE_RECIBO.getEstado())) {
            throw new Exception("Nota de Pedido no puede ser Aprobada debido que se encuentra en ESTADO: " +
                    mtrEstadoNotaPedido.getDescripcion());
        }
        UserSession userSession = this.systemLoggedUser.getUserSession();

        MtrEstado mtrEstado = new MtrEstado();
        mtrEstado.setCodigoAgrupado(Constants.CODIGO_AGRUPADO_NOTA_PEDIDO);
        mtrEstado.setCodigoEstado(EstadoNotaPedidoEnum.ACUSE_RECIBO.getEstado());

        MtrClaseDocumento mtrClaseDocumento = cerNotapedido.getMtrClaseDocumento();
        if (cerNotapedido.getTipo().equals(TipoNotaPedidoEnum.MATERIAL.getEstado())) {
            AppParametria appParametria = new AppParametria();
            appParametria.setModulo(Constants.TIPO_NP_CD);
            appParametria.setStatus(Constants.UNO);
            List<AppParametria> appParametriaList = this.appParametriaDeltaService.find(appParametria);
            boolean cerrar = false;
            if (appParametriaList != null && appParametriaList.size() > 0) {
                for (AppParametria beanParametria : appParametriaList) {
                    if (beanParametria.getValue1().equals(mtrClaseDocumento.getCodigoSap())) {
                        cerrar = true;
                    }
                }
            }
            if (cerrar) {
                mtrEstado.setCodigoEstado(EstadoNotaPedidoEnum.CERRADA.getEstado());
            }

        }

        EstadoNotaPedidoDto estadoNotaPedidoDto = new EstadoNotaPedidoDto();
        estadoNotaPedidoDto.setNotaPedidoID(notaPedidoId);
        estadoNotaPedidoDto.setEstado(mtrEstado);
        estadoNotaPedidoDto.setDescripcion(GENERADO);
        cerNotapedido = this.actualizaEstado(estadoNotaPedidoDto);

        if (!cerNotapedido.getTipo().equals(TipoNotaPedidoEnum.MATERIAL.getEstado())) {
            cerNotaPedidoIntermedioAprobarDto.setCerNotaPedido(cerNotapedido);
            return cerNotaPedidoIntermedioAprobarDto;
        }


        MtrTipoFirma mtrTipoFirma = this.mtrTipoFirmaDeltaRepository.getByCodigoTipoFirma(TipoFirmaEnum.FIRMA_B.getEstado());
        List<MtrAprobador> mtrAprobadorList = this.cerFirmaDeltaRepository.
                devuelveAprobadorByNotaPedidoAndTipoFirma(
                        cerNotapedido.getId(),
                        mtrTipoFirma.getId()
                );

        /* Generando Certificados Automaticos */
        String nombreCompleto = userSession.getFirstName() + " " + userSession.getLastName();
        Date fechaActual = DateUtils.obtenerFechaHoraActual();
        MtrEstado mtrEstadoCertificado = this.mtrEstadoDeltaRepository.
                getByCodigoAgrupadoAndCodigoEstado(
                        Constants.CODIGO_AGRUPADO_CERTIFICADO,
                        EstadoCertificadoEnum.PENDIENTE_FIRMA_B.getEstado());
        if (mtrClaseDocumento.getCodigoSap().equals(EstadoClaseDocumentoPedidoCerradoEnum.PEDIDO_COGA.getEstado()) ||
                mtrClaseDocumento.getCodigoSap().equals(EstadoClaseDocumentoPedidoCerradoEnum.PEDIDO_TGP.getEstado()) ||
                mtrClaseDocumento.getCodigoSap().equals(EstadoClaseDocumentoPedidoCerradoEnum.PEDIDO_MRPC.getEstado()) ||
                mtrClaseDocumento.getCodigoSap().equals(EstadoClaseDocumentoPedidoCerradoEnum.PEDIDO_MPRT.getEstado()) ||
                mtrClaseDocumento.getCodigoSap().equals(EstadoClaseDocumentoPedidoCerradoEnum.PEDIDO_DCOG.getEstado()) ||
                mtrClaseDocumento.getCodigoSap().equals(EstadoClaseDocumentoPedidoCerradoEnum.PEDIDO_DTGP.getEstado())
        ) {
            log.error("Ingresando aprobarNotaPedido");
            List<Date> dateList = this.cerNotaPedidoDetalleDeltaRepository.findByCerNotaPedidoDistintNuevaFechaEntrega(notaPedidoId);
            log.error("Ingresando aprobarNotaPedido dateList - size: " + dateList.size());
            log.error("Ingresando aprobarNotaPedido dateList - list: " + dateList.toString());
            int contador = 0;

            if (dateList != null & dateList.size() > 0) {

                for (Date fecha : dateList) {
                    contador++;
                    CerCertificado cerCertificado = new CerCertificado();
                    cerCertificado.setCerNotaPedido(cerNotapedido);
                    String codigoCertificado = "COGA-" +
                            cerNotapedido.getCodigoNotaPedidoSap().trim() +  "-" +
                            cerNotapedido.getMtrClaseDocumento().getCodigoSap() + "-" + contador;
                    cerCertificado.setCodigoCertificado(codigoCertificado);
                    cerCertificado.setMtrProveedor(cerNotapedido.getMtrProveedor());
                    cerCertificado.setMtrSociedad(cerNotapedido.getMtrSociedad());
                    cerCertificado.setMtrEstado(mtrEstadoCertificado);
                    cerCertificado.setMtrMoneda(cerNotapedido.getMtrMoneda());
                    cerCertificado.setMtrClaseDocumento(cerNotapedido.getMtrClaseDocumento());
                    cerCertificado.setConcepto(cerNotapedido.getConcepto());
                    cerCertificado.setFechaDesde(cerNotapedido.getFechaInicio());
                    cerCertificado.setFechaHasta(cerNotapedido.getFechaFin());
                    cerCertificado.setMonto(cerNotapedido.getMonto());
                    cerCertificado.setIndCreacionAutomatica(Constants.SI);
                    cerCertificado.setIndTieneFactura(Constants.NO);

                    log.error("Ingresando aprobarNotaPedido cerCertificado: " + cerCertificado.toString());
                    cerCertificado = this.cerCertificadoDeltaRepository.save(cerCertificado);
                    log.error("cerCertificadoDeltaRepository.save_pprincipe_11 :: " + cerCertificado.toString());
                    certificadoCreadasAutomaticaList.add(cerCertificado);

                    /* Generando Historial */
                    CerHistorial cerHistorial = new CerHistorial();
                    cerHistorial.setCerCertificado(cerCertificado);
                    cerHistorial.setDescripcion(GENERADO);
                    cerHistorial.setUsuarioHistoral(nombreCompleto);
                    cerHistorial.setFechaHistorial(fechaActual);
                    cerHistorial.setMtrEstado(mtrEstadoCertificado);
                    cerHistorial = this.cerHistorialDeltaRepository.save(cerHistorial);

                    /* Generando detalles */
                    List<CerNotaPedidoDetalle> cerNotaPedidoDetalleList =
                            this.cerNotaPedidoDetalleDeltaRepository.
                                    findByCerNotaPedidoAndNuevaFechaEntrega(cerNotapedido, fecha);
                                    //findByCerNotaPedidoAndFechaEntrega(cerNotapedido, fecha);
                    BigDecimal montoTotalLinea = new BigDecimal(0.00);
                    for(CerNotaPedidoDetalle beanDetalle : cerNotaPedidoDetalleList) {
                        CerCertificadoDetalle cerCertificadoDetalle = new CerCertificadoDetalle();
                        cerCertificadoDetalle.setCerCertificado(cerCertificado);
                        cerCertificadoDetalle.setCerNotaPedidoDetalle(beanDetalle);
                        cerCertificadoDetalle.setPrecioUnitario(beanDetalle.getPrecioUnitario());
                        cerCertificadoDetalle.setCantidadTotal(beanDetalle.getCantidadRequerida());
                        //cerCertificadoDetalle.setCantidadAprobada(beanDetalle.getCantidadRequerida());
                        cerCertificadoDetalle.setMtrCuentaImputacion(beanDetalle.getMtrCuentaImputacion());
                        cerCertificadoDetalle.setMtrCuentaMayor(beanDetalle.getMtrCuentaMayor());

                        BigDecimal cantidadEntregada = beanDetalle.getCantidadEntregada();
                        if (!Optional.ofNullable(cantidadEntregada).isPresent()) {
                            cantidadEntregada = new BigDecimal(0.00);
                        }
                        BigDecimal cantidadPendiente = new BigDecimal(beanDetalle.getCantidadRequerida().floatValue() -
                                cantidadEntregada.floatValue()).setScale(4, BigDecimal.ROUND_HALF_UP);;
                        cerCertificadoDetalle.setCantidadPendiente(cantidadPendiente);
                        cerCertificadoDetalle.setCantidadAprobada(cantidadPendiente);

                        BigDecimal totalLinea =
                                new BigDecimal(cantidadPendiente.floatValue() *
                                        beanDetalle.getPrecioUnitario().floatValue()).setScale(2, BigDecimal.ROUND_HALF_UP);

                        cerCertificadoDetalle.setTotalLinea(totalLinea);
                        cerCertificadoDetalle.setTotalLineaAjustado(new BigDecimal(0.00));
                        log.error("Ingresando aprobarNotaPedido cerCertificadoDetalle: " + cerCertificadoDetalle.toString());
                        cerCertificadoDetalle = this.cerCertificadoDetalleDeltaRepository.save(cerCertificadoDetalle);

                        BigDecimal cantidadNota = new BigDecimal(
                                beanDetalle.getCantidadEntregada().floatValue() + cantidadPendiente.floatValue())
                                .setScale(4, BigDecimal.ROUND_HALF_UP);
                        beanDetalle.setCantidadEntregada(cantidadNota);
                        beanDetalle = this.cerNotaPedidoDetalleDeltaRepository.save(beanDetalle);

                        montoTotalLinea = new BigDecimal(montoTotalLinea.floatValue() + totalLinea.floatValue());
                        //Calcular monto total linea
                        if(beanDetalle.getCantidadBase() != null)
                            montoTotalLinea = montoTotalLinea.divide(beanDetalle.getCantidadBase());
                    }
                    montoTotalLinea = new BigDecimal(montoTotalLinea.floatValue())
                            .setScale(2, BigDecimal.ROUND_HALF_UP);

                    cerCertificado.setMontoTotal(montoTotalLinea);
                    cerCertificado.setMontoTotalAdjustado(new BigDecimal(0.00));
                    cerCertificado.setIndTieneFactura(Constants.NO);
                    cerCertificado = this.cerCertificadoDeltaRepository.save(cerCertificado);
                    log.error("cerCertificadoDeltaRepository.save_pprincipe_12 :: " + cerCertificado.toString());
                }
            }
        }
        if (mtrClaseDocumento.getCodigoSap().equals(EstadoClaseDocumentoPedidoCerradoEnum.S_ENTREGA_COGA.getEstado()) ||
                mtrClaseDocumento.getCodigoSap().equals(EstadoClaseDocumentoPedidoCerradoEnum.S_ENTREGA_TGPE.getEstado())) {
            CerCertificado cerCertificado = new CerCertificado();
            cerCertificado.setCerNotaPedido(cerNotapedido);
            String codigoCertificado = "COGA-" +
                    cerNotapedido.getCodigoNotaPedidoSap().trim() +  "-" +
                    cerNotapedido.getMtrClaseDocumento().getCodigoSap() ;
            cerCertificado.setCodigoCertificado(codigoCertificado);
            cerCertificado.setMtrProveedor(cerNotapedido.getMtrProveedor());
            cerCertificado.setMtrSociedad(cerNotapedido.getMtrSociedad());
            cerCertificado.setMtrEstado(mtrEstadoCertificado);
            cerCertificado.setMtrMoneda(cerNotapedido.getMtrMoneda());
            cerCertificado.setMtrClaseDocumento(cerNotapedido.getMtrClaseDocumento());
            cerCertificado.setConcepto(cerNotapedido.getConcepto());
            cerCertificado.setFechaDesde(cerNotapedido.getFechaInicio());
            cerCertificado.setFechaHasta(cerNotapedido.getFechaFin());
            cerCertificado.setMonto(cerNotapedido.getMonto());
            cerCertificado.setIndCreacionAutomatica(Constants.SI);
            cerCertificado.setIndTieneFactura(Constants.NO);

            log.error("Ingresando aprobarNotaPedido cerCertificado 02: " + cerCertificado.toString());
            cerCertificado = this.cerCertificadoDeltaRepository.save(cerCertificado);
            log.error("cerCertificadoDeltaRepository.save_pprincipe_13 ::: " + cerCertificado.toString());
            certificadoCreadasAutomaticaList.add(cerCertificado);

            /* Generando Historiales */
            CerHistorial cerHistorial = new CerHistorial();
            cerHistorial.setCerCertificado(cerCertificado);
            cerHistorial.setDescripcion(GENERADO);
            cerHistorial.setUsuarioHistoral(nombreCompleto);
            cerHistorial.setFechaHistorial(fechaActual);
            cerHistorial.setMtrEstado(mtrEstadoCertificado);
            cerHistorial = this.cerHistorialDeltaRepository.save(cerHistorial);

            /* Generando detalles */
            List<CerNotaPedidoDetalle> cerNotaPedidoDetalleList =
                    this.cerNotaPedidoDetalleDeltaRepository.
                            findByCerNotaPedidoOrderByNuevaFechaEntrega(cerNotapedido);
                           // findByCerNotaPedidoOrderByFechaEntrega(cerNotapedido);
            BigDecimal montoTotalLinea = new BigDecimal(0.00);
            for(CerNotaPedidoDetalle beanDetalle : cerNotaPedidoDetalleList) {
                CerCertificadoDetalle cerCertificadoDetalle = new CerCertificadoDetalle();
                cerCertificadoDetalle.setCerCertificado(cerCertificado);
                cerCertificadoDetalle.setCerNotaPedidoDetalle(beanDetalle);
                cerCertificadoDetalle.setPrecioUnitario(beanDetalle.getPrecioUnitario());
                cerCertificadoDetalle.setCantidadTotal(beanDetalle.getCantidadRequerida());
                //cerCertificadoDetalle.setCantidadAprobada(beanDetalle.getCantidadRequerida());
                cerCertificadoDetalle.setMtrCuentaImputacion(beanDetalle.getMtrCuentaImputacion());
                cerCertificadoDetalle.setMtrCuentaMayor(beanDetalle.getMtrCuentaMayor());

                BigDecimal cantidadEntregada = beanDetalle.getCantidadEntregada();

                if (!Optional.ofNullable(cantidadEntregada).isPresent()) {
                    cantidadEntregada = new BigDecimal(0.00);
                }
                BigDecimal cantidadPendiente = new BigDecimal(beanDetalle.getCantidadRequerida().floatValue() -
                        cantidadEntregada.floatValue()).setScale(4, BigDecimal.ROUND_HALF_UP);
                cerCertificadoDetalle.setCantidadPendiente(cantidadPendiente);
                cerCertificadoDetalle.setCantidadAprobada(cantidadPendiente);

                BigDecimal totalLinea =
                        new BigDecimal(cantidadPendiente.floatValue() *
                                beanDetalle.getPrecioUnitario().floatValue()).setScale(2, BigDecimal.ROUND_HALF_UP);

                cerCertificadoDetalle.setTotalLinea(totalLinea);
                cerCertificadoDetalle.setTotalLineaAjustado(new BigDecimal(0.00));
                log.error("Ingresando aprobarNotaPedido cerCertificadoDetalle 02: " + cerCertificadoDetalle.toString());
                cerCertificadoDetalle = this.cerCertificadoDetalleDeltaRepository.save(cerCertificadoDetalle);

                BigDecimal cantidadNota = new BigDecimal(
                        beanDetalle.getCantidadEntregada().floatValue() + cantidadPendiente.floatValue())
                        .setScale(4, BigDecimal.ROUND_HALF_UP);
                beanDetalle.setCantidadEntregada(cantidadNota);
                beanDetalle = this.cerNotaPedidoDetalleDeltaRepository.save(beanDetalle);

                montoTotalLinea = new BigDecimal(montoTotalLinea.floatValue() + totalLinea.floatValue());

                //Calcular monto total linea
                if(beanDetalle.getCantidadBase() != null)
                    montoTotalLinea = montoTotalLinea.divide(beanDetalle.getCantidadBase());
            }
            montoTotalLinea = new BigDecimal(montoTotalLinea.floatValue())
                    .setScale(2, BigDecimal.ROUND_HALF_UP);
            cerCertificado.setMontoTotal(montoTotalLinea);
            cerCertificado.setMontoTotalAdjustado(new BigDecimal(0.00));
            cerCertificado.setIndTieneFactura(Constants.NO);
            cerCertificado = this.cerCertificadoDeltaRepository.save(cerCertificado);
            log.error("cerCertificadoDeltaRepository.save_pprincipe_14 ::: " + cerCertificado.toString());
        }
        cerNotaPedidoIntermedioAprobarDto.setCerNotaPedido(cerNotapedido);
        cerNotaPedidoIntermedioAprobarDto.setCertificadoCreadasAutomaticaList(certificadoCreadasAutomaticaList);
        return cerNotaPedidoIntermedioAprobarDto;
    }

    public void enviarEmailRechazarAprobadores(EstadoNotaPedidoDto estadoNotaPedidoDto) throws Exception {
        MailSetting setting = new MailSetting();
        setting.setEmailFrom(username);
        setting.setPassword(password);
        setting.setHost(host);
        setting.setNameFrom(username);
        setting.setPort(port);
        setting.setUser(username);

        Optional<CerNotaPedido> optionalCerNota = this.cerNotaPedidoDeltaRepository.findById(
                estadoNotaPedidoDto.getNotaPedidoID());
        if (!optionalCerNota.isPresent()) {
            throw new Exception("No se encontr√≥ Nota de Pedido con ID: " + estadoNotaPedidoDto.getNotaPedidoID());
        }
        CerNotaPedido cerNotaPedido = optionalCerNota.get();

        MtrTipoFirma mtrTipoFirma = this.mtrTipoFirmaDeltaRepository.getByCodigoTipoFirma(TipoFirmaEnum.FIRMA_B.getEstado());
        List<MtrAprobador> mtrAprobadorList = this.cerFirmaDeltaRepository.
                devuelveAprobadorByNotaPedidoAndTipoFirma(
                        cerNotaPedido.getId(),
                        mtrTipoFirma.getId()
                );
        for (MtrAprobador mtrAprobador : mtrAprobadorList) {
            String realName = mtrAprobador.getNombre() + " " + mtrAprobador.getApellidos();
            this.certificadoNotaPedidoNotificacion.enviarFirma(
                    setting,
                    cerNotaPedido.getMtrProveedor(),
                    mtrAprobador.getEmail(),
                    estadoNotaPedidoDto.getDescripcion(),
                    cerNotaPedido,
                    2,
                    realName);

        }
    }


    public void enviarEmailAprobarAprobadores(CerNotaPedidoIntermedioAprobarDto bean) throws Exception {
        List<CerCertificado> cerCertificadoList = bean.getCertificadoCreadasAutomaticaList();
        if (cerCertificadoList == null || cerCertificadoList.size() <= 0) {
            return;
        }

        MailSetting setting = new MailSetting();
        setting.setEmailFrom(username);
        setting.setPassword(password);
        setting.setHost(host);
        setting.setNameFrom(username);
        setting.setPort(port);
        setting.setUser(username);

        MtrEstado mtrEstadoCertificado = this.mtrEstadoDeltaRepository.
                getByCodigoAgrupadoAndCodigoEstado(
                        Constants.CODIGO_AGRUPADO_CERTIFICADO,
                        EstadoCertificadoEnum.PENDIENTE_FIRMA_B.getEstado());

        MtrTipoFirma mtrTipoFirma = this.mtrTipoFirmaDeltaRepository.getByCodigoTipoFirma(TipoFirmaEnum.FIRMA_B.getEstado());
        List<MtrAprobador> mtrAprobadorList = this.cerFirmaDeltaRepository.
                devuelveAprobadorByNotaPedidoAndTipoFirma(
                        bean.getCerNotaPedido().getId(),
                        mtrTipoFirma.getId()
                );


        for (CerCertificado beanCertificado : cerCertificadoList) {
            for (MtrAprobador mtrAprobador : mtrAprobadorList) {
                this.certificadoNotificacion.enviarFirma(
                        setting,
                        beanCertificado.getMtrProveedor(),
                        mtrAprobador,
                        mtrEstadoCertificado,
                        beanCertificado);
            }
        }

    }

    public CerNotaPedido actualizaEstado(EstadoNotaPedidoDto estadoNotaPedidoDto) throws Exception {
        if (this.appParametriaDeltaService.devuelveApagarCertificado()) {
            throw new Exception(Constants.MENSAJE_SISTEMA_APAGADO);
        }

        log.error("actualizaEstado - estadoNotaPedidoDto: " + estadoNotaPedidoDto.toString());
        if (StringUtils.isBlank(estadoNotaPedidoDto.getEstado().getCodigoAgrupado())) {
            throw new Exception("Se debe ingresar C√≥digo Agrupado en el Estado");
        }
        if (StringUtils.isBlank(estadoNotaPedidoDto.getEstado().getCodigoEstado())) {
            throw new Exception("Se debe ingresar C√≥digo en el Estado");
        }

        Integer id = estadoNotaPedidoDto.getNotaPedidoID();
        CerNotaPedido cerNotapedido = this.cerNotaPedidoDeltaRepository.getOne(id);
        log.error("actualizaEstado - cerNotapedido: " + cerNotapedido.toString());
        MtrEstado mtrEstado = this.mtrEstadoDeltaRepository.getByCodigoAgrupadoAndCodigoEstado(
                estadoNotaPedidoDto.getEstado().getCodigoAgrupado(),
                estadoNotaPedidoDto.getEstado().getCodigoEstado()
        );

        if (!Optional.ofNullable(mtrEstado).isPresent()) {
            throw new Exception("No se encontr√≥ Estado con C√≥digo Agrupado: " +
                    estadoNotaPedidoDto.getEstado().getCodigoAgrupado() + " y C√≥digo Estado: " + estadoNotaPedidoDto.getEstado().getCodigoEstado());
        }
        cerNotapedido.setMtrEstado(mtrEstado);
        cerNotapedido.setDescripcion(estadoNotaPedidoDto.getDescripcion());
        log.error("actualizaEstado - cerNotapedido 02: " + cerNotapedido.toString());
        CerNotaPedido resultcerNotapedido = this.cerNotaPedidoDeltaRepository.save(cerNotapedido);

        UserSession user = this.systemLoggedUser.getUserSession();
        String nombreCompleto = user.getFirstName() + " " + user.getLastName();
        CerNotaPedidoHistorial cerNotaPedidoHistorial = new CerNotaPedidoHistorial();
        cerNotaPedidoHistorial.setCerNotaPedido(resultcerNotapedido);
        cerNotaPedidoHistorial.setDescripcion(estadoNotaPedidoDto.getDescripcion());
        cerNotaPedidoHistorial.setUsuarioHistoral(nombreCompleto);
        cerNotaPedidoHistorial.setMtrEstado(resultcerNotapedido.getMtrEstado());
        cerNotaPedidoHistorial.setFechaHistorial(DateUtils.obtenerFechaHoraActual());
        this.cerNotaPedidoHistorialDeltaService.save(cerNotaPedidoHistorial);

        log.error("actualizaEstado - cerNotapedido 03: " + cerNotapedido.toString());
        return resultcerNotapedido;
    }

    public void enviarMailActualizarEstado(EstadoNotaPedidoDto estadoNotaPedidoDto) throws IOException {

        Integer id = estadoNotaPedidoDto.getNotaPedidoID();
        CerNotaPedido cerNotapedido = this.cerNotaPedidoDeltaRepository.getOne(id);

        MailSetting setting = new MailSetting();
        setting.setEmailFrom(username);
        setting.setPassword(password);
        setting.setHost(host);
        setting.setNameFrom(username);
        setting.setPort(port);
        setting.setUser(username);

        //Aprobe state
        if (estadoNotaPedidoDto.getEstado().getCodigoAgrupado().equals(Constants.CODIGO_AGRUPADO_NOTA_PEDIDO) &&
                estadoNotaPedidoDto.getEstado().getCodigoEstado().equals(EstadoNotaPedidoEnum.ACUSE_RECIBO.getEstado())) {
            //Proveedor --> COGA
            certificadoNotaPedidoNotificacion.enviar(setting, cerNotapedido.getMtrProveedor(),
                    cerNotapedido.getEmailUserCompra(),
                    estadoNotaPedidoDto.getDescripcion(), cerNotapedido, 1, 1);
            //Proveedor --> Proveedor
            certificadoNotaPedidoNotificacion.enviar(setting, cerNotapedido.getMtrProveedor(),
                    cerNotapedido.getMtrProveedor().getEmailContacto(),
                    estadoNotaPedidoDto.getDescripcion(), cerNotapedido, 1, 2);
        }

        //Denegate state
        if (estadoNotaPedidoDto.getEstado().getCodigoAgrupado().equals(Constants.CODIGO_AGRUPADO_NOTA_PEDIDO) &&
                estadoNotaPedidoDto.getEstado().getCodigoEstado().equals(EstadoNotaPedidoEnum.RECHAZADA.getEstado())) {
            //Proveedor-->COGA
            certificadoNotaPedidoNotificacion.enviar(setting, cerNotapedido.getMtrProveedor(),
                    cerNotapedido.getEmailUserCompra(),
                    estadoNotaPedidoDto.getDescripcion(), cerNotapedido, 2, 1);
            //Proveedor-->Proveedor
            certificadoNotaPedidoNotificacion.enviar(setting, cerNotapedido.getMtrProveedor(),
                    cerNotapedido.getMtrProveedor().getEmailContacto(),
                    estadoNotaPedidoDto.getDescripcion(), cerNotapedido, 2, 2);
        }
        return;
    }


    protected CerNotaPedido toEntity(CerNotaPedido dto) {
        return dto;
    }


    /***********************/
    /* Metodos de Busqueda */
    /***********************/

    protected Sort setFindAll(Sort sort) {
        sort = Sort.by(
                new Sort.Order(Sort.Direction.DESC, "fechaDocumento"),
                new Sort.Order(Sort.Direction.ASC, "codigoNotaPedidoSap")
        );
        return sort;
    }

    protected Sort setFind(CerNotaPedido req, ExampleMatcher matcher, Example<CerNotaPedido> example, Sort sort) {
        sort = Sort.by(
                new Sort.Order(Sort.Direction.DESC, "fechaDocumento"),
                new Sort.Order(Sort.Direction.ASC, "codigoNotaPedidoSap")
        );
        return sort;
    }

    protected void setFindPaginated(PageRequestByExample<CerNotaPedido> req, ExampleMatcher matcher, Example<CerNotaPedido> example) {
        return;
    }


    protected BeanFinalDatosPredicateDto<CerNotaPedido> setAdicionalMasFiltrosPredicate(
            CerNotaPedidoResponse beanResponse,
            List<CerNotaPedido> listaFinal,
            long total) throws Exception {
        BeanFinalDatosPredicateDto<CerNotaPedido> beanPredicate = new BeanFinalDatosPredicateDto<CerNotaPedido>();
        CerNotaPedido bean = beanResponse.getBean();
        beanPredicate.setListaFinal(listaFinal);
        beanPredicate.setTotal(total);

        List<CerNotaPedido> listaFinalReturn = beanPredicate.getListaFinal();
        if (listaFinalReturn != null && listaFinalReturn.size() > 0) {
            int contador = 0;
            for(CerNotaPedido cerNotaPedido : listaFinalReturn) {
                CerNotaPedidoValidarMontoDto cerNotaPedidoValidarMontoDto =
                        this.validarMontoPendiente(cerNotaPedido.getId());
                cerNotaPedido.setSaldoPendiente(cerNotaPedidoValidarMontoDto.getMontoPendiente());
                listaFinalReturn.set(contador, cerNotaPedido);
                contador++;
            }
            beanPredicate.setListaFinal(listaFinalReturn);
        }

        return beanPredicate;
    }


    protected List<Predicate> setAdicionalDeltaPredicate(
            List<Predicate> predicates,
            CerNotaPedidoResponse bean,
            CriteriaBuilder cb,
            CriteriaQuery<CerNotaPedido> query,
            Root<CerNotaPedido> root) throws Exception {
        CerNotaPedido entity = bean.getBean();
        if (Optional.ofNullable(entity.getMtrProveedor()).isPresent()) {
            Join<CerNotaPedido, MtrProveedor> fromMtrProveedor = root.join("mtrProveedor", JoinType.INNER);
            if (Optional.ofNullable(entity.getMtrProveedor().getId()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtrProveedor.get("id"), entity.getMtrProveedor().getId());
                predicates.add(thirdCondition);
            }
            if (Optional.ofNullable(entity.getMtrProveedor().getRuc()).isPresent()) {
                Predicate thirdCondition = cb.equal(cb.upper(fromMtrProveedor.get("ruc")), entity.getMtrProveedor().getRuc());
                predicates.add(thirdCondition);
            }
            if (Optional.ofNullable(entity.getMtrProveedor().getRazonSocial()).isPresent()) {
                Predicate thirdCondition = cb.like(cb.upper(fromMtrProveedor.get("razonSocial")), "%" + entity.getMtrProveedor().getRazonSocial().toUpperCase().trim() + "%");
                predicates.add(thirdCondition);
            }
        }
        if (Optional.ofNullable(entity.getMtrEstado()).isPresent()) {
            Join<CerNotaPedido, MtrEstado> fromMtrEstado = root.join("mtrEstado", JoinType.INNER);
            if (Optional.ofNullable(entity.getMtrEstado().getId()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtrEstado.get("id"), entity.getMtrEstado().getId());
                predicates.add(thirdCondition);
            }
            if (Optional.ofNullable(entity.getMtrEstado().getCodigoAgrupado()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtrEstado.get("codigoAgrupado"), entity.getMtrEstado().getCodigoAgrupado());
                predicates.add(thirdCondition);
            }
            if (Optional.ofNullable(entity.getMtrEstado().getCodigoEstado()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtrEstado.get("codigoEstado"), entity.getMtrEstado().getCodigoEstado());
                predicates.add(thirdCondition);
            }
        }
        if (Optional.ofNullable(entity.getMtrSociedad()).isPresent()) {
            Join<CerNotaPedido, MtrSociedad> fromMtrSociedad = root.join("mtrSociedad", JoinType.INNER);
            if (Optional.ofNullable(entity.getMtrSociedad().getId()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtrSociedad.get("id"), entity.getMtrSociedad().getId());
                predicates.add(thirdCondition);
            }
            if (Optional.ofNullable(entity.getMtrSociedad().getDescripcion()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtrSociedad.get("descripcion"), entity.getMtrSociedad().getDescripcion());
                predicates.add(thirdCondition);
            }
        }


        if (Optional.ofNullable(entity.getFechaInicio()).isPresent()) {
            String sfecha = DateUtils.convertDateToString("dd/MM/yyyy", entity.getFechaInicio());
            Date fecha = DateUtils.convertStringToDate("dd/MM/yyyy", sfecha);
            Date fechaSiguiente = DateUtils.sumarRestarDias(fecha, 1);
            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaInicio"), fecha));
            predicates.add(cb.lessThan(root.<Date>get("fechaInicio"), fechaSiguiente));
        }


        if (Optional.ofNullable(entity.getFechaInicioIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaInicioFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaInicioIni());
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaInicioFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);

            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaInicio"), fechaDesde));
            predicates.add(cb.lessThan(root.<Date>get("fechaInicio"), fechaHasta));
        }
        if (Optional.ofNullable(entity.getFechaInicioIni()).isPresent() &&
                !Optional.ofNullable(entity.getFechaInicioFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaInicioIni());
            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaInicio"), fechaDesde));
        }
        if (!Optional.ofNullable(entity.getFechaInicioIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaInicioFin()).isPresent()) {
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaInicioFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);
            predicates.add(cb.lessThan(root.<Date>get("fechaInicio"), fechaHasta));
        }


        if (Optional.ofNullable(entity.getFechaFinVigenciaIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaFinVigenciaFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaFinVigenciaIni());
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaFinVigenciaFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);

            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaFinVigencia"), fechaDesde));
            predicates.add(cb.lessThan(root.<Date>get("fechaFinVigencia"), fechaHasta));
        }
        if (Optional.ofNullable(entity.getFechaFinVigenciaIni()).isPresent() &&
                !Optional.ofNullable(entity.getFechaFinVigenciaFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaFinVigenciaIni());
            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaFinVigencia"), fechaDesde));
        }
        if (!Optional.ofNullable(entity.getFechaFinVigenciaIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaFinVigenciaFin()).isPresent()) {
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaFinVigenciaFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);
            predicates.add(cb.lessThan(root.<Date>get("fechaFinVigencia"), fechaHasta));
        }

        if (Optional.ofNullable(entity.getFechaDocumentoIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaDocumentoFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaDocumentoIni());
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaDocumentoFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);

            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaDocumento"), fechaDesde));
            predicates.add(cb.lessThan(root.<Date>get("fechaDocumento"), fechaHasta));
        }
        if (Optional.ofNullable(entity.getFechaDocumentoIni()).isPresent() &&
                !Optional.ofNullable(entity.getFechaDocumentoFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaDocumentoIni());
            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaDocumento"), fechaDesde));
        }
        if (!Optional.ofNullable(entity.getFechaDocumentoIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaDocumentoFin()).isPresent()) {
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaDocumentoFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);
            predicates.add(cb.lessThan(root.<Date>get("fechaDocumento"), fechaHasta));
        }


        if (Optional.ofNullable(entity.getMtrAprobadorId()).isPresent()) {
            //subquery
            Subquery<CerFirma> cerFirmaSubquery = query.subquery(CerFirma.class);
            Root<CerFirma> cerFirmaRoot = cerFirmaSubquery.from(CerFirma.class);
            Join<CerFirma, CerNotaPedido> cerNotaPedidoJoin = cerFirmaRoot.join("cerNotaPedido", JoinType.INNER);
            Join<CerFirma, MtrAprobador> mtrAprobadorJoin = cerFirmaRoot.join("mtrAprobador", JoinType.INNER);

            Predicate condicionId = cb.equal(cerNotaPedidoJoin, root );
            Predicate condicionAprobador = cb.equal(mtrAprobadorJoin.get("id"), entity.getMtrAprobadorId());
            List<Predicate> predicateCerFirma = new ArrayList<>();
            predicateCerFirma.add(condicionId);
            predicateCerFirma.add(condicionAprobador);

            cerFirmaSubquery.select(cerFirmaRoot).
                    where(predicateCerFirma.toArray(new Predicate[predicateCerFirma.size()]));

            Predicate predicateSubquery = cb.exists(cerFirmaSubquery);
            predicates.add(predicateSubquery);
        }

        List<Order> orderList = new ArrayList<Order>();
        orderList.add(cb.desc(root.get("fechaDocumento")));
        orderList.add(cb.asc(root.get("codigoNotaPedidoSap")));
        query.orderBy(orderList);
        return predicates;
    }

    protected Root<CerNotaPedido> setAdicionalDeltaTotalPredicate(
            CerNotaPedidoResponse bean,
            Root<CerNotaPedido> countRoot) throws Exception {
        CerNotaPedido entity = bean.getBean();
        if (Optional.ofNullable(entity.getMtrProveedor()).isPresent()) {
            Join<CerNotaPedido, MtrProveedor> fromMtrProveedor = countRoot.join("mtrProveedor", JoinType.INNER);
        }
        if (Optional.ofNullable(entity.getMtrSociedad()).isPresent()) {
            Join<CerNotaPedido, MtrSociedad> fromMtrSociedad = countRoot.join("mtrSociedad", JoinType.INNER);
        }
        if (Optional.ofNullable(entity.getMtrEstado()).isPresent()) {
            Join<CerNotaPedido, MtrEstado> fromMtrEstado = countRoot.join("mtrEstado", JoinType.INNER);
        }

        return countRoot;
    }


    /****************/
    /* METODOS CRUD */

    /****************/

    protected String setValidacionesPrevias(CerNotaPedido bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected CerNotaPedido setCreate(CerNotaPedido bean) throws Exception {
        return bean;
    }

    protected void setSave(CerNotaPedido dto) throws Exception {
        return;
    }

    protected void setDelete(Integer id) throws Exception {

    }

    protected void setDeleteAll() throws Exception {

    }

    /************************/
    /* METODOS CRUD Masivos */

    /************************/

    protected CerNotaPedido setUploadExcel(Cell currentCell, CerNotaPedido cerNotaPedido, int contador) throws Exception {
        cerNotaPedido = super.setUploadExcel(currentCell, cerNotaPedido, contador);
        return cerNotaPedido;
    }

    protected String setSaveMasivo(CerNotaPedido dto) throws Exception {
        return "";
    }

    protected List<CerNotaPedido> setBeforeDeleteMasivo(List<CerNotaPedido> listaDto) throws Exception {
        return listaDto;
    }

    protected void setAfterDeleteMasivo() throws Exception {
        return;
    }

    /*****************************/
    /* Metodos que generan Excel */

    /*****************************/

    protected void setDownloadExcelItem(CerNotaPedido bean, HSSFRow dataRow) {

    }

    protected void setDownloadExcel(HSSFSheet sheet) {

    }

    /*****************/
    /* Otros Metodos */

    /*****************/

    protected String setGraphDescripcionByMtrEstado(MtrEstado mtrEstado) {
        return mtrEstado.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrEstado() {
        return "MtrEstado";
    }

    protected String setGraphBarChartTituloByMtrEstado() {
        return "MtrEstado";
    }

    protected String setGraphDescripcionByMtrOrgCompra(MtrOrgCompra mtrOrgCompra) {
        return mtrOrgCompra.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrOrgCompra() {
        return "MtrOrgCompra";
    }

    protected String setGraphBarChartTituloByMtrOrgCompra() {
        return "MtrOrgCompra";
    }

    protected String setGraphDescripcionByMtrSociedad(MtrSociedad mtrSociedad) {
        return mtrSociedad.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrSociedad() {
        return "MtrSociedad";
    }

    protected String setGraphBarChartTituloByMtrSociedad() {
        return "MtrSociedad";
    }

    protected String setGraphDescripcionByMtrUnidadMedida(MtrUnidadMedida mtrUnidadMedida) {
        return mtrUnidadMedida.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrUnidadMedida() {
        return "MtrUnidadMedida";
    }

    protected String setGraphBarChartTituloByMtrUnidadMedida() {
        return "MtrUnidadMedida";
    }

    protected String setGraphDescripcionByMtrClaseDocumento(MtrClaseDocumento mtrClaseDocumento) {
        return mtrClaseDocumento.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrClaseDocumento() {
        return "MtrClaseDocumento";
    }

    protected String setGraphBarChartTituloByMtrClaseDocumento() {
        return "MtrClaseDocumento";
    }

    protected String setGraphDescripcionByMtrMoneda(MtrMoneda mtrMoneda) {
        return mtrMoneda.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrMoneda() {
        return "MtrMoneda";
    }

    protected String setGraphBarChartTituloByMtrMoneda() {
        return "MtrMoneda";
    }

    protected String setGraphDescripcionByMtrCondicionPago(MtrCondicionPago mtrCondicionPago) {
        return mtrCondicionPago.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrCondicionPago() {
        return "MtrCondicionPago";
    }

    protected String setGraphBarChartTituloByMtrCondicionPago() {
        return "MtrCondicionPago";
    }

    protected String setGraphDescripcionByMtrProveedor(MtrProveedor cerProveedor) {
        return cerProveedor.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrProveedor() {
        return "MtrProveedor";
    }

    protected String setGraphBarChartTituloByMtrProveedor() {
        return "MtrProveedor";
    }

}

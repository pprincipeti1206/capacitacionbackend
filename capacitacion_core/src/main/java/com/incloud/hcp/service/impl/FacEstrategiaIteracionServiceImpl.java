/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.incloud.hcp.service.impl;

import com.incloud.hcp.common.enums.AppParametriaLabelEnum;
import com.incloud.hcp.common.enums.AppParametriaModuloEnum;
import com.incloud.hcp.common.excel.ExcelDefault;
import com.incloud.hcp.common.graph.GraphBarChart;
import com.incloud.hcp.common.graph.GraphBean;
import com.incloud.hcp.common.graph.GraphDataset;
import com.incloud.hcp.common.graph.GraphPieChart;
import com.incloud.hcp.domain.*;
import com.incloud.hcp.domain.response.FacEstrategiaIteracionResponse;
import com.incloud.hcp.exception.ServiceException;
import com.incloud.hcp.repository.delta.*;
import com.incloud.hcp.service.FacEstrategiaIteracionService;
import com.incloud.hcp.service._framework.bean.BeanCargaMasivoDTO;
import com.incloud.hcp.service._framework.bean.BeanListaMasivoDTO;
import com.incloud.hcp.service._framework.impl.JPACustomServiceImpl;
import com.incloud.hcp.service.delta.FacFacturaDeltaService;
import com.incloud.hcp.service.delta.MtrEstrategiaFacturacionDeltaService;
import com.incloud.hcp.service.delta.MtrTipoContratoDeltaService;
import com.incloud.hcp.service.delta.MtrUsuarioFacturacionDeltaService;
import com.incloud.hcp.service.requireNew.FacEstrategiaIteracionRequireNewService;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.utils.Constants;
import com.incloud.hcp.utils.PredicateUtils;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * A simple DTO Facility for FacEstrategiaIteracion.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public abstract class FacEstrategiaIteracionServiceImpl extends JPACustomServiceImpl<FacEstrategiaIteracionResponse, FacEstrategiaIteracion, Integer>
        implements FacEstrategiaIteracionService {

    protected final String NAME_SHEET = "FacEstrategiaIteracion";
    protected final String CONFIG_TITLE = "com/incloud/hcp/excel/FacEstrategiaIteracionExcel.xml";
    private final Integer REGISTROS_COLOR = 10;

    @Autowired
    protected AppParametriaDeltaRepository appParametriaDeltaRepository;

    @Autowired
    protected FacEstrategiaIteracionDeltaRepository facEstrategiaIteracionDeltaRepository;

    @Autowired
    protected FacEstrategiaIteracionRequireNewService facEstrategiaIteracionRequireNewService;

    @Autowired
    protected MtrEstrategiaFacturacionDeltaService mtrEstrategiaFacturacionDeltaService;

    @Autowired
    protected MtrEstrategiaFacturacionDeltaRepository mtrEstrategiaFacturacionDeltaRepository;

    @Autowired
    protected MtrTipoContratoDeltaService mtrTipoContratoDeltaService;

    @Autowired
    protected MtrTipoContratoDeltaRepository mtrTipoContratoDeltaRepository;

    @Autowired
    protected MtrUsuarioFacturacionDeltaService mtrUsuarioFacturacionDeltaService;

    @Autowired
    protected MtrUsuarioFacturacionDeltaRepository mtrUsuarioFacturacionDeltaRepository;

    @Autowired
    protected FacFacturaDeltaService facFacturaDeltaService;

    @Autowired
    protected FacFacturaDeltaRepository facFacturaDeltaRepository;

    /*****************************/
    /* Metodos de Busqueda       */
    /*****************************/

    protected final ExampleMatcher setAbstractFind(ExampleMatcher matcher) {
        matcher = ExampleMatcher.matching() //
                .withMatcher(FacEstrategiaIteracion_.indAprobacionRechazoCupa.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(FacEstrategiaIteracion_.indAprobacionRechazoAprobador0.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(FacEstrategiaIteracion_.indAprobacionRechazoFirma.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(FacEstrategiaIteracion_.activo.getName(), match -> match.ignoreCase().startsWith());
        return matcher;
    }

    protected abstract Sort setFindAll(Sort sort);

    protected abstract Sort setFind(FacEstrategiaIteracion req, ExampleMatcher matcher, Example<FacEstrategiaIteracion> example, Sort sort);

    protected abstract void setFindPaginated(PageRequestByExample<FacEstrategiaIteracion> req, ExampleMatcher matcher, Example<FacEstrategiaIteracion> example);

    protected final FacEstrategiaIteracion setObtenerBeanResponse(FacEstrategiaIteracionResponse bean) {
        return bean.getBean();
    }

    protected final Class<FacEstrategiaIteracion> setObtenerClassBean() {
        return FacEstrategiaIteracion.class;
    }

    protected List<Predicate> setAbstractPredicate(FacEstrategiaIteracionResponse bean, CriteriaBuilder cb, Root<FacEstrategiaIteracion> root) {
        List<Predicate> predicates = new ArrayList<>();
        FacEstrategiaIteracion entity = bean.getBean();
        /* Obtener condiciones */
        PredicateUtils.addPredicates(predicates, bean.getIdCondicion(), "id", entity.getId(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getNroIteracionCondicion(), "nroIteracion", entity.getNroIteracion(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getIndAprobacionRechazoCupaCondicion(), "indAprobacionRechazoCupa", entity.getIndAprobacionRechazoCupa(),
                cb, root);
        PredicateUtils.addPredicates(predicates, bean.getIndAprobacionRechazoAprobador0Condicion(), "indAprobacionRechazoAprobador0",
                entity.getIndAprobacionRechazoAprobador0(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getIndAprobacionRechazoFirmaCondicion(), "indAprobacionRechazoFirma",
                entity.getIndAprobacionRechazoFirma(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getNroFirmanteTotalCondicion(), "nroFirmanteTotal", entity.getNroFirmanteTotal(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getNroFirmanteEnRevisionCondicion(), "nroFirmanteEnRevision", entity.getNroFirmanteEnRevision(), cb,
                root);
        PredicateUtils.addPredicates(predicates, bean.getActivoCondicion(), "activo", entity.getActivo(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrEstrategiaFacturacionCondicion(), "mtrEstrategiaFacturacion", entity.getMtrEstrategiaFacturacion(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrTipoContratoCondicion(), "mtrTipoContrato", entity.getMtrTipoContrato(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrUsuarioFacturacionCupaCondicion(), "mtrUsuarioFacturacionCupa", entity.getMtrUsuarioFacturacionCupa(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrUsuarioFacturacionAprobador0Condicion(), "mtrUsuarioFacturacionAprobador0", entity.getMtrUsuarioFacturacionAprobador0(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getFacFacturaCondicion(), "facFactura", entity.getFacFactura(), cb, root);
        /* Obtener valores de Lista */
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "id", bean.getIdList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "nroIteracion", bean.getNroIteracionList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "indAprobacionRechazoCupa", bean.getIndAprobacionRechazoCupaList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "indAprobacionRechazoAprobador0", bean.getIndAprobacionRechazoAprobador0List(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "indAprobacionRechazoFirma", bean.getIndAprobacionRechazoFirmaList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "nroFirmanteTotal", bean.getNroFirmanteTotalList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "nroFirmanteEnRevision", bean.getNroFirmanteEnRevisionList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "activo", bean.getActivoList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrEstrategiaFacturacion", bean.getMtrEstrategiaFacturacionList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrTipoContrato", bean.getMtrTipoContratoList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrUsuarioFacturacionCupa", bean.getMtrUsuarioFacturacionCupaList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrUsuarioFacturacionAprobador0", bean.getMtrUsuarioFacturacionAprobador0List(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "facFactura", bean.getFacFacturaList(), cb, root);
        return predicates;
    }

    /****************/
    /* METODOS CRUD */
    /****************/

    protected final String validacionesPrevias(FacEstrategiaIteracion bean) throws Exception {
        String mensaje = "";
        if (!Optional.of(bean.getNroIteracion()).isPresent()) {
            String msg = this.messageSource.getMessage("message.facEstrategiaIteracion.nroIteracion.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getActivo()).isPresent()) {
            String msg = this.messageSource.getMessage("message.facEstrategiaIteracion.activo.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        String msg = this.setValidacionesPrevias(bean);
        if (StringUtils.isNotBlank(msg)) {
            mensaje += "* " + msg + "<br/>";
        }
        return mensaje;
    }

    protected String setValidacionesPrevias(FacEstrategiaIteracion bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected String validacionesPreviasCreate(FacEstrategiaIteracion bean) throws Exception {
        String msg = null;
        FacEstrategiaIteracion validar = null;
        return msg;
    }

    protected String validacionesPreviasSave(FacEstrategiaIteracion bean) throws Exception {
        String msg = null;
        FacEstrategiaIteracion validar = null;
        return msg;
    }

    protected FacEstrategiaIteracion completarDatosBean(FacEstrategiaIteracion bean) throws Exception {
        BigDecimal data = new BigDecimal(0.00);
        bean = this.setCompletarDatosBean(bean);
        return bean;
    }

    protected FacEstrategiaIteracion setCompletarDatosBean(FacEstrategiaIteracion bean) throws Exception {
        return bean;
    }

    protected final FacEstrategiaIteracion setAbstractCreate(FacEstrategiaIteracion dto) throws Exception {
        FacEstrategiaIteracion bean = new FacEstrategiaIteracion();
        bean = (FacEstrategiaIteracion) BeanUtils.cloneBean(dto);
        return bean;
    }

    /************************/
    /* METODOS CRUD Masivos */
    /************************/

    protected FacEstrategiaIteracion setUploadExcel(Cell currentCell, FacEstrategiaIteracion facEstrategiaIteracion, int contador) throws Exception {
        Double valorDouble = new Double(0);
        BigDecimal valorDecimal = new BigDecimal(0);
        Boolean valorBoolean = new Boolean(true);
        String valorCadena = "";
        switch (contador) {
        case 1:
            try {
                valorDouble = new Double(currentCell.getNumericCellValue());
                facEstrategiaIteracion.setNroIteracion(valorDouble.intValue());
            } catch (Exception e) {
                throw new ServiceException("Valor Campo nroIteracion está en formato incorrecto");
            }
            break;
        case 2:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 1) {
                    throw new ServiceException("Valor Campo indAprobacionRechazoCupa contiene mas de 1 caracter(es)");
                }
                facEstrategiaIteracion.setIndAprobacionRechazoCupa(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo indAprobacionRechazoCupa está en formato incorrecto");
            }
            break;
        case 3:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 1) {
                    throw new ServiceException("Valor Campo indAprobacionRechazoAprobador0 contiene mas de 1 caracter(es)");
                }
                facEstrategiaIteracion.setIndAprobacionRechazoAprobador0(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo indAprobacionRechazoAprobador0 está en formato incorrecto");
            }
            break;
        case 4:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 1) {
                    throw new ServiceException("Valor Campo indAprobacionRechazoFirma contiene mas de 1 caracter(es)");
                }
                facEstrategiaIteracion.setIndAprobacionRechazoFirma(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo indAprobacionRechazoFirma está en formato incorrecto");
            }
            break;
        case 5:
            try {
                valorDouble = new Double(currentCell.getNumericCellValue());
                facEstrategiaIteracion.setNroFirmanteTotal(valorDouble.intValue());
            } catch (Exception e) {
                throw new ServiceException("Valor Campo nroFirmanteTotal está en formato incorrecto");
            }
            break;
        case 6:
            try {
                valorDouble = new Double(currentCell.getNumericCellValue());
                facEstrategiaIteracion.setNroFirmanteEnRevision(valorDouble.intValue());
            } catch (Exception e) {
                throw new ServiceException("Valor Campo nroFirmanteEnRevision está en formato incorrecto");
            }
            break;
        case 7:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 1) {
                    throw new ServiceException("Valor Campo activo contiene mas de 1 caracter(es)");
                }
                facEstrategiaIteracion.setActivo(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo activo está en formato incorrecto");
            }
            break;
        default:
            break;
        }
        return facEstrategiaIteracion;
    }

    protected AppParametria setObtenerRegistroConfiguracionUploadExcel() {
        AppParametria appParametriaData = this.appParametriaDeltaRepository.getByModuloAndLabelAndStatus(AppParametriaModuloEnum.CARGA_EXCEL.getEstado(),
                AppParametriaLabelEnum.INICIO_REGISTRO_DATA.getEstado(), Constants.ESTADO_ACTIVO);
        return appParametriaData;
    }

    protected FacEstrategiaIteracion setInicializarBeanUpdateExcel() {
        FacEstrategiaIteracion bean = new FacEstrategiaIteracion();
        bean.setId(null);
        return bean;
    }

    protected final Integer setObtenerId(FacEstrategiaIteracion bean) {
        return bean.getId();
    }

    /************************/
    /* Instancia de Bean    */
    /************************/

    protected final FacEstrategiaIteracion createInstance() {
        FacEstrategiaIteracion facEstrategiaIteracion = new FacEstrategiaIteracion();
        return facEstrategiaIteracion;
    }

    protected final BeanCargaMasivoDTO<FacEstrategiaIteracion> createInstanceMasivoDTO() {
        BeanCargaMasivoDTO<FacEstrategiaIteracion> beanCargaMasivoDTO = new BeanCargaMasivoDTO<FacEstrategiaIteracion>();
        return beanCargaMasivoDTO;

    }

    protected final BeanListaMasivoDTO<BeanCargaMasivoDTO<FacEstrategiaIteracion>> createInstanceListaMasivoDTO() {
        BeanListaMasivoDTO<BeanCargaMasivoDTO<FacEstrategiaIteracion>> beanCargaMasivoDTOBeanListaMasivoDTO = new BeanListaMasivoDTO<BeanCargaMasivoDTO<FacEstrategiaIteracion>>();
        return beanCargaMasivoDTOBeanListaMasivoDTO;
    }

    /*****************************/
    /* Metodos que generan Excel */
    /*****************************/

    protected String devuelveNombreSheet() {
        return this.NAME_SHEET;
    }

    protected String devuelveListaHeaderExcelXML() {
        return this.CONFIG_TITLE;
    }

    protected int setAbstractDownloadExcel(FacEstrategiaIteracion bean, HSSFRow dataRow) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getNroIteracion(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getIndAprobacionRechazoCupa(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getIndAprobacionRechazoAprobador0(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getIndAprobacionRechazoFirma(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getNroFirmanteTotal(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getNroFirmanteEnRevision(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getActivo(), dataRow.createCell(contador));
        contador++;
        return contador;
    }

    protected int setAbstractDownloadExcelSXLSX(FacEstrategiaIteracion bean, Row dataRow, List<CellStyle> cellStyleList) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getNroIteracion(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getIndAprobacionRechazoCupa(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getIndAprobacionRechazoAprobador0(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getIndAprobacionRechazoFirma(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getNroFirmanteTotal(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getNroFirmanteEnRevision(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getActivo(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        return contador;
    }

    protected String setAbstractGenerateInsertExcelSXLSX(FacEstrategiaIteracion bean) {
        String fechaS = "";
        String sqlInsert = "INSERT INTO fac_estrategia_iteracion(";
        sqlInsert = sqlInsert + "fac_estrategia_iteracion_id" + ", ";
        sqlInsert = sqlInsert + "nro_iteracion" + ", ";
        sqlInsert = sqlInsert + "ind_aprobacion_rechazo_cupa" + ", ";
        sqlInsert = sqlInsert + "ind_aprobacion_rechazo_aprobador0" + ", ";
        sqlInsert = sqlInsert + "ind_aprobacion_rechazo_firma" + ", ";
        sqlInsert = sqlInsert + "nro_firmante_total" + ", ";
        sqlInsert = sqlInsert + "nro_firmante_en_revision" + ", ";
        sqlInsert = sqlInsert + "activo" + ", ";
        sqlInsert = sqlInsert + "fac_factura_id" + ", ";
        sqlInsert = sqlInsert + "mtr_usuario_facturacion_cupa_id" + ", ";
        sqlInsert = sqlInsert + "mtr_tipo_contrato_id" + ", ";
        sqlInsert = sqlInsert + "mtr_estrategia_facturacion_id" + ", ";
        sqlInsert = sqlInsert + "mtr_usuario_facturacion_aprobador0_id" + ")";
        sqlInsert = sqlInsert + " VALUES (";
        sqlInsert = sqlInsert + bean.getId() + ", ";
        sqlInsert = sqlInsert + bean.getNroIteracion() + ", ";
        if (StringUtils.isBlank(bean.getIndAprobacionRechazoCupa())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getIndAprobacionRechazoCupa() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getIndAprobacionRechazoAprobador0())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getIndAprobacionRechazoAprobador0() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getIndAprobacionRechazoFirma())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getIndAprobacionRechazoFirma() + "'" + ", ";
        }
        sqlInsert = sqlInsert + bean.getNroFirmanteTotal() + ", ";
        sqlInsert = sqlInsert + bean.getNroFirmanteEnRevision() + ", ";
        if (StringUtils.isBlank(bean.getActivo())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getActivo() + "'" + ", ";
        }
        sqlInsert = sqlInsert + bean.getMtrEstrategiaFacturacion().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrTipoContrato().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrUsuarioFacturacionCupa().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrUsuarioFacturacionAprobador0().getId() + ", ";
        sqlInsert = sqlInsert + bean.getFacFactura().getId();
        sqlInsert = sqlInsert + " );";
        return sqlInsert;
    }

    /*****************/
    /* Otros Metodos */
    /*****************/

    public Long countByMtrEstrategiaFacturacion(MtrEstrategiaFacturacion mtrEstrategiaFacturacion) {
        return this.facEstrategiaIteracionDeltaRepository.countByMtrEstrategiaFacturacion(mtrEstrategiaFacturacion);
    }

    public GraphBean graphByMtrEstrategiaFacturacion() {
        List<MtrEstrategiaFacturacion> lista = this.mtrEstrategiaFacturacionDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrEstrategiaFacturacion bean : lista) {
            Long valor = this.facEstrategiaIteracionDeltaRepository.countByMtrEstrategiaFacturacion(bean);
            String descripcion = this.setGraphDescripcionByMtrEstrategiaFacturacion(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrEstrategiaFacturacion();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrEstrategiaFacturacion();
        contador = 0;
        contadorColor = 0;
        for (MtrEstrategiaFacturacion bean : lista) {
            Long valor = this.facEstrategiaIteracionDeltaRepository.countByMtrEstrategiaFacturacion(bean);
            String descripcion = this.setGraphDescripcionByMtrEstrategiaFacturacion(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrEstrategiaFacturacion(MtrEstrategiaFacturacion mtrEstrategiaFacturacion) {
        return mtrEstrategiaFacturacion.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrEstrategiaFacturacion() {
        return "MtrEstrategiaFacturacion";
    }

    protected String setGraphBarChartTituloByMtrEstrategiaFacturacion() {
        return "MtrEstrategiaFacturacion";
    }

    public Long countByMtrTipoContrato(MtrTipoContrato mtrTipoContrato) {
        return this.facEstrategiaIteracionDeltaRepository.countByMtrTipoContrato(mtrTipoContrato);
    }

    public GraphBean graphByMtrTipoContrato() {
        List<MtrTipoContrato> lista = this.mtrTipoContratoDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrTipoContrato bean : lista) {
            Long valor = this.facEstrategiaIteracionDeltaRepository.countByMtrTipoContrato(bean);
            String descripcion = this.setGraphDescripcionByMtrTipoContrato(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrTipoContrato();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrTipoContrato();
        contador = 0;
        contadorColor = 0;
        for (MtrTipoContrato bean : lista) {
            Long valor = this.facEstrategiaIteracionDeltaRepository.countByMtrTipoContrato(bean);
            String descripcion = this.setGraphDescripcionByMtrTipoContrato(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrTipoContrato(MtrTipoContrato mtrTipoContrato) {
        return mtrTipoContrato.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrTipoContrato() {
        return "MtrTipoContrato";
    }

    protected String setGraphBarChartTituloByMtrTipoContrato() {
        return "MtrTipoContrato";
    }



    public Long countByFacFactura(FacFactura facFactura) {
        return this.facEstrategiaIteracionDeltaRepository.countByFacFactura(facFactura);
    }

    public GraphBean graphByFacFactura() {
        List<FacFactura> lista = this.facFacturaDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (FacFactura bean : lista) {
            Long valor = this.facEstrategiaIteracionDeltaRepository.countByFacFactura(bean);
            String descripcion = this.setGraphDescripcionByFacFactura(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByFacFactura();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByFacFactura();
        contador = 0;
        contadorColor = 0;
        for (FacFactura bean : lista) {
            Long valor = this.facEstrategiaIteracionDeltaRepository.countByFacFactura(bean);
            String descripcion = this.setGraphDescripcionByFacFactura(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByFacFactura(FacFactura facFactura) {
        return facFactura.getId().toString();
    }

    protected String setGraphPieChartTituloByFacFactura() {
        return "FacFactura";
    }

    protected String setGraphBarChartTituloByFacFactura() {
        return "FacFactura";
    }

}

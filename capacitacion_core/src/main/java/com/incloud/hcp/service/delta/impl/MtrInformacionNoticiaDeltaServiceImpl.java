/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntitydeltaDTOService.java.e.vm
 */
package com.incloud.hcp.service.delta.impl;

import com.incloud.hcp.domain.MtrInformacionNoticia;
import com.incloud.hcp.domain.MtrTipoInformacionNoticia;
import com.incloud.hcp.domain.response.MtrInformacionNoticiaResponse;
import com.incloud.hcp.service.delta.MtrInformacionNoticiaDeltaService;
import com.incloud.hcp.service.impl.MtrInformacionNoticiaServiceImpl;
import com.incloud.hcp.service.support.PageRequestByExample;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.ss.usermodel.Cell;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * A simple DTO Facility for MtrInformacionNoticia.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public class MtrInformacionNoticiaDeltaServiceImpl extends MtrInformacionNoticiaServiceImpl implements MtrInformacionNoticiaDeltaService {

    /**************************/
    /* Metodos Personalizados */
    /**************************/

    @Override
    public MtrInformacionNoticia getInformacionNoticiaById(Integer id) {
        return Optional.ofNullable(this.mtrInformacionNoticiaDeltaRepository)
                .map(i -> i.getOne(id))
                .orElse(null);
    }

    @Override
    public List<MtrInformacionNoticia> getInfoNoticiaByTipoInfoNoticia(int idTipoInformacionNoticia) {
        return mtrInformacionNoticiaDeltaRepository
                .findByMtrTipoInformacionNoticia(mtrTipoInformacionNoticiaDeltaRepository
                        .getOne(idTipoInformacionNoticia));
    }

    @Override
    public ResponseEntity<Map> grabar(MtrInformacionNoticia info) {
        ResponseEntity response;
        Map map = new HashMap<>();
        try {
            List<MtrInformacionNoticia> informacion = mtrInformacionNoticiaDeltaRepository.findByTituloTipo(info.getTitulo(),
                    info.getMtrTipoInformacionNoticia().getId());
            if(informacion != null && !informacion.isEmpty()){
                map.put("message", "El título a ingresar se encuentra registrado");
                response = new ResponseEntity(map, HttpStatus.OK);
            } else {
                info.setFechaCreacion(new Timestamp(System.currentTimeMillis()));
                info.setFechaModificacion(new Timestamp(System.currentTimeMillis()));
                info.setUsuarioCreacion(1);
                info.setUsuarioModificacion(1);
                info.setFechaCaducidad(new Timestamp(System.currentTimeMillis()));
                info.setFechaPublicacion(new Timestamp(System.currentTimeMillis()));
                info.setTextoInfo("Ver Documento");
                info.setIconText("");
                info.setRutaAdjunto("");
                info.setIndNoticiaNuevoProveedor("");
                info.setIndActivo("");
                map.put("data", mtrInformacionNoticiaDeltaRepository.save(info));
                response = new ResponseEntity(map, HttpStatus.OK);
            }
        } catch (Exception e){
            map = new HashMap<>();
            map.put("message",e.getMessage());
            response = new ResponseEntity(map, HttpStatus.NOT_FOUND);
        }
        return response;
    }

    @Override
    public ResponseEntity<Map> update(MtrInformacionNoticia info) {
        ResponseEntity response;
        Map map = new HashMap<>();
        try {
            List<MtrInformacionNoticia> informacion = mtrInformacionNoticiaDeltaRepository.findByTituloById
                    (info.getId(), info.getTitulo());
            if(informacion != null && !informacion.isEmpty()){
                map.put("message", "El título a ingresar se encuentra registrado");
                response = new ResponseEntity(map, HttpStatus.OK);
            } else {
                map.put("data", mtrInformacionNoticiaDeltaRepository.save(info));
                response = new ResponseEntity(map, HttpStatus.OK);
            }
        } catch (Exception e){
            map.put("message",e.getMessage());
            response = new ResponseEntity(map, HttpStatus.NOT_FOUND);
        }
        return response;
    }

    @Override
    public ResponseEntity<Map> delete(MtrInformacionNoticia info) {
        ResponseEntity<Map> response = null;
        Map map = null;
        try {
            mtrInformacionNoticiaDeltaRepository.delete(info);
            map = new HashMap<>();
            map.put("data", info);
            response = new ResponseEntity<Map>(map, HttpStatus.OK);
        } catch (Exception e){
            map = new HashMap<>();
            map.put("message", e.getMessage());
            response = new ResponseEntity<Map>(map, HttpStatus.NOT_FOUND);
        }
        return response;
    }



    /***********************/
    /* Metodos de Busqueda */
    /***********************/

    protected Sort setFindAll(Sort sort) {
        return sort;
    }

    protected Sort setFind(MtrInformacionNoticia req, ExampleMatcher matcher, Example<MtrInformacionNoticia> example, Sort sort) {
        return sort;
    }

    protected void setFindPaginated(PageRequestByExample<MtrInformacionNoticia> req, ExampleMatcher matcher, Example<MtrInformacionNoticia> example) {
        return;
    }

    protected List<Predicate> setAdicionalDeltaPredicate(List<Predicate> predicates, MtrInformacionNoticiaResponse bean, CriteriaBuilder cb,
            CriteriaQuery<MtrInformacionNoticia> query, Root<MtrInformacionNoticia> root) throws Exception {

        MtrInformacionNoticia entity = bean.getBean();
        //Ejemplo
        /*
        if (Optional.ofNullable(entity.get<VariableManytoOne>()).isPresent()) {
            Join<MtrInformacionNoticia, <ClaseManytoOne>> from<ClaseManytoOne> = countRoot.join("<variableManytoOne>", JoinType.INNER);
        
            if (Optional.ofNullable(entity.get<VariableManytoOne>().get<Atributo>()).isPresent()) {
                Join<MtrInformacionNoticia, <ClaseManytoOne>> from<ClaseManytoOne> = countRoot.join("<variableManytoOne>", JoinType.INNER);
                Predicate thirdCondition = cb.equal(from<ClaseManytoOne>.get("<Atributo>"), entity.get<ClaseManytoOne>().get<Atributo>());
                predicates.add(thirdCondition);
            }
            
        }
        query.orderBy(cb.desc(root.get("<campo entity>")));
        */
        return predicates;
    }

    protected Root<MtrInformacionNoticia> setAdicionalDeltaTotalPredicate(MtrInformacionNoticiaResponse bean, Root<MtrInformacionNoticia> countRoot)
            throws Exception {
        MtrInformacionNoticia entity = bean.getBean();
        //Ejemplo
        /*
        if (Optional.ofNullable(entity.get<VariableManytoOne>()).isPresent()) {
            if (Optional.ofNullable(entity.get<VariableManytoOne>()).isPresent()) {
                Join<MtrInformacionNoticia, <ClaseManytoOne>> from<ClaseManytoOne> = countRoot.join("<variableManytoOne>", JoinType.INNER);
            }
        }
        */
        return countRoot;
    }

    /****************/
    /* METODOS CRUD */
    /****************/

    protected String setValidacionesPrevias(MtrInformacionNoticia bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected MtrInformacionNoticia setCreate(MtrInformacionNoticia bean) throws Exception {
        return bean;
    }

    protected void setSave(MtrInformacionNoticia dto) throws Exception {
        return;
    }

    protected void setDelete(Integer id) throws Exception {

    }

    protected void setDeleteAll() throws Exception {

    }

    /************************/
    /* METODOS CRUD Masivos */
    /************************/

    protected MtrInformacionNoticia setUploadExcel(Cell currentCell, MtrInformacionNoticia mtrInformacionNoticia, int contador) throws Exception {
        mtrInformacionNoticia = super.setUploadExcel(currentCell, mtrInformacionNoticia, contador);
        return mtrInformacionNoticia;
    }

    protected String setSaveMasivo(MtrInformacionNoticia dto) throws Exception {
        return "";
    }

    protected List<MtrInformacionNoticia> setBeforeDeleteMasivo(List<MtrInformacionNoticia> listaDto) throws Exception {
        return listaDto;
    }

    protected void setAfterDeleteMasivo() throws Exception {
        return;
    }

    /*****************************/
    /* Metodos que generan Excel */
    /*****************************/

    protected void setDownloadExcelItem(MtrInformacionNoticia bean, HSSFRow dataRow) {

    }

    protected void setDownloadExcel(HSSFSheet sheet) {

    }

    /*****************/
    /* Otros Metodos */
    /*****************/

    protected String setGraphDescripcionByMtrTipoInformacionNoticia(MtrTipoInformacionNoticia mtrTipoInformacionNoticia) {
        return mtrTipoInformacionNoticia.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrTipoInformacionNoticia() {
        return "MtrTipoInformacionNoticia";
    }

    protected String setGraphBarChartTituloByMtrTipoInformacionNoticia() {
        return "MtrTipoInformacionNoticia";
    }

}

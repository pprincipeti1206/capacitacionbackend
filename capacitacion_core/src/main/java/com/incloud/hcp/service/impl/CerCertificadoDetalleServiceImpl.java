/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.incloud.hcp.service.impl;

import com.incloud.hcp.common.enums.AppParametriaLabelEnum;
import com.incloud.hcp.common.enums.AppParametriaModuloEnum;
import com.incloud.hcp.common.excel.ExcelDefault;
import com.incloud.hcp.common.graph.GraphBarChart;
import com.incloud.hcp.common.graph.GraphBean;
import com.incloud.hcp.common.graph.GraphDataset;
import com.incloud.hcp.common.graph.GraphPieChart;
import com.incloud.hcp.domain.*;
import com.incloud.hcp.domain.response.CerCertificadoDetalleResponse;
import com.incloud.hcp.exception.ServiceException;
import com.incloud.hcp.repository.delta.*;
import com.incloud.hcp.service.CerCertificadoDetalleService;
import com.incloud.hcp.service._framework.bean.BeanCargaMasivoDTO;
import com.incloud.hcp.service._framework.bean.BeanListaMasivoDTO;
import com.incloud.hcp.service._framework.impl.JPACustomServiceImpl;
import com.incloud.hcp.service.delta.CerCertificadoDeltaService;
import com.incloud.hcp.service.delta.CerNotaPedidoDetalleDeltaService;
import com.incloud.hcp.service.delta.MtrCuentaImputacionDeltaService;
import com.incloud.hcp.service.delta.MtrCuentaMayorDeltaService;
import com.incloud.hcp.service.requireNew.CerCertificadoDetalleRequireNewService;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.utils.Constants;
import com.incloud.hcp.utils.PredicateUtils;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * A simple DTO Facility for CerCertificadoDetalle.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public abstract class CerCertificadoDetalleServiceImpl extends JPACustomServiceImpl<CerCertificadoDetalleResponse, CerCertificadoDetalle, Integer>
        implements CerCertificadoDetalleService {

    protected final String NAME_SHEET = "CerCertificadoDetalle";
    protected final String CONFIG_TITLE = "com/incloud/hcp/excel/CerCertificadoDetalleExcel.xml";
    private final Integer REGISTROS_COLOR = 10;

    @Autowired
    protected AppParametriaDeltaRepository appParametriaDeltaRepository;

    @Autowired
    protected CerCertificadoDetalleDeltaRepository cerCertificadoDetalleDeltaRepository;

    @Autowired
    protected CerCertificadoDetalleRequireNewService cerCertificadoDetalleRequireNewService;

    @Autowired
    protected MtrCuentaMayorDeltaService mtrCuentaMayorDeltaService;

    @Autowired
    protected MtrCuentaMayorDeltaRepository mtrCuentaMayorDeltaRepository;

    @Autowired
    protected MtrCuentaImputacionDeltaService mtrCuentaImputacionDeltaService;

    @Autowired
    protected MtrCuentaImputacionDeltaRepository mtrCuentaImputacionDeltaRepository;

    @Autowired
    protected CerNotaPedidoDetalleDeltaService cerNotaPedidoDetalleDeltaService;

    @Autowired
    protected CerNotaPedidoDetalleDeltaRepository cerNotaPedidoDetalleDeltaRepository;

    @Autowired
    protected CerCertificadoDeltaService cerCertificadoDeltaService;

    @Autowired
    protected CerCertificadoDeltaRepository cerCertificadoDeltaRepository;

    /*****************************/
    /* Metodos de Busqueda       */
    /*****************************/

    protected final ExampleMatcher setAbstractFind(ExampleMatcher matcher) {
        matcher = ExampleMatcher.matching() //
                .withMatcher(CerCertificadoDetalle_.subpackno.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerCertificadoDetalle_.rango.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerCertificadoDetalle_.numOrden.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerCertificadoDetalle_.nivelEstructura.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerCertificadoDetalle_.indicadorItemAdici.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerCertificadoDetalle_.ctaContable.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerCertificadoDetalle_.asignServicio.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerCertificadoDetalle_.auxiliar.getName(), match -> match.ignoreCase().startsWith());
        return matcher;
    }

    protected abstract Sort setFindAll(Sort sort);

    protected abstract Sort setFind(CerCertificadoDetalle req, ExampleMatcher matcher, Example<CerCertificadoDetalle> example, Sort sort);

    protected abstract void setFindPaginated(PageRequestByExample<CerCertificadoDetalle> req, ExampleMatcher matcher, Example<CerCertificadoDetalle> example);

    protected final CerCertificadoDetalle setObtenerBeanResponse(CerCertificadoDetalleResponse bean) {
        return bean.getBean();
    }

    protected final Class<CerCertificadoDetalle> setObtenerClassBean() {
        return CerCertificadoDetalle.class;
    }

    protected List<Predicate> setAbstractPredicate(CerCertificadoDetalleResponse bean, CriteriaBuilder cb, Root<CerCertificadoDetalle> root) {
        List<Predicate> predicates = new ArrayList<>();
        CerCertificadoDetalle entity = bean.getBean();
        /* Obtener condiciones */
        PredicateUtils.addPredicates(predicates, bean.getIdCondicion(), "id", entity.getId(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getSubpacknoCondicion(), "subpackno", entity.getSubpackno(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getRangoCondicion(), "rango", entity.getRango(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getNumOrdenCondicion(), "numOrden", entity.getNumOrden(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getNivelEstructuraCondicion(), "nivelEstructura", entity.getNivelEstructura(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getIndicadorItemAdiciCondicion(), "indicadorItemAdici", entity.getIndicadorItemAdici(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getCtaContableCondicion(), "ctaContable", entity.getCtaContable(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getPrecioUnitarioCondicion(), "precioUnitario", entity.getPrecioUnitario(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getDescuentoCondicion(), "descuento", entity.getDescuento(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getCantidadTotalCondicion(), "cantidadTotal", entity.getCantidadTotal(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getCantidadPendienteCondicion(), "cantidadPendiente", entity.getCantidadPendiente(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getCantidadAprobadaCondicion(), "cantidadAprobada", entity.getCantidadAprobada(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getTotalLineaCondicion(), "totalLinea", entity.getTotalLinea(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getTotalLineaAjustadoCondicion(), "totalLineaAjustado", entity.getTotalLineaAjustado(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getAsignServicioCondicion(), "asignServicio", entity.getAsignServicio(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getAuxiliarCondicion(), "auxiliar", entity.getAuxiliar(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrCuentaMayorCondicion(), "mtrCuentaMayor", entity.getMtrCuentaMayor(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrCuentaImputacionCondicion(), "mtrCuentaImputacion", entity.getMtrCuentaImputacion(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getCerNotaPedidoDetalleCondicion(), "cerNotaPedidoDetalle", entity.getCerNotaPedidoDetalle(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getCerCertificadoCondicion(), "cerCertificado", entity.getCerCertificado(), cb, root);
        /* Obtener valores de Lista */
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "id", bean.getIdList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "subpackno", bean.getSubpacknoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "rango", bean.getRangoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "numOrden", bean.getNumOrdenList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "nivelEstructura", bean.getNivelEstructuraList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "indicadorItemAdici", bean.getIndicadorItemAdiciList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "ctaContable", bean.getCtaContableList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "precioUnitario", bean.getPrecioUnitarioList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "descuento", bean.getDescuentoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "cantidadTotal", bean.getCantidadTotalList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "cantidadPendiente", bean.getCantidadPendienteList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "cantidadAprobada", bean.getCantidadAprobadaList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "totalLinea", bean.getTotalLineaList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "totalLineaAjustado", bean.getTotalLineaAjustadoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "asignServicio", bean.getAsignServicioList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "auxiliar", bean.getAuxiliarList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrCuentaMayor", bean.getMtrCuentaMayorList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrCuentaImputacion", bean.getMtrCuentaImputacionList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "cerNotaPedidoDetalle", bean.getCerNotaPedidoDetalleList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "cerCertificado", bean.getCerCertificadoList(), cb, root);
        return predicates;
    }

    /****************/
    /* METODOS CRUD */
    /****************/

    protected final String validacionesPrevias(CerCertificadoDetalle bean) throws Exception {
        String mensaje = "";
        if (!Optional.of(bean.getPrecioUnitario()).isPresent()) {
            String msg = this.messageSource.getMessage("message.cerCertificadoDetalle.precioUnitario.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getCantidadTotal()).isPresent()) {
            String msg = this.messageSource.getMessage("message.cerCertificadoDetalle.cantidadTotal.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getCantidadPendiente()).isPresent()) {
            String msg = this.messageSource.getMessage("message.cerCertificadoDetalle.cantidadPendiente.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getCantidadAprobada()).isPresent()) {
            String msg = this.messageSource.getMessage("message.cerCertificadoDetalle.cantidadAprobada.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getTotalLinea()).isPresent()) {
            String msg = this.messageSource.getMessage("message.cerCertificadoDetalle.totalLinea.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getTotalLineaAjustado()).isPresent()) {
            String msg = this.messageSource.getMessage("message.cerCertificadoDetalle.totalLineaAjustado.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        String msg = this.setValidacionesPrevias(bean);
        if (StringUtils.isNotBlank(msg)) {
            mensaje += "* " + msg + "<br/>";
        }
        return mensaje;
    }

    protected String setValidacionesPrevias(CerCertificadoDetalle bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected String validacionesPreviasCreate(CerCertificadoDetalle bean) throws Exception {
        String msg = null;
        CerCertificadoDetalle validar = null;
        return msg;
    }

    protected String validacionesPreviasSave(CerCertificadoDetalle bean) throws Exception {
        String msg = null;
        CerCertificadoDetalle validar = null;
        return msg;
    }

    protected CerCertificadoDetalle completarDatosBean(CerCertificadoDetalle bean) throws Exception {
        BigDecimal data = new BigDecimal(0.00);
        if (Optional.ofNullable(bean.getPrecioUnitario()).isPresent()) {
            bean.setPrecioUnitario(bean.getPrecioUnitario().setScale(2, BigDecimal.ROUND_HALF_UP));
        }
        if (Optional.ofNullable(bean.getDescuento()).isPresent()) {
            bean.setDescuento(bean.getDescuento().setScale(2, BigDecimal.ROUND_HALF_UP));
        }
        if (Optional.ofNullable(bean.getCantidadTotal()).isPresent()) {
            bean.setCantidadTotal(bean.getCantidadTotal().setScale(4, BigDecimal.ROUND_HALF_UP));
        }
        if (Optional.ofNullable(bean.getCantidadPendiente()).isPresent()) {
            bean.setCantidadPendiente(bean.getCantidadPendiente().setScale(4, BigDecimal.ROUND_HALF_UP));
        }
        if (Optional.ofNullable(bean.getCantidadAprobada()).isPresent()) {
            bean.setCantidadAprobada(bean.getCantidadAprobada().setScale(4, BigDecimal.ROUND_HALF_UP));
        }
        if (Optional.ofNullable(bean.getTotalLinea()).isPresent()) {
            bean.setTotalLinea(bean.getTotalLinea().setScale(2, BigDecimal.ROUND_HALF_UP));
        }
        if (Optional.ofNullable(bean.getTotalLineaAjustado()).isPresent()) {
            bean.setTotalLineaAjustado(bean.getTotalLineaAjustado().setScale(2, BigDecimal.ROUND_HALF_UP));
        }
        bean = this.setCompletarDatosBean(bean);
        return bean;
    }

    protected CerCertificadoDetalle setCompletarDatosBean(CerCertificadoDetalle bean) throws Exception {
        return bean;
    }

    protected final CerCertificadoDetalle setAbstractCreate(CerCertificadoDetalle dto) throws Exception {
        CerCertificadoDetalle bean = new CerCertificadoDetalle();
        bean = (CerCertificadoDetalle) BeanUtils.cloneBean(dto);
        return bean;
    }

    /************************/
    /* METODOS CRUD Masivos */
    /************************/

    protected CerCertificadoDetalle setUploadExcel(Cell currentCell, CerCertificadoDetalle cerCertificadoDetalle, int contador) throws Exception {
        Double valorDouble = new Double(0);
        BigDecimal valorDecimal = new BigDecimal(0);
        Boolean valorBoolean = new Boolean(true);
        String valorCadena = "";
        switch (contador) {
        case 1:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 100) {
                    throw new ServiceException("Valor Campo subpackno contiene mas de 100 caracter(es)");
                }
                cerCertificadoDetalle.setSubpackno(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo subpackno está en formato incorrecto");
            }
            break;
        case 2:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 100) {
                    throw new ServiceException("Valor Campo rango contiene mas de 100 caracter(es)");
                }
                cerCertificadoDetalle.setRango(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo rango está en formato incorrecto");
            }
            break;
        case 3:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 100) {
                    throw new ServiceException("Valor Campo numOrden contiene mas de 100 caracter(es)");
                }
                cerCertificadoDetalle.setNumOrden(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo numOrden está en formato incorrecto");
            }
            break;
        case 4:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 100) {
                    throw new ServiceException("Valor Campo nivelEstructura contiene mas de 100 caracter(es)");
                }
                cerCertificadoDetalle.setNivelEstructura(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo nivelEstructura está en formato incorrecto");
            }
            break;
        case 5:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 100) {
                    throw new ServiceException("Valor Campo indicadorItemAdici contiene mas de 100 caracter(es)");
                }
                cerCertificadoDetalle.setIndicadorItemAdici(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo indicadorItemAdici está en formato incorrecto");
            }
            break;
        case 6:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 100) {
                    throw new ServiceException("Valor Campo ctaContable contiene mas de 100 caracter(es)");
                }
                cerCertificadoDetalle.setCtaContable(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo ctaContable está en formato incorrecto");
            }
            break;
        case 7:
            try {
                valorDecimal = new BigDecimal(currentCell.getNumericCellValue());
                cerCertificadoDetalle.setPrecioUnitario(valorDecimal);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo precioUnitario está en formato incorrecto");
            }
            break;
        case 8:
            try {
                valorDecimal = new BigDecimal(currentCell.getNumericCellValue());
                cerCertificadoDetalle.setDescuento(valorDecimal);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo descuento está en formato incorrecto");
            }
            break;
        case 9:
            try {
                valorDecimal = new BigDecimal(currentCell.getNumericCellValue());
                cerCertificadoDetalle.setCantidadTotal(valorDecimal);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo cantidadTotal está en formato incorrecto");
            }
            break;
        case 10:
            try {
                valorDecimal = new BigDecimal(currentCell.getNumericCellValue());
                cerCertificadoDetalle.setCantidadPendiente(valorDecimal);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo cantidadPendiente está en formato incorrecto");
            }
            break;
        case 11:
            try {
                valorDecimal = new BigDecimal(currentCell.getNumericCellValue());
                cerCertificadoDetalle.setCantidadAprobada(valorDecimal);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo cantidadAprobada está en formato incorrecto");
            }
            break;
        case 12:
            try {
                valorDecimal = new BigDecimal(currentCell.getNumericCellValue());
                cerCertificadoDetalle.setTotalLinea(valorDecimal);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo totalLinea está en formato incorrecto");
            }
            break;
        case 13:
            try {
                valorDecimal = new BigDecimal(currentCell.getNumericCellValue());
                cerCertificadoDetalle.setTotalLineaAjustado(valorDecimal);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo totalLineaAjustado está en formato incorrecto");
            }
            break;
        case 14:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 100) {
                    throw new ServiceException("Valor Campo asignServicio contiene mas de 100 caracter(es)");
                }
                cerCertificadoDetalle.setAsignServicio(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo asignServicio está en formato incorrecto");
            }
            break;
        case 15:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 100) {
                    throw new ServiceException("Valor Campo auxiliar contiene mas de 100 caracter(es)");
                }
                cerCertificadoDetalle.setAuxiliar(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo auxiliar está en formato incorrecto");
            }
            break;
        default:
            break;
        }
        return cerCertificadoDetalle;
    }

    protected AppParametria setObtenerRegistroConfiguracionUploadExcel() {
        AppParametria appParametriaData = this.appParametriaDeltaRepository.getByModuloAndLabelAndStatus(AppParametriaModuloEnum.CARGA_EXCEL.getEstado(),
                AppParametriaLabelEnum.INICIO_REGISTRO_DATA.getEstado(), Constants.ESTADO_ACTIVO);
        return appParametriaData;
    }

    protected CerCertificadoDetalle setInicializarBeanUpdateExcel() {
        CerCertificadoDetalle bean = new CerCertificadoDetalle();
        bean.setId(null);
        return bean;
    }

    protected final Integer setObtenerId(CerCertificadoDetalle bean) {
        return bean.getId();
    }

    /************************/
    /* Instancia de Bean    */
    /************************/

    protected final CerCertificadoDetalle createInstance() {
        CerCertificadoDetalle cerCertificadoDetalle = new CerCertificadoDetalle();
        return cerCertificadoDetalle;
    }

    protected final BeanCargaMasivoDTO<CerCertificadoDetalle> createInstanceMasivoDTO() {
        BeanCargaMasivoDTO<CerCertificadoDetalle> beanCargaMasivoDTO = new BeanCargaMasivoDTO<CerCertificadoDetalle>();
        return beanCargaMasivoDTO;

    }

    protected final BeanListaMasivoDTO<BeanCargaMasivoDTO<CerCertificadoDetalle>> createInstanceListaMasivoDTO() {
        BeanListaMasivoDTO<BeanCargaMasivoDTO<CerCertificadoDetalle>> beanCargaMasivoDTOBeanListaMasivoDTO = new BeanListaMasivoDTO<BeanCargaMasivoDTO<CerCertificadoDetalle>>();
        return beanCargaMasivoDTOBeanListaMasivoDTO;
    }

    /*****************************/
    /* Metodos que generan Excel */
    /*****************************/

    protected String devuelveNombreSheet() {
        return this.NAME_SHEET;
    }

    protected String devuelveListaHeaderExcelXML() {
        return this.CONFIG_TITLE;
    }

    protected int setAbstractDownloadExcel(CerCertificadoDetalle bean, HSSFRow dataRow) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getSubpackno(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getRango(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getNumOrden(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getNivelEstructura(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getIndicadorItemAdici(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getCtaContable(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getPrecioUnitario(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getDescuento(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getCantidadTotal(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getCantidadPendiente(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getCantidadAprobada(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getTotalLinea(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getTotalLineaAjustado(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getAsignServicio(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getAuxiliar(), dataRow.createCell(contador));
        contador++;
        return contador;
    }

    protected int setAbstractDownloadExcelSXLSX(CerCertificadoDetalle bean, Row dataRow, List<CellStyle> cellStyleList) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getSubpackno(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getRango(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getNumOrden(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getNivelEstructura(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getIndicadorItemAdici(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getCtaContable(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getPrecioUnitario(), dataRow.createCell(contador), "N", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getDescuento(), dataRow.createCell(contador), "N", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getCantidadTotal(), dataRow.createCell(contador), "N", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getCantidadPendiente(), dataRow.createCell(contador), "N", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getCantidadAprobada(), dataRow.createCell(contador), "N", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getTotalLinea(), dataRow.createCell(contador), "N", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getTotalLineaAjustado(), dataRow.createCell(contador), "N", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getAsignServicio(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getAuxiliar(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        return contador;
    }

    protected String setAbstractGenerateInsertExcelSXLSX(CerCertificadoDetalle bean) {
        String fechaS = "";
        String sqlInsert = "INSERT INTO cer_certificado_detalle(";
        sqlInsert = sqlInsert + "cer_certificado_detalle_id" + ", ";
        sqlInsert = sqlInsert + "subpackno" + ", ";
        sqlInsert = sqlInsert + "rango" + ", ";
        sqlInsert = sqlInsert + "num_orden" + ", ";
        sqlInsert = sqlInsert + "nivel_estructura" + ", ";
        sqlInsert = sqlInsert + "indicador_item_adici" + ", ";
        sqlInsert = sqlInsert + "cta_contable" + ", ";
        sqlInsert = sqlInsert + "precio_unitario" + ", ";
        sqlInsert = sqlInsert + "descuento" + ", ";
        sqlInsert = sqlInsert + "cantidad_total" + ", ";
        sqlInsert = sqlInsert + "cantidad_pendiente" + ", ";
        sqlInsert = sqlInsert + "cantidad_aprobada" + ", ";
        sqlInsert = sqlInsert + "total_linea" + ", ";
        sqlInsert = sqlInsert + "total_linea_ajustado" + ", ";
        sqlInsert = sqlInsert + "asign_servicio" + ", ";
        sqlInsert = sqlInsert + "auxiliar" + ", ";
        sqlInsert = sqlInsert + "cer_certificado_id" + ", ";
        sqlInsert = sqlInsert + "cer_nota_pedido_detalle_id" + ", ";
        sqlInsert = sqlInsert + "mtr_cuenta_imputacion_id" + ", ";
        sqlInsert = sqlInsert + "mtr_cuenta_mayor_id" + ")";
        sqlInsert = sqlInsert + " VALUES (";
        sqlInsert = sqlInsert + bean.getId() + ", ";
        if (StringUtils.isBlank(bean.getSubpackno())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getSubpackno() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getRango())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getRango() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getNumOrden())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getNumOrden() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getNivelEstructura())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getNivelEstructura() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getIndicadorItemAdici())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getIndicadorItemAdici() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getCtaContable())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getCtaContable() + "'" + ", ";
        }
        sqlInsert = sqlInsert + bean.getPrecioUnitario() + ", ";
        sqlInsert = sqlInsert + bean.getDescuento() + ", ";
        sqlInsert = sqlInsert + bean.getCantidadTotal() + ", ";
        sqlInsert = sqlInsert + bean.getCantidadPendiente() + ", ";
        sqlInsert = sqlInsert + bean.getCantidadAprobada() + ", ";
        sqlInsert = sqlInsert + bean.getTotalLinea() + ", ";
        sqlInsert = sqlInsert + bean.getTotalLineaAjustado() + ", ";
        if (StringUtils.isBlank(bean.getAsignServicio())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getAsignServicio() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getAuxiliar())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getAuxiliar() + "'" + ", ";
        }
        sqlInsert = sqlInsert + bean.getMtrCuentaMayor().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrCuentaImputacion().getId() + ", ";
        sqlInsert = sqlInsert + bean.getCerNotaPedidoDetalle().getId() + ", ";
        sqlInsert = sqlInsert + bean.getCerCertificado().getId();
        sqlInsert = sqlInsert + " );";
        return sqlInsert;
    }

    /*****************/
    /* Otros Metodos */
    /*****************/

    public Long countByMtrCuentaMayor(MtrCuentaMayor mtrCuentaMayor) {
        return this.cerCertificadoDetalleDeltaRepository.countByMtrCuentaMayor(mtrCuentaMayor);
    }

    public GraphBean graphByMtrCuentaMayor() {
        List<MtrCuentaMayor> lista = this.mtrCuentaMayorDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrCuentaMayor bean : lista) {
            Long valor = this.cerCertificadoDetalleDeltaRepository.countByMtrCuentaMayor(bean);
            String descripcion = this.setGraphDescripcionByMtrCuentaMayor(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrCuentaMayor();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrCuentaMayor();
        contador = 0;
        contadorColor = 0;
        for (MtrCuentaMayor bean : lista) {
            Long valor = this.cerCertificadoDetalleDeltaRepository.countByMtrCuentaMayor(bean);
            String descripcion = this.setGraphDescripcionByMtrCuentaMayor(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrCuentaMayor(MtrCuentaMayor mtrCuentaMayor) {
        return mtrCuentaMayor.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrCuentaMayor() {
        return "MtrCuentaMayor";
    }

    protected String setGraphBarChartTituloByMtrCuentaMayor() {
        return "MtrCuentaMayor";
    }

    public Long countByMtrCuentaImputacion(MtrCuentaImputacion mtrCuentaImputacion) {
        return this.cerCertificadoDetalleDeltaRepository.countByMtrCuentaImputacion(mtrCuentaImputacion);
    }

    public GraphBean graphByMtrCuentaImputacion() {
        List<MtrCuentaImputacion> lista = this.mtrCuentaImputacionDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrCuentaImputacion bean : lista) {
            Long valor = this.cerCertificadoDetalleDeltaRepository.countByMtrCuentaImputacion(bean);
            String descripcion = this.setGraphDescripcionByMtrCuentaImputacion(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrCuentaImputacion();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrCuentaImputacion();
        contador = 0;
        contadorColor = 0;
        for (MtrCuentaImputacion bean : lista) {
            Long valor = this.cerCertificadoDetalleDeltaRepository.countByMtrCuentaImputacion(bean);
            String descripcion = this.setGraphDescripcionByMtrCuentaImputacion(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrCuentaImputacion(MtrCuentaImputacion mtrCuentaImputacion) {
        return mtrCuentaImputacion.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrCuentaImputacion() {
        return "MtrCuentaImputacion";
    }

    protected String setGraphBarChartTituloByMtrCuentaImputacion() {
        return "MtrCuentaImputacion";
    }

    public Long countByCerNotaPedidoDetalle(CerNotaPedidoDetalle cerNotaPedidoDetalle) {
        return this.cerCertificadoDetalleDeltaRepository.countByCerNotaPedidoDetalle(cerNotaPedidoDetalle);
    }

    public GraphBean graphByCerNotaPedidoDetalle() {
        List<CerNotaPedidoDetalle> lista = this.cerNotaPedidoDetalleDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (CerNotaPedidoDetalle bean : lista) {
            Long valor = this.cerCertificadoDetalleDeltaRepository.countByCerNotaPedidoDetalle(bean);
            String descripcion = this.setGraphDescripcionByCerNotaPedidoDetalle(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByCerNotaPedidoDetalle();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByCerNotaPedidoDetalle();
        contador = 0;
        contadorColor = 0;
        for (CerNotaPedidoDetalle bean : lista) {
            Long valor = this.cerCertificadoDetalleDeltaRepository.countByCerNotaPedidoDetalle(bean);
            String descripcion = this.setGraphDescripcionByCerNotaPedidoDetalle(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByCerNotaPedidoDetalle(CerNotaPedidoDetalle cerNotaPedidoDetalle) {
        return cerNotaPedidoDetalle.getId().toString();
    }

    protected String setGraphPieChartTituloByCerNotaPedidoDetalle() {
        return "CerNotaPedidoDetalle";
    }

    protected String setGraphBarChartTituloByCerNotaPedidoDetalle() {
        return "CerNotaPedidoDetalle";
    }

    public Long countByCerCertificado(CerCertificado cerCertificado) {
        return this.cerCertificadoDetalleDeltaRepository.countByCerCertificado(cerCertificado);
    }

    public GraphBean graphByCerCertificado() {
        List<CerCertificado> lista = this.cerCertificadoDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (CerCertificado bean : lista) {
            Long valor = this.cerCertificadoDetalleDeltaRepository.countByCerCertificado(bean);
            String descripcion = this.setGraphDescripcionByCerCertificado(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByCerCertificado();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByCerCertificado();
        contador = 0;
        contadorColor = 0;
        for (CerCertificado bean : lista) {
            Long valor = this.cerCertificadoDetalleDeltaRepository.countByCerCertificado(bean);
            String descripcion = this.setGraphDescripcionByCerCertificado(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByCerCertificado(CerCertificado cerCertificado) {
        return cerCertificado.getId().toString();
    }

    protected String setGraphPieChartTituloByCerCertificado() {
        return "CerCertificado";
    }

    protected String setGraphBarChartTituloByCerCertificado() {
        return "CerCertificado";
    }

}

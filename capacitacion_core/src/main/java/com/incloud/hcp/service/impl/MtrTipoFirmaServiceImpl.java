/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.incloud.hcp.service.impl;

import com.incloud.hcp.common.enums.AppParametriaLabelEnum;
import com.incloud.hcp.common.enums.AppParametriaModuloEnum;
import com.incloud.hcp.common.excel.ExcelDefault;
import com.incloud.hcp.domain.AppParametria;
import com.incloud.hcp.domain.MtrTipoFirma;
import com.incloud.hcp.domain.MtrTipoFirma_;
import com.incloud.hcp.domain.response.MtrTipoFirmaResponse;
import com.incloud.hcp.exception.ServiceException;
import com.incloud.hcp.repository.delta.AppParametriaDeltaRepository;
import com.incloud.hcp.repository.delta.MtrTipoFirmaDeltaRepository;
import com.incloud.hcp.service.MtrTipoFirmaService;
import com.incloud.hcp.service._framework.bean.BeanCargaMasivoDTO;
import com.incloud.hcp.service._framework.bean.BeanListaMasivoDTO;
import com.incloud.hcp.service._framework.impl.JPACustomServiceImpl;
import com.incloud.hcp.service.requireNew.MtrTipoFirmaRequireNewService;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.utils.Constants;
import com.incloud.hcp.utils.PredicateUtils;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * A simple DTO Facility for MtrTipoFirma.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public abstract class MtrTipoFirmaServiceImpl extends JPACustomServiceImpl<MtrTipoFirmaResponse, MtrTipoFirma, Integer> implements MtrTipoFirmaService {

    protected final String NAME_SHEET = "MtrTipoFirma";
    protected final String CONFIG_TITLE = "com/incloud/hcp/excel/MtrTipoFirmaExcel.xml";
    private final Integer REGISTROS_COLOR = 10;

    @Autowired
    protected AppParametriaDeltaRepository appParametriaDeltaRepository;

    @Autowired
    protected MtrTipoFirmaDeltaRepository mtrTipoFirmaDeltaRepository;

    @Autowired
    protected MtrTipoFirmaRequireNewService mtrTipoFirmaRequireNewService;

    /*****************************/
    /* Metodos de Busqueda       */
    /*****************************/

    protected final ExampleMatcher setAbstractFind(ExampleMatcher matcher) {
        matcher = ExampleMatcher.matching() //
                .withMatcher(MtrTipoFirma_.codigoTipoFirma.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(MtrTipoFirma_.descripcion.getName(), match -> match.ignoreCase().startsWith());
        return matcher;
    }

    protected abstract Sort setFindAll(Sort sort);

    protected abstract Sort setFind(MtrTipoFirma req, ExampleMatcher matcher, Example<MtrTipoFirma> example, Sort sort);

    protected abstract void setFindPaginated(PageRequestByExample<MtrTipoFirma> req, ExampleMatcher matcher, Example<MtrTipoFirma> example);

    protected final MtrTipoFirma setObtenerBeanResponse(MtrTipoFirmaResponse bean) {
        return bean.getBean();
    }

    protected final Class<MtrTipoFirma> setObtenerClassBean() {
        return MtrTipoFirma.class;
    }

    protected List<Predicate> setAbstractPredicate(MtrTipoFirmaResponse bean, CriteriaBuilder cb, Root<MtrTipoFirma> root) {
        List<Predicate> predicates = new ArrayList<>();
        MtrTipoFirma entity = bean.getBean();
        /* Obtener condiciones */
        PredicateUtils.addPredicates(predicates, bean.getIdCondicion(), "id", entity.getId(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getCodigoTipoFirmaCondicion(), "codigoTipoFirma", entity.getCodigoTipoFirma(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getDescripcionCondicion(), "descripcion", entity.getDescripcion(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getOrdenCondicion(), "orden", entity.getOrden(), cb, root);
        /* Obtener valores de Lista */
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "id", bean.getIdList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "codigoTipoFirma", bean.getCodigoTipoFirmaList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "descripcion", bean.getDescripcionList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "orden", bean.getOrdenList(), cb, root);
        return predicates;
    }

    /****************/
    /* METODOS CRUD */
    /****************/

    protected final String validacionesPrevias(MtrTipoFirma bean) throws Exception {
        String mensaje = "";
        if (!Optional.of(bean.getCodigoTipoFirma()).isPresent()) {
            String msg = this.messageSource.getMessage("message.mtrTipoFirma.codigoTipoFirma.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getDescripcion()).isPresent()) {
            String msg = this.messageSource.getMessage("message.mtrTipoFirma.descripcion.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getOrden()).isPresent()) {
            String msg = this.messageSource.getMessage("message.mtrTipoFirma.orden.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        String msg = this.setValidacionesPrevias(bean);
        if (StringUtils.isNotBlank(msg)) {
            mensaje += "* " + msg + "<br/>";
        }
        return mensaje;
    }

    protected String setValidacionesPrevias(MtrTipoFirma bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected String validacionesPreviasCreate(MtrTipoFirma bean) throws Exception {
        String msg = null;
        MtrTipoFirma validar = null;
        validar = this.mtrTipoFirmaDeltaRepository.getByCodigoTipoFirma(bean.getCodigoTipoFirma());
        if (Optional.ofNullable(validar).isPresent()) {
            msg = this.messageSource.getMessage("message.mtrTipoFirma.codigoTipoFirma.duplicado", null, LocaleContextHolder.getLocale());
            return msg;
        }
        validar = this.mtrTipoFirmaDeltaRepository.getByDescripcion(bean.getDescripcion());
        if (Optional.ofNullable(validar).isPresent()) {
            msg = this.messageSource.getMessage("message.mtrTipoFirma.descripcion.duplicado", null, LocaleContextHolder.getLocale());
            return msg;
        }
        return msg;
    }

    protected String validacionesPreviasSave(MtrTipoFirma bean) throws Exception {
        String msg = null;
        MtrTipoFirma validar = null;
        validar = this.mtrTipoFirmaDeltaRepository.getByCodigoTipoFirma(bean.getCodigoTipoFirma());
        if (Optional.ofNullable(validar).isPresent()) {
            if (bean.getId().intValue() != validar.getId().intValue()) {
                msg = this.messageSource.getMessage("message.mtrTipoFirma.codigoTipoFirma.duplicado", null, LocaleContextHolder.getLocale());
                return msg;
            }
        }
        validar = this.mtrTipoFirmaDeltaRepository.getByDescripcion(bean.getDescripcion());
        if (Optional.ofNullable(validar).isPresent()) {
            if (bean.getId().intValue() != validar.getId().intValue()) {
                msg = this.messageSource.getMessage("message.mtrTipoFirma.descripcion.duplicado", null, LocaleContextHolder.getLocale());
                return msg;
            }
        }
        return msg;
    }

    protected MtrTipoFirma completarDatosBean(MtrTipoFirma bean) throws Exception {
        BigDecimal data = new BigDecimal(0.00);
        bean = this.setCompletarDatosBean(bean);
        return bean;
    }

    protected MtrTipoFirma setCompletarDatosBean(MtrTipoFirma bean) throws Exception {
        return bean;
    }

    protected final MtrTipoFirma setAbstractCreate(MtrTipoFirma dto) throws Exception {
        MtrTipoFirma bean = new MtrTipoFirma();
        bean = (MtrTipoFirma) BeanUtils.cloneBean(dto);
        return bean;
    }

    /************************/
    /* METODOS CRUD Masivos */
    /************************/

    protected MtrTipoFirma setUploadExcel(Cell currentCell, MtrTipoFirma mtrTipoFirma, int contador) throws Exception {
        Double valorDouble = new Double(0);
        BigDecimal valorDecimal = new BigDecimal(0);
        Boolean valorBoolean = new Boolean(true);
        String valorCadena = "";
        switch (contador) {
        case 1:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 2) {
                    throw new ServiceException("Valor Campo codigoTipoFirma contiene mas de 2 caracter(es)");
                }
                mtrTipoFirma.setCodigoTipoFirma(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo codigoTipoFirma est√° en formato incorrecto");
            }
            break;
        case 2:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 100) {
                    throw new ServiceException("Valor Campo descripcion contiene mas de 100 caracter(es)");
                }
                mtrTipoFirma.setDescripcion(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo descripcion est√° en formato incorrecto");
            }
            break;
        case 3:
            try {
                valorDouble = new Double(currentCell.getNumericCellValue());
                mtrTipoFirma.setOrden(valorDouble.intValue());
            } catch (Exception e) {
                throw new ServiceException("Valor Campo orden est√° en formato incorrecto");
            }
            break;
        default:
            break;
        }
        return mtrTipoFirma;
    }

    protected AppParametria setObtenerRegistroConfiguracionUploadExcel() {
        AppParametria appParametriaData = this.appParametriaDeltaRepository.getByModuloAndLabelAndStatus(AppParametriaModuloEnum.CARGA_EXCEL.getEstado(),
                AppParametriaLabelEnum.INICIO_REGISTRO_DATA.getEstado(), Constants.ESTADO_ACTIVO);
        return appParametriaData;
    }

    protected MtrTipoFirma setInicializarBeanUpdateExcel() {
        MtrTipoFirma bean = new MtrTipoFirma();
        bean.setId(null);
        return bean;
    }

    protected final Integer setObtenerId(MtrTipoFirma bean) {
        return bean.getId();
    }

    /************************/
    /* Instancia de Bean    */
    /************************/

    protected final MtrTipoFirma createInstance() {
        MtrTipoFirma mtrTipoFirma = new MtrTipoFirma();
        return mtrTipoFirma;
    }

    protected final BeanCargaMasivoDTO<MtrTipoFirma> createInstanceMasivoDTO() {
        BeanCargaMasivoDTO<MtrTipoFirma> beanCargaMasivoDTO = new BeanCargaMasivoDTO<MtrTipoFirma>();
        return beanCargaMasivoDTO;

    }

    protected final BeanListaMasivoDTO<BeanCargaMasivoDTO<MtrTipoFirma>> createInstanceListaMasivoDTO() {
        BeanListaMasivoDTO<BeanCargaMasivoDTO<MtrTipoFirma>> beanCargaMasivoDTOBeanListaMasivoDTO = new BeanListaMasivoDTO<BeanCargaMasivoDTO<MtrTipoFirma>>();
        return beanCargaMasivoDTOBeanListaMasivoDTO;
    }

    /*****************************/
    /* Metodos que generan Excel */
    /*****************************/

    protected String devuelveNombreSheet() {
        return this.NAME_SHEET;
    }

    protected String devuelveListaHeaderExcelXML() {
        return this.CONFIG_TITLE;
    }

    protected int setAbstractDownloadExcel(MtrTipoFirma bean, HSSFRow dataRow) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getCodigoTipoFirma(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getDescripcion(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getOrden(), dataRow.createCell(contador));
        contador++;
        return contador;
    }

    protected int setAbstractDownloadExcelSXLSX(MtrTipoFirma bean, Row dataRow, List<CellStyle> cellStyleList) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getCodigoTipoFirma(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getDescripcion(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getOrden(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        return contador;
    }

    protected String setAbstractGenerateInsertExcelSXLSX(MtrTipoFirma bean) {
        String fechaS = "";
        String sqlInsert = "INSERT INTO mtr_tipo_firma(";
        sqlInsert = sqlInsert + "mtr_tipo_firma_id" + ", ";
        sqlInsert = sqlInsert + "codigo_tipo_firma" + ", ";
        sqlInsert = sqlInsert + "descripcion" + ", ";
        sqlInsert = sqlInsert + "orden" + ")";
        sqlInsert = sqlInsert + " VALUES (";
        sqlInsert = sqlInsert + bean.getId() + ", ";
        if (StringUtils.isBlank(bean.getCodigoTipoFirma())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getCodigoTipoFirma() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getDescripcion())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getDescripcion() + "'" + ", ";
        }
        sqlInsert = sqlInsert + bean.getOrden();
        sqlInsert = sqlInsert + " );";
        return sqlInsert;
    }

    /*****************/
    /* Otros Metodos */
    /*****************/

}

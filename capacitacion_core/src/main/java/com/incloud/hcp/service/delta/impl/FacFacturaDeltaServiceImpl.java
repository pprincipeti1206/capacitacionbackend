/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 *
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntitydeltaDTOService.java.e.vm
 */
package com.incloud.hcp.service.delta.impl;

import com.ibm.icu.text.SimpleDateFormat;
import com.incloud.hcp._security.SystemLoggedUser;
import com.incloud.hcp._security.UserSession;
import com.incloud.hcp.bean.custom.*;
import com.incloud.hcp.cmis.CmisFile;
import com.incloud.hcp.common.enums.AppParametriaModuloEnum;
import com.incloud.hcp.common.excel.ExcelDefault;
import com.incloud.hcp.domain.*;
import com.incloud.hcp.domain.response.FacFacturaResponse;
import com.incloud.hcp.enums.*;
import com.incloud.hcp.mapper.CerCertificadoDetalleSapMapper;
import com.incloud.hcp.mapper.FacFacturaMapper;
import com.incloud.hcp.repository.delta.*;
import com.incloud.hcp.service._framework.cmis.CmisService;
import com.incloud.hcp.service._framework.reportes.bean.ReporteParams;
import com.incloud.hcp.service._framework.reportes.enums.TipoReporteJasperEnum;
import com.incloud.hcp.service._framework.reportes.service.ReporteEjecucionService;
import com.incloud.hcp.service.delta.*;
import com.incloud.hcp.service.dto.*;
import com.incloud.hcp.service.impl.FacFacturaServiceImpl;
import com.incloud.hcp.service.notificacion.*;
import com.incloud.hcp.service.requireNew.FacFacturaRequireNewService;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.service.support.PageResponse;
import com.incloud.hcp.util.Utils;
import com.incloud.hcp.utils.Constants;
import com.incloud.hcp.utils.DateUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.streaming.SXSSFSheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import javax.persistence.criteria.*;
import java.awt.*;
import java.math.BigDecimal;
import java.util.List;
import java.util.*;
import java.util.stream.Collectors;

/**
 * A simple DTO Facility for FacFactura.
 */

@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public class FacFacturaDeltaServiceImpl extends FacFacturaServiceImpl implements FacFacturaDeltaService {

    protected final String NAME_SHEET_DETALLE = "Factura: ";
    protected final String CONFIG_TITLE_DETALLE = "com/incloud/hcp/excel/FacFactura01Excel.xml";

    @Autowired
    private FacFacturaCertificadoDeltaRepository facFacturaCertificadoDeltaRepository;

    @Autowired
    private FacDocumentoAdjuntoDeltaRepository facDocumentoAdjuntoDeltaRepository;

    @Autowired
    private FacDocumentoAdjuntoDeltaService facDocumentoAdjuntoDeltaService;

    @Autowired
    private FacImputacionDeltaRepository facImputacionDeltaRepository;


    @Autowired
    private FacHistorialDeltaRepository facHistorialDeltaRepository;

    @Autowired
    private MtrTasaCambioWebDeltaRepository mtrTasaCambioWebDeltaRepository;


    @Autowired
    private CerCertificadoDetalleSapMapper cerCertificadoDetalleSapMapper;


    @Autowired
    private FacMensajeSapDeltaRepository facMensajeSapDeltaRepository;

    @Autowired
    private FacHistorialDeltaService facHistorialDeltaService;

    @Autowired
    private CmisService cmisService;

    @Autowired
    private SystemLoggedUser systemLoggedUser;

    @Autowired
    private AppParametriaDeltaService appParametriaDeltaService;

    @Autowired
    private FacFacturaMapper facFacturaMapper;

    @Autowired
    private FacturaCreacionModificacionNotificacion facturaCreacionModificacionNotificacion;

    @Autowired
    private FacturaRechazoCupaNotificacion facturaRechazoCupaNotificacion;

    @Autowired
    private FacturaGrabarCupaNotificacion facturaGrabarCupaNotificacion;

    @Autowired
    private FacturaRechazoAprobador0Notificacion facturaRechazoAprobador0Notificacion;

    @Autowired
    private FacturaRechazoFirmanteNotificacion facturaRechazoFirmanteNotificacion;

    @Autowired
    private FacturaAprobacionFirmanteNotificacion facturaAprobacionFirmanteNotificacion;

    @Autowired
    private CerCertificadoDeltaRepository cerCertificadoDeltaRepository;

    @Autowired
    private FacEstrategiaIteracionDeltaRepository facEstrategiaIteracionDeltaRepository;

    @Autowired
    private MtrUsuarioFacturacionDeltaRepository mtrUsuarioFacturacionDeltaRepository;

    @Autowired
    private FacEstrategiaIteracionDeltaService facEstrategiaIteracionDeltaService;

    @Autowired
    private ReporteEjecucionService reporteEjecucionService;

    @Autowired
    private CerCertificadoDetalleDeltaRepository cerCertificadoDetalleDeltaRepository;

    @Autowired
    private MtrUnidadMedidaDeltaRepository mtrUnidadMedidaDeltaRepository;

    @Autowired
    private MtrRangoMontoEstrategiaDeltaService mtrRangoMontoEstrategiaDeltaService;

    @Autowired
    private MtrEstrategiaFacturacionDeltaRepository mtrEstrategiaFacturacionDeltaRepository;

    @Autowired
    private MtrTasaCambioDeltaRepository mtrTasaCambioDeltaRepository;

    @Autowired
    private MtrProveedorDeltaRepository mtrProveedorDeltaRepository;

    @Autowired
    private SapRfcDeltaService sapRfcDeltaService;

    @Autowired
    private MtrSectorDeltaRepository mtrSectorDeltaRepository;

    @Autowired
    private CerCertificadoDetalleDeltaService cerCertificadoDetalleDeltaService;

    @Autowired
    private RestTemplate restTemplate;

    @Autowired
    private FacEstrategiaFirmaDeltaRepository facEstrategiaFirmaDeltaRepository;

    @Autowired
    private CerCertificadoDetalleSapDeltaRepository cerCertificadoDetalleSapDeltaRepository;

    @Autowired
    private MtrEstrategiaFacturacionFirmaDeltaRepository mtrEstrategiaFacturacionFirmaDeltaRepository;

    @Autowired
    private FacFacturaRequireNewService facFacturaRequireNewService;

    @Autowired
    private MtrReemplazoFacturacionDeltaRepository mtrReemplazoFacturacionDeltaRepository;

    @Autowired
    private MtrTipoFirmaDeltaRepository mtrTipoFirmaDeltaRepository;

    @Autowired
    private CerFirmaDeltaRepository cerFirmaDeltaRepository;


    //SMTP Values
    @Value("${spring.mail.username}")
    private String username;
    @Value("${spring.mail.password}")
    private String password;
    @Value("${spring.mail.host}")
    private String host;
    @Value("${spring.mail.port}")
    private String port;

    private static BigDecimal INTERVALO_PORCENTAJE_MAXIMO = new BigDecimal(1.01);
    private static BigDecimal INTERVALO_PORCENTAJE_MINIMO = new BigDecimal(0.99);

    private static BigDecimal TAMANNO_MAXIMO_LISTA_ADJUNTO_OTROS = new BigDecimal(5.00);


    /**************************/
    /* Metodos Personalizados */

    /**************************/

    public DatosProveedorSunatDto devuelveDatosProveedorSunat(String ruc) throws Exception {
        String uri = "http://52.1.149.78:89/sunat/Api/contribuyentes/" + ruc;
        DatosProveedorSunatDto result = this.restTemplate.getForObject(uri, DatosProveedorSunatDto.class);
        return result;
    }

    public FacDocumentoAdjunto agregarAdjuntoTemporal(MultipartFile file, String tipoAdjuntoFactura) throws Exception {

        if (this.appParametriaDeltaService.devuelveApagarCertificado()) {
            throw new Exception(Constants.MENSAJE_SISTEMA_APAGADO);
        }
        FacDocumentoAdjunto facDocumentoAdjunto = new FacDocumentoAdjunto();
        log.error("agregarAdjunto 00 file: " + file.toString());
        UserSession user = this.systemLoggedUser.getUserSession();

        String TEMP_DIRECTORY = "COGA-TEMP";
        String folderId = this.cmisService.createFolder(TEMP_DIRECTORY);
        log.debug("agregarAdjunto 01 ---> folderId  [" + folderId + " ]");
        CmisFile cmisFile = cmisService.createOrReplaceDocumento(folderId, file);

        log.error("agregarAdjunto 02 ---> cmisFile  [" + cmisFile.toString() + " ]");
        Long current = System.currentTimeMillis();
        int valorCurrent = Math.abs(current.intValue());

        facDocumentoAdjunto.setId(valorCurrent);
        facDocumentoAdjunto.setCarpetaId(folderId);
        facDocumentoAdjunto.setArchivoId(cmisFile.getId());
        facDocumentoAdjunto.setArchivoNombre(cmisFile.getName());
        facDocumentoAdjunto.setRutaCatalogo(cmisFile.getUrl());
        facDocumentoAdjunto.setArchivoTipo(cmisFile.getType());
        facDocumentoAdjunto.setSize(cmisFile.getSize());
        facDocumentoAdjunto.setTipoAdjunto(tipoAdjuntoFactura);

        log.error("agregarAdjunto 03 cerNotaPedidoAdjunto  [" + file.getName() + " , " +
                file.getSize() + " temp directory " + TEMP_DIRECTORY + " ]");

        log.error("agregarDocumentoCerificado 04 facDocumentoAdjunto: " + facDocumentoAdjunto);
        return facDocumentoAdjunto;
    }

    public String deleteAdjunto(String archivoID) throws Exception {
        if (this.appParametriaDeltaService.devuelveApagarCertificado()) {
            throw new Exception(Constants.MENSAJE_SISTEMA_APAGADO);
        }
        //Delete from HANA
        FacDocumentoAdjunto req = new FacDocumentoAdjunto();
        req.setArchivoId(archivoID);
        this.facDocumentoAdjuntoDeltaService.find(req).forEach(e -> {
            this.facDocumentoAdjuntoDeltaRepository.delete(e);
        });

        //Delete form CMIS
        cmisService.deleteFile(archivoID);
        return archivoID;
    }

    public FacFacturaDto devuelveFactura(Integer facFacturaId) throws Exception {
        FacFacturaDto facFacturaDto = new FacFacturaDto();
        FacFactura facFactura = this.facFacturaDeltaRepository.getOne(facFacturaId);
        if (!Optional.ofNullable(facFactura).isPresent()) {
            throw new Exception("No se encontró Factura con ID: " + facFacturaId);
        }
        facFacturaDto.setFacFactura(facFactura);

        List<FacFacturaCertificado> facFacturaCertificadoList =
                this.facFacturaCertificadoDeltaRepository.findByFacFacturaOrderByCerCertificado(facFactura);
        facFacturaDto.setFacFacturaCertificadoList(facFacturaCertificadoList);

        List<FacDocumentoAdjunto> facDocumentoAdjuntoList =
                this.facDocumentoAdjuntoDeltaRepository.findByFacFacturaOrderByTipoAdjunto(facFactura);
        facFacturaDto.setFacDocumentoAdjuntoList(facDocumentoAdjuntoList);
        List<FacDocumentoAdjunto> facDocumentoAdjuntoFacturaList =
                this.facDocumentoAdjuntoDeltaRepository.
                        findByFacFacturaAndTipoAdjunto(facFactura, TipoFacturaAdjuntoEnum.FAC_FACTU.getEstado());
        facFacturaDto.setFacDocumentoAdjuntoFacturaList(facDocumentoAdjuntoFacturaList);
        List<FacDocumentoAdjunto> facDocumentoAdjuntoGuiaList =
                this.facDocumentoAdjuntoDeltaRepository.
                        findByFacFacturaAndTipoAdjunto(facFactura, TipoFacturaAdjuntoEnum.FAC_GUIA.getEstado());
        facFacturaDto.setFacDocumentoAdjuntoGuiaList(facDocumentoAdjuntoGuiaList);
        List<FacDocumentoAdjunto> facDocumentoAdjuntoCdrList =
                this.facDocumentoAdjuntoDeltaRepository.
                        findByFacFacturaAndTipoAdjunto(facFactura, TipoFacturaAdjuntoEnum.FAC_CDR.getEstado());
        facFacturaDto.setFacDocumentoAdjuntoCdrList(facDocumentoAdjuntoCdrList);
        List<FacDocumentoAdjunto> facDocumentoAdjuntoOtrosList =
                this.facDocumentoAdjuntoDeltaRepository.
                        findByFacFacturaAndTipoAdjunto(facFactura, TipoFacturaAdjuntoEnum.FAC_OTROS.getEstado());
        facFacturaDto.setFacDocumentoAdjuntoOtrosList(facDocumentoAdjuntoOtrosList);

        List<FacImputacion> facImputacionList =
                this.facImputacionDeltaRepository.findByFacFacturaOrderByMtrCuentaImputacion(facFactura);
        facFacturaDto.setFacImputacionList(facImputacionList);

        FacHistorial facHistorial = new FacHistorial();
        facHistorial.setFacFactura(facFactura);
        List<FacHistorial> facHistorialList = this.facHistorialDeltaService.find(facHistorial);
        facFacturaDto.setFacHistorialList(facHistorialList);

        //Obteniendo iteraciones //
        FacEstrategiaIteracion facEstrategiaIteracion = new FacEstrategiaIteracion();
        facEstrategiaIteracion.setFacFactura(facFactura);
        List<FacEstrategiaIteracion> facEstrategiaIteracionList = this.facEstrategiaIteracionDeltaService.find(facEstrategiaIteracion);
        facFacturaDto.setFacEstrategiaIteracionList(facEstrategiaIteracionList);

        FacEstrategiaIteracion facEstrategiaIteracionUltima = this.facEstrategiaIteracionDeltaRepository.
                getByFacturaNroIteracion(facFactura.getId(), facFactura.getNroIteracion());
        facFacturaDto.setFacEstrategiaIteracion(facEstrategiaIteracionUltima);

        //Devuelve Firmantes si hubiera
        List<FacturaListaFirmantesDto> facturaListaFirmantesList = this.devuelveListaFirmantes(facFacturaId);
        facFacturaDto.setFacturaListaFirmantesList(facturaListaFirmantesList);
        return facFacturaDto;
    }

    public void enviarEmailFactura(FacFacturaDto bean) throws Exception {
        MailSetting setting = new MailSetting();
        setting.setEmailFrom(username);
        setting.setPassword(password);
        setting.setHost(host);
        setting.setNameFrom(username);
        setting.setPort(port);
        setting.setUser(username);

        FacFactura facFactura = bean.getFacFactura();
        MtrProveedor proveedor = facFactura.getMtrProveedor();
        proveedor = this.mtrProveedorDeltaRepository.getOne(proveedor.getId());
        int nplantilla = 1;
        if (!bean.isEsNuevaFactura())
            nplantilla = 2;
        this.facturaCreacionModificacionNotificacion.enviar(
                setting,
                proveedor,
                proveedor.getEmailContacto(),
                "",
                facFactura,
                nplantilla,
                1
        );

    }

    public void enviarEmailFacturaRechazoCupa(FacFacturaRechazoCupaSalidaDto bean) throws Exception {
        MailSetting setting = new MailSetting();
        setting.setEmailFrom(username);
        setting.setPassword(password);
        setting.setHost(host);
        setting.setNameFrom(username);
        setting.setPort(port);
        setting.setUser(username);

        FacFactura facFactura = bean.getFacFactura();
        MtrProveedor proveedor = facFactura.getMtrProveedor();
        proveedor = this.mtrProveedorDeltaRepository.getOne(proveedor.getId());

        this.facturaRechazoCupaNotificacion.enviar(
                setting,
                proveedor,
                proveedor.getEmailContacto(),
                bean.getMotivoRechazo(),
                facFactura
        );

    }

    public Integer devuelveCorrelativoAdjuntoOtros5MB(BigDecimal tamanno) throws Exception {
        if (tamanno.floatValue() < TAMANNO_MAXIMO_LISTA_ADJUNTO_OTROS.floatValue()) {
            throw new Exception("Solo se puede generar CORRELATIVO para suma de adjuntos MAYOR a 5M");
        }
        Integer correlativo = this.facFacturaDeltaRepository.devuelveNextSecuencialCorrelativo();
        return correlativo;

    }

    public FacFactura modificarFactura(FacturaCustom custom) throws Exception {
        Optional<FacFactura> factura = this.facFacturaDeltaRepository.findById(custom.getIdFactura());
        java.text.SimpleDateFormat df = new java.text.SimpleDateFormat("dd/MM/yyyy");
        if (!factura.isPresent()) {
            throw new Exception("La Factura " + custom.getIdFactura() + " no existe" );
        }
       FacFactura facFactura = factura.get();
        List<FacDocumentoAdjunto> facDocumentoAdjuntoList =
                this.facDocumentoAdjuntoDeltaRepository.findByFacturaId(custom.getIdFactura());
        if (facDocumentoAdjuntoList != null && facDocumentoAdjuntoList.size() > 0) {
            //this.facDocumentoAdjuntoDeltaRepository.deleteByFacturaId(custom.getIdFactura());
        }
        if(StringUtils.isNotBlank(custom.getFechaEstimadaPago())) {
            facFactura.setFechaEstimadaPago(df.parse(custom.getFechaEstimadaPago()));
        }
        FacFactura facturaOut = this.facFacturaDeltaRepository.save(facFactura);
        List<FacDocumentoAdjunto> facDocumentoAdjuntoFacturaList = this.grabarListaAdjunto(
                facturaOut,
                TipoFacturaAdjuntoEnum.FAC_FACTU.getEstado(),
                custom.getFacDocumentoAdjuntoFacturaList());

        return facturaOut;


    }
    public FacFacturaDto grabarFactura(FacFacturaEntradaDto beanEntrada) throws Exception {
        FacFacturaDto bean = new FacFacturaDto();
        BeanUtils.copyProperties(beanEntrada, bean);

        FacFactura facFactura = bean.getFacFactura();

        UserSession userSession = this.systemLoggedUser.getUserSession();
        MtrProveedor mtrProveedor = this.mtrProveedorDeltaRepository.findByCodigoIdp(userSession.getId());
        if (!Optional.ofNullable(mtrProveedor).isPresent()) {
            throw new Exception("El Proveedor con código IDP: " + userSession.getId() + " no se encuentra registrado en la Tabla MtrProveedor o no esta asociado al IDP en dicha Tabla");
        }
        boolean esNuevaFactura = true;
        facFactura.setIndicadorConCertificado(Constants.NO);
        Integer nroIteracion = 0;

        if (Optional.ofNullable(facFactura.getId()).isPresent()) {
            esNuevaFactura = false;
            Optional<FacFactura> optionalFacFactura = this.facFacturaDeltaRepository.findById(facFactura.getId());
            if (!optionalFacFactura.isPresent()) {
                throw new Exception("No se encontró Factura con ID: " + facFactura.getId());
            }
            FacFactura facFacturaActual = optionalFacFactura.get();
            if (facFacturaActual.getMtrProveedor().getId() != mtrProveedor.getId()) {
                throw new Exception("Factura no corresponde al Proveedor");
            }

            MtrEstado mtrEstadoActual = facFacturaActual.getMtrEstado();
            if (!mtrEstadoActual.getCodigoEstado().equals(EstadoFacturaEnum.RECHAZADO_CUPA.getEstado())) {
                throw new Exception("No se puede modificar una Factura en estado diferente a RECHAZADO CUPA");
            }

            if (Optional.ofNullable(facFactura.getFechaAprobacion()).isPresent()) {
                AppParametria appParametria = this.appParametriaDeltaRepository.getByModuloAndStatus(
                        AppParametriaModuloEnum.PLAZO_FACTURA_VENCIMIENTO.getEstado(), Constants.UNO
                );
                if (!Optional.ofNullable(appParametria).isPresent()) {
                    throw new Exception("No se encontró parametría correspondiente a PLAZO_FACTURA_VENCIMIENTO");
                }
                String svalorDias = appParametria.getValue1();
                Integer valorDias = new Integer(svalorDias);
                Date fechaPosibleVencimiento = DateUtils.sumarRestarDias(facFactura.getFechaAprobacion(), valorDias);
                facFactura.setFechaPosibleVencimiento(fechaPosibleVencimiento);
            }
            nroIteracion = facFactura.getNroIteracion() + 1;

        } else {
            Date fechaCreacion = DateUtils.obtenerFechaHoraActual();
            facFactura.setFechaCreacion(fechaCreacion);
            FacFactura facturaExiste = this.facFacturaDeltaRepository.verificarExisteNumeroDocumentoFactura(
                    facFactura.getMtrProveedor().getId(),
                    facFactura.getTipoFactura(),
                    facFactura.getSerieFactura(),
                    facFactura.getNumeroFactura()
            );
            if (Optional.ofNullable(facturaExiste).isPresent()) {
                String codigoFactura = facFactura.getTipoFactura() + "-" + facFactura.getSerieFactura() + "-" + facFactura.getNumeroFactura();
                throw new Exception("Factura con código " + codigoFactura + " ya se encuentra registrada!!");
            }
            nroIteracion = 1;
        }
        facFactura.setNroIteracion(nroIteracion);
        List<FacFacturaCertificado> facFacturaCertificadoList = bean.getFacFacturaCertificadoList();

        /* Validando montos */
        BigDecimal sumaMontoCertificado = new BigDecimal(0.0);
        if (facFacturaCertificadoList != null && facFacturaCertificadoList.size() > 0) {
            facFactura.setIndicadorConCertificado(Constants.SI);
            int contador = 0;
            for (FacFacturaCertificado facFacturaCertificado : facFacturaCertificadoList) {
                Optional<CerCertificado> optionalCerCertificado =
                        this.cerCertificadoDeltaRepository.findById(facFacturaCertificado.getCerCertificado().getId());
                if (!optionalCerCertificado.isPresent()) {
                    throw new Exception("No se encontró Certificado con ID: " + facFacturaCertificado.getCerCertificado().getId());
                }
                CerCertificado cerCertificado = optionalCerCertificado.get();
                facFacturaCertificado.setCerCertificado(cerCertificado);
                facFacturaCertificadoList.set(contador, facFacturaCertificado);
                contador++;
                BigDecimal montoTotal = cerCertificado.getMontoTotal();
                BigDecimal montoTotalAjustado = cerCertificado.getMontoTotalAdjustado();
                if (montoTotalAjustado.floatValue() > 0) {
                    sumaMontoCertificado = new BigDecimal(sumaMontoCertificado.floatValue() + montoTotalAjustado.floatValue());
                } else {
                    sumaMontoCertificado = new BigDecimal(sumaMontoCertificado.floatValue() + montoTotal.floatValue());
                }
            }
            BigDecimal monto = facFactura.getMonto();
            log.error("grabarFactura :: getIndicadorConCertificado ::: " + facFactura.getIndicadorConCertificado());
            log.error("grabarFactura :: getMontoOtrosCargos ::: " + facFactura.getMontoOtrosCargos());
            if(StringUtils.isNotBlank(facFactura.getIndicadorConCertificado()) && facFactura.getIndicadorConCertificado().equalsIgnoreCase("S")) {
                if(facFactura.getMontoOtrosCargos() != null) {
                    monto = monto.add(facFactura.getMontoOtrosCargos());
            }
            }
            /*BigDecimal minimoAux = new BigDecimal("20");
            if(facFactura.getMtrMoneda().getDescBrv().equalsIgnoreCase("USD")) {

            }*/
            if ((sumaMontoCertificado.floatValue() > monto.floatValue() * INTERVALO_PORCENTAJE_MAXIMO.floatValue()) ||
                    (sumaMontoCertificado.floatValue() < monto.floatValue() * INTERVALO_PORCENTAJE_MINIMO.floatValue())
            ) {
                throw new Exception("Verificar Montos - Importes sin IGV vs Suma Monto Certificados no coinciden!!");
            }
        }


        bean.setEsNuevaFactura(esNuevaFactura);
        MtrEstado mtrEstado = this.mtrEstadoDeltaRepository.
                getByCodigoAgrupadoAndCodigoEstado(
                        Constants.CODIGO_AGRUPADO_FACTURA,
                        EstadoFacturaEnum.EN_REVISION_CUPA.getEstado()
                );
        facFactura.setMtrEstado(mtrEstado);

        facFactura.setFechaCreacion(DateUtils.obtenerFechaHoraActual());
        Date fechaEstimacion = DateUtils.obtenerFechaActualPlusMonth(1);
        if (!Optional.ofNullable(facFactura.getFechaEstimadaPago()).isPresent()) {
            facFactura.setFechaEstimadaPago(fechaEstimacion);
        }
        log.error("Ingresando grabarFactura antes save facFactura: " + facFactura.toString());

        facFactura = this.facFacturaDeltaRepository.save(facFactura);
        facFactura = this.facFacturaDeltaRepository.getOne(facFactura.getId());

        log.error("Ingresando grabarFactura despues save facFactura: " + facFactura.toString());
        bean.setFacFactura(facFactura);

        /* eliminaciones previas */
        List<FacFacturaCertificado> facFacturaCertificadoListActual =
                this.facFacturaCertificadoDeltaRepository.findByFacturaId(facFactura.getId());
        if (facFacturaCertificadoListActual != null && facFacturaCertificadoListActual.size() > 0) {
            for (FacFacturaCertificado facFacturaCertificado : facFacturaCertificadoListActual) {
                CerCertificado cerCertificado = facFacturaCertificado.getCerCertificado();
                cerCertificado.setIndTieneFactura(Constants.NO);
                this.cerCertificadoDeltaRepository.save(cerCertificado);
            }
            this.facFacturaCertificadoDeltaRepository.deleteByFacturaId(facFactura.getId());
        }
        List<FacDocumentoAdjunto> facDocumentoAdjuntoList =
                this.facDocumentoAdjuntoDeltaRepository.findByFacturaId(facFactura.getId());
        if (facDocumentoAdjuntoList != null && facDocumentoAdjuntoList.size() > 0) {
            this.facDocumentoAdjuntoDeltaRepository.deleteByFacturaId(facFactura.getId());
        }
        List<FacImputacion> facImputacionList =
                this.facImputacionDeltaRepository.findByFacturaId(facFactura.getId());
        if (facImputacionList != null && facImputacionList.size() > 0) {
            this.facImputacionDeltaRepository.deleteByFacturaId(facFactura.getId());
        }


        /* insertando certificados */
        if (facFacturaCertificadoList != null && facFacturaCertificadoList.size() > 0) {
            int contador = 0;
            for (FacFacturaCertificado facFacturaCertificado : facFacturaCertificadoList) {
                facFacturaCertificado.setEstado(Constants.SI);
                facFacturaCertificado.setFacFactura(facFactura);
                CerCertificado cerCertificado = facFacturaCertificado.getCerCertificado();
                cerCertificado.setIndTieneFactura(Constants.SI);
                this.cerCertificadoDeltaRepository.save(cerCertificado);

                facFacturaCertificado = this.facFacturaCertificadoDeltaRepository.save(facFacturaCertificado);
                facFacturaCertificadoList.set(contador, facFacturaCertificado);
                contador++;
            }
            bean.setFacFacturaCertificadoList(facFacturaCertificadoList);
        } else {
            bean.setFacFacturaCertificadoList(null);
        }

        /* insertando adjuntos */
        List<FacDocumentoAdjunto> facDocumentoAdjuntoFacturaList = this.grabarListaAdjunto(
                facFactura,
                TipoFacturaAdjuntoEnum.FAC_FACTU.getEstado(),
                bean.getFacDocumentoAdjuntoFacturaList());
        List<FacDocumentoAdjunto> facDocumentoAdjuntoGuiaList = this.grabarListaAdjunto(
                facFactura,
                TipoFacturaAdjuntoEnum.FAC_GUIA.getEstado(),
                bean.getFacDocumentoAdjuntoGuiaList());
        List<FacDocumentoAdjunto> facDocumentoAdjuntoCdrList = this.grabarListaAdjunto(
                facFactura,
                TipoFacturaAdjuntoEnum.FAC_CDR.getEstado(),
                bean.getFacDocumentoAdjuntoCdrList());
        List<FacDocumentoAdjunto> facDocumentoAdjuntoOtrosList = this.grabarListaAdjunto(
                facFactura,
                TipoFacturaAdjuntoEnum.FAC_OTROS.getEstado(),
                bean.getFacDocumentoAdjuntoOtrosList());
        bean.setFacDocumentoAdjuntoFacturaList(facDocumentoAdjuntoFacturaList);
        bean.setFacDocumentoAdjuntoGuiaList(facDocumentoAdjuntoGuiaList);
        bean.setFacDocumentoAdjuntoCdrList(facDocumentoAdjuntoCdrList);
        bean.setFacDocumentoAdjuntoOtrosList(facDocumentoAdjuntoOtrosList);

        /* insertando imputaciones */
        if (bean.getFacImputacionList() != null && bean.getFacImputacionList().size() > 0) {
            List<FacImputacion> facImputacionListRpta =
                    this.facImputacionDeltaRepository.saveAll(bean.getFacImputacionList());
            bean.setFacImputacionList(facImputacionListRpta);
        } else {
            bean.setFacImputacionList(null);
        }

        /* insertando registro en facHistorial */
        String nombre = mtrProveedor.getRazonSocial();
        FacHistorial facHistorial = new FacHistorial();
        facHistorial.setFacFactura(facFactura);
        facHistorial.setDescripcion("Factura Publicada");
        facHistorial.setMtrEstado(mtrEstado);
        facHistorial.setUsuarioHistorial(nombre);
        facHistorial.setFechaHistorial(DateUtils.obtenerFechaHoraActual());
        log.error("Ingresando grabarFactura antes save facHistorial: " + facHistorial.toString());
        facHistorial = this.facHistorialDeltaRepository.save(facHistorial);
        bean.setFacHistorialGenerado(facHistorial);

        //Actualizando en facEstrategiaIteracion previos si hubiera
        List<FacEstrategiaIteracion> facEstrategiaIteracionList = this.facEstrategiaIteracionDeltaRepository.
                findByFacFactura(facFactura);
        if (facEstrategiaIteracionList != null && facEstrategiaIteracionList.size() > 0) {
            for (FacEstrategiaIteracion beanEstrategia : facEstrategiaIteracionList) {
                beanEstrategia.setActivo(Constants.NO);
                this.facEstrategiaIteracionDeltaRepository.save(beanEstrategia);
            }
        }

        //Insertando en facEstrategiaIteracion
        FacEstrategiaIteracion facEstrategiaIteracion = new FacEstrategiaIteracion();
        facEstrategiaIteracion.setFacFactura(facFactura);
        facEstrategiaIteracion.setNroIteracion(nroIteracion);
        FacEstrategiaIteracion facEstrategiaIteracionRevisar =
                this.facEstrategiaIteracionDeltaRepository.getByFacturaNroIteracion(facFactura.getId(), nroIteracion);
        if (Optional.ofNullable(facEstrategiaIteracionRevisar).isPresent()) {
            facEstrategiaIteracion.setId(facEstrategiaIteracionRevisar.getId());
        }

        if (Optional.ofNullable(bean.getMtrUsuarioFacturacion()).isPresent()) {
            facEstrategiaIteracion.setMtrUsuarioFacturacionAprobador0(bean.getMtrUsuarioFacturacion());
        }
        facEstrategiaIteracion.setIndAprobacionRechazoCupa(Constants.EN_PROCESO);
        facEstrategiaIteracion.setIndAprobacionRechazoAprobador0(Constants.EN_PROCESO);
        facEstrategiaIteracion.setIndAprobacionRechazoFirma(Constants.EN_PROCESO);
        facEstrategiaIteracion.setNroFirmanteEnRevision(0);
        facEstrategiaIteracion.setNroFirmanteTotal(0);
        facEstrategiaIteracion.setActivo(Constants.SI);

        log.error("Ingresando grabarFactura antes save facEstrategiaIteracion: " + facEstrategiaIteracion.toString());
        this.facEstrategiaIteracionDeltaRepository.save(facEstrategiaIteracion);


        bean.setFacEstrategiaIteracion(facEstrategiaIteracion);
        return bean;
    }

    public FacFacturaRechazoCupaSalidaDto rechazarFacturaCupa(FacFacturaRechazoCupaEntradaDto bean) throws Exception {
        UserSession userSession = this.systemLoggedUser.getUserSession();
        FacFacturaRechazoCupaSalidaDto beanSalida = new FacFacturaRechazoCupaSalidaDto();

        MtrUsuarioFacturacion mtrUsuarioFacturacionCupa = this.mtrUsuarioFacturacionDeltaRepository.getByCodigoIdp(userSession.getId());
        if (!Optional.ofNullable(mtrUsuarioFacturacionCupa).isPresent()) {
            throw new Exception("No se encontró Usuario CUPA en la tabla Mtr_usuario_facturacion con Código IDP " + userSession.getId());
        }

        Optional<FacFactura> optionalFacFactura = this.facFacturaDeltaRepository.findById(bean.getFacFacturaId());
        if (!optionalFacFactura.isPresent()) {
            throw new Exception("No se encontró Factura con ID: " + bean.getFacFacturaId());
        }

        //Eliminando certificados asociados
        List<FacFacturaCertificado> facFacturaCertificadoList = this.facFacturaCertificadoDeltaRepository.findByFacturaId(bean.getFacFacturaId());
        if (facFacturaCertificadoList != null && facFacturaCertificadoList.size() > 0) {
            for (FacFacturaCertificado facFacturaCertificado : facFacturaCertificadoList) {
                CerCertificado cerCertificado = facFacturaCertificado.getCerCertificado();
                cerCertificado.setIndTieneFactura(Constants.NO);
                this.cerCertificadoDeltaRepository.save(cerCertificado);
            }
            this.facFacturaCertificadoDeltaRepository.deleteByFacturaId(bean.getFacFacturaId());
        }


        // Actualizando factura
        FacFactura facFactura = optionalFacFactura.get();
        MtrEstado mtrEstado = this.mtrEstadoDeltaRepository.
                getByCodigoAgrupadoAndCodigoEstado(
                        Constants.CODIGO_AGRUPADO_FACTURA,
                        EstadoFacturaEnum.RECHAZADO_CUPA.getEstado()
                );
        facFactura.setMtrEstado(mtrEstado);
        facFactura = this.facFacturaDeltaRepository.save(facFactura);
        facFactura = this.facFacturaDeltaRepository.getOne(facFactura.getId());
        beanSalida.setFacFactura(facFactura);

        /* insertando registro en facHistorial */
        String nombre = userSession.getFirstName() + " " + userSession.getLastName();
        FacHistorial facHistorial = new FacHistorial();
        facHistorial.setFacFactura(facFactura);
        facHistorial.setDescripcion(bean.getMotivoRechazo());
        facHistorial.setMtrEstado(mtrEstado);
        facHistorial.setUsuarioHistorial(nombre);
        facHistorial.setFechaHistorial(DateUtils.obtenerFechaHoraActual());
        facHistorial = this.facHistorialDeltaRepository.save(facHistorial);
        beanSalida.setFacHistorial(facHistorial);


        //Actualizando en facEstrategiaIteracion
        FacEstrategiaIteracion facEstrategiaIteracion = this.facEstrategiaIteracionDeltaRepository
                .getByFacturaNroIteracion(facFactura.getId(), facFactura.getNroIteracion());
        facEstrategiaIteracion.setMtrUsuarioFacturacionCupa(mtrUsuarioFacturacionCupa);
        facEstrategiaIteracion.setIndAprobacionRechazoCupa(Constants.RECHAZADO);
        facEstrategiaIteracion.setIndAprobacionRechazoAprobador0(Constants.EN_PROCESO);
        facEstrategiaIteracion.setIndAprobacionRechazoFirma(Constants.EN_PROCESO);
        facEstrategiaIteracion.setNroFirmanteEnRevision(0);
        facEstrategiaIteracion.setNroFirmanteTotal(0);
        facEstrategiaIteracion.setActivo(Constants.NO);
        facEstrategiaIteracion = this.facEstrategiaIteracionDeltaRepository.save(facEstrategiaIteracion);

        beanSalida.setFacEstrategiaIteracion(facEstrategiaIteracion);
        beanSalida.setMotivoRechazo(bean.getMotivoRechazo());
        return beanSalida;
    }

    public FacFacturaActualizarCupaSalidaDto grabarFacturaCupa(FacFacturaActualizarCupaEntradaDto beanEntrada, boolean actualizar) throws Exception {
        FacFacturaActualizarCupaSalidaDto bean = new FacFacturaActualizarCupaSalidaDto();
        BeanUtils.copyProperties(beanEntrada, bean);
        if (Optional.ofNullable(beanEntrada.getMtrAprobador0()).isPresent()) {
            MtrUsuarioFacturacion mtrAprobador0 = this.mtrUsuarioFacturacionDeltaRepository.getOne(beanEntrada.getMtrAprobador0().getId());
            bean.setMtrAprobador0(mtrAprobador0);
            log.error("Ingresando grabarFacturaCupa 0 bean.getMtrAprobador0: " + bean.getMtrAprobador0().toString());
        }

        log.error("Ingresando grabarFacturaCupa 0 beanEntrada: " + beanEntrada.toString());

        FacFactura facFactura = bean.getFacFactura();
        BigDecimal montoIgv = beanEntrada.getFacFactura().getMontoIgv();
        UserSession userSession = this.systemLoggedUser.getUserSession();
        MtrUsuarioFacturacion mtrUsuarioFacturacionCupa = this.mtrUsuarioFacturacionDeltaRepository.getByCodigoIdp(userSession.getId());
        if (!Optional.ofNullable(mtrUsuarioFacturacionCupa).isPresent()) {
            throw new Exception("No se encontró Usuario CUPA en la tabla Mtr_usuario_facturacion con Código IDP " + userSession.getId());
        }
        log.error("Ingresando grabarFacturaCupa 0A mtrUsuarioFacturacionCupa: " + mtrUsuarioFacturacionCupa.toString());


        Optional<FacFactura> optionalFacFactura = this.facFacturaDeltaRepository.findById(facFactura.getId());
        if (!optionalFacFactura.isPresent()) {
            throw new Exception("No se encontró Factura con ID: " + facFactura.getId());
        }
        log.error("Ingresando grabarFacturaCupa 1");
        FacFactura facturaValidar = this.facFacturaDeltaRepository.verificarExisteNumeroDocumentoFactura(
                facFactura.getMtrProveedor().getId(),
                facFactura.getTipoFactura(),
                facFactura.getSerieFactura(),
                facFactura.getNumeroFactura()
        );
        if (Optional.ofNullable(facturaValidar).isPresent()) {
            if (facturaValidar.getId() != facFactura.getId()) {
                throw new Exception("Ya existe otra Factura con ID " + facturaValidar.getId() +
                        " que posee los mismos valores de: " +
                        " Tipo Factura: " + facFactura.getTipoFactura() +
                        " Nro de Serie: " + facFactura.getSerieFactura() +
                        " Número Factura: " + facFactura.getNumeroFactura()
                );
            }
        }

        MtrEstado mtrEstado = new MtrEstado();
        if (actualizar)
            mtrEstado = this.mtrEstadoDeltaRepository.
                    getByCodigoAgrupadoAndCodigoEstado(
                            Constants.CODIGO_AGRUPADO_FACTURA,
                            EstadoFacturaEnum.ACTUALIZACION_CUPA.getEstado()
                    );
        else
            mtrEstado = this.mtrEstadoDeltaRepository.
                    getByCodigoAgrupadoAndCodigoEstado(
                            Constants.CODIGO_AGRUPADO_FACTURA,
                            EstadoFacturaEnum.PRE_APROBACION.getEstado()
                    );
        log.error("Ingresando grabarFacturaCupa 2");
        facFactura.setMtrEstado(mtrEstado);
        List<Integer> facFacturaCertificadoIdList = this.
                facFacturaCertificadoDeltaRepository.devuelveCertificadosbyFacturaId(facFactura.getId());
        if (facFacturaCertificadoIdList != null && facFacturaCertificadoIdList.size() > 0) {
            facFactura.setIndicadorConCertificado(Constants.SI);
        }
        log.error("Ingresando grabarFacturaCupa 3 facFactura: " + facFactura.toString());
        facFactura = this.facFacturaDeltaRepository.save(facFactura);
        facFactura = this.facFacturaDeltaRepository.getOne(facFactura.getId());
        bean.setFacFactura(facFactura);

        /* eliminaciones previas */
        log.error("Ingresando grabarFacturaCupa 4");
        List<FacDocumentoAdjunto> facDocumentoAdjuntoList =
                this.facDocumentoAdjuntoDeltaRepository.findByFacturaIdTipoAdjunto(
                        facFactura.getId(),
                        TipoFacturaAdjuntoEnum.FAC_OTROS.getEstado());
        if (facDocumentoAdjuntoList != null && facDocumentoAdjuntoList.size() > 0) {
            this.facDocumentoAdjuntoDeltaRepository.deleteByFacturaIdTipoAdjunto(
                    facFactura.getId(),
                    TipoFacturaAdjuntoEnum.FAC_OTROS.getEstado());
        }
        log.error("Ingresando grabarFacturaCupa 5");

        /* insertando adjuntos */
        List<FacDocumentoAdjunto> facDocumentoAdjuntoOtrosList = this.grabarListaAdjuntoCupa(
                mtrUsuarioFacturacionCupa,
                facFactura,
                TipoFacturaAdjuntoEnum.FAC_OTROS.getEstado(),
                bean.getFacDocumentoAdjuntoOtrosList());
        bean.setFacDocumentoAdjuntoOtrosList(facDocumentoAdjuntoOtrosList);
        log.error("Ingresando grabarFacturaCupa 6");

        /* insertando registro en facHistorial */
        List<FacHistorial> facHistorialGeneradoList = new ArrayList<FacHistorial>();
        String nombre = userSession.getFirstName() + " " + userSession.getLastName();
        FacHistorial facHistorial = new FacHistorial();
        facHistorial.setFacFactura(facFactura);
        if (actualizar)
            facHistorial.setDescripcion("Factura ACTUALIZADA POR USUARIO CUPA");
        else
            facHistorial.setDescripcion("Factura PRE APROBADA POR USUARIO CUPA");
        facHistorial.setMtrEstado(mtrEstado);
        facHistorial.setUsuarioHistorial(nombre);
        facHistorial.setFechaHistorial(DateUtils.obtenerFechaHoraActual());
        String descripcion = beanEntrada.getDatosGrabadosJson();
        if (Optional.ofNullable(descripcion).isPresent()) {
            int tamanno = descripcion.length();
            if (tamanno >= 3990) {
                descripcion = StringUtils.left(descripcion, 3990);
            }
            facHistorial.setDescripcion(descripcion);
        }
        facHistorial = this.facHistorialDeltaRepository.save(facHistorial);
        facHistorialGeneradoList.add(facHistorial);
        log.error("Ingresando grabarFacturaCupa 7");

        //Actualizando en facEstrategiaIteracion
        Integer nroIteracion = facFactura.getNroIteracion();
        FacEstrategiaIteracion facEstrategiaIteracion = this.facEstrategiaIteracionDeltaRepository
                .getByFacturaNroIteracion(facFactura.getId(), nroIteracion);

        if (Optional.ofNullable(bean.getMtrAprobador0()).isPresent()) {
            facEstrategiaIteracion.setMtrUsuarioFacturacionAprobador0(bean.getMtrAprobador0());
        }
        if (Optional.ofNullable(bean.getMtrTipoContrato()).isPresent()) {
            facEstrategiaIteracion.setMtrTipoContrato(bean.getMtrTipoContrato());
        }
        facEstrategiaIteracion.setMtrUsuarioFacturacionCupa(mtrUsuarioFacturacionCupa);
        facEstrategiaIteracion.setIndAprobacionRechazoCupa(Constants.APROBADO);
        facEstrategiaIteracion.setIndAprobacionRechazoAprobador0(Constants.EN_PROCESO);
        facEstrategiaIteracion.setIndAprobacionRechazoFirma(Constants.EN_PROCESO);
        facEstrategiaIteracion.setNroFirmanteEnRevision(0);
        facEstrategiaIteracion.setNroFirmanteTotal(0);
        facEstrategiaIteracion.setActivo(Constants.SI);
        this.facEstrategiaIteracionDeltaRepository.save(facEstrategiaIteracion);
        bean.setFacEstrategiaIteracion(facEstrategiaIteracion);
        log.error("Ingresando grabarFacturaCupa 8");
        FacFactura factAuxiliar = this.facFacturaDeltaRepository.save(facFactura);

        //Enviando a SAP
        if (!actualizar) {
            if (facFactura.getIndicadorConCertificado().equals(Constants.SI)) {
                log.error("Ingresando grabarFacturaCupa 9");
                List<Integer> certificadoDetalleSapIdList =
                        this.cerCertificadoDetalleSapDeltaRepository.findIdByListaCerCertificadoId(facFacturaCertificadoIdList);
                if (certificadoDetalleSapIdList == null || certificadoDetalleSapIdList.size() <= 0) {
                    throw new Exception("No se puede facturar un certificado sin HES asociada");
                }

                /*List<MensajeHistorialSap> mensajeSapList =
                        this.realizarPreregistroFactura(facFactura.getId());*/
                List<MensajeHistorialSap> mensajeSapList =
                        this.realizarPreregistroFactura(factAuxiliar, montoIgv);
                log.error("Ingresando grabarFacturaCupa 10");
                log.error("grabarFacturaCupa mensajeSapList size: " + mensajeSapList.size());
                log.error("grabarFacturaCupa mensajeSapList: " + mensajeSapList.toString());

                MtrEstado mtrEstadoFin = this.mtrEstadoDeltaRepository.
                        getByCodigoAgrupadoAndCodigoEstado(
                                Constants.CODIGO_AGRUPADO_FACTURA,
                                EstadoFacturaEnum.PENDIENTE_PAGO.getEstado()
                        );
                boolean error = false;
                if (mensajeSapList != null && mensajeSapList.size() > 0) {
                    for (MensajeHistorialSap beanSap : mensajeSapList) {
                        if (beanSap.getType().equals(Constants.LETRA_ERROR)) {
                            error = true;
                        }
                    }
                }
                FacFactura facFacturaGrabar = new FacFactura();
                facFacturaGrabar.setId(facFactura.getId());

                FacHistorial facHistorialFin = new FacHistorial();
                facHistorialFin.setFacFactura(facFacturaGrabar);
                if (error) {
                    mtrEstadoFin = this.mtrEstadoDeltaRepository.
                            getByCodigoAgrupadoAndCodigoEstado(
                                    Constants.CODIGO_AGRUPADO_FACTURA,
                                    EstadoFacturaEnum.EN_REVISION_CUPA.getEstado()
                            );
                    facHistorialFin.setDescripcion("Factura RECHAZADA EN SAP");
                } else {
                    facHistorialFin.setDescripcion("Factura PRE APROBADA EN SAP");
                }

                facHistorialFin.setMtrEstado(mtrEstadoFin);
                facHistorialFin.setUsuarioHistorial(nombre);
                facHistorialFin.setFechaHistorial(DateUtils.obtenerFechaHoraActualMasSegundos(10));
                facHistorialFin = this.facHistorialDeltaRepository.save(facHistorialFin);

                facFactura.setMtrEstado(mtrEstadoFin);
                this.facFacturaDeltaRepository.save(facFactura);

                facHistorialGeneradoList.add(facHistorialFin);
                bean.setMensajeSapList(mensajeSapList);


            }
        }
        bean.setFacHistorialGeneradoList(facHistorialGeneradoList);
        log.error("Ingresando grabarFacturaCupa FIN bean: " + bean.toString());
        return bean;
    }


    public FacFacturaActualizarCupaSalidaDto grabarFacturaCupaSinSap(FacFacturaActualizarCupaEntradaDto beanEntrada, boolean actualizar) throws Exception {
        FacFacturaActualizarCupaSalidaDto bean = new FacFacturaActualizarCupaSalidaDto();
        BeanUtils.copyProperties(beanEntrada, bean);
        if (Optional.ofNullable(beanEntrada.getMtrAprobador0()).isPresent()) {
            MtrUsuarioFacturacion mtrAprobador0 = this.mtrUsuarioFacturacionDeltaRepository.getOne(beanEntrada.getMtrAprobador0().getId());
            bean.setMtrAprobador0(mtrAprobador0);
            log.error("Ingresando grabarFacturaCupa 0 bean.getMtrAprobador0: " + bean.getMtrAprobador0().toString());
        }
        log.error("Ingresando grabarFacturaCupa 0 beanEntrada: " + beanEntrada.toString());

        FacFactura facFactura = bean.getFacFactura();
        UserSession userSession = this.systemLoggedUser.getUserSession();
        MtrUsuarioFacturacion mtrUsuarioFacturacionCupa = this.mtrUsuarioFacturacionDeltaRepository.getByCodigoIdp(userSession.getId());
        if (!Optional.ofNullable(mtrUsuarioFacturacionCupa).isPresent()) {
            throw new Exception("No se encontró Usuario CUPA en la tabla Mtr_usuario_facturacion con Código IDP " + userSession.getId());
        }
        log.error("Ingresando grabarFacturaCupa 0A mtrUsuarioFacturacionCupa: " + mtrUsuarioFacturacionCupa.toString());


        Optional<FacFactura> optionalFacFactura = this.facFacturaDeltaRepository.findById(facFactura.getId());
        if (!optionalFacFactura.isPresent()) {
            throw new Exception("No se encontró Factura con ID: " + facFactura.getId());
        }
        log.error("Ingresando grabarFacturaCupa 1");

        MtrEstado mtrEstado = new MtrEstado();
        if (actualizar)
            mtrEstado = this.mtrEstadoDeltaRepository.
                    getByCodigoAgrupadoAndCodigoEstado(
                            Constants.CODIGO_AGRUPADO_FACTURA,
                            EstadoFacturaEnum.ACTUALIZACION_CUPA.getEstado()
                    );
        else
            mtrEstado = this.mtrEstadoDeltaRepository.
                    getByCodigoAgrupadoAndCodigoEstado(
                            Constants.CODIGO_AGRUPADO_FACTURA,
                            EstadoFacturaEnum.PRE_APROBACION.getEstado()
                    );
        log.error("Ingresando grabarFacturaCupa 2");
        facFactura.setMtrEstado(mtrEstado);
        List<Integer> facFacturaCertificadoIdList = this.
                facFacturaCertificadoDeltaRepository.devuelveCertificadosbyFacturaId(facFactura.getId());
        if (facFacturaCertificadoIdList != null && facFacturaCertificadoIdList.size() > 0) {
            facFactura.setIndicadorConCertificado(Constants.SI);
        }
        log.error("Ingresando grabarFacturaCupa 3 facFactura: " + facFactura.toString());
        facFactura = this.facFacturaDeltaRepository.save(facFactura);
        facFactura = this.facFacturaDeltaRepository.getOne(facFactura.getId());
        bean.setFacFactura(facFactura);

        /* eliminaciones previas */
        log.error("Ingresando grabarFacturaCupa 4");
        List<FacDocumentoAdjunto> facDocumentoAdjuntoList =
                this.facDocumentoAdjuntoDeltaRepository.findByFacturaIdTipoAdjunto(
                        facFactura.getId(),
                        TipoFacturaAdjuntoEnum.FAC_OTROS.getEstado());
        if (facDocumentoAdjuntoList != null && facDocumentoAdjuntoList.size() > 0) {
            this.facDocumentoAdjuntoDeltaRepository.deleteByFacturaIdTipoAdjunto(
                    facFactura.getId(),
                    TipoFacturaAdjuntoEnum.FAC_OTROS.getEstado());
        }
        log.error("Ingresando grabarFacturaCupa 5");

        /* insertando adjuntos */
        List<FacDocumentoAdjunto> facDocumentoAdjuntoOtrosList = this.grabarListaAdjuntoCupa(
                mtrUsuarioFacturacionCupa,
                facFactura,
                TipoFacturaAdjuntoEnum.FAC_OTROS.getEstado(),
                bean.getFacDocumentoAdjuntoOtrosList());
        bean.setFacDocumentoAdjuntoOtrosList(facDocumentoAdjuntoOtrosList);
        log.error("Ingresando grabarFacturaCupa 6");

        /* insertando registro en facHistorial */
        List<FacHistorial> facHistorialGeneradoList = new ArrayList<FacHistorial>();
        String nombre = userSession.getFirstName() + " " + userSession.getLastName();
        FacHistorial facHistorial = new FacHistorial();
        facHistorial.setFacFactura(facFactura);
        if (actualizar)
            facHistorial.setDescripcion("Factura ACTUALIZADA POR USUARIO CUPA");
        else
            facHistorial.setDescripcion("Factura PRE APROBADA POR USUARIO CUPA");
        facHistorial.setMtrEstado(mtrEstado);
        facHistorial.setUsuarioHistorial(nombre);
        facHistorial.setFechaHistorial(DateUtils.obtenerFechaHoraActual());
        facHistorial = this.facHistorialDeltaRepository.save(facHistorial);
        facHistorialGeneradoList.add(facHistorial);
        log.error("Ingresando grabarFacturaCupa 7");

        //Actualizando en facEstrategiaIteracion
        Integer nroIteracion = facFactura.getNroIteracion();
        FacEstrategiaIteracion facEstrategiaIteracion = this.facEstrategiaIteracionDeltaRepository
                .getByFacturaNroIteracion(facFactura.getId(), nroIteracion);

        if (Optional.ofNullable(bean.getMtrAprobador0()).isPresent()) {
            facEstrategiaIteracion.setMtrUsuarioFacturacionAprobador0(bean.getMtrAprobador0());
        }
        if (Optional.ofNullable(bean.getMtrTipoContrato()).isPresent()) {
            facEstrategiaIteracion.setMtrTipoContrato(bean.getMtrTipoContrato());
        }
        facEstrategiaIteracion.setMtrUsuarioFacturacionCupa(mtrUsuarioFacturacionCupa);
        facEstrategiaIteracion.setIndAprobacionRechazoCupa(Constants.APROBADO);
        facEstrategiaIteracion.setIndAprobacionRechazoAprobador0(Constants.EN_PROCESO);
        facEstrategiaIteracion.setIndAprobacionRechazoFirma(Constants.EN_PROCESO);
        facEstrategiaIteracion.setNroFirmanteEnRevision(0);
        facEstrategiaIteracion.setNroFirmanteTotal(0);
        facEstrategiaIteracion.setActivo(Constants.SI);
        this.facEstrategiaIteracionDeltaRepository.save(facEstrategiaIteracion);
        bean.setFacEstrategiaIteracion(facEstrategiaIteracion);
        log.error("Ingresando grabarFacturaCupa 8");
        this.facFacturaDeltaRepository.save(facFactura);

        //Enviando a SAP
        if (!actualizar) {
            if (facFactura.getIndicadorConCertificado().equals(Constants.SI)) {
                log.error("Ingresando grabarFacturaCupa 9");
                List<Integer> certificadoDetalleSapIdList =
                        this.cerCertificadoDetalleSapDeltaRepository.findIdByListaCerCertificadoId(facFacturaCertificadoIdList);
                if (certificadoDetalleSapIdList == null || certificadoDetalleSapIdList.size() <= 0) {
                    throw new Exception("No se puede facturar un certificado sin HES asociada");
                }

//                List<MensajeHistorialSap> mensajeSapList =
//                        this.realizarPreregistroFactura(facFactura.getId());
//                log.error("Ingresando grabarFacturaCupa 10");
//                log.error("grabarFacturaCupa mensajeSapList size: " + mensajeSapList.size());
//                log.error("grabarFacturaCupa mensajeSapList: " + mensajeSapList.toString());

                MtrEstado mtrEstadoFin = this.mtrEstadoDeltaRepository.
                        getByCodigoAgrupadoAndCodigoEstado(
                                Constants.CODIGO_AGRUPADO_FACTURA,
                                EstadoFacturaEnum.PENDIENTE_PAGO.getEstado()
                        );
                boolean error = false;
//                if (mensajeSapList != null && mensajeSapList.size() > 0) {
//                    for (MensajeHistorialSap beanSap : mensajeSapList) {
//                        if (beanSap.getType().equals(Constants.LETRA_ERROR)) {
//                            error = true;
//                        }
//                    }
//                }
                FacFactura facFacturaGrabar = new FacFactura();
                facFacturaGrabar.setId(facFactura.getId());

                FacHistorial facHistorialFin = new FacHistorial();
                facHistorialFin.setFacFactura(facFacturaGrabar);
                if (error) {
                    mtrEstadoFin = this.mtrEstadoDeltaRepository.
                            getByCodigoAgrupadoAndCodigoEstado(
                                    Constants.CODIGO_AGRUPADO_FACTURA,
                                    EstadoFacturaEnum.EN_REVISION_CUPA.getEstado()
                            );
                    facHistorialFin.setDescripcion("Factura RECHAZADA EN SAP");
                } else {
                    facHistorialFin.setDescripcion("Factura PRE APROBADA EN SAP");
                }

                facHistorialFin.setMtrEstado(mtrEstadoFin);
                facHistorialFin.setUsuarioHistorial(nombre);
                facHistorialFin.setFechaHistorial(DateUtils.obtenerFechaHoraActualMasSegundos(10));
                facHistorialFin = this.facHistorialDeltaRepository.save(facHistorialFin);

                facFactura.setMtrEstado(mtrEstadoFin);
                this.facFacturaDeltaRepository.save(facFactura);

                facHistorialGeneradoList.add(facHistorialFin);
                // bean.setMensajeSapList(mensajeSapList);


            }
        }
        bean.setFacHistorialGeneradoList(facHistorialGeneradoList);
        log.error("Ingresando grabarFacturaCupa FIN bean: " + bean.toString());
        return bean;
    }

    public void enviarEmailGrabarFacturaCupa(FacFacturaActualizarCupaSalidaDto bean) throws Exception {
        MailSetting setting = new MailSetting();
        setting.setEmailFrom(username);
        setting.setPassword(password);
        setting.setHost(host);
        setting.setNameFrom(username);
        setting.setPort(port);
        setting.setUser(username);

        FacFactura facFactura = bean.getFacFactura();
        MtrUsuarioFacturacion mtrUsuarioFacturacion = bean.getMtrAprobador0();
        // log.error("enviarEmailGrabarFacturaCupa 00 mtrUsuarioFacturacion: " + mtrUsuarioFacturacion.toString());

        if (Optional.ofNullable(mtrUsuarioFacturacion).isPresent()) {
            log.error("enviarEmailGrabarFacturaCupa 01");
            this.facturaGrabarCupaNotificacion.enviar(
                    setting,
                    mtrUsuarioFacturacion,
                    "",
                    facFactura
            );
        }

    }

    public FacFacturaRechazoAprobador0SalidaDto rechazarFacturaAprobador0(FacFacturaRechazoAprobador0EntradaDto bean) throws Exception {
        UserSession userSession = this.systemLoggedUser.getUserSession();
        MtrUsuarioFacturacion mtrUsuarioFacturacionAprobador0 = this.mtrUsuarioFacturacionDeltaRepository.getByCodigoIdp(userSession.getId());
        if (!Optional.ofNullable(mtrUsuarioFacturacionAprobador0).isPresent()) {
            throw new Exception("No se encontró Aprobador0 en la tabla Mtr_usuario_facturacion con Código IDP " + userSession.getId());
        }

        FacFacturaRechazoAprobador0SalidaDto beanSalida = new FacFacturaRechazoAprobador0SalidaDto();

        Optional<FacFactura> optionalFacFactura = this.facFacturaDeltaRepository.findById(bean.getFacFacturaId());
        if (!optionalFacFactura.isPresent()) {
            throw new Exception("No se encontró Factura con ID: " + bean.getFacFacturaId());
        }
        FacFactura facFactura = optionalFacFactura.get();
        MtrEstado mtrEstado = this.mtrEstadoDeltaRepository.
                getByCodigoAgrupadoAndCodigoEstado(
                        Constants.CODIGO_AGRUPADO_FACTURA,
                        EstadoFacturaEnum.EN_REVISION_CUPA.getEstado()
                );
        facFactura.setMtrEstado(mtrEstado);
        facFactura = this.facFacturaDeltaRepository.save(facFactura);
        facFactura = this.facFacturaDeltaRepository.getOne(facFactura.getId());
        beanSalida.setFacFactura(facFactura);

        MtrEstado mtrEstadoRechazado = this.mtrEstadoDeltaRepository.
                getByCodigoAgrupadoAndCodigoEstado(
                        Constants.CODIGO_AGRUPADO_CERTIFICADO,
                        EstadoCertificadoEnum.RECHAZADO.getEstado()
                );

        /* insertando registro en facHistorial */
        String nombreRecha = userSession.getFirstName() + " " + userSession.getLastName();
        FacHistorial facHistorialRecha = new FacHistorial();
        facHistorialRecha.setFacFactura(facFactura);
        facHistorialRecha.setDescripcion(bean.getMotivoRechazo());
        facHistorialRecha.setMtrEstado(mtrEstadoRechazado);
        facHistorialRecha.setUsuarioHistorial(nombreRecha);
        facHistorialRecha.setFechaHistorial(DateUtils.obtenerFechaHoraActual());
        facHistorialRecha = this.facHistorialDeltaRepository.save(facHistorialRecha);
        // beanSalida.setFacHistorial(facHistorial);

        /* insertando registro en facHistorial */
        String nombre = userSession.getFirstName() + " " + userSession.getLastName();
        FacHistorial facHistorial = new FacHistorial();
        facHistorial.setFacFactura(facFactura);
        facHistorial.setDescripcion(bean.getMotivoRechazo());
        facHistorial.setMtrEstado(mtrEstado);
        facHistorial.setUsuarioHistorial(nombre);
        facHistorial.setFechaHistorial(DateUtils.obtenerFechaHoraActualMasSegundos(10));
        facHistorial = this.facHistorialDeltaRepository.save(facHistorial);
        beanSalida.setFacHistorial(facHistorial);

        //actulizando facEstrategiaIteracion
        FacEstrategiaIteracion facEstrategiaIteracion =
                this.facEstrategiaIteracionDeltaRepository.
                        getByFacturaNroIteracion(facFactura.getId(), facFactura.getNroIteracion());
        facEstrategiaIteracion.setIndAprobacionRechazoAprobador0(Constants.RECHAZADO);
        facEstrategiaIteracion.setIndAprobacionRechazoFirma(Constants.EN_PROCESO);
        facEstrategiaIteracion.setNroFirmanteEnRevision(0);
        facEstrategiaIteracion.setNroFirmanteTotal(0);
        facEstrategiaIteracion.setActivo(Constants.SI);
        facEstrategiaIteracion = this.facEstrategiaIteracionDeltaRepository.save(facEstrategiaIteracion);

        beanSalida.setFacEstrategiaIteracion(facEstrategiaIteracion);
        beanSalida.setMotivoRechazo(bean.getMotivoRechazo());
        return beanSalida;
    }


    public void enviarEmailFacturaRechazoAprobador0(FacFacturaRechazoAprobador0SalidaDto bean) throws Exception {
        MailSetting setting = new MailSetting();
        setting.setEmailFrom(username);
        setting.setPassword(password);
        setting.setHost(host);
        setting.setNameFrom(username);
        setting.setPort(port);
        setting.setUser(username);

        FacFactura facFactura = bean.getFacFactura();
        MtrUsuarioFacturacion mtrUsuarioFacturacion = bean.getFacEstrategiaIteracion().getMtrUsuarioFacturacionCupa();

        this.facturaRechazoAprobador0Notificacion.enviar(
                setting,
                mtrUsuarioFacturacion,
                facFactura.getMtrProveedor(),
                bean.getMotivoRechazo(),
                facFactura
        );
    }

    public FacFacturaGrabarAprobador0SalidaDto grabarFacturaAprobador0(FacFacturaGrabarAprobador0EntradaDto beanEntrada) throws Exception {
        FacFacturaGrabarAprobador0SalidaDto bean = new FacFacturaGrabarAprobador0SalidaDto();
        BeanUtils.copyProperties(beanEntrada, bean);

        log.error(" Ingresando grabarFacturaAprobador0  flagValidacionPresupesto bean.getFacFactura() " + beanEntrada.getFacImputacionList());

        UserSession userSession = this.systemLoggedUser.getUserSession();
        MtrUsuarioFacturacion mtrUsuarioFacturacionAprobador0 = this.mtrUsuarioFacturacionDeltaRepository.getByCodigoIdp(userSession.getId());


        if (!Optional.ofNullable(mtrUsuarioFacturacionAprobador0).isPresent()) {
            throw new Exception("No se encontró Aprobador0 en la tabla Mtr_usuario_facturacion con Código IDP " + userSession.getId());
        }

        Optional<FacFactura> optionalFacFactura = this.facFacturaDeltaRepository.findById(bean.getFacFacturaId());
        if (!optionalFacFactura.isPresent()) {
            throw new Exception("No se encontró Factura con ID: " + bean.getFacFacturaId());
        }
        if (!Optional.ofNullable(beanEntrada.getMtrSector()).isPresent()) {
            throw new Exception("Debe ingresar Sector");
        }
        Optional<MtrSector> optionalMtrSector = this.mtrSectorDeltaRepository.findById(beanEntrada.getMtrSector().getId());
        if (!optionalMtrSector.isPresent()) {
            throw new Exception("No se encontró Sector con ID: " + beanEntrada.getMtrSector().getId());
        }
        MtrSector mtrSector = optionalMtrSector.get();
        FacFactura facFactura = optionalFacFactura.get();
        Integer nroIteracion = facFactura.getNroIteracion();
        FacFactura facFacturaGrabar = new FacFactura();
        facFacturaGrabar.setId(facFactura.getId());

        FacEstrategiaIteracion facEstrategiaIteracion = this.facEstrategiaIteracionDeltaRepository.
                getByFacturaNroIteracion(facFactura.getId(), nroIteracion);
        if (!Optional.ofNullable(facEstrategiaIteracion).isPresent()) {
            throw new Exception("No se encontró Registro de Iteración de Estrategía para la iteracion nro " + nroIteracion);
        }
        if (!Optional.ofNullable(facEstrategiaIteracion.getMtrTipoContrato()).isPresent()) {
            throw new Exception("No se encontró Tipo de Contrato en el Registro de Iteración de Estrategía para la iteracion nro " + nroIteracion);
        }

        MtrSociedad mtrSociedad = facFactura.getMtrSociedad();
        MtrTipoContrato mtrTipoContrato = facEstrategiaIteracion.getMtrTipoContrato();
        BigDecimal monto = facFactura.getMontoFinal();

        MtrTasaCambioDto mtrTasaCambioDto = new MtrTasaCambioDto();
        MtrRangoMontoEstrategia mtrRangoMontoEstrategia = this.mtrRangoMontoEstrategiaDeltaService.obtenerRegistroRango(
                facFactura,
                monto,
                mtrTasaCambioDto,
                mtrTipoContrato
        );
        if (!Optional.ofNullable(mtrRangoMontoEstrategia).isPresent()) {
            throw new Exception("No se encontró Rango de Montos en el Registro de Iteración de Estrategía para la iteración nro " +
                    nroIteracion + " para Factura con Monto: " + facFactura.getMtrMoneda().getSigla() + " " + monto);
        }

        MtrEstrategiaFacturacion mtrEstrategiaFacturacion = this.mtrEstrategiaFacturacionDeltaRepository.obtenerEstrategia(
                mtrSociedad.getId(),
                mtrTipoContrato.getId(),
                mtrRangoMontoEstrategia.getId(),
                mtrSector.getId()
        );
        if (!Optional.ofNullable(mtrEstrategiaFacturacion).isPresent()) {
            String lineaSeparador = System.lineSeparator();
            throw new Exception(
                    "No se encontró Estrategia con los datos ingresados: " + lineaSeparador +
                            "Sociedad: " + mtrSociedad.getDescripcion() + lineaSeparador +
                            "Sector: " + mtrSector.getDescripcion() + "-" + mtrSector.getMtrSociedad().getDescripcion() + lineaSeparador +
                            "Tipo Contrato: " + mtrTipoContrato.getDescripcion() + lineaSeparador +
                            "Monto: " + facFactura.getMontoFinal() + lineaSeparador +
                            "Moneda: " + facFactura.getMtrMoneda().getMonedaDescrip() + lineaSeparador +
                            "Tasa de Cambio: " + mtrTasaCambioDto.getMtrTasaCambio().getValor() + lineaSeparador +
                            "Monto en USD (Sin decimales): " + mtrTasaCambioDto.getMontoObtenido() + lineaSeparador +
                            "ID Rango Monto Estrategia: " + mtrRangoMontoEstrategia.getId() + lineaSeparador +
                            "Rango Monto USD: " + mtrRangoMontoEstrategia.getValorMinimo() + " - " + mtrRangoMontoEstrategia.getValorMaximo()

            );
        }
        List<MtrEstrategiaFacturacionFirma> mtrEstrategiaFacturacionFirmaList =
                this.mtrEstrategiaFacturacionFirmaDeltaRepository.
                        findByMtrEstrategiaFacturacionOrderByOrdenEjecucion(mtrEstrategiaFacturacion);
        if (mtrEstrategiaFacturacionFirmaList == null || mtrEstrategiaFacturacionFirmaList.size() <= 0) {
            throw new Exception("La estrategia con ID: " + mtrEstrategiaFacturacion.getId() + " no posee Firmantes. Debe ingresar previamente los Firmates para dicha Estrategia");
        }

        /* Realizando validacion previa en SAP */
        boolean flagValidacionPresupesto = true;
        List<MensajeSap> mensajeSapValidacionPreviaList = this.sapRfcDeltaService.
                validarPresupuestoFacturacion(facFactura, beanEntrada.getFacImputacionList());
        if (mensajeSapValidacionPreviaList != null && mensajeSapValidacionPreviaList.size() > 0) {
            String msgTextoError = "";
            String breakLine = System.lineSeparator();
            for (MensajeSap beanValidarSap : mensajeSapValidacionPreviaList) {
                if (beanValidarSap.getType().equals(Constants.LETRA_ERROR)) {
                    msgTextoError = msgTextoError + " " + beanValidarSap.getTexto() + breakLine;
                    flagValidacionPresupesto = false;
                }
            }
            if (StringUtils.isNotBlank(msgTextoError)) {

                throw new Exception("Error validarPresupuestoFacturacion: " + msgTextoError);
            }
        }

        /* Eliminaciones previas */
        List<FacImputacion> facImputacionListActual =
                this.facImputacionDeltaRepository.findByFacturaId(facFactura.getId());
        if (facImputacionListActual != null && facImputacionListActual.size() > 0) {
            this.facImputacionDeltaRepository.deleteByFacturaId(facFacturaGrabar.getId());
        }
        List<FacEstrategiaFirma> facEstrategiaFirmaListVerificar =
                this.facEstrategiaFirmaDeltaRepository.findByFacEstrategiaIteracion(facEstrategiaIteracion);
        if (facEstrategiaFirmaListVerificar != null && facEstrategiaFirmaListVerificar.size() > 0) {
            this.facEstrategiaFirmaDeltaRepository.deleteByFacEstrategiaId(facEstrategiaIteracion.getId());
        }

        List<FacDocumentoAdjunto> facDocumentoAdjuntoList =
                this.facDocumentoAdjuntoDeltaRepository.findByFacturaIdTipoAdjunto(
                        facFactura.getId(),
                        TipoFacturaAdjuntoEnum.FAC_OTROS.getEstado());
        if (facDocumentoAdjuntoList != null && facDocumentoAdjuntoList.size() > 0) {
            this.facDocumentoAdjuntoDeltaRepository.deleteByFacturaIdTipoAdjunto(
                    facFactura.getId(),
                    TipoFacturaAdjuntoEnum.FAC_OTROS.getEstado());
        }

        /* insertando adjuntos */
        List<FacDocumentoAdjunto> facDocumentoAdjuntoOtrosList = this.grabarListaAdjuntoAprobador0(
                mtrUsuarioFacturacionAprobador0,
                facFactura,
                TipoFacturaAdjuntoEnum.FAC_OTROS.getEstado(),
                bean.getFacDocumentoAdjuntoOtrosList());
        bean.setFacDocumentoAdjuntoOtrosList(facDocumentoAdjuntoOtrosList);

        /* insertando imputaciones */
        List<FacImputacion> facImputacionList = beanEntrada.getFacImputacionList();
        if (facImputacionList != null && facImputacionList.size() > 0) {
            int contador = 0;
            for (FacImputacion facImputacion : facImputacionList) {
                facImputacion.setEstado(Constants.SI);
                facImputacion.setFacFactura(facFacturaGrabar);

                this.facImputacionDeltaRepository.save(facImputacion);
                facImputacionList.set(contador, facImputacion);
                contador++;
            }
            bean.setFacImputacionList(facImputacionList);
        } else {
            bean.setFacImputacionList(null);
        }

        // Actualizando estrategia
        Integer nroFirmanteEnRevision = 1;
        facEstrategiaIteracion.setMtrEstrategiaFacturacion(mtrEstrategiaFacturacion);
        facEstrategiaIteracion.setIndAprobacionRechazoAprobador0(Constants.APROBADO);
        facEstrategiaIteracion.setIndAprobacionRechazoFirma(Constants.EN_PROCESO);
        facEstrategiaIteracion.setNroFirmanteEnRevision(nroFirmanteEnRevision);
        facEstrategiaIteracion.setActivo(Constants.SI);
        log.error("Ingresando grabarFacturaAprobador0: facEstrategiaIteracion: " + facEstrategiaIteracion.toString());

        facEstrategiaIteracion = this.facEstrategiaIteracionDeltaRepository.save(facEstrategiaIteracion);
        bean.setFacEstrategiaIteracion(facEstrategiaIteracion);

        FacEstrategiaIteracion facEstrategiaIteracionGrabar = new FacEstrategiaIteracion();
        facEstrategiaIteracionGrabar.setId(facEstrategiaIteracion.getId());

        //Adicionando registros en Fac_estrategia_firma
        if (mtrEstrategiaFacturacionFirmaList != null && mtrEstrategiaFacturacionFirmaList.size() > 0) {
            Integer nroFirmantesTotal = mtrEstrategiaFacturacionFirmaList.size();
            List<FacEstrategiaFirma> facEstrategiaFirmaList = new ArrayList<FacEstrategiaFirma>();
            boolean activo = true;
            for (MtrEstrategiaFacturacionFirma beanMtrFirma : mtrEstrategiaFacturacionFirmaList) {
                FacEstrategiaFirma facEstrategiaFirma = new FacEstrategiaFirma();
                MtrEstrategiaFacturacionFirma beanMtrFirmaGrabar = new MtrEstrategiaFacturacionFirma();
                beanMtrFirmaGrabar.setId(beanMtrFirma.getId());

                facEstrategiaFirma.setFacEstrategiaIteracion(facEstrategiaIteracionGrabar);
                facEstrategiaFirma.setIndAprobacionRechazo(Constants.EN_PROCESO);
                facEstrategiaFirma.setMtrEstrategiaFacturacionFirma(beanMtrFirmaGrabar);
                facEstrategiaFirma.setOrdenEjecucion(beanMtrFirma.getOrdenEjecucion());
                facEstrategiaFirma.setMtrSector(beanMtrFirma.getMtrSector());
                facEstrategiaFirma.setMtrTipoGerencia(beanMtrFirma.getMtrTipoGerencia());

                if (activo) {
                    facEstrategiaFirma.setActivo(Constants.SI);
                    activo = false;
                } else {
                    facEstrategiaFirma.setActivo(Constants.NO);
                }
                log.error("Ingresando grabarFacturaAprobador0: facEstrategiaFirma: " + facEstrategiaFirma.toString());
                this.facEstrategiaFirmaDeltaRepository.save(facEstrategiaFirma);
                facEstrategiaFirmaList.add(facEstrategiaFirma);
            }
            bean.setFacEstrategiaFirmaList(facEstrategiaFirmaList);

            facEstrategiaIteracion.setNroFirmanteTotal(nroFirmantesTotal);
            facEstrategiaIteracion = this.facEstrategiaIteracionDeltaRepository.save(facEstrategiaIteracion);
            bean.setFacEstrategiaIteracion(facEstrategiaIteracion);

        }

        //Actualizando factura
        MtrEstado mtrEstado = this.mtrEstadoDeltaRepository.
                getByCodigoAgrupadoAndCodigoEstado(
                        Constants.CODIGO_AGRUPADO_FACTURA,
                        EstadoFacturaEnum.PENDIENTE_FIRMA.getEstado()
                );
        facFactura.setMtrEstado(mtrEstado);
        facFactura = this.facFacturaDeltaRepository.save(facFactura);
        bean.setFacFactura(facFactura);

        //Insertando en FacHistorial
        String nombre = userSession.getFirstName() + " " + userSession.getLastName();
        FacHistorial facHistorial = new FacHistorial();
        facHistorial.setFacFactura(facFactura);
        facHistorial.setDescripcion("FACTURA APROBADA por el Aprobador0");
        facHistorial.setMtrEstado(mtrEstado);
        facHistorial.setUsuarioHistorial(nombre);
        facHistorial.setFechaHistorial(DateUtils.obtenerFechaHoraActual());
        facHistorial = this.facHistorialDeltaRepository.save(facHistorial);
        bean.setFacHistorial(facHistorial);

        bean.setMtrAprobador0(mtrUsuarioFacturacionAprobador0);

        /* Obteniendo los posibles firmantes */
        FacEstrategiaFirma facEstrategiaFirmaSgte = this.facEstrategiaFirmaDeltaRepository.
                getByFacEstrategiaIteracionAndOrdenEjecucion(
                        facEstrategiaIteracion,
                        nroFirmanteEnRevision
                );
        log.error("Ingresando grabarFacturaAprobador0 A: facEstrategiaFirmaSgte: " + facEstrategiaFirmaSgte.toString());
        if (Optional.ofNullable(facEstrategiaFirmaSgte).isPresent()) {
            MtrSector mtrSectorFirmante = facEstrategiaFirmaSgte.getMtrSector();
            MtrTipoGerencia mtrTipoGerenciaFirmante = facEstrategiaFirmaSgte.getMtrTipoGerencia();
            List<MtrUsuarioFacturacion> mtrUsuarioFacturacionListSgte = new ArrayList<MtrUsuarioFacturacion>();
            List<MtrUsuarioFacturacion> mtrUsuarioFacturacionListReemplazoSgte = new ArrayList<MtrUsuarioFacturacion>();
            log.error("Ingresando grabarFacturaAprobador0 B");
            if (Optional.ofNullable(mtrTipoGerenciaFirmante).isPresent()) {
                mtrUsuarioFacturacionListSgte = this.mtrUsuarioFacturacionDeltaRepository
                        .devuelveUsuarioFirmanteTipoGerencia(mtrTipoGerenciaFirmante.getId());
                mtrUsuarioFacturacionListReemplazoSgte = this.mtrReemplazoFacturacionDeltaRepository
                        .devuelveUsuarioFirmanteTipoGerencia(mtrTipoGerenciaFirmante.getId());
                if (mtrUsuarioFacturacionListReemplazoSgte != null && mtrUsuarioFacturacionListReemplazoSgte.size() > 0) {
                    mtrUsuarioFacturacionListSgte.addAll(mtrUsuarioFacturacionListReemplazoSgte);
                }
            } else {
                mtrUsuarioFacturacionListSgte = this.mtrUsuarioFacturacionDeltaRepository
                        .devuelveUsuarioFirmanteSector(mtrSectorFirmante.getId());
                mtrUsuarioFacturacionListReemplazoSgte = this.mtrReemplazoFacturacionDeltaRepository
                        .devuelveUsuarioFirmanteSector(mtrSectorFirmante.getId());
                if (mtrUsuarioFacturacionListReemplazoSgte != null && mtrUsuarioFacturacionListReemplazoSgte.size() > 0) {
                    mtrUsuarioFacturacionListSgte.addAll(mtrUsuarioFacturacionListReemplazoSgte);
                }
            }
            log.error("Ingresando grabarFacturaAprobador0 C mtrUsuarioFacturacionListSgte size: " + mtrUsuarioFacturacionListSgte.size());
            log.error("Ingresando grabarFacturaAprobador0 D mtrUsuarioFacturacionListSgte: " + mtrUsuarioFacturacionListSgte.toString());
            bean.setMtrUsuarioFacturacionFirmantePosiblesSgtes(mtrUsuarioFacturacionListSgte);
        }
        //@pprincipe 29.09.2020 -Inicio add actualizar los campos preliminares con datos de sap desde la rfc documento preliminar
        if (flagValidacionPresupesto) {
            log.error(" Ingresando grabarFacturaAprobador0  flagValidacionPresupesto facFactura " + facFactura);
            ContabilizacionInput contabilizacionInput = new ContabilizacionInput();
            contabilizacionInput.setIdFactura(bean.getFacFacturaId());
            contabilizacionInput.setUserLogin(mtrUsuarioFacturacionAprobador0.getCodigoUsuarioSap());
            contabilizacionInput.setUsRes(userSession.getRuc());
            ContabilizacionComprobanteOutput contaOutput = this.sapRfcDeltaService.generaContablizacionComprobante(contabilizacionInput, facFactura, facImputacionList, "3");
            List<MensajeHistorialSap> mensajeSapList = contaOutput.getListaMensaje();
            log.error("Ingresando grabarFacturaAprobador0 contaOutput " + contaOutput);
            //==========================================================
            String msgTextoError = "";
            String breakLine = System.lineSeparator();
            boolean flagGeneraConta = true;
            if (mensajeSapList != null && mensajeSapList.size() > 0) {
                for (MensajeHistorialSap beanSap : mensajeSapList) {
                    if (beanSap.getType().equals(Constants.LETRA_ERROR)) {
                        msgTextoError = msgTextoError + " " + beanSap.getTexto() + breakLine;
                    }
                }

            } else if ((mensajeSapList != null && mensajeSapList.size() == 0) || mensajeSapList == null) {
                msgTextoError = "No hay respuesta de SAP";//PPRINCIPE 06.11.2020 @UPDATE
            }
            if(StringUtils.isBlank(msgTextoError)) {
                if(StringUtils.isBlank(contaOutput.getNumeroDocumento()) || StringUtils.isBlank(contaOutput.getEjercicio()) ) {
                    msgTextoError = "No se creó el documento preliminar o el ejercicio preliminar";
                }
            }
            if (StringUtils.isNotBlank(msgTextoError)) {
                mtrEstado = this.mtrEstadoDeltaRepository.
                        getByCodigoAgrupadoAndCodigoEstado(
                                Constants.CODIGO_AGRUPADO_FACTURA,
                                EstadoFacturaEnum.EN_REVISION_CUPA.getEstado()
                        );

                String nombrex = mtrUsuarioFacturacionAprobador0.getNombres() + " " + mtrUsuarioFacturacionAprobador0.getApellidos();
                FacHistorial facHistorialx = new FacHistorial();
                facHistorialx.setDescripcion(msgTextoError.trim());
                facHistorialx.setMtrEstado(mtrEstado);
                facHistorialx.setFechaHistorial(DateUtils.obtenerFechaHoraActual());
                facHistorialx.setFacFactura(facFactura);
                facHistorialx.setUsuarioHistorial(nombrex);
                FacHistorial out = this.facHistorialDeltaRepository.save(facHistorialx);

                facFactura.setMtrEstado(mtrEstado);
                facFactura = this.facFacturaDeltaRepository.save(facFactura);
                flagGeneraConta = false;

            }
            log.error("Ingresando grabarFacturaAprobador0 flagGeneraConta " + flagGeneraConta);
            if (flagGeneraConta) {
                facFactura.setFechaAprobacion(DateUtils.obtenerFechaHoraActual());
                facFactura.setNumeroFacturaSapPrelim(contaOutput.getNumeroDocumento());
                facFactura.setAnioFacturaSapPrelim(contaOutput.getEjercicio());
                facFactura = this.facFacturaDeltaRepository.save(facFactura);
                //Generar documento preliminar
                /*ContabilizacionPreliminarOutput preliminar = this.sapRfcDeltaService.contabilizarDocumentoPreliminar(contaOutput.getNumeroDocumento(),
                        facFactura.getMtrSociedad().getDescBrv(), contaOutput.getEjercicio(), "X","");
                log.error("Ingresando grabarFacturaAprobador0 preliminar " + preliminar);
                boolean flagContaPreliminar = true;
                List<MensajeSap> listaMensaje = preliminar.getListaMensaje();
                for(MensajeSap msg : listaMensaje) {
                    if(msg.getType().equalsIgnoreCase("E")) {
                        flagContaPreliminar = false;
                        msgTextoError = msgTextoError + " " + msg.getTexto() + breakLine;
                    }
                }
                log.error("Ingresando grabarFacturaAprobador0 flagContaPreliminar");
                if(flagContaPreliminar) {

                    facFactura.setFechaAprobacion(DateUtils.obtenerFechaHoraActual());
                    facFactura.setNumeroFacturaSapPrelim(preliminar.getNumeroDocumento());
                    facFactura.setAnioFacturaSapPrelim(preliminar.getEjercicio());
                    facFactura = this.facFacturaDeltaRepository.save(facFactura);
                }else {
                    log.error("Ingresando grabarFacturaAprobador0 contabilizarDocumentoPreliminar msgTextoError " + msgTextoError);
                    throw new Exception("Error contabilizarDocumentoPreliminar: " + msgTextoError);
                }*/
            } else {
                log.error("Ingresando grabarFacturaAprobador0 generaContablizacionComprobante msgTextoError " + msgTextoError);
                throw new Exception("Error generaContablizacionComprobante: " + msgTextoError);
            }


        }
        //Fin 29.09.2020

        return bean;
    }

    public List<FacFacturaValidarAdjuntoSalidaDto> grabarFacturaValidacionAdjuntoLista(
            List<FacFacturaValidarAdjuntoEntradaDto> beanEntradaList) throws Exception {
        List<FacFacturaValidarAdjuntoSalidaDto> facturaValidarAdjuntoSalidaDtoList = new ArrayList<FacFacturaValidarAdjuntoSalidaDto>();
        if (beanEntradaList == null || beanEntradaList.size() <= 0) {
            throw new Exception("Debe ingresar valores en la Lista de Entrada");
        }
        for (FacFacturaValidarAdjuntoEntradaDto bean : beanEntradaList) {
            FacFacturaValidarAdjuntoSalidaDto facFacturaValidarAdjuntoSalidaDto = new FacFacturaValidarAdjuntoSalidaDto();
            facFacturaValidarAdjuntoSalidaDto.setIndicadorOk(true);
            facFacturaValidarAdjuntoSalidaDto.setMensajeError("");
            facFacturaValidarAdjuntoSalidaDto.setBeanEntrada(bean);
            try {
                facFacturaValidarAdjuntoSalidaDto = this.facFacturaRequireNewService.grabarFacturaValidacionAdjunto(bean);
            } catch (Exception e) {
                facFacturaValidarAdjuntoSalidaDto.setIndicadorOk(false);
                facFacturaValidarAdjuntoSalidaDto.setMensajeError(e.getMessage());
            }
            facturaValidarAdjuntoSalidaDtoList.add(facFacturaValidarAdjuntoSalidaDto);
        }
        return facturaValidarAdjuntoSalidaDtoList;
    }

    public FacFacturaValidarAdjuntoSalidaDto grabarFacturaValidacionAdjunto(FacFacturaValidarAdjuntoEntradaDto beanEntrada) throws Exception {
        FacFacturaValidarAdjuntoSalidaDto bean = new FacFacturaValidarAdjuntoSalidaDto();
        UserSession userSession = this.systemLoggedUser.getUserSession();

        Optional<FacFactura> optionalFacFactura = this.facFacturaDeltaRepository.findById(beanEntrada.getIdFactura());
        if (!optionalFacFactura.isPresent()) {
            throw new Exception("No se encontró Factura con ID: " + beanEntrada.getIdFactura());
        }

        FacFactura facFactura = optionalFacFactura.get();

        String descripcion = "";
        if (beanEntrada.isAprobado()) {
            descripcion = "Validación de Adjuntos APROBADA";
            facFactura.setIndEstadoAdjunto(Constants.APROBADO);
        } else {
            descripcion = "Validación de Adjuntos RECHAZADA";
            facFactura.setIndEstadoAdjunto(Constants.RECHAZADO);
        }

        //Actualizando factura
        facFactura = this.facFacturaDeltaRepository.save(facFactura);
        bean.setFacFactura(facFactura);

        //Insertando en FacHistorial
        String nombre = userSession.getFirstName() + " " + userSession.getLastName();
        FacHistorial facHistorial = new FacHistorial();
        facHistorial.setFacFactura(facFactura);
        facHistorial.setDescripcion(descripcion);
        facHistorial.setMtrEstado(facFactura.getMtrEstado());
        facHistorial.setUsuarioHistorial(nombre);
        facHistorial.setFechaHistorial(DateUtils.obtenerFechaHoraActual());
        facHistorial = this.facHistorialDeltaRepository.save(facHistorial);

        bean.setFacHistorial(facHistorial);
        return bean;
    }

    public FacFacturaRechazoFirmanteSalidaDto rechazarFacturaFirmante(FacFacturaRechazoFirmanteEntradaDto bean) throws Exception {
        UserSession userSession = this.systemLoggedUser.getUserSession();
        MtrUsuarioFacturacion mtrUsuarioFacturacionFirmante = this.mtrUsuarioFacturacionDeltaRepository.getByCodigoIdp(userSession.getId());
        if (!Optional.ofNullable(mtrUsuarioFacturacionFirmante).isPresent()) {
            throw new Exception("No se encontró Firmante en la tabla Mtr_usuario_facturacion con Código IDP " + userSession.getId());
        }

        FacFacturaRechazoFirmanteSalidaDto beanSalida = new FacFacturaRechazoFirmanteSalidaDto();
        beanSalida.setMtrUsuarioFacturacionFirmante(mtrUsuarioFacturacionFirmante);

        Optional<FacFactura> optionalFacFactura = this.facFacturaDeltaRepository.findById(bean.getFacFacturaId());
        if (!optionalFacFactura.isPresent()) {
            throw new Exception("No se encontró Factura con ID: " + bean.getFacFacturaId());
        }
        FacFactura facFactura = optionalFacFactura.get();
        MtrEstado mtrEstado = this.mtrEstadoDeltaRepository.
                getByCodigoAgrupadoAndCodigoEstado(
                        Constants.CODIGO_AGRUPADO_FACTURA,
                        EstadoFacturaEnum.EN_REVISION_CUPA.getEstado()
                );
        facFactura.setMtrEstado(mtrEstado);
        facFactura = this.facFacturaDeltaRepository.save(facFactura);
        facFactura = this.facFacturaDeltaRepository.getOne(facFactura.getId());
        beanSalida.setFacFactura(facFactura);

        MtrEstado mtrEstadoRechazado = this.mtrEstadoDeltaRepository.
                getByCodigoAgrupadoAndCodigoEstado(
                        Constants.CODIGO_AGRUPADO_CERTIFICADO,
                        EstadoCertificadoEnum.RECHAZADO.getEstado()
                );

        /* insertando registro en facHistorial */
        String nombreRecha = userSession.getFirstName() + " " + userSession.getLastName();
        FacHistorial facHistorialRecha = new FacHistorial();
        facHistorialRecha.setFacFactura(facFactura);
        facHistorialRecha.setDescripcion(bean.getMotivoRechazo());
        facHistorialRecha.setMtrEstado(mtrEstadoRechazado);
        facHistorialRecha.setUsuarioHistorial(nombreRecha);
        facHistorialRecha.setFechaHistorial(DateUtils.obtenerFechaHoraActual());
        facHistorialRecha = this.facHistorialDeltaRepository.save(facHistorialRecha);
        // beanSalida.setFacHistorial(facHistorial);
        /* insertando registro en facHistorial */
        String nombre = userSession.getFirstName() + " " + userSession.getLastName();
        FacHistorial facHistorial = new FacHistorial();
        facHistorial.setFacFactura(facFactura);
        facHistorial.setDescripcion(bean.getMotivoRechazo());
        facHistorial.setMtrEstado(mtrEstado);
        facHistorial.setUsuarioHistorial(nombre);
        facHistorial.setFechaHistorial(DateUtils.obtenerFechaHoraActualMasSegundos(10));
        facHistorial = this.facHistorialDeltaRepository.save(facHistorial);
        beanSalida.setFacHistorial(facHistorial);

        //actualizando facEstrategiaIteracion
        FacEstrategiaIteracion facEstrategiaIteracion =
                this.facEstrategiaIteracionDeltaRepository.
                        getByFacturaNroIteracion(facFactura.getId(), facFactura.getNroIteracion());
        Integer nroFirmanteEnRevision = facEstrategiaIteracion.getNroFirmanteEnRevision();
        facEstrategiaIteracion.setIndAprobacionRechazoFirma(Constants.RECHAZADO);
        facEstrategiaIteracion.setNroFirmanteEnRevision(0);
        facEstrategiaIteracion.setNroFirmanteTotal(0);
        facEstrategiaIteracion.setActivo(Constants.SI);
        facEstrategiaIteracion = this.facEstrategiaIteracionDeltaRepository.save(facEstrategiaIteracion);

        beanSalida.setFacEstrategiaIteracion(facEstrategiaIteracion);
        beanSalida.setMotivoRechazo(bean.getMotivoRechazo());

        //actualizando facEstrategiaFirma
        FacEstrategiaFirma facEstrategiaFirma = this.facEstrategiaFirmaDeltaRepository.
                getByFacEstrategiaIteracionAndOrdenEjecucion(
                        facEstrategiaIteracion,
                        nroFirmanteEnRevision
                );
        Date fechaRechazo = DateUtils.obtenerFechaHoraActual();
        facEstrategiaFirma.setIndAprobacionRechazo(Constants.RECHAZADO);
        facEstrategiaFirma.setMtrUsuarioFacturacion(mtrUsuarioFacturacionFirmante);
        facEstrategiaFirma.setFechaAprobacion(fechaRechazo);
        facEstrategiaFirma = this.facEstrategiaFirmaDeltaRepository.save(facEstrategiaFirma);
        beanSalida.setFacEstrategiaFirma(facEstrategiaFirma);
        //@pprincipe 29.09.2020 llamar a la rfc documebto preliminar para anular y borrar campos preilimnares
        ContabilizacionPreliminarOutput preliminar = this.sapRfcDeltaService.contabilizarDocumentoPreliminar(facFactura.getNumeroFacturaSapPrelim(),
                facFactura.getMtrSociedad().getDescBrv(), facFactura.getAnioFacturaSapPrelim(), "", "X");

        String msgTextoError = "";
        String breakLine = System.lineSeparator();
        boolean flagContaPreliminar = true;
        List<MensajeSap> listaMensaje = preliminar.getListaMensaje();
        for (MensajeSap msg : listaMensaje) {
            if (msg.getType().equalsIgnoreCase("E")) {
                flagContaPreliminar = false;
                msgTextoError = msgTextoError + " " + msg.getTexto() + breakLine;
            }
        }
        log.error("Ingresando FacFacturaRechazoFirmanteSalidaDto0 flagContaPreliminar");
        if (!flagContaPreliminar) {
            log.error("Ingresando FacFacturaRechazoFirmanteSalidaDto1 contabilizarDocumentoPreliminar msgTextoError " + msgTextoError);
            throw new Exception("Error FacFacturaRechazoFirmanteSalidaDto2: " + msgTextoError);
        }

        log.error("FacFacturaRechazoFirmanteSalidaDto preliminar " + preliminar);
        facFactura.setNumeroFacturaSap("");
        facFactura.setAnioFacturaSap("");
        facFactura = this.facFacturaDeltaRepository.save(facFactura);


        return beanSalida;
    }

    public void enviarEmailFacturaRechazoFirmante(FacFacturaRechazoFirmanteSalidaDto bean) throws Exception {
        MailSetting setting = new MailSetting();
        setting.setEmailFrom(username);
        setting.setPassword(password);
        setting.setHost(host);
        setting.setNameFrom(username);
        setting.setPort(port);
        setting.setUser(username);

        FacFactura facFactura = bean.getFacFactura();
        MtrUsuarioFacturacion mtrUsuarioFacturacionFirmante = bean.getMtrUsuarioFacturacionFirmante();
        MtrUsuarioFacturacion mtrUsuarioFacturacionCupa = bean.getFacEstrategiaIteracion().getMtrUsuarioFacturacionCupa();

        this.facturaRechazoFirmanteNotificacion.enviar(
                setting,
                mtrUsuarioFacturacionFirmante,
                mtrUsuarioFacturacionCupa,
                facFactura.getMtrProveedor(),
                bean.getMotivoRechazo(),
                facFactura
        );
    }

    public FacFacturaAprobacionFirmanteSalidaDto aprobarFacturaFirmante(
            FacFacturaAprobacionFirmanteEntradaDto bean,
            UserSession userSession) throws Exception {

        MtrUsuarioFacturacion mtrUsuarioFacturacionFirmante = this.mtrUsuarioFacturacionDeltaRepository.getByCodigoIdp(userSession.getId());
        if (!Optional.ofNullable(mtrUsuarioFacturacionFirmante).isPresent()) {
            throw new Exception("No se encontró Firmante en la tabla Mtr_usuario_facturacion con Código IDP " + userSession.getId());
        }
        if (!Optional.ofNullable(bean.getMotivoAprobacion()).isPresent()) {
            String motivoAprobacion = "FACTURA Aprobada por el FIRMANTE";
            bean.setMotivoAprobacion(motivoAprobacion);
        }

        FacFacturaAprobacionFirmanteSalidaDto beanSalida = new FacFacturaAprobacionFirmanteSalidaDto();
        beanSalida.setMtrUsuarioFacturacionFirmante(mtrUsuarioFacturacionFirmante);
        beanSalida.setMotivoAprobacion(bean.getMotivoAprobacion());

        Optional<FacFactura> optionalFacFactura = this.facFacturaDeltaRepository.findById(bean.getFacFacturaId());
        if (!optionalFacFactura.isPresent()) {
            throw new Exception("No se encontró Factura con ID: " + bean.getFacFacturaId());
        }
        FacFactura facFactura = optionalFacFactura.get();
        MtrEstado mtrEstado = this.mtrEstadoDeltaRepository.
                getByCodigoAgrupadoAndCodigoEstado(
                        Constants.CODIGO_AGRUPADO_FACTURA,
                        EstadoFacturaEnum.PENDIENTE_FIRMA.getEstado()
                );
        //Lista de imputacion
        List<FacImputacion> facImputacionList =
                this.facImputacionDeltaRepository.findByFacFacturaOrderByMtrCuentaImputacion(facFactura);

        //actualizando facEstrategiaIteracion
        FacEstrategiaIteracion facEstrategiaIteracion =
                this.facEstrategiaIteracionDeltaRepository.
                        getByFacturaNroIteracion(facFactura.getId(), facFactura.getNroIteracion());
        Integer nroFirmanteTotal = facEstrategiaIteracion.getNroFirmanteTotal();
        Integer nroFirmanteEnRevisionActual = facEstrategiaIteracion.getNroFirmanteEnRevision();
        Integer nroFirmanteEnRevision = facEstrategiaIteracion.getNroFirmanteEnRevision() + 1;

        facEstrategiaIteracion.setIndAprobacionRechazoFirma(Constants.EN_PROCESO);
        boolean terminoAprobacion = false;
        boolean exito = true;
        beanSalida.setExito(true);
        if (nroFirmanteEnRevision > nroFirmanteTotal) {
            terminoAprobacion = true;
            /*ContabilizacionInput contabilizacionInput = new ContabilizacionInput();
            contabilizacionInput.setIdFactura(bean.getFacFacturaId());
            contabilizacionInput.setUserLogin(mtrUsuarioFacturacionFirmante.getCodigoUsuarioSap());

            contabilizacionInput.setUsRes(userSession.getRuc());
            List<MensajeHistorialSap> mensajeSapList = this.sapRfcDeltaService.generaContablizacionComprobante(contabilizacionInput);

            String msgTextoError = "";
            String breakLine = System.lineSeparator();
            if (mensajeSapList != null && mensajeSapList.size() > 0) {
                for (MensajeHistorialSap beanSap : mensajeSapList) {
                    if (beanSap.getType().equals(Constants.LETRA_ERROR)) {
                        msgTextoError = msgTextoError + " " + beanSap.getTexto() + breakLine;
                    }
                }
                if (StringUtils.isNotBlank(msgTextoError)) {
                    mtrEstado = this.mtrEstadoDeltaRepository.
                            getByCodigoAgrupadoAndCodigoEstado(
                                    Constants.CODIGO_AGRUPADO_FACTURA,
                                    EstadoFacturaEnum.EN_REVISION_CUPA.getEstado()
                            );

                    String nombre = mtrUsuarioFacturacionFirmante.getNombres() + " " + mtrUsuarioFacturacionFirmante.getApellidos();
                    FacHistorial facHistorial = new FacHistorial();
                    facHistorial.setDescripcion(msgTextoError.trim());
                    facHistorial.setMtrEstado(mtrEstado);
                    facHistorial.setFechaHistorial(DateUtils.obtenerFechaHoraActual());
                    facHistorial.setFacFactura(facFactura);
                    facHistorial.setUsuarioHistorial(nombre);
                    FacHistorial out = this.facHistorialDeltaRepository.save(facHistorial);

                    facFactura.setMtrEstado(mtrEstado);
                    facFactura = this.facFacturaDeltaRepository.save(facFactura);
                    beanSalida.setFacHistorial(out);
                    beanSalida.setFacFactura(facFactura);
                    beanSalida.setExito(false);
                    beanSalida.setMensajeError(msgTextoError);
                    return beanSalida;
                }
            }*/
            //Invocar al documento preliminar - @pprincipe @29.09.2020 y actualizar los campos definitivos desde los campos preliminares
//            if (facFactura.getMtrDetraccion() != null) {
//                ContabilizacionPreliminarOutput preliminar = this.sapRfcDeltaService.contabilizarDocumentoPreliminar(facFactura.getNumeroFacturaSapPrelim(),
//                        facFactura.getMtrSociedad().getDescBrv(), facFactura.getAnioFacturaSapPrelim(), "", "X");
//
//                String msgTextoError = "";
//                String breakLine = System.lineSeparator();
//                boolean flagContaPreliminar = true;
//                List<MensajeSap> listaMensaje = preliminar.getListaMensaje();
//                for (MensajeSap msg : listaMensaje) {
//                    if (msg.getType().equalsIgnoreCase("E")) {
//                        flagContaPreliminar = false;
//                        msgTextoError = msgTextoError + " " + msg.getTexto() + breakLine;
//                    }
//                }
//                log.error("Ingresando aprobarFacturaFirmante0 Anulado");
//                if (!flagContaPreliminar) {
//                    log.error("Ingresando aprobarFacturaFirmante0 contabilizarDocumentoPreliminar_y msgTextoError " + msgTextoError);
//                    throw new Exception("Error aprobarFacturaFirmante0 anular: " + msgTextoError);
//                }
//
//                log.error("aprobarFacturaFirmante0_z preliminar " + preliminar);
//                facFactura.setNumeroFacturaSap("");
//                facFactura.setAnioFacturaSap("");
//                facFactura = this.facFacturaDeltaRepository.save(facFactura);
//                //Volver a ejecuar documetno preliminar
//                log.error(" Ingresando aprobarFacturaFirmante0  flagValidacionPresupesto facFactura " + facFactura);
//                ContabilizacionInput contabilizacionInput = new ContabilizacionInput();
//                contabilizacionInput.setIdFactura(bean.getFacFacturaId());
//                contabilizacionInput.setUserLogin(mtrUsuarioFacturacionFirmante.getCodigoUsuarioSap());
//                contabilizacionInput.setUsRes(userSession.getRuc());
//                ContabilizacionComprobanteOutput contaOutput = this.sapRfcDeltaService.generaContablizacionComprobante(contabilizacionInput, facFactura, facImputacionList, "");
//                List<MensajeHistorialSap> mensajeSapList = contaOutput.getListaMensaje();
//                log.error("Ingresando aprobarFacturaFirmante0 contaOutput " + contaOutput);
//
//
//                boolean flagGeneraConta = true;
//                if (mensajeSapList != null && mensajeSapList.size() > 0) {
//                    for (MensajeHistorialSap beanSap : mensajeSapList) {
//                        if (beanSap.getType().equals(Constants.LETRA_ERROR)) {
//                            msgTextoError = msgTextoError + " " + beanSap.getTexto() + breakLine;
//                        }
//                    }
//                    if (StringUtils.isNotBlank(msgTextoError)) {
//                        mtrEstado = this.mtrEstadoDeltaRepository.
//                                getByCodigoAgrupadoAndCodigoEstado(
//                                        Constants.CODIGO_AGRUPADO_FACTURA,
//                                        EstadoFacturaEnum.EN_REVISION_CUPA.getEstado()
//                                );
//
//                        String nombrex = mtrUsuarioFacturacionFirmante.getNombres() + " " + mtrUsuarioFacturacionFirmante.getApellidos();
//                        FacHistorial facHistorial = new FacHistorial();
//                        facHistorial.setDescripcion(msgTextoError.trim());
//                        facHistorial.setMtrEstado(mtrEstado);
//                        facHistorial.setFechaHistorial(DateUtils.obtenerFechaHoraActual());
//                        facHistorial.setFacFactura(facFactura);
//                        facHistorial.setUsuarioHistorial(nombrex);
//                        FacHistorial out = this.facHistorialDeltaRepository.save(facHistorial);
//
//                        facFactura.setMtrEstado(mtrEstado);
//                        facFactura = this.facFacturaDeltaRepository.save(facFactura);
//                        flagGeneraConta = false;
//
//                    }
//                }
//                log.error("Ingresando grabarFacturaAprobador0 flagGeneraConta " + flagGeneraConta);
//                if (flagGeneraConta) {
//                    facFactura.setFechaAprobacion(DateUtils.obtenerFechaHoraActual());
//
//                    facFactura.setNumeroFacturaSap(contaOutput.getNumeroDocumento());
//                    facFactura.setAnioFacturaSap(contaOutput.getEjercicio());
//                    facFactura = this.facFacturaDeltaRepository.save(facFactura);
//
//                } else {
//                    log.error("Ingresando grabarFacturaAprobador0 generaContablizacionComprobante msgTextoError " + msgTextoError);
//                    throw new Exception("Error generaContablizacionComprobante: " + msgTextoError);
//                }
//
//
//
//            } else {
            facFactura.setAnioFacturaSap(facFactura.getAnioFacturaSapPrelim());
            facFactura.setNumeroFacturaSap(facFactura.getNumeroFacturaSapPrelim());
            ContabilizacionPreliminarOutput preliminar = this.sapRfcDeltaService.contabilizarDocumentoPreliminar(facFactura.getNumeroFacturaSapPrelim(),
                    facFactura.getMtrSociedad().getDescBrv(), facFactura.getAnioFacturaSapPrelim(), "X", "");
            String msgTextoError = "";
            String breakLine = System.lineSeparator();
            boolean flagContaPreliminar = true;
            List<MensajeSap> listaMensaje = preliminar.getListaMensaje();
            for (MensajeSap msg : listaMensaje) {
                if (msg.getType().equalsIgnoreCase("E")) {
                    flagContaPreliminar = false;
                    msgTextoError = msgTextoError + " " + msg.getTexto() + breakLine;
                }
            }
            log.error("Ingresando aprobarFacturaFirmante0 flagContaPreliminar");
            if (!flagContaPreliminar) {
                log.error("Ingresando aprobarFacturaFirmante1 contabilizarDocumentoPreliminar msgTextoError " + msgTextoError);
                throw new Exception("Error aprobarFacturaFirmante2: " + msgTextoError);
            }
            //}

            //Fin
            mtrEstado = this.mtrEstadoDeltaRepository.
                        getByCodigoAgrupadoAndCodigoEstado(
                                Constants.CODIGO_AGRUPADO_FACTURA,
                                EstadoFacturaEnum.PENDIENTE_PAGO.getEstado()
                        );
                nroFirmanteEnRevision = nroFirmanteTotal;
                facFactura.setMtrEstado(mtrEstado);
                facFactura.setIndAprobacionRechazoFinal(Constants.APROBADO);
                facFactura = this.facFacturaDeltaRepository.save(facFactura);
                facEstrategiaIteracion.setIndAprobacionRechazoFirma(Constants.APROBADO);


        }
        facEstrategiaIteracion.setNroFirmanteEnRevision(nroFirmanteEnRevision);
        facEstrategiaIteracion.setActivo(Constants.SI);
        facEstrategiaIteracion = this.facEstrategiaIteracionDeltaRepository.save(facEstrategiaIteracion);
        beanSalida.setFacEstrategiaIteracion(facEstrategiaIteracion);

        //actualizando facEstrategiaFirma
        FacEstrategiaFirma facEstrategiaFirma = this.facEstrategiaFirmaDeltaRepository.
                getByFacEstrategiaIteracionAndOrdenEjecucion(
                        facEstrategiaIteracion,
                        nroFirmanteEnRevisionActual
                );
        facEstrategiaFirma.setIndAprobacionRechazo(Constants.APROBADO);
        facEstrategiaFirma.setMtrUsuarioFacturacion(mtrUsuarioFacturacionFirmante);
        Date fechaAprobacion = DateUtils.obtenerFechaHoraActual();
        facEstrategiaFirma.setFechaAprobacion(fechaAprobacion);
        facEstrategiaFirma.setActivo(Constants.NO);
        facEstrategiaFirma = this.facEstrategiaFirmaDeltaRepository.save(facEstrategiaFirma);
        beanSalida.setFacEstrategiaFirma(facEstrategiaFirma);

        /*actualizando facEstrategiaFirma siguiente*/
        if (!terminoAprobacion) {
            FacEstrategiaFirma facEstrategiaFirmaSgte = this.facEstrategiaFirmaDeltaRepository.
                    getByFacEstrategiaIteracionAndOrdenEjecucion(
                            facEstrategiaIteracion,
                            nroFirmanteEnRevision
                    );
            facEstrategiaFirmaSgte.setActivo(Constants.SI);
            facEstrategiaFirmaSgte = this.facEstrategiaFirmaDeltaRepository.save(facEstrategiaFirmaSgte);
            //beanSalida.setFacEstrategiaFirma(facEstrategiaFirma);
        }


        /* insertando registro en facHistorial */
        String nombre = mtrUsuarioFacturacionFirmante.getNombres() + " " + mtrUsuarioFacturacionFirmante.getApellidos();
        FacHistorial facHistorial = new FacHistorial();
        facHistorial.setFacFactura(facFactura);
        facHistorial.setDescripcion(bean.getMotivoAprobacion());
        facHistorial.setMtrEstado(mtrEstado);
        facHistorial.setUsuarioHistorial(nombre);
        facHistorial.setFechaHistorial(DateUtils.obtenerFechaHoraActual());
        facHistorial = this.facHistorialDeltaRepository.save(facHistorial);
        beanSalida.setFacHistorial(facHistorial);

        /* Obteniendo los siguientes posibles firmantes */
        if (!terminoAprobacion) {
            FacEstrategiaFirma facEstrategiaFirmaSgte = this.facEstrategiaFirmaDeltaRepository.
                    getByFacEstrategiaIteracionAndOrdenEjecucion(
                            facEstrategiaIteracion,
                            nroFirmanteEnRevision
                    );
            MtrSector mtrSector = facEstrategiaFirmaSgte.getMtrSector();
            MtrTipoGerencia mtrTipoGerencia = facEstrategiaFirmaSgte.getMtrTipoGerencia();
            List<MtrUsuarioFacturacion> mtrUsuarioFacturacionListSgte = new ArrayList<MtrUsuarioFacturacion>();
            List<MtrUsuarioFacturacion> mtrUsuarioFacturacionListReemplazoSgte = new ArrayList<MtrUsuarioFacturacion>();
            if (Optional.ofNullable(mtrTipoGerencia).isPresent()) {
                mtrUsuarioFacturacionListSgte = this.mtrUsuarioFacturacionDeltaRepository
                        .devuelveUsuarioFirmanteTipoGerencia(mtrTipoGerencia.getId());
                mtrUsuarioFacturacionListReemplazoSgte = this.mtrReemplazoFacturacionDeltaRepository
                        .devuelveUsuarioFirmanteTipoGerencia(mtrTipoGerencia.getId());
                if (mtrUsuarioFacturacionListReemplazoSgte != null && mtrUsuarioFacturacionListReemplazoSgte.size() > 0) {
                    mtrUsuarioFacturacionListSgte.addAll(mtrUsuarioFacturacionListReemplazoSgte);
                }
            } else {
                mtrUsuarioFacturacionListSgte = this.mtrUsuarioFacturacionDeltaRepository
                        .devuelveUsuarioFirmanteSector(mtrSector.getId());
                mtrUsuarioFacturacionListReemplazoSgte = this.mtrReemplazoFacturacionDeltaRepository
                        .devuelveUsuarioFirmanteSector(mtrSector.getId());
                if (mtrUsuarioFacturacionListReemplazoSgte != null && mtrUsuarioFacturacionListReemplazoSgte.size() > 0) {
                    mtrUsuarioFacturacionListSgte.addAll(mtrUsuarioFacturacionListReemplazoSgte);
                }
            }
            beanSalida.setMtrUsuarioFacturacionFirmantePosiblesSgtes(mtrUsuarioFacturacionListSgte);
        }
        beanSalida.setFacFactura(facFactura);
        return beanSalida;
    }

    public FacFacturaAprobacionFirmanteSalidaDto aprobarFacturaFirmanteSinException(
            UserSession userSession,
            FacFacturaAprobacionFirmanteEntradaDto bean,
            MtrUsuarioFacturacion mtrUsuarioFacturacionFirmante) {
        try {
            FacFacturaAprobacionFirmanteSalidaDto result = this.aprobarFacturaFirmante(bean, userSession);
            return result;
        } catch (Exception e) {
            if (!Optional.ofNullable(bean.getMotivoAprobacion()).isPresent()) {
                String motivoAprobacion = "FACTURA Aprobada por el FIRMANTE";
                bean.setMotivoAprobacion(motivoAprobacion);
            }
            FacFacturaAprobacionFirmanteSalidaDto beanSalida = new FacFacturaAprobacionFirmanteSalidaDto();
            beanSalida.setMtrUsuarioFacturacionFirmante(mtrUsuarioFacturacionFirmante);
            beanSalida.setMotivoAprobacion(bean.getMotivoAprobacion());
            beanSalida.setExito(false);

            Optional<FacFactura> optionalFacFactura = this.facFacturaDeltaRepository.findById(bean.getFacFacturaId());
            if (!optionalFacFactura.isPresent()) {
                beanSalida.setMensajeError("No se encontró Factura con ID: " + bean.getFacFacturaId());
                return beanSalida;
            }
            FacFactura facFactura = optionalFacFactura.get();
            String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
            beanSalida.setMensajeError(error);
            beanSalida.setFacFactura(facFactura);
            return beanSalida;
        }
    }


    public void enviarEmailFacturaAprobacionFirmanteSgte(FacFacturaGrabarAprobador0SalidaDto bean) throws Exception {
        MailSetting setting = new MailSetting();
        setting.setEmailFrom(username);
        setting.setPassword(password);
        setting.setHost(host);
        setting.setNameFrom(username);
        setting.setPort(port);
        setting.setUser(username);

        FacFactura facFactura = bean.getFacFactura();
        facFactura = this.facFacturaDeltaRepository.getOne(facFactura.getId());
        MtrUsuarioFacturacion mtrUsuarioAprobador0 = bean.getMtrAprobador0();
        List<MtrUsuarioFacturacion> mtrUsuarioFacturacionSgteList = bean.getMtrUsuarioFacturacionFirmantePosiblesSgtes();
        log.error("Ingresando enviarEmailFacturaAprobacionFirmanteSgte 00 mtrUsuarioFacturacionSgteList size: " + mtrUsuarioFacturacionSgteList.size());
        if (mtrUsuarioFacturacionSgteList != null && mtrUsuarioFacturacionSgteList.size() > 0) {
            for (MtrUsuarioFacturacion beanSgte : mtrUsuarioFacturacionSgteList) {
                log.error("Ingresando enviarEmailFacturaAprobacionFirmanteSgte 01 mtrUsuarioAprobador0: " + mtrUsuarioAprobador0.toString());
                log.error("Ingresando enviarEmailFacturaAprobacionFirmanteSgte 01 beanSgte: " + beanSgte.toString());
                log.error("Ingresando enviarEmailFacturaAprobacionFirmanteSgte 01 facFactura: " + facFactura.toString());
                this.facturaAprobacionFirmanteNotificacion.enviarAprobador0(
                        setting,
                        mtrUsuarioAprobador0,
                        beanSgte,
                        facFactura.getMtrProveedor(),
                        "APROBACION FIRMANTE",
                        facFactura
                );
            }
        }
    }

    public void enviarEmailFacturaAprobacionFirmanteSgte(FacFacturaAprobacionFirmanteSalidaDto bean) throws Exception {
        MailSetting setting = new MailSetting();
        setting.setEmailFrom(username);
        setting.setPassword(password);
        setting.setHost(host);
        setting.setNameFrom(username);
        setting.setPort(port);
        setting.setUser(username);

        FacFactura facFactura = bean.getFacFactura();
        facFactura = this.facFacturaDeltaRepository.getOne(facFactura.getId());
        MtrUsuarioFacturacion mtrUsuarioFacturacionFirmante = bean.getMtrUsuarioFacturacionFirmante();
        List<MtrUsuarioFacturacion> mtrUsuarioFacturacionSgteList = bean.getMtrUsuarioFacturacionFirmantePosiblesSgtes();
        if (mtrUsuarioFacturacionSgteList != null && mtrUsuarioFacturacionSgteList.size() > 0) {
            for (MtrUsuarioFacturacion beanSgte : mtrUsuarioFacturacionSgteList) {

                this.facturaAprobacionFirmanteNotificacion.enviar(
                        setting,
                        mtrUsuarioFacturacionFirmante,
                        beanSgte,
                        facFactura.getMtrProveedor(),
                        bean.getMotivoAprobacion(),
                        facFactura
                );
            }
        }
    }


    public FacFacturaAprobacionFirmanteSalidaDto enviarEmailFacturaAprobacionFirmanteSgteSinException(FacFacturaAprobacionFirmanteSalidaDto bean) {
        try {
            bean.setExitoEnvioCorreo(false);
            if (bean.isExito()) {
                this.enviarEmailFacturaAprobacionFirmanteSgte(bean);
                bean.setExitoEnvioCorreo(true);
            }

        } catch (Exception e) {
            bean.setExitoEnvioCorreo(false);
            String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
            bean.setMensajeErrorCorreo(error);
        }
        return bean;
    }


    public List<FacFactura> findFacturaAprobarRechazarAprobador0() throws Exception {
        List<FacFactura> facFacturaList = new ArrayList<FacFactura>();
        UserSession userSession = this.systemLoggedUser.getUserSession();
        MtrUsuarioFacturacion mtrUsuarioFacturacionFirmante = this.mtrUsuarioFacturacionDeltaRepository.getByCodigoIdp(userSession.getId());
        if (!Optional.ofNullable(mtrUsuarioFacturacionFirmante).isPresent()) {
            return facFacturaList;
        }

        if (!Optional.ofNullable(mtrUsuarioFacturacionFirmante.getIndicadorUsuarioAprobador0()).isPresent()) {
            return facFacturaList;
        }
        if (!mtrUsuarioFacturacionFirmante.getIndicadorUsuarioAprobador0().equals(Constants.SI)) {
            return facFacturaList;
        }
        MtrEstado mtrEstado = this.mtrEstadoDeltaRepository.
                getByCodigoAgrupadoAndCodigoEstado(
                        Constants.CODIGO_AGRUPADO_FACTURA,
                        EstadoFacturaEnum.PRE_APROBACION.getEstado()
                );

        List<Integer> listaIdFacturaPendienteFirma = this.facFacturaDeltaRepository.
                devuelveIdFacturaPorEstado(mtrEstado.getId());
        if (listaIdFacturaPendienteFirma != null && listaIdFacturaPendienteFirma.size() > 0) {
            facFacturaList = this.facEstrategiaIteracionDeltaRepository.
                    findFacturaAprobarRechazarAprobador0(
                            listaIdFacturaPendienteFirma,
                            mtrUsuarioFacturacionFirmante.getId());
        }

        return facFacturaList;
    }

    private FacturaFirmanteExcelDto devuelveListaFirmanteActualExcel(FacFactura facFactura) throws Exception {
        Integer nroIteracion = facFactura.getNroIteracion();
        if (!Optional.ofNullable(nroIteracion).isPresent()) {
            return null;
        }
        MtrEstado mtrEstado = facFactura.getMtrEstado();
        boolean seguir = false;
        if (mtrEstado.getCodigoEstado().equals(EstadoFacturaEnum.PENDIENTE_FIRMA.getEstado()) ||
                mtrEstado.getCodigoEstado().equals(EstadoFacturaEnum.PRE_APROBACION.getEstado()) ||
                mtrEstado.getCodigoEstado().equals(EstadoFacturaEnum.PENDIENTE_PAGO.getEstado())) {
            seguir = true;
        }
        if (!seguir) {
            return null;
        }
        FacEstrategiaIteracion facEstrategiaIteracion =
                this.facEstrategiaIteracionDeltaRepository.getByFacturaNroIteracion(
                        facFactura.getId(),
                        nroIteracion
                );
        if (!Optional.ofNullable(facEstrategiaIteracion).isPresent()) {
            return null;
        }
        if (!Constants.APROBADO.equals(facEstrategiaIteracion.getIndAprobacionRechazoAprobador0())) {
            return null;
        }

        FacturaFirmanteExcelDto facturaFirmanteExcelDto = new FacturaFirmanteExcelDto();
        if (Constants.APROBADO.equals(facEstrategiaIteracion.getIndAprobacionRechazoFirma())) {
            facturaFirmanteExcelDto.setEstadoFirmante("APROBADO");
        } else if (Constants.EN_PROCESO.equals(facEstrategiaIteracion.getIndAprobacionRechazoFirma())) {
            facturaFirmanteExcelDto.setEstadoFirmante("EN PROCESO");
        } else if (Constants.RECHAZADO.equals(facEstrategiaIteracion.getIndAprobacionRechazoFirma())) {
            facturaFirmanteExcelDto.setEstadoFirmante("RECHAZADO");
        }
        facturaFirmanteExcelDto.setNroOrdenFirmanteActual(facEstrategiaIteracion.getNroFirmanteEnRevision());
        facturaFirmanteExcelDto.setNroOrdenFirmanteTotal(facEstrategiaIteracion.getNroFirmanteTotal());

        FacEstrategiaFirma facEstrategiaFirma = this.facEstrategiaFirmaDeltaRepository
                .getByFacEstrategiaIteracionAndOrdenEjecucion(
                        facEstrategiaIteracion,
                        facEstrategiaIteracion.getNroFirmanteEnRevision()
                );
        if (!Optional.ofNullable(facEstrategiaFirma).isPresent()) {
            return facturaFirmanteExcelDto;
        }
        String sector = facEstrategiaFirma.getMtrSector().getCodigoSector();
        facturaFirmanteExcelDto.setSectorActual(sector);

        List<MtrUsuarioFacturacion> mtrUsuarioFacturacionList = new ArrayList<MtrUsuarioFacturacion>();
        List<MtrUsuarioFacturacion> mtrUsuarioFacturacionListReemplazo = new ArrayList<MtrUsuarioFacturacion>();
        if (!Optional.ofNullable(facEstrategiaFirma.getMtrTipoGerencia()).isPresent()) {
            mtrUsuarioFacturacionList = this.mtrUsuarioFacturacionDeltaRepository.
                    devuelveUsuarioFirmanteSector(facEstrategiaFirma.getMtrSector().getId());
            mtrUsuarioFacturacionListReemplazo = this.mtrReemplazoFacturacionDeltaRepository.
                    devuelveUsuarioFirmanteSector(facEstrategiaFirma.getMtrSector().getId());
        } else {
            String tipoGerencia = facEstrategiaFirma.getMtrTipoGerencia().getDescripcion();
            facturaFirmanteExcelDto.setTipoGerencialActual(tipoGerencia);
            mtrUsuarioFacturacionList = this.mtrUsuarioFacturacionDeltaRepository.
                    devuelveUsuarioFirmanteTipoGerencia(
                            facEstrategiaFirma.getMtrTipoGerencia().getId()
                    );
            mtrUsuarioFacturacionListReemplazo = this.mtrReemplazoFacturacionDeltaRepository.
                    devuelveUsuarioFirmanteTipoGerencia(facEstrategiaFirma.getMtrTipoGerencia().getId());
        }
        if (mtrUsuarioFacturacionListReemplazo != null && mtrUsuarioFacturacionListReemplazo.size() > 0) {
            mtrUsuarioFacturacionList.addAll(mtrUsuarioFacturacionListReemplazo);
        }
        String listaFirmantes = "";
        if (mtrUsuarioFacturacionList != null && mtrUsuarioFacturacionList.size() > 0) {
            for (MtrUsuarioFacturacion beanUsuario : mtrUsuarioFacturacionList) {
                listaFirmantes += beanUsuario.getNombres() + " " + beanUsuario.getApellidos() + ", ";
            }

            listaFirmantes = listaFirmantes.trim();
        }
        facturaFirmanteExcelDto.setListaUsuariosFirmante(listaFirmantes);
        MtrUsuarioFacturacion mtrUsuarioFirmante = facEstrategiaFirma.getMtrUsuarioFacturacion();
        if (Optional.ofNullable(mtrUsuarioFirmante).isPresent()) {
            facturaFirmanteExcelDto.setFirmanteActual(mtrUsuarioFirmante.getNombres() + " " + mtrUsuarioFirmante.getApellidos());
        }
        return facturaFirmanteExcelDto;

    }

    public List<FacturaListaFirmantesDto> devuelveListaFirmantes(Integer facFacturaId) throws Exception {
        List<FacturaListaFirmantesDto> facturaListaFirmantesDtoList = new ArrayList<FacturaListaFirmantesDto>();
        Optional<FacFactura> optionalFacFactura = this.facFacturaDeltaRepository.findById(facFacturaId);
        if (!optionalFacFactura.isPresent()) {
            throw new Exception("No se encontró Factura con ID: " + facFacturaId);
        }
        FacFactura facFactura = optionalFacFactura.get();
        Integer nroIteracion = facFactura.getNroIteracion();

        FacEstrategiaIteracion facEstrategiaIteracion =
                this.facEstrategiaIteracionDeltaRepository.getByFacturaNroIteracion(
                        facFactura.getId(),
                        nroIteracion
                );
        if (!Optional.ofNullable(facEstrategiaIteracion).isPresent()) {
            return facturaListaFirmantesDtoList;
        }
        List<FacEstrategiaFirma> facEstrategiaFirmaList = this.facEstrategiaFirmaDeltaRepository.
                findByFacEstrategiaIteracionOrderByOrdenEjecucion(facEstrategiaIteracion);
        if (facEstrategiaFirmaList == null || facEstrategiaFirmaList.size() <= 0) {
            return facturaListaFirmantesDtoList;
        }

        for (FacEstrategiaFirma bean : facEstrategiaFirmaList) {
            FacturaListaFirmantesDto result = new FacturaListaFirmantesDto();
            result.setOrdenFirmante(bean.getOrdenEjecucion());
            result.setFirma("Firmante" + bean.getOrdenEjecucion());
            if (bean.getIndAprobacionRechazo().equals(Constants.APROBADO)) {
                result.setIndAprobacion(true);
            }
            if (bean.getIndAprobacionRechazo().equals(Constants.RECHAZADO)) {
                result.setIndRechazo(true);
            }
            result.setFacEstrategiaFirma(bean);
            if (Optional.ofNullable(bean.getMtrUsuarioFacturacion()).isPresent()) {
                result.setMtrUsuarioFacturacionFirmante(bean.getMtrUsuarioFacturacion());
            }
            List<MtrUsuarioFacturacion> mtrUsuarioFacturacionList = new ArrayList<MtrUsuarioFacturacion>();
            List<MtrUsuarioFacturacion> mtrUsuarioFacturacionListReemplazo = new ArrayList<MtrUsuarioFacturacion>();
            if (!Optional.ofNullable(bean.getMtrTipoGerencia()).isPresent()) {
                mtrUsuarioFacturacionList = this.mtrUsuarioFacturacionDeltaRepository.
                        devuelveUsuarioFirmanteSector(bean.getMtrSector().getId());
                mtrUsuarioFacturacionListReemplazo = this.mtrReemplazoFacturacionDeltaRepository.
                        devuelveUsuarioFirmanteSector(bean.getMtrSector().getId());
            } else {
                mtrUsuarioFacturacionList = this.mtrUsuarioFacturacionDeltaRepository.
                        devuelveUsuarioFirmanteTipoGerencia(
                                bean.getMtrTipoGerencia().getId()
                        );
                mtrUsuarioFacturacionListReemplazo = this.mtrReemplazoFacturacionDeltaRepository.
                        devuelveUsuarioFirmanteTipoGerencia(bean.getMtrTipoGerencia().getId());
            }
            if (mtrUsuarioFacturacionListReemplazo != null && mtrUsuarioFacturacionListReemplazo.size() > 0) {
                mtrUsuarioFacturacionList.addAll(mtrUsuarioFacturacionListReemplazo);
            }
            result.setMtrUsuarioFacturacionPosiblesFirmantes(mtrUsuarioFacturacionList);
            facturaListaFirmantesDtoList.add(result);
        }

        return facturaListaFirmantesDtoList;

    }


    public List<MtrUsuarioFirmanteEstrategiaDto> devuelveListaFirmantesEstrategia(Integer mtrEstrategiaId) throws Exception {
        List<MtrUsuarioFirmanteEstrategiaDto> resultList = new ArrayList<MtrUsuarioFirmanteEstrategiaDto>();
        Optional<MtrEstrategiaFacturacion> optionalEstrategia =
                this.mtrEstrategiaFacturacionDeltaRepository.findById(mtrEstrategiaId);
        if (!optionalEstrategia.isPresent()) {
            throw new Exception("No se encontró Estrategia con ID: " + mtrEstrategiaId);
        }
        MtrEstrategiaFacturacion mtrEstrategiaFacturacion = optionalEstrategia.get();

        List<MtrEstrategiaFacturacionFirma> mtrEstrategiaFacturacionFirmaList = this.mtrEstrategiaFacturacionFirmaDeltaRepository.
                findByMtrEstrategiaFacturacionOrderByOrdenEjecucion(mtrEstrategiaFacturacion);
        if (mtrEstrategiaFacturacionFirmaList == null || mtrEstrategiaFacturacionFirmaList.size() <= 0) {
            return resultList;
        }

        for (MtrEstrategiaFacturacionFirma bean : mtrEstrategiaFacturacionFirmaList) {
            MtrUsuarioFirmanteEstrategiaDto result = new MtrUsuarioFirmanteEstrategiaDto();
            result.setOrdenFirmante(bean.getOrdenEjecucion());
            result.setFirma("Firmante" + bean.getOrdenEjecucion());

            List<MtrUsuarioFacturacion> mtrUsuarioFacturacionList = new ArrayList<MtrUsuarioFacturacion>();
            List<MtrUsuarioFacturacion> mtrUsuarioFacturacionListReemplazo = new ArrayList<MtrUsuarioFacturacion>();
            if (!Optional.ofNullable(bean.getMtrTipoGerencia()).isPresent()) {
                mtrUsuarioFacturacionList = this.mtrUsuarioFacturacionDeltaRepository.
                        devuelveUsuarioFirmanteSector(bean.getMtrSector().getId());
                mtrUsuarioFacturacionListReemplazo = this.mtrReemplazoFacturacionDeltaRepository.
                        devuelveUsuarioFirmanteSector(bean.getMtrSector().getId());
            } else {
                mtrUsuarioFacturacionList = this.mtrUsuarioFacturacionDeltaRepository.
                        devuelveUsuarioFirmanteTipoGerencia(
                                bean.getMtrTipoGerencia().getId()
                        );
                mtrUsuarioFacturacionListReemplazo = this.mtrReemplazoFacturacionDeltaRepository.
                        devuelveUsuarioFirmanteTipoGerencia(bean.getMtrTipoGerencia().getId());
            }
            if (mtrUsuarioFacturacionListReemplazo != null && mtrUsuarioFacturacionListReemplazo.size() > 0) {
                mtrUsuarioFacturacionList.addAll(mtrUsuarioFacturacionListReemplazo);
            }
            result.setMtrUsuarioFacturacionPosiblesFirmantes(mtrUsuarioFacturacionList);
            resultList.add(result);
        }

        return resultList;

    }


    public List<FacFactura> findFacturaAprobarRechazarFirmante() throws Exception {
        List<FacFactura> facFacturaList = new ArrayList<FacFactura>();
        UserSession userSession = this.systemLoggedUser.getUserSession();
        MtrUsuarioFacturacion mtrUsuarioFacturacionFirmante = this.mtrUsuarioFacturacionDeltaRepository.getByCodigoIdp(userSession.getId());
        if (!Optional.ofNullable(mtrUsuarioFacturacionFirmante).isPresent()) {
            return facFacturaList;
        }

        MtrSector mtrSector = mtrUsuarioFacturacionFirmante.getMtrSector();
        if (!Optional.ofNullable(mtrSector).isPresent()) {
            return facFacturaList;
        }
        if (!Optional.ofNullable(mtrUsuarioFacturacionFirmante.getIndicadorUsuarioFirmante()).isPresent()) {
            return facFacturaList;
        }
        if (!mtrUsuarioFacturacionFirmante.getIndicadorUsuarioFirmante().equals(Constants.SI)) {
            return facFacturaList;
        }
        MtrTipoGerencia mtrTipoGerencia = mtrUsuarioFacturacionFirmante.getMtrTipoGerencia();
        MtrEstado mtrEstado = this.mtrEstadoDeltaRepository.
                getByCodigoAgrupadoAndCodigoEstado(
                        Constants.CODIGO_AGRUPADO_FACTURA,
                        EstadoFacturaEnum.PENDIENTE_FIRMA.getEstado()
                );

        List<Integer> listaIdFacturaPendienteFirma = this.facFacturaDeltaRepository.
                devuelveIdFacturaPorEstado(mtrEstado.getId());
        boolean esReemplazo = false;
        if (listaIdFacturaPendienteFirma != null && listaIdFacturaPendienteFirma.size() > 0) {
            if (Optional.ofNullable(mtrTipoGerencia).isPresent()) {
                facFacturaList = this.facEstrategiaFirmaDeltaRepository.
                        findFacturaPendientesFirmaTipoGerencia(
                                listaIdFacturaPendienteFirma,
                                mtrTipoGerencia.getId());
            } else {
                facFacturaList = this.facEstrategiaFirmaDeltaRepository.
                        findFacturaPendientesFirmaSector(
                                listaIdFacturaPendienteFirma,
                                mtrSector.getId());
            }

            List<MtrReemplazoFacturacion> mtrReemplazoFacturacionList =
                    this.mtrReemplazoFacturacionDeltaRepository.findByMtrUsuarioFacturacion(mtrUsuarioFacturacionFirmante);
            esReemplazo = false;
            if (mtrReemplazoFacturacionList != null && mtrReemplazoFacturacionList.size() > 0) {
                esReemplazo = true;
                for (MtrReemplazoFacturacion beanReemplazo : mtrReemplazoFacturacionList) {
                    List<FacFactura> facFacturaReempList = new ArrayList<FacFactura>();
                    if (Optional.ofNullable(beanReemplazo.getMtrTipoGerencia()).isPresent()) {
                        facFacturaReempList = this.facEstrategiaFirmaDeltaRepository.
                                findFacturaPendientesFirmaTipoGerencia(
                                        listaIdFacturaPendienteFirma,
                                        beanReemplazo.getMtrTipoGerencia().getId());
                    } else {
                        log.error("findFacturaAprobarRechazarFirmante reemplazo sector");
                        log.error("findFacturaAprobarRechazarFirmante reemplazo beanReemplazo: " + beanReemplazo.toString());
                        facFacturaReempList = this.facEstrategiaFirmaDeltaRepository.
                                findFacturaPendientesFirmaSector(
                                        listaIdFacturaPendienteFirma,
                                        beanReemplazo.getMtrSector().getId());
                        log.error("findFacturaAprobarRechazarFirmante reemplazo facFacturaReempList size: " + facFacturaReempList.size());

                    }
                    if (facFacturaReempList != null && facFacturaReempList.size() > 0) {
                        log.error("findFacturaAprobarRechazarFirmante reemplazo sector agrego!!");
                        facFacturaList.addAll(facFacturaReempList);
                    }
                }
            }
        }

        if (esReemplazo) {
            /* Eliminando las facturas duplicadas */
            List<FacFactura> listWithoutDuplicates = facFacturaList.stream()
                    .distinct()
                    .collect(Collectors.toList());
            return listWithoutDuplicates;
        } else {
            return facFacturaList;
        }

    }


    private List<FacDocumentoAdjunto> grabarListaAdjunto(
            FacFactura facFactura,
            String tipoAdjunto,
            List<FacDocumentoAdjunto> beanListaAdjuntoTotal) throws Exception {
        if (beanListaAdjuntoTotal == null || beanListaAdjuntoTotal.size() <= 0) {
            return null;
        }

        List<FacDocumentoAdjunto> beanListaAdjuntoRpta = new ArrayList<FacDocumentoAdjunto>();
        String nameFolder = "COGA-FACTURA-" + facFactura.getId();

        //Verificando si hay documentos nuevos SIN ID (Generados en el Temporal)
        List<FacDocumentoAdjunto> beanListaAdjunto = new ArrayList<FacDocumentoAdjunto>();
        for (FacDocumentoAdjunto bean : beanListaAdjuntoTotal) {
            if (!Optional.ofNullable(bean.getId()).isPresent()) {
                beanListaAdjunto.add(bean);
            } else {
                FacDocumentoAdjunto documento = new FacDocumentoAdjunto();
                documento.setCarpetaId(bean.getCarpetaId());
                documento.setArchivoId(bean.getArchivoId());
                documento.setArchivoNombre(bean.getArchivoNombre());
                documento.setRutaCatalogo(bean.getRutaCatalogo());
                documento.setArchivoTipo(bean.getArchivoTipo());
                documento.setSize(bean.getSize());
                documento.setTipoAdjunto(bean.getTipoAdjunto());
                documento.setFacFactura(bean.getFacFactura());
                documento = this.facDocumentoAdjuntoDeltaRepository.save(documento);
                beanListaAdjuntoRpta.add(documento);
            }
        }
        if (beanListaAdjunto == null || beanListaAdjunto.size() <= 0) {
            return beanListaAdjuntoRpta;
        }

        //Solo para documentos nuevos SIN ID (Generados en el Temporal)
        if (beanListaAdjunto != null && beanListaAdjunto.size() > 0) {
            String folderId = cmisService.createFolder(nameFolder);

            //Creo una segunda lista con los adjuntos no guardados -
            List<CmisFile> listAdjuntoNew = new ArrayList<CmisFile>();
            if (beanListaAdjunto.size() > 0) {
                beanListaAdjunto.forEach(item -> {
                    listAdjuntoNew.add(
                            new CmisFile(item.getArchivoId(), item.getArchivoNombre(), item.getRutaCatalogo(), item.getArchivoTipo()));
                });
            }
            log.error("grabarListaAdjunto 06 - listAdjuntoNew: size: " + listAdjuntoNew.size());
            log.error("grabarListaAdjunto 07 - listAdjuntoNew: " + listAdjuntoNew.toString());

            //Se mueven los adjuntos al folder destino y se obtiene la lista de los mismos con su nuevo URL
            Optional<List<CmisFile>> listAdjuntoMove = Optional.ofNullable(listAdjuntoNew)
                    .map(list -> {
                        log.error("grabarListaAdjunto 08 - Actualizando la version de los archivos catalogos");
                        return cmisService.updateFileAndMoveVerificar(listAdjuntoNew, folderId);
                    });
            if (Optional.ofNullable(listAdjuntoMove.get()).isPresent()) {
                for (CmisFile cmisFile : listAdjuntoMove.get()) {
                    FacDocumentoAdjunto documento = new FacDocumentoAdjunto();
                    documento.setCarpetaId(folderId);
                    documento.setArchivoId(cmisFile.getId());
                    documento.setArchivoNombre(cmisFile.getName());
                    documento.setRutaCatalogo(cmisFile.getUrl());
                    documento.setArchivoTipo(cmisFile.getType());
                    documento.setSize(cmisFile.getSize());
                    documento.setTipoAdjunto(tipoAdjunto);
                    documento.setFacFactura(facFactura);
                    documento = this.facDocumentoAdjuntoDeltaRepository.save(documento);
                    beanListaAdjuntoRpta.add(documento);
                }
            }
        }
        return beanListaAdjuntoRpta;
    }


    private List<FacDocumentoAdjunto> grabarListaAdjuntoCupa(
            MtrUsuarioFacturacion mtrUsuarioCupa,
            FacFactura facFactura,
            String tipoAdjunto,
            List<FacDocumentoAdjunto> beanListaAdjuntoTotal) throws Exception {
        if (beanListaAdjuntoTotal == null || beanListaAdjuntoTotal.size() <= 0) {
            return null;
        }

        List<FacDocumentoAdjunto> beanListaAdjuntoRpta = new ArrayList<FacDocumentoAdjunto>();
        String nameFolder = "COGA-FACTURA-" + facFactura.getId();

        //Verificando si hay documentos nuevos SIN ID (Generados en el Temporal)
        List<FacDocumentoAdjunto> beanListaAdjunto = new ArrayList<FacDocumentoAdjunto>();
        for (FacDocumentoAdjunto bean : beanListaAdjuntoTotal) {
            if (!Optional.ofNullable(bean.getId()).isPresent()) {
                /* Documentos nuevos */
                beanListaAdjunto.add(bean);
            } else {
                /* Documentos no modificados */
                FacDocumentoAdjunto documento = new FacDocumentoAdjunto();
                documento.setCarpetaId(bean.getCarpetaId());
                documento.setArchivoId(bean.getArchivoId());
                documento.setArchivoNombre(bean.getArchivoNombre());
                documento.setRutaCatalogo(bean.getRutaCatalogo());
                documento.setArchivoTipo(bean.getArchivoTipo());
                documento.setSize(bean.getSize());
                documento.setTipoAdjunto(bean.getTipoAdjunto());
                documento.setFacFactura(bean.getFacFactura());
                documento = this.facDocumentoAdjuntoDeltaRepository.save(documento);
                beanListaAdjuntoRpta.add(documento);
            }
        }
        if (beanListaAdjunto == null || beanListaAdjunto.size() <= 0) {
            return beanListaAdjuntoRpta;
        }

        //Solo para documentos nuevos SIN ID (Generados en el Temporal)
        if (beanListaAdjunto != null && beanListaAdjunto.size() > 0) {
            String folderId = cmisService.createFolder(nameFolder);

            //Creo una segunda lista con los adjuntos no guardados -
            List<CmisFile> listAdjuntoNew = new ArrayList<CmisFile>();
            if (beanListaAdjunto.size() > 0) {
                beanListaAdjunto.forEach(item -> {
                    listAdjuntoNew.add(
                            new CmisFile(item.getArchivoId(), item.getArchivoNombre(), item.getRutaCatalogo(), item.getArchivoTipo()));
                });
            }

            //Se mueven los adjuntos al folder destino y se obtiene la lista de los mismos con su nuevo URL
            Optional<List<CmisFile>> listAdjuntoMove = Optional.ofNullable(listAdjuntoNew)
                    .map(list -> {
                        return cmisService.updateFileAndMoveVerificar(listAdjuntoNew, folderId);
                    });
            if (Optional.ofNullable(listAdjuntoMove.get()).isPresent()) {
                for (CmisFile cmisFile : listAdjuntoMove.get()) {
                    FacDocumentoAdjunto documento = new FacDocumentoAdjunto();
                    documento.setCarpetaId(folderId);
                    documento.setArchivoId(cmisFile.getId());
                    documento.setArchivoNombre(cmisFile.getName());
                    documento.setRutaCatalogo(cmisFile.getUrl());
                    documento.setArchivoTipo(cmisFile.getType());
                    documento.setSize(cmisFile.getSize());
                    documento.setTipoAdjunto(tipoAdjunto);
                    documento.setFacFactura(facFactura);
                    documento.setMtrUsuarioCupa(mtrUsuarioCupa);
                    documento = this.facDocumentoAdjuntoDeltaRepository.save(documento);
                    beanListaAdjuntoRpta.add(documento);
                }
            }
        }
        return beanListaAdjuntoRpta;
    }

    private List<FacDocumentoAdjunto> grabarListaAdjuntoAprobador0(
            MtrUsuarioFacturacion mtrUsuarioAprobador0,
            FacFactura facFactura,
            String tipoAdjunto,
            List<FacDocumentoAdjunto> beanListaAdjuntoTotal) throws Exception {
        if (beanListaAdjuntoTotal == null || beanListaAdjuntoTotal.size() <= 0) {
            return null;
        }

        List<FacDocumentoAdjunto> beanListaAdjuntoRpta = new ArrayList<FacDocumentoAdjunto>();
        String nameFolder = "COGA-FACTURA-" + facFactura.getId();

        //Verificando si hay documentos nuevos SIN ID (Generados en el Temporal)
        List<FacDocumentoAdjunto> beanListaAdjunto = new ArrayList<FacDocumentoAdjunto>();
        for (FacDocumentoAdjunto bean : beanListaAdjuntoTotal) {
            if (!Optional.ofNullable(bean.getId()).isPresent()) {
                /* Documentos nuevos */
                beanListaAdjunto.add(bean);
            } else {
                /* Documentos no modificados */
                FacDocumentoAdjunto documento = new FacDocumentoAdjunto();
                documento.setCarpetaId(bean.getCarpetaId());
                documento.setArchivoId(bean.getArchivoId());
                documento.setArchivoNombre(bean.getArchivoNombre());
                documento.setRutaCatalogo(bean.getRutaCatalogo());
                documento.setArchivoTipo(bean.getArchivoTipo());
                documento.setSize(bean.getSize());
                documento.setTipoAdjunto(bean.getTipoAdjunto());
                documento.setFacFactura(bean.getFacFactura());
                documento = this.facDocumentoAdjuntoDeltaRepository.save(documento);
                beanListaAdjuntoRpta.add(documento);
            }
        }
        if (beanListaAdjunto == null || beanListaAdjunto.size() <= 0) {
            return beanListaAdjuntoRpta;
        }

        //Solo para documentos nuevos SIN ID (Generados en el Temporal)
        if (beanListaAdjunto != null && beanListaAdjunto.size() > 0) {
            String folderId = cmisService.createFolder(nameFolder);

            //Creo una segunda lista con los adjuntos no guardados -
            List<CmisFile> listAdjuntoNew = new ArrayList<CmisFile>();
            if (beanListaAdjunto.size() > 0) {
                beanListaAdjunto.forEach(item -> {
                    listAdjuntoNew.add(
                            new CmisFile(item.getArchivoId(), item.getArchivoNombre(), item.getRutaCatalogo(), item.getArchivoTipo()));
                });
            }

            //Se mueven los adjuntos al folder destino y se obtiene la lista de los mismos con su nuevo URL
            Optional<List<CmisFile>> listAdjuntoMove = Optional.ofNullable(listAdjuntoNew)
                    .map(list -> {
                        return cmisService.updateFileAndMoveVerificar(listAdjuntoNew, folderId);
                    });
            if (Optional.ofNullable(listAdjuntoMove.get()).isPresent()) {
                for (CmisFile cmisFile : listAdjuntoMove.get()) {
                    FacDocumentoAdjunto documento = new FacDocumentoAdjunto();
                    documento.setCarpetaId(folderId);
                    documento.setArchivoId(cmisFile.getId());
                    documento.setArchivoNombre(cmisFile.getName());
                    documento.setRutaCatalogo(cmisFile.getUrl());
                    documento.setArchivoTipo(cmisFile.getType());
                    documento.setSize(cmisFile.getSize());
                    documento.setTipoAdjunto(tipoAdjunto);
                    documento.setFacFactura(facFactura);
                    documento.setMtrUsuarioAprobador0(mtrUsuarioAprobador0);
                    documento = this.facDocumentoAdjuntoDeltaRepository.save(documento);
                    beanListaAdjuntoRpta.add(documento);
                }
            }
        }
        return beanListaAdjuntoRpta;
    }


    public PageResponse<FacFactura> findCondicionProveedorPaginated(
            FacFacturaResponse req,
            PageRequest pageRequest) throws Exception {
        UserSession userSession = this.systemLoggedUser.getUserSession();

        FacFactura facFactura = req.getBean();
        MtrProveedor mtrProveedor = this.mtrProveedorDeltaRepository.findByCodigoIdp(userSession.getId());
        if (!Optional.ofNullable(mtrProveedor).isPresent()) {
            throw new Exception("El Proveedor con código IDP: " + userSession.getId() + " no se encuentra registrado en la Tabla MtrProveedor o no esta asociado al IDP en dicha Tabla");
        }
        MtrProveedor mtrProveedorBuscar = new MtrProveedor();
        mtrProveedorBuscar.setId(mtrProveedor.getId());
        facFactura.setMtrProveedor(mtrProveedorBuscar);
        req.setBean(facFactura);
        PageResponse<FacFactura> pageResponse = this.findCondicionPaginated(req, pageRequest);
        return pageResponse;
    }

    public PageResponse<FacFactura> findCondicionProveedorRegistroPaginated(
            FacFacturaResponse req,
            PageRequest pageRequest) throws Exception {
        UserSession userSession = this.systemLoggedUser.getUserSession();

        FacFactura facFactura = req.getBean();
        MtrProveedor mtrProveedor = this.mtrProveedorDeltaRepository.findByCodigoIdp(userSession.getId());
        if (!Optional.ofNullable(mtrProveedor).isPresent()) {
            throw new Exception("El Proveedor con código IDP: " + userSession.getId() + " no se encuentra registrado en la Tabla MtrProveedor o no esta asociado al IDP en dicha Tabla");
        }
        MtrProveedor mtrProveedorBuscar = new MtrProveedor();
        mtrProveedorBuscar.setId(mtrProveedor.getId());
        facFactura.setMtrProveedor(mtrProveedorBuscar);


        MtrEstado mtrEstado = req.getBean().getMtrEstado();
        List<AppParametria> appParametriaList = this.appParametriaDeltaRepository.findByModuloAndStatus(
                AppParametriaModuloEnum.ESTADO_FACTURA_REGISTRADO.getEstado(),
                Constants.UNO
        );
        if (appParametriaList == null || appParametriaList.size() <= 0) {
            throw new Exception("Debe ingresar parametria de los Estados de Factura REGISTRADO (FAREGISTRADO)");
        }
        if (Optional.ofNullable(mtrEstado).isPresent()) {
            boolean encontro = false;
            for (AppParametria appParametria : appParametriaList) {
                String valor = appParametria.getValue2();
                MtrEstado mtrEstadoBean = this.mtrEstadoDeltaRepository.getByCodigoAgrupadoAndCodigoEstado(
                        Constants.CODIGO_AGRUPADO_FACTURA,
                        valor
                );
                if (mtrEstadoBean.getId() == mtrEstado.getId()) {
                    encontro = true;
                }
            }
            if (!encontro) {
                throw new Exception("El estado ingresado no corresponde con los Estados de Factura REGISTRADO");
            }
            facFactura.setMtrEstado(mtrEstado);
        } else {
            List<Integer> mtrEstadoList = new ArrayList<Integer>();
            if (appParametriaList != null && appParametriaList.size() > 0) {
                for (AppParametria appParametria : appParametriaList) {
                    String valor = appParametria.getValue2();
                    MtrEstado mtrEstadoBean = this.mtrEstadoDeltaRepository.getByCodigoAgrupadoAndCodigoEstado(
                            Constants.CODIGO_AGRUPADO_FACTURA,
                            valor
                    );
                    mtrEstadoList.add(mtrEstadoBean.getId());
                }
            }
            facFactura.setMtrEstadoLista(mtrEstadoList);
        }

        req.setBean(facFactura);
        PageResponse<FacFactura> pageResponse = this.findCondicionPaginated(req, pageRequest);
        return pageResponse;
    }


    public SXSSFWorkbook downloadExcelporFiltro(FacFactura facFactura) throws Exception {
        FacFacturaResponse facFacturaResponse = new FacFacturaResponse();
        facFacturaResponse.setBean(facFactura);
        if (Optional.ofNullable(facFactura.getNumeroFactura()).isPresent()) {
            facFacturaResponse.setNumeroFacturaCondicion(ConditionEnum.CONTIENE.getEstado());
        }
        if (Optional.ofNullable(facFactura.getNumeroFacturaSap()).isPresent()) {
            facFacturaResponse.setNumeroFacturaSapCondicion(ConditionEnum.CONTIENE.getEstado());
        }
        if (Optional.ofNullable(facFactura.getIndicadorConCertificado()).isPresent()) {
            facFacturaResponse.setIndicadorConCertificadoCondicion(ConditionEnum.IGUAL.getEstado());
        }

        List<FacFactura> facFacturaList = this.findCondicion(facFacturaResponse);

        SXSSFWorkbook book = new SXSSFWorkbook(100);
        XSSFWorkbook xbook = book.getXSSFWorkbook();
        SXSSFSheet sheet = book.createSheet();

        int numberOfSheets = book.getNumberOfSheets();
        book.setSheetName(numberOfSheets - 1, this.devuelveNombreSheet());
        int nroColumnas = ExcelDefault.createTitleAndWidth(
                xbook,
                sheet,
                this.CONFIG_TITLE_DETALLE,
                NAME_SHEET_DETALLE,
                null);

        sheet.untrackAllColumnsForAutoSizing();

        XSSFCellStyle cellStyle01 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 1), new Color(226, 239, 218), false, (short) 10);
        XSSFCellStyle cellStyle02 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 192), new Color(255, 255, 255), false, (short) 10);
        List<CellStyle> cellStyleList01 = ExcelDefault.generarCellStyle(xbook, cellStyle01);
        List<CellStyle> cellStyleList02 = ExcelDefault.generarCellStyle(xbook, cellStyle02);
        List<CellStyle> cellStyleList = cellStyleList01;
        boolean filaImpar = true;
        MtrTipoFirma mtrTipoFirmaA = this.mtrTipoFirmaDeltaRepository.getByCodigoTipoFirma("FA");
        for (FacFactura bean : facFacturaList) {
            int lastRow = sheet.getLastRowNum();
            int i = lastRow < 0 ? 0 : lastRow;
            Row dataRow = sheet.createRow(i + 1);
            int contador = 0;
            if (filaImpar) {
                cellStyleList = cellStyleList01;
            } else {
                cellStyleList = cellStyleList02;
            }
            filaImpar = !filaImpar;

            ExcelDefault.setValueCell(bean.getTipoFactura(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getSerieFactura(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getNumeroFactura(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getTipoComprobanteFactura(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;

            ExcelDefault.setValueCell(bean.getMtrSociedad().getDescripcion(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getMtrProveedor().getRazonSocial(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getMtrProveedor().getLifnr(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;

            String esProveedorExtranjero = bean.getMtrProveedor().getEsProveedorExtranjero();
            if (StringUtils.isBlank(esProveedorExtranjero)) {
                esProveedorExtranjero = Constants.N;
            }
            ExcelDefault.setValueCell(esProveedorExtranjero, dataRow.createCell(contador), "S", cellStyleList);
            contador++;

            ExcelDefault.setValueCell(bean.getIndicadorConCertificado(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;

            List<FacFacturaCertificado> facFacturaCertificadoList = this.facFacturaCertificadoDeltaRepository.findByFacturaId(bean.getId());
            if (facFacturaCertificadoList != null && facFacturaCertificadoList.size() > 0) {
                FacFacturaCertificado facFacturaCertificado = facFacturaCertificadoList.get(0);
                ExcelDefault.setValueCell(facFacturaCertificado.getCerCertificado().getCerNotaPedido().getCodigoNotaPedidoSap(), dataRow.createCell(contador), "S", cellStyleList);
                contador++;

                List<MtrAprobador> mtrAprobadorList = this.cerFirmaDeltaRepository.devuelveAprobadorByNotaPedidoAndTipoFirmaDescendente(
                        facFacturaCertificado.getCerCertificado().getCerNotaPedido().getId(),
                        mtrTipoFirmaA.getId()
                );
                if (mtrAprobadorList != null && mtrAprobadorList.size() > 0) {
                    MtrAprobador mtrAprobador = mtrAprobadorList.get(0);
                    ExcelDefault.setValueCell(mtrAprobador.getAprobadorSap(), dataRow.createCell(contador), "S", cellStyleList);
                    contador++;
                }

            } else {
                ExcelDefault.setValueCell(" ", dataRow.createCell(contador), "S", cellStyleList);
                contador++;
                ExcelDefault.setValueCell(" ", dataRow.createCell(contador), "S", cellStyleList);
                contador++;
            }

            List<FacHistorial> facHistorialList = this.facHistorialDeltaRepository.findByFacFacturaOrderByIdDesc(bean);
            if (facHistorialList != null && facHistorialList.size() > 0) {
                FacHistorial facHistorial = facHistorialList.get(0);
                ExcelDefault.setValueCell(facHistorial.getUsuarioHistorial(), dataRow.createCell(contador), "S", cellStyleList);
                contador++;
                ExcelDefault.setValueCell(facHistorial.getFechaHistorial(), dataRow.createCell(contador), "DT", cellStyleList);
                contador++;
                ExcelDefault.setValueCell(facHistorial.getMtrEstado().getDescripcion(), dataRow.createCell(contador), "S", cellStyleList);
                contador++;
            } else {
                ExcelDefault.setValueCell(" ", dataRow.createCell(contador), "S", cellStyleList);
                contador++;
                ExcelDefault.setValueCell(" ", dataRow.createCell(contador), "S", cellStyleList);
                contador++;
                ExcelDefault.setValueCell(" ", dataRow.createCell(contador), "S", cellStyleList);
                contador++;
            }

            if (Optional.ofNullable(bean.getMtrMoneda()).isPresent()) {
                ExcelDefault.setValueCell(bean.getMtrMoneda().getSigla(), dataRow.createCell(contador), "S", cellStyleList);
                contador++;
            } else {
                ExcelDefault.setValueCell(" ", dataRow.createCell(contador), "S", cellStyleList);
                contador++;
            }


            ExcelDefault.setValueCell(bean.getMonto(), dataRow.createCell(contador), "N", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getMontoOtrosCargos(), dataRow.createCell(contador), "N", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getMontoIgv(), dataRow.createCell(contador), "N", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getMontoFinal(), dataRow.createCell(contador), "N", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getFechaFactura(), dataRow.createCell(contador), "D", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getFechaEmision(), dataRow.createCell(contador), "D", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getFechaCreacion(), dataRow.createCell(contador), "D", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getExisteContrato(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getEstadoRetornoSunat(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;

            ExcelDefault.setValueCell(bean.getConcepto(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getFechaEstimadaPago(), dataRow.createCell(contador), "D", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getFechaPago(), dataRow.createCell(contador), "D", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getFechaAprobacion(), dataRow.createCell(contador), "D", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getMtrEstado().getDescripcion(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;

            FacEstrategiaIteracion facEstrategiaIteracion =
                    this.facEstrategiaIteracionDeltaRepository.getByFacturaNroIteracion(
                            bean.getId(),
                            bean.getNroIteracion()
                    );
            if (Optional.ofNullable(facEstrategiaIteracion).isPresent()) {
                if (Optional.ofNullable(facEstrategiaIteracion.getMtrUsuarioFacturacionCupa()).isPresent()) {
                    String usuarioCupa = facEstrategiaIteracion.getMtrUsuarioFacturacionCupa().getNombres() + " " +
                            facEstrategiaIteracion.getMtrUsuarioFacturacionCupa().getApellidos();
                    ExcelDefault.setValueCell(usuarioCupa, dataRow.createCell(contador), "S", cellStyleList);
                    contador++;
                } else {
                    ExcelDefault.setValueCell("", dataRow.createCell(contador), "S", cellStyleList);
                    contador++;
                }
                if (Optional.ofNullable(facEstrategiaIteracion.getMtrUsuarioFacturacionAprobador0()).isPresent()) {
                    String usuarioAprobador0 = facEstrategiaIteracion.getMtrUsuarioFacturacionAprobador0().getNombres() + " " +
                            facEstrategiaIteracion.getMtrUsuarioFacturacionAprobador0().getApellidos();
                    ExcelDefault.setValueCell(usuarioAprobador0, dataRow.createCell(contador), "S", cellStyleList);
                    contador++;
                } else {
                    ExcelDefault.setValueCell("", dataRow.createCell(contador), "S", cellStyleList);
                    contador++;
                }
            } else {
                ExcelDefault.setValueCell("", dataRow.createCell(contador), "S", cellStyleList);
                contador++;
                ExcelDefault.setValueCell("", dataRow.createCell(contador), "S", cellStyleList);
                contador++;
            }


            FacturaFirmanteExcelDto facturaFirmanteExcelDto = this.devuelveListaFirmanteActualExcel(bean);
            if (Optional.ofNullable(facturaFirmanteExcelDto).isPresent()) {

                ExcelDefault.setValueCell(facturaFirmanteExcelDto.getEstadoFirmante(), dataRow.createCell(contador), "S", cellStyleList);
                contador++;
                ExcelDefault.setValueCell(facturaFirmanteExcelDto.getNroOrdenFirmanteTotal(), dataRow.createCell(contador), "I", cellStyleList);
                contador++;
                ExcelDefault.setValueCell(facturaFirmanteExcelDto.getNroOrdenFirmanteActual(), dataRow.createCell(contador), "I", cellStyleList);
                contador++;
                ExcelDefault.setValueCell(facturaFirmanteExcelDto.getSectorActual(), dataRow.createCell(contador), "S", cellStyleList);
                contador++;
                ExcelDefault.setValueCell(facturaFirmanteExcelDto.getTipoGerencialActual(), dataRow.createCell(contador), "S", cellStyleList);
                contador++;
                ExcelDefault.setValueCell(facturaFirmanteExcelDto.getListaUsuariosFirmante(), dataRow.createCell(contador), "S", cellStyleList);
                contador++;
                ExcelDefault.setValueCell(facturaFirmanteExcelDto.getFirmanteActual(), dataRow.createCell(contador), "S", cellStyleList);
                contador++;
            } else {

                ExcelDefault.setValueCell("", dataRow.createCell(contador), "S", cellStyleList);
                contador++;
                ExcelDefault.setValueCell("", dataRow.createCell(contador), "S", cellStyleList);
                contador++;
                ExcelDefault.setValueCell("", dataRow.createCell(contador), "S", cellStyleList);
                contador++;
                ExcelDefault.setValueCell("", dataRow.createCell(contador), "S", cellStyleList);
                contador++;
                ExcelDefault.setValueCell("", dataRow.createCell(contador), "S", cellStyleList);
                contador++;
                ExcelDefault.setValueCell("", dataRow.createCell(contador), "S", cellStyleList);
                contador++;
                ExcelDefault.setValueCell("", dataRow.createCell(contador), "S", cellStyleList);
                contador++;
            }

            if (Optional.ofNullable(bean.getAnioFacturaSap()).isPresent() && Optional.ofNullable(bean.getNumeroFacturaSap()).isPresent()) {
                ExcelDefault.setValueCell(bean.getAnioFacturaSap() + "-" + bean.getNumeroFacturaSap(), dataRow.createCell(contador), "S", cellStyleList);
                contador++;
            } else {
                ExcelDefault.setValueCell(" ", dataRow.createCell(contador), "S", cellStyleList);
                contador++;
            }
            ExcelDefault.setValueCell(bean.getGlosa(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
        }
        return book;

    }


    public PageResponse<FacFactura> findCondicionProveedorPublicacionPaginated(
            FacFacturaResponse req,
            PageRequest pageRequest) throws Exception {
        UserSession userSession = this.systemLoggedUser.getUserSession();

        FacFactura facFactura = req.getBean();
        MtrProveedor mtrProveedor = this.mtrProveedorDeltaRepository.findByCodigoIdp(userSession.getId());
        if (!Optional.ofNullable(mtrProveedor).isPresent()) {
            throw new Exception("El Proveedor con código IDP: " + userSession.getId() + " no se encuentra registrado en la Tabla MtrProveedor o no esta asociado al IDP en dicha Tabla");
        }
        MtrProveedor mtrProveedorBuscar = new MtrProveedor();
        mtrProveedorBuscar.setId(mtrProveedor.getId());
        facFactura.setMtrProveedor(mtrProveedorBuscar);


        MtrEstado mtrEstado = req.getBean().getMtrEstado();
        List<AppParametria> appParametriaList = this.appParametriaDeltaRepository.findByModuloAndStatus(
                AppParametriaModuloEnum.ESTADO_FACTURA_PUBLICADO.getEstado(),
                Constants.UNO
        );
        if (appParametriaList == null || appParametriaList.size() <= 0) {
            throw new Exception("Debe ingresar parametria de los Estados de Factura PUBLICADO (FAPUBLICADO)");
        }
        if (Optional.ofNullable(mtrEstado).isPresent()) {
            boolean encontro = false;
            for (AppParametria appParametria : appParametriaList) {
                String valor = appParametria.getValue2();
                MtrEstado mtrEstadoBean = this.mtrEstadoDeltaRepository.getByCodigoAgrupadoAndCodigoEstado(
                        Constants.CODIGO_AGRUPADO_FACTURA,
                        valor
                );
                if (mtrEstadoBean.getId() == mtrEstado.getId()) {
                    encontro = true;
                }
            }
            if (!encontro) {
                throw new Exception("El estado ingresado no corresponde con los Estados de Factura PUBLICADO");
            }
            facFactura.setMtrEstado(mtrEstado);
        } else {
            List<Integer> mtrEstadoList = new ArrayList<Integer>();
            if (appParametriaList != null && appParametriaList.size() > 0) {
                for (AppParametria appParametria : appParametriaList) {
                    String valor = appParametria.getValue2();
                    MtrEstado mtrEstadoBean = this.mtrEstadoDeltaRepository.getByCodigoAgrupadoAndCodigoEstado(
                            Constants.CODIGO_AGRUPADO_FACTURA,
                            valor
                    );
                    mtrEstadoList.add(mtrEstadoBean.getId());
                }
            }
            facFactura.setMtrEstadoLista(mtrEstadoList);
        }

        req.setBean(facFactura);
        PageResponse<FacFactura> pageResponse = this.findCondicionPaginated(req, pageRequest);
        return pageResponse;
    }

    public PageResponse<FacFactura> findCondicionPublicacionPaginated(
            FacFacturaResponse req,
            PageRequest pageRequest) throws Exception {

        FacFactura facFactura = req.getBean();

        MtrEstado mtrEstado = req.getBean().getMtrEstado();
        List<AppParametria> appParametriaList = this.appParametriaDeltaRepository.findByModuloAndStatus(
                AppParametriaModuloEnum.ESTADO_FACTURA_PUBLICADO.getEstado(),
                Constants.UNO
        );
        if (appParametriaList == null || appParametriaList.size() <= 0) {
            throw new Exception("Debe ingresar parametria de los Estados de Factura PUBLICADO (FAPUBLICADO)");
        }
        if (Optional.ofNullable(mtrEstado).isPresent()) {
            boolean encontro = false;
            for (AppParametria appParametria : appParametriaList) {
                String valor = appParametria.getValue2();
                MtrEstado mtrEstadoBean = this.mtrEstadoDeltaRepository.getByCodigoAgrupadoAndCodigoEstado(
                        Constants.CODIGO_AGRUPADO_FACTURA,
                        valor
                );
                if (mtrEstadoBean.getId() == mtrEstado.getId()) {
                    encontro = true;
                }
            }
            if (!encontro) {
                throw new Exception("El estado ingresado no corresponde con los Estados de Factura PUBLICADO");
            }
            facFactura.setMtrEstado(mtrEstado);
        } else {
            List<Integer> mtrEstadoList = new ArrayList<Integer>();
            if (appParametriaList != null && appParametriaList.size() > 0) {
                for (AppParametria appParametria : appParametriaList) {
                    String valor = appParametria.getValue2();
                    MtrEstado mtrEstadoBean = this.mtrEstadoDeltaRepository.getByCodigoAgrupadoAndCodigoEstado(
                            Constants.CODIGO_AGRUPADO_FACTURA,
                            valor
                    );
                    mtrEstadoList.add(mtrEstadoBean.getId());
                }
            }
            facFactura.setMtrEstadoLista(mtrEstadoList);
        }

        req.setBean(facFactura);
        PageResponse<FacFactura> pageResponse = this.findCondicionPaginated(req, pageRequest);
        return pageResponse;
    }

    public PageResponse<FacFacturaAndAdjuntoFacFactuDto> findCondicionPublicacionConAdjuntoPaginated(
            FacFacturaResponse req,
            PageRequest pageRequest) throws Exception {

        FacFactura facFactura = req.getBean();

        MtrEstado mtrEstado = req.getBean().getMtrEstado();
        List<AppParametria> appParametriaList = this.appParametriaDeltaRepository.findByModuloAndStatus(
                AppParametriaModuloEnum.ESTADO_FACTURA_PUBLICADO.getEstado(),
                Constants.UNO
        );
        if (appParametriaList == null || appParametriaList.size() <= 0) {
            throw new Exception("Debe ingresar parametria de los Estados de Factura PUBLICADO (FAPUBLICADO)");
        }
        if (Optional.ofNullable(mtrEstado).isPresent()) {
            boolean encontro = false;
            for (AppParametria appParametria : appParametriaList) {
                String valor = appParametria.getValue2();
                MtrEstado mtrEstadoBean = this.mtrEstadoDeltaRepository.getByCodigoAgrupadoAndCodigoEstado(
                        Constants.CODIGO_AGRUPADO_FACTURA,
                        valor
                );
                if (mtrEstadoBean.getId() == mtrEstado.getId()) {
                    encontro = true;
                }
            }
            if (!encontro) {
                throw new Exception("El estado ingresado no corresponde con los Estados de Factura PUBLICADO");
            }
            facFactura.setMtrEstado(mtrEstado);
        } else {
            List<Integer> mtrEstadoList = new ArrayList<Integer>();
            if (appParametriaList != null && appParametriaList.size() > 0) {
                for (AppParametria appParametria : appParametriaList) {
                    String valor = appParametria.getValue2();
                    MtrEstado mtrEstadoBean = this.mtrEstadoDeltaRepository.getByCodigoAgrupadoAndCodigoEstado(
                            Constants.CODIGO_AGRUPADO_FACTURA,
                            valor
                    );
                    mtrEstadoList.add(mtrEstadoBean.getId());
                }
            }
            facFactura.setMtrEstadoLista(mtrEstadoList);
        }

        req.setBean(facFactura);
        PageResponse<FacFactura> pageResponse = this.findCondicionPaginated(req, pageRequest);

        List<FacFacturaAndAdjuntoFacFactuDto> facFacturaListResult = new ArrayList<FacFacturaAndAdjuntoFacFactuDto>();
        PageResponse<FacFacturaAndAdjuntoFacFactuDto> pageResponseResult = new PageResponse<FacFacturaAndAdjuntoFacFactuDto>(
                pageResponse.totalPages,
                pageResponse.totalElements,
                facFacturaListResult
        );
        if (Optional.ofNullable(pageResponse).isPresent()) {
            List<FacFactura> facFacturaList = pageResponse.content;
            if (facFacturaList != null && facFacturaList.size() > 0) {
                for (FacFactura beanFactura : facFacturaList) {
                    FacFacturaAndAdjuntoFacFactuDto facFacturaAndAdjuntoFacFactuDto = new FacFacturaAndAdjuntoFacFactuDto();
                    facFacturaAndAdjuntoFacFactuDto.setFacFactura(beanFactura);
                    FacFactura beanFacturaBuscar = new FacFactura();
                    beanFacturaBuscar.setId(beanFactura.getId());
                    List<FacDocumentoAdjunto> facDocumentoAdjuntoList =
                            this.facDocumentoAdjuntoDeltaRepository.findByFacFacturaAndTipoAdjunto(
                                    beanFacturaBuscar,
                                    TipoFacturaAdjuntoEnum.FAC_FACTU.getEstado());
                    if (facDocumentoAdjuntoList != null && facDocumentoAdjuntoList.size() > 0) {
                        facFacturaAndAdjuntoFacFactuDto.setFacDocumentoAdjunto(facDocumentoAdjuntoList.get(0));
                    }
                    facFacturaListResult.add(facFacturaAndAdjuntoFacFactuDto);
                }

                pageResponseResult = new PageResponse<FacFacturaAndAdjuntoFacFactuDto>(
                        pageResponse.totalPages,
                        pageResponse.totalElements,
                        facFacturaListResult
                );
            }


        }
        return pageResponseResult;
    }


    public PageResponse<FacFactura> findCondicionCupaPaginated(
            FacFacturaResponse req,
            PageRequest pageRequest) throws Exception {
        UserSession userSession = this.systemLoggedUser.getUserSession();

        FacFactura facFactura = req.getBean();

        MtrEstado mtrEstado = req.getBean().getMtrEstado();
        List<AppParametria> appParametriaList = this.appParametriaDeltaRepository.findByModuloAndStatus(
                AppParametriaModuloEnum.ESTADO_FACTURA_CUPA.getEstado(),
                Constants.UNO
        );
        if (appParametriaList == null || appParametriaList.size() <= 0) {
            throw new Exception("Debe ingresar parametria de los Estados de Factura CUPA");
        }
        if (Optional.ofNullable(mtrEstado).isPresent()) {
            boolean encontro = false;
            for (AppParametria appParametria : appParametriaList) {
                String valor = appParametria.getValue2();
                MtrEstado mtrEstadoBean = this.mtrEstadoDeltaRepository.getByCodigoAgrupadoAndCodigoEstado(
                        Constants.CODIGO_AGRUPADO_FACTURA,
                        valor
                );
                if (mtrEstadoBean.getId() == mtrEstado.getId()) {
                    encontro = true;
                }
            }
            if (!encontro) {
                throw new Exception("El estado ingresado no corresponde con los Estados de Factura CUPA");
            }
            facFactura.setMtrEstado(mtrEstado);
        } else {
            List<Integer> mtrEstadoList = new ArrayList<Integer>();
            if (appParametriaList != null && appParametriaList.size() > 0) {
                for (AppParametria appParametria : appParametriaList) {
                    String valor = appParametria.getValue2();
                    MtrEstado mtrEstadoBean = this.mtrEstadoDeltaRepository.getByCodigoAgrupadoAndCodigoEstado(
                            Constants.CODIGO_AGRUPADO_FACTURA,
                            valor
                    );
                    mtrEstadoList.add(mtrEstadoBean.getId());
                }
            }
            facFactura.setMtrEstadoLista(mtrEstadoList);
        }


        req.setBean(facFactura);
        PageResponse<FacFactura> pageResponse = this.findCondicionPaginated(req, pageRequest);
        return pageResponse;
    }

    public PageResponse<FacFactura> findCondicionValidacionAdjuntosPaginated(
            FacFacturaResponse req,
            PageRequest pageRequest) throws Exception {

        FacFactura facFactura = req.getBean();
        MtrEstado mtrEstado = req.getBean().getMtrEstado();

        if (Optional.ofNullable(mtrEstado).isPresent()) {
            mtrEstado = this.mtrEstadoDeltaRepository.getOne(mtrEstado.getId());
            if (mtrEstado.getCodigoEstado().equals(EstadoFacturaEnum.RECHAZADO_CUPA.getEstado())) {
                throw new Exception("No se pueden visualizar Facturas en estado RECHAZADO CUPA");
            }
            facFactura.setMtrEstado(mtrEstado);
        } else {
            List<Integer> mtrEstadoList = this.mtrEstadoDeltaRepository.
                    getIdByCodeGrupoAndNotCodeEstado(
                            Constants.CODIGO_AGRUPADO_FACTURA,
                            EstadoFacturaEnum.RECHAZADO_CUPA.getEstado()
                    );
            facFactura.setMtrEstadoLista(mtrEstadoList);
        }
        req.setBean(facFactura);
        PageResponse<FacFactura> pageResponse = this.findCondicionPaginated(req, pageRequest);
        return pageResponse;
    }


    public List<FacFactura> findProveedor(FacFactura bean) throws Exception {
        UserSession userSession = this.systemLoggedUser.getUserSession();
        MtrProveedor mtrProveedor = this.mtrProveedorDeltaRepository.findByCodigoIdp(userSession.getId());
        if (!Optional.ofNullable(mtrProveedor).isPresent()) {
            throw new Exception("El Proveedor con código IDP: " + userSession.getId() + " no se encuentra registrado en la Tabla MtrProveedor o no esta asociado al IDP en dicha Tabla");
        }
        bean.setMtrProveedor(mtrProveedor);
        return this.find(bean);
    }

    public List<FacFactura> findCondicionProveedor(FacFacturaResponse bean) throws Exception {
        UserSession userSession = this.systemLoggedUser.getUserSession();
        MtrProveedor mtrProveedor = this.mtrProveedorDeltaRepository.findByCodigoIdp(userSession.getId());
        if (!Optional.ofNullable(mtrProveedor).isPresent()) {
            throw new Exception("El Proveedor con código IDP: " + userSession.getId() + " no se encuentra registrado en la Tabla MtrProveedor o no esta asociado al IDP en dicha Tabla");
        }
        FacFactura facFactura = bean.getBean();
        MtrProveedor mtrProveedorBuscar = new MtrProveedor();
        mtrProveedorBuscar.setId(mtrProveedor.getId());
        facFactura.setMtrProveedor(mtrProveedorBuscar);
        bean.setBean(facFactura);
        List<FacFactura> facFacturaList = this.findCondicionProveedor(bean);
        return facFacturaList;
    }


    public FacDocumentoAdjunto facturaAdjunto(MultipartFile file, String tipo) throws Exception {
        log.error("facturaAdjunto 00 file: " + file.toString());
        UserSession user = this.systemLoggedUser.getUserSession();
        Long current = System.currentTimeMillis();
        int valorCurrent = Math.abs(current.intValue());

        MtrProveedor mtrProveedor = this.mtrProveedorDeltaRepository.findByCodigoIdp(user.getId());
        if (!Optional.ofNullable(mtrProveedor).isPresent()) {
            throw new Exception("No se encontró Proveedor con Código IDP: " + user.getId());
        }

        log.info("RUC proveedor : " + mtrProveedor.getRuc());
        String TEMP_DIRECTORY = "COGA-TEMP-" + mtrProveedor.getRuc();
        String folderId = cmisService.createFolder(TEMP_DIRECTORY);
        log.debug("facturaAdjunto 01 ---> folderId  [" + folderId + " ]");

        CmisFile cmisFile = cmisService.createOrReplaceDocumento(folderId, file);

        log.error("facturaAdjunto 02 ---> cmisFile  [" + cmisFile.toString() + " ]");
        FacDocumentoAdjunto facDocumentoAdjunto = new FacDocumentoAdjunto();
        facDocumentoAdjunto.setId(valorCurrent);
        facDocumentoAdjunto.setCarpetaId(folderId);
        facDocumentoAdjunto.setArchivoId(cmisFile.getId());
        facDocumentoAdjunto.setArchivoNombre(cmisFile.getName());
        facDocumentoAdjunto.setRutaCatalogo(cmisFile.getUrl());
        facDocumentoAdjunto.setArchivoTipo(cmisFile.getType());
        facDocumentoAdjunto.setSize(cmisFile.getSize());
        facDocumentoAdjunto.setTipoAdjunto(tipo);

        log.error("facturaAdjunto 03 [" + file.getName() + " , " +
                file.getSize() + " temp directory " + TEMP_DIRECTORY + " ]");
        return facDocumentoAdjunto;
    }


    public List deleteAllFilesCMIS() {
        List<CmisFile> adjuntosDeleteCmisFile = new ArrayList<CmisFile>();
        /*UserSession user = this.systemLoggedUser.getUserSession();
        String newFolder = "COGA-TEMP-" + user.getRuc()+"-"+createTempDate();
        cmisService.getListFileByFolderId("newFolder").stream().forEach(e -> {
            cmisService.deleteFile(e.getId());
            adjuntosDeleteCmisFile.add(e);
        });*/
        return adjuntosDeleteCmisFile;
    }

    public List deleteOneFile(String idFile) throws Exception {
        List<String> deleteCmisFile = new ArrayList<String>();
        cmisService.deleteFile(idFile);
        deleteCmisFile.add("Delete file id " + idFile);
        return deleteCmisFile;
    }


    /**
     * Listar document of Factura
     */
    public List listaAdjuntos(Integer FacturaID) {
        FacDocumentoAdjunto facDocumentoAdjunto = new FacDocumentoAdjunto();
        facDocumentoAdjunto.setFacFactura(this.facFacturaDeltaRepository.getOne(FacturaID));
        return find(facDocumentoAdjunto.getFacFactura());
    }

    private String createTempDate() {
        SimpleDateFormat formatterDate = new SimpleDateFormat("HH:mm:ss", Locale.ENGLISH);
        return formatterDate.format(new Date());
    }


    /***********************/
    /* Metodos de Busqueda */

    /***********************/

    protected Sort setFindAll(Sort sort) {
        sort = Sort.by(

                new Sort.Order(Sort.Direction.DESC, "fechaFactura"),
                new Sort.Order(Sort.Direction.ASC, "serieFactura"),
                new Sort.Order(Sort.Direction.ASC, "numeroFactura"),
                new Sort.Order(Sort.Direction.DESC, "mtrProveedor.razonSocial")
        );
        return sort;
    }

    protected Sort setFind(FacFactura req, ExampleMatcher matcher, Example<FacFactura> example, Sort sort) {
        sort = Sort.by(
                new Sort.Order(Sort.Direction.DESC, "fechaFactura"),
                new Sort.Order(Sort.Direction.ASC, "serieFactura"),
                new Sort.Order(Sort.Direction.ASC, "numeroFactura"),
                new Sort.Order(Sort.Direction.DESC, "mtrProveedor.razonSocial")
        );
        return sort;
    }

    protected void setFindPaginated(PageRequestByExample<FacFactura> req, ExampleMatcher matcher, Example<FacFactura> example) {
        return;
    }

    protected Sort setFindCondicion(Sort sort) {
        sort = Sort.by(
                new Sort.Order(Sort.Direction.DESC, "fechaFactura"),
                new Sort.Order(Sort.Direction.ASC, "serieFactura"),
                new Sort.Order(Sort.Direction.ASC, "numeroFactura"),
                new Sort.Order(Sort.Direction.DESC, "mtrProveedor.razonSocial")
        );
        return sort;
    }


    protected List<Predicate> setAdicionalDeltaPredicate(
            List<Predicate> predicates,
            FacFacturaResponse bean,
            CriteriaBuilder cb,
            CriteriaQuery<FacFactura> query,
            Root<FacFactura> root) throws Exception {
        FacFactura entity = bean.getBean();
        String esProveedorExtranjero = entity.getEsProveedorExtranjero();
        List<String> listaCodigoAcreedor = entity.getListaCodigoAcreedor();
        boolean buscarProveedorExtranjero = false;
        boolean buscarProveedorListaAcreedor = false;

        if (StringUtils.isNotBlank(esProveedorExtranjero) && esProveedorExtranjero.equals(Constants.S)) {
            buscarProveedorExtranjero = true;
        }

        if (listaCodigoAcreedor != null && listaCodigoAcreedor.size() > 0) {
            buscarProveedorListaAcreedor = true;
        }

        if (Optional.ofNullable(entity.getMtrProveedor()).isPresent() || buscarProveedorExtranjero || buscarProveedorListaAcreedor) {
            Join<FacFactura, MtrProveedor> fromMtrProveedor = root.join("mtrProveedor", JoinType.INNER);

            if (Optional.ofNullable(entity.getMtrProveedor()).isPresent()) {
                if (Optional.ofNullable(entity.getMtrProveedor().getId()).isPresent()) {
                    Predicate thirdCondition = cb.equal(fromMtrProveedor.get("id"), entity.getMtrProveedor().getId());
                    predicates.add(thirdCondition);
                }
                if (Optional.ofNullable(entity.getMtrProveedor().getRuc()).isPresent()) {
                    Predicate thirdCondition = cb.like(cb.upper(fromMtrProveedor.get("ruc")), "%" + entity.getMtrProveedor().getRuc().toUpperCase().trim() + "%");
                    // Predicate thirdCondition = cb.equal(cb.upper(fromMtrProveedor.get("ruc")), entity.getMtrProveedor().getRuc());
                    predicates.add(thirdCondition);
                }
                if (Optional.ofNullable(entity.getMtrProveedor().getRazonSocial()).isPresent()) {
                    Predicate thirdCondition = cb.like(cb.upper(fromMtrProveedor.get("razonSocial")), "%" + entity.getMtrProveedor().getRazonSocial().toUpperCase().trim() + "%");
                    predicates.add(thirdCondition);
                }
            }

            if (buscarProveedorExtranjero) {
                Predicate thirdCondition = cb.equal(fromMtrProveedor.get("esProveedorExtranjero"), esProveedorExtranjero);
                predicates.add(thirdCondition);
            }
            if (buscarProveedorListaAcreedor) {
                Predicate thirdCondition = cb.in(fromMtrProveedor.get("lifnr")).value(entity.getListaCodigoAcreedor());
                predicates.add(thirdCondition);
            }
        }
        if (Optional.ofNullable(entity.getMtrEstado()).isPresent()) {
            Join<FacFactura, MtrEstado> fromMtrEstado = root.join("mtrEstado", JoinType.INNER);
            if (Optional.ofNullable(entity.getMtrEstado().getId()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtrEstado.get("id"), entity.getMtrEstado().getId());
                predicates.add(thirdCondition);
            }
            if (Optional.ofNullable(entity.getMtrEstado().getCodigoAgrupado()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtrEstado.get("codigoAgrupado"), entity.getMtrEstado().getCodigoAgrupado());
                predicates.add(thirdCondition);
            }
            if (Optional.ofNullable(entity.getMtrEstado().getCodigoEstado()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtrEstado.get("codigoEstado"), entity.getMtrEstado().getCodigoEstado());
                predicates.add(thirdCondition);
            }
        }
        if (entity.getMtrEstadoLista() != null && entity.getMtrEstadoLista().size() > 0) {
            Join<FacFactura, MtrEstado> fromMtrEstado = root.join("mtrEstado", JoinType.INNER);
            Predicate thirdCondition = cb.in(fromMtrEstado.get("id")).value(entity.getMtrEstadoLista());
            predicates.add(thirdCondition);
        }
        if (Optional.ofNullable(entity.getMtrMoneda()).isPresent()) {
            Join<CerCertificado, MtrMoneda> fromMtr = root.join("mtrMoneda", JoinType.INNER);
            if (Optional.ofNullable(entity.getMtrMoneda().getId()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtr.get("id"), entity.getMtrMoneda().getId());
                predicates.add(thirdCondition);
            }
            if (Optional.ofNullable(entity.getMtrMoneda().getSigla()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtr.get("sigla"), entity.getMtrMoneda().getSigla());
                predicates.add(thirdCondition);
            }
            if (Optional.ofNullable(entity.getMtrMoneda().getMonedaDescrip()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtr.get("monedaDescrip"), entity.getMtrMoneda().getMonedaDescrip());
                predicates.add(thirdCondition);
            }
        }

        if (Optional.ofNullable(entity.getMtrDetraccion()).isPresent()) {
            Join<FacFactura, MtrDetraccion> fromMtrDetraccion = root.join("mtrDetraccion", JoinType.LEFT);
            if (Optional.ofNullable(entity.getMtrDetraccion().getId()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtrDetraccion.get("id"), entity.getMtrDetraccion().getId());
                predicates.add(thirdCondition);
            }
            if (Optional.ofNullable(entity.getMtrDetraccion().getCodigo()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtrDetraccion.get("codigo"), entity.getMtrDetraccion().getCodigo());
                predicates.add(thirdCondition);
            }
        }
        if (Optional.ofNullable(entity.getMtrSociedad()).isPresent()) {
            Join<FacFactura, MtrSociedad> fromMtrSociedad = root.join("mtrSociedad", JoinType.LEFT);
            if (Optional.ofNullable(entity.getMtrSociedad().getId()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtrSociedad.get("id"), entity.getMtrSociedad().getId());
                predicates.add(thirdCondition);
            }
            if (Optional.ofNullable(entity.getMtrSociedad().getDescripcion()).isPresent()) {
                Predicate thirdCondition = cb.equal(fromMtrSociedad.get("descripcion"), entity.getMtrSociedad().getDescripcion());
                predicates.add(thirdCondition);
            }
        }

        if (Optional.ofNullable(entity.getFechaEmisionIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaEmisionFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaEmisionIni());
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaEmisionFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);

            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaEmision"), fechaDesde));
            predicates.add(cb.lessThan(root.<Date>get("fechaEmision"), fechaHasta));
        }
        if (Optional.ofNullable(entity.getFechaEmisionIni()).isPresent() &&
                !Optional.ofNullable(entity.getFechaEmisionFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaEmisionIni());
            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaEmision"), fechaDesde));
        }
        if (!Optional.ofNullable(entity.getFechaEmisionIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaEmisionFin()).isPresent()) {
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaEmisionFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);
            predicates.add(cb.lessThan(root.<Date>get("fechaEmision"), fechaHasta));
        }

        if (Optional.ofNullable(entity.getFechaEmisionIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaEmisionFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaEmisionIni());
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaEmisionFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);

            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaEmision"), fechaDesde));
            predicates.add(cb.lessThan(root.<Date>get("fechaEmision"), fechaHasta));
        }
        if (Optional.ofNullable(entity.getFechaEmisionIni()).isPresent() &&
                !Optional.ofNullable(entity.getFechaEmisionFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaEmisionIni());
            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaEmision"), fechaDesde));
        }
        if (!Optional.ofNullable(entity.getFechaEmisionIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaEmisionFin()).isPresent()) {
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaEmisionFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);
            predicates.add(cb.lessThan(root.<Date>get("fechaEmision"), fechaHasta));
        }


        if (Optional.ofNullable(entity.getFechaPagoIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaPagoFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaPagoIni());
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaPagoFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);

            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaPago"), fechaDesde));
            predicates.add(cb.lessThan(root.<Date>get("fechaPago"), fechaHasta));
        }
        if (Optional.ofNullable(entity.getFechaPagoIni()).isPresent() &&
                !Optional.ofNullable(entity.getFechaPagoFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaPagoIni());
            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaPago"), fechaDesde));
        }
        if (!Optional.ofNullable(entity.getFechaPagoIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaPagoFin()).isPresent()) {
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaPagoFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);
            predicates.add(cb.lessThan(root.<Date>get("fechaPago"), fechaHasta));
        }


        if (Optional.ofNullable(entity.getFechaEstimadaPagoIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaEstimadaPagoFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaEstimadaPagoIni());
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaEstimadaPagoFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);

            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaEstimadaPago"), fechaDesde));
            predicates.add(cb.lessThan(root.<Date>get("fechaEstimadaPago"), fechaHasta));
        }
        if (Optional.ofNullable(entity.getFechaEstimadaPagoIni()).isPresent() &&
                !Optional.ofNullable(entity.getFechaEstimadaPagoFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaEstimadaPagoIni());
            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaEstimadaPago"), fechaDesde));
        }
        if (!Optional.ofNullable(entity.getFechaEstimadaPagoIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaEstimadaPagoFin()).isPresent()) {
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaEstimadaPagoFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);
            predicates.add(cb.lessThan(root.<Date>get("fechaEstimadaPago"), fechaHasta));
        }


        if (Optional.ofNullable(entity.getFechaCreacionIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaCreacionFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaCreacionIni());
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaCreacionFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);
            log.error("Ingresando predicate fechaDesde: " + fechaDesde);
            log.error("Ingresando predicate fechaHasta: " + fechaHasta);

            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaCreacion"), fechaDesde));
            predicates.add(cb.lessThan(root.<Date>get("fechaCreacion"), fechaHasta));
        }
        if (Optional.ofNullable(entity.getFechaCreacionIni()).isPresent() &&
                !Optional.ofNullable(entity.getFechaCreacionFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaCreacionIni());
            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaCreacion"), fechaDesde));
        }
        if (!Optional.ofNullable(entity.getFechaCreacionIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaCreacionFin()).isPresent()) {
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaCreacionFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);
            predicates.add(cb.lessThan(root.<Date>get("fechaCreacion"), fechaHasta));
        }


        if (Optional.ofNullable(entity.getFechaAprobacionIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaAprobacionFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaAprobacionIni());
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaAprobacionFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);

            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaAprobacion"), fechaDesde));
            predicates.add(cb.lessThan(root.<Date>get("fechaAprobacion"), fechaHasta));
        }
        if (Optional.ofNullable(entity.getFechaAprobacionIni()).isPresent() &&
                !Optional.ofNullable(entity.getFechaAprobacionFin()).isPresent()) {
            Date fechaDesde = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaAprobacionIni());
            predicates.add(cb.greaterThanOrEqualTo(root.<Date>get("fechaAprobacion"), fechaDesde));
        }
        if (!Optional.ofNullable(entity.getFechaAprobacionIni()).isPresent() &&
                Optional.ofNullable(entity.getFechaAprobacionFin()).isPresent()) {
            Date fechaHasta = DateUtils.convertStringToDate("dd/MM/yyyy", entity.getFechaAprobacionFin());
            fechaHasta = DateUtils.sumarRestarDias(fechaHasta, 1);
            predicates.add(cb.lessThan(root.<Date>get("fechaAprobacion"), fechaHasta));
        }
        if (Optional.ofNullable(entity.getEstadoValidacionAdjunto()).isPresent()) {
            if (entity.getEstadoValidacionAdjunto().equals(Constants.NO)) {
                predicates.add(cb.isNull(root.<String>get("indEstadoAdjunto")));
            } else {
                predicates.add(cb.isNotNull(root.<String>get("indEstadoAdjunto")));
            }
        }

        List<Order> orderList = new ArrayList<Order>();
        orderList.add(cb.desc(root.get("fechaEmision")));
        orderList.add(cb.desc(root.get("serieFactura")));
        orderList.add(cb.desc(root.get("numeroFactura")));
        query.orderBy(orderList);
        return predicates;
    }

    protected Root<FacFactura> setAdicionalDeltaTotalPredicate(
            FacFacturaResponse bean,
            Root<FacFactura> countRoot) throws Exception {
        FacFactura entity = bean.getBean();
        String esProveedorExtranjero = entity.getEsProveedorExtranjero();
        List<String> listaCodigoAcreedor = entity.getListaCodigoAcreedor();
        boolean buscarProveedorExtranjero = false;
        boolean buscarProveedorListaAcreedor = false;

        if (StringUtils.isNotBlank(esProveedorExtranjero) && esProveedorExtranjero.equals(Constants.S)) {
            buscarProveedorExtranjero = true;
        }
        if (listaCodigoAcreedor != null && listaCodigoAcreedor.size() > 0) {
            buscarProveedorListaAcreedor = true;
        }

        if (Optional.ofNullable(entity.getMtrProveedor()).isPresent() || buscarProveedorExtranjero || buscarProveedorListaAcreedor) {
            Join<FacFactura, MtrProveedor> fromMtrProveedor = countRoot.join("mtrProveedor", JoinType.INNER);
        }
        if (Optional.ofNullable(entity.getMtrEstado()).isPresent()) {
            Join<FacFactura, MtrEstado> fromMtrEstado = countRoot.join("mtrEstado", JoinType.INNER);
        }
        if (entity.getMtrEstadoLista() != null && entity.getMtrEstadoLista().size() > 0) {
            Join<FacFactura, MtrEstado> fromMtrEstado = countRoot.join("mtrEstado", JoinType.INNER);
        }

        if (Optional.ofNullable(entity.getMtrMoneda()).isPresent()) {
            Join<FacFactura, MtrMoneda> fromMtrMoneda = countRoot.join("mtrMoneda", JoinType.INNER);
        }


        if (Optional.ofNullable(entity.getMtrDetraccion()).isPresent()) {
            Join<FacFactura, MtrDetraccion> fromMtrDetraccion = countRoot.join("mtrDetraccion", JoinType.LEFT);
        }
        if (Optional.ofNullable(entity.getMtrSociedad()).isPresent()) {
            Join<FacFactura, MtrSociedad> fromMtrSociedad = countRoot.join("mtrSociedad", JoinType.LEFT);
        }
        return countRoot;
    }

    @Override
    public ByteArrayResource generarReportePdf(Integer facturaId, String codigoIdp) throws Exception {
        Map parameterMap = new HashMap();
        Optional<FacFactura> optionalFactura = this.facFacturaDeltaRepository.findById(facturaId);
        if (!optionalFactura.isPresent()) {
            throw new Exception("No se encontró Factura con ID: " + facturaId);
        }
        FacFactura factura = optionalFactura.get();


        parameterMap.put("ruc", factura.getMtrProveedor().getRuc());
        parameterMap.put("razonSocial", factura.getMtrProveedor().getRazonSocial());
        parameterMap.put("sociedad", factura.getMtrSociedad().getDescripcion());
        if (factura.getMtrDetraccion() != null)
            parameterMap.put("detraccion", factura.getMtrDetraccion().getDescripcion());
        parameterMap.put("concepto", factura.getConcepto());
        parameterMap.put("moneda", factura.getMtrMoneda().getDescBrv());
        parameterMap.put("importeSinIgv", factura.getMonto());
        parameterMap.put("igv", factura.getMontoIgv());
        parameterMap.put("otrosCargos", factura.getMontoOtrosCargos());
        parameterMap.put("importeTotal", factura.getMontoFinal());
        parameterMap.put("tituloFactura", "Factura: " + factura.getTipoComprobanteFactura() + " - " + factura.getSerieFactura() + " - " + factura.getNumeroFactura());
        if (factura.getFechaEmision() != null) {
            java.sql.Date sDate = new java.sql.Date(factura.getFechaEmision().getTime());
            parameterMap.put("fechaEmision", sDate);
        }
        log.error("generarReporteFacturaPdf_0 ::: " + parameterMap);
        List<ReporteFacturaBean> listaDetalleReporte = new ArrayList<ReporteFacturaBean>();
        List<FacFacturaCertificado> listaFacturaCertificado = this.facFacturaCertificadoDeltaRepository.findByFacturaId(facturaId);
        if (listaFacturaCertificado != null && listaFacturaCertificado.size() > 0) {
            log.error("generarReporteFacturaPdf ::: ");
            for (FacFacturaCertificado ele : listaFacturaCertificado) {
                log.error("generarReporteFacturaPdf 2 ::: ");
                ReporteFacturaBean beanHeader = new ReporteFacturaBean();
                beanHeader.setCodigoCertificado(ele.getCerCertificado().getCodigoCertificado());
                beanHeader.setMontoTotal(ele.getCerCertificado().getMontoTotal());
                beanHeader.setMontoTotalAjustado(ele.getCerCertificado().getMontoTotalAdjustado());
                listaDetalleReporte.add(beanHeader);
                log.error("generarReporteFacturaPdf3 ::: ");

                List<CerCertificadoDetalleDto> listaDetalle = this.cerCertificadoDetalleDeltaService.
                        findByDetalle(ele.getCerCertificado().getId());

                if (listaDetalle != null && listaDetalle.size() > 0) {
                    log.error("generarReporteFacturaPdf4 ::: ");
                    int subposicion = 0;
                    for (CerCertificadoDetalleDto bean : listaDetalle) {
                        String posicionSap = bean.getCerNotaPedidoDetalle().getPosicionSap();
                        String tipoPosicion = bean.getTipoPosicion();
                        try {
                            Integer nposicionSap = new Integer(posicionSap.trim());
                            posicionSap = nposicionSap.toString().trim();
                        } catch (Exception e) {
                            posicionSap = bean.getCerNotaPedidoDetalle().getPosicionSap();
                        }
                        if (tipoPosicion.equals(NotaPedidoTipoPosicionEnum.POSICION.getEstado())) {
                            subposicion = 0;
                        } else {
                            subposicion++;
                            posicionSap = posicionSap + "." + new Integer(subposicion).toString();
                        }


                        //CerCertificadoReporteSalidaDto beanReporte = new CerCertificadoReporteSalidaDto();
                        ReporteFacturaBean beanReporte = new ReporteFacturaBean();
                        beanReporte.setLinea(posicionSap);
                        String descripcion =
                                bean.getCerNotaPedidoDetalle().getMtrBienServicio() != null ?
                                        bean.getCerNotaPedidoDetalle().getMtrBienServicio().getDescripcion() :
                                        bean.getCerNotaPedidoDetalle().getTextoItem();
                        beanReporte.setDescripcion(descripcion);
                        beanReporte.setUnidad(bean.getCerNotaPedidoDetalle().getUnidadTextoItem());

                        if (Optional.ofNullable(bean.getCerCertificadoDetalle()).isPresent()) {
                            String ceCo =
                                    bean.getCerCertificadoDetalle().getMtrCuentaImputacion() != null ?
                                            bean.getCerCertificadoDetalle().getMtrCuentaImputacion().getCodigoCuentaImputacion() :
                                            "";
                            String tipoImputacion =
                                    bean.getCerCertificadoDetalle().getMtrCuentaImputacion() != null ?
                                            bean.getCerCertificadoDetalle().getMtrCuentaImputacion().getMtrTipoImputacion().getCodigoTipoImputacion() :
                                            "";
                            String cuenta =
                                    bean.getCerCertificadoDetalle().getMtrCuentaMayor() != null ?
                                            bean.getCerCertificadoDetalle().getMtrCuentaMayor().getCodigoCuentaMayor() :
                                            "";
                            beanReporte.setTipoImputacion(tipoImputacion);
                            //beanReporte.setCuenta(cuenta);
                            beanReporte.setCeCo(ceCo);
                            beanReporte.setPrecioBase(bean.getCerCertificadoDetalle().getPrecioUnitario());
                            beanReporte.setCantidadEntregada(bean.getCerCertificadoDetalle().getCantidadAprobada());
                            beanReporte.setTotalLinea(bean.getCerCertificadoDetalle().getTotalLinea());
                            log.error("generarReporteFacturaPdf5 ::: ");
                        }
                        beanReporte.setTipoPosicion(bean.getTipoPosicion());
                        listaDetalleReporte.add(beanReporte);
                    }
                }
                log.error("generarReporteFacturaPdf6 ::: " + listaDetalleReporte);


            }
        } else {
            String nombres = "";
            List<FacEstrategiaIteracion> listaEstrategia = this.facEstrategiaIteracionDeltaRepository.findByFacFactura(factura);
            if (listaEstrategia != null && listaEstrategia.size() > 0) {
                if (listaEstrategia.get(0).getMtrUsuarioFacturacionAprobador0() != null) {

                }
                nombres = listaEstrategia.get(0).getMtrUsuarioFacturacionAprobador0().getNombres() + " "
                        + listaEstrategia.get(0).getMtrUsuarioFacturacionAprobador0().getApellidos();

            }
            /*List<MtrUsuarioFacturacion> listaFactUser = this.mtrUsuarioFacturacionDeltaRepository.getByIdp(codigoIdp);
            String nombreUser = "";
            if(listaFactUser != null && listaFactUser.size() > 0)
                nombreUser = listaFactUser.get(0).getNombres() + " " + listaFactUser.get(0).getApellidos();*/

            parameterMap.put("usuarioCoga", nombres);
        }
        String nameFile = "reporteFactura";
        if (listaDetalleReporte == null || listaDetalleReporte.size() == 0) {
            listaDetalleReporte.add(new ReporteFacturaBean());
            nameFile = "reporteFacturasc";
        }


        log.error("generarReporteFacturPdf6 ::: " + listaDetalleReporte);


        ReporteParams reporteParams = this.reporteEjecucionService.inicializaReporte(
                nameFile,
                TipoReporteJasperEnum.PDF,
                parameterMap,
                listaDetalleReporte
        );
        log.error("generarReporteFacturPdf7 ::: ");
        ByteArrayResource byteArrayResource =
                this.reporteEjecucionService.executeReporte(
                        reporteParams);
        return byteArrayResource;
    }

    @Override
    public ByteArrayResource generarReporteConstanciaPdf(Integer proveedorId, Integer numCorrelativo) throws Exception {
        Map parameterMap = new HashMap();
        Optional<MtrProveedor> optionalProveedor = this.mtrProveedorDeltaRepository.findById(proveedorId);
        // Optional<FacFactura> optionalFactura = this.facFacturaDeltaRepository.findById(facturaId);
        if (!optionalProveedor.isPresent()) {
            throw new Exception("No se encontró Proveddor con ID: " + proveedorId);
        }
        MtrProveedor proveedor = optionalProveedor.get();

        //String correlativo = factura.getCodigoCorrelativoAdjunto();
        parameterMap.put("ruc", proveedor.getRuc());
        parameterMap.put("razonSocial", proveedor.getRazonSocial());
        parameterMap.put("correlativo", numCorrelativo + "");

        List<ReporteFacturaBean> listaDetalleReporte = new ArrayList<ReporteFacturaBean>();

        if (listaDetalleReporte == null || listaDetalleReporte.size() == 0)
            listaDetalleReporte.add(new ReporteFacturaBean());

        ReporteParams reporteParams = this.reporteEjecucionService.inicializaReporte(
                "reporteConstancia",
                TipoReporteJasperEnum.PDF,
                parameterMap,
                listaDetalleReporte
        );
        ByteArrayResource byteArrayResource =
                this.reporteEjecucionService.executeReporte(
                        reporteParams);
        return byteArrayResource;
    }

    public List<MensajeHistorialSap> realizarPreregistroFactura(FacFactura factura, BigDecimal montoIgv) throws Exception {
        log.error("Init ::: realizarPreregistroFactura");
        Optional<FacFactura> optionalFactura = this.facFacturaDeltaRepository.findById(factura.getId());
        if (!optionalFactura.isPresent()) {
            throw new Exception("No se encontró Factura con ID: " + factura.getId());
        }

        List<AppParametria> listaParam = this.appParametriaDeltaRepository.findByModuloAndStatus("PLAZO_FACTURA_VENCIMIENTO", "1");
        AppParametria typeDoc = this.appParametriaDeltaRepository.obtenerParametroPorModuloYLabel("Preregistro", "Tipo Documento");
        AppParametria taxCode = this.appParametriaDeltaRepository.obtenerParametroPorModuloYLabel("Preregistro", "Taxcode");
        int numDiasPlazo = 0;
        log.error("realizarPreregistroFactura_1");
        if (listaParam != null && listaParam.size() > 0) {
            numDiasPlazo = Integer.parseInt(listaParam.get(0).getValue1().trim());

        }
        log.error("realizarPreregistroFactura_2::: " + numDiasPlazo);
        java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("yyyy/MM/dd");

        // factura = optionalFactura.get();

        boolean flagConIgv = false;
        BigDecimal auxMonto = new BigDecimal("0.0");
        /*if (factura.getMontoIgv() != null && (factura.getMontoIgv().compareTo(auxMonto) > 0))
            flagConIgv = true;*/
        if (montoIgv != null && (montoIgv.compareTo(auxMonto) > 0))
            flagConIgv = true;
        log.error("realizarPreregistroFactura_2_1_ " + montoIgv);
        log.error("realizarPreregistroFactura_2_2_ " + flagConIgv);

        PreRegistroInput input = new PreRegistroInput();
        if (flagConIgv) {
            log.error("realizarPreregistroFactura_2_2_3");
            input.setCalc_tax_ind("X");
        } else {
            input.setCalc_tax_ind("");
            log.error("realizarPreregistroFactura_2_4_");
        }


        input.setDoc_type(factura.getTipoComprobanteFactura());
        if (factura.getMtrDetraccion() != null) {
            //if(!StringUtils.isBlank(factura.getMtrDetraccion().get))
            input.setTax_code(factura.getMtrDetraccion().getCodigo());
            if (factura.getMtrDetraccion().getPorcentaje() != null) {
                input.setTax_base(new BigDecimal(factura.getMtrDetraccion().getPorcentaje()));
            }

        }


        if (factura.getFechaCreacion() != null) {
            Date fechaBaseCalculoVencimiento = factura.getFechaCreacion();
            Calendar c = Calendar.getInstance();
            c.setTime(fechaBaseCalculoVencimiento);
            c.add(Calendar.DATE, numDiasPlazo);
            fechaBaseCalculoVencimiento = c.getTime();
            //input.setBline_date(format.format(fechaBaseCalculoVencimiento));
            input.setBline_date(format.format(factura.getFechaCreacion()));
        }
        //if(factura.getFechaAprobacion() != null) {
        log.error("realizarPreregistroFactura_3::: ");
        input.setPstng_date(format.format(DateUtils.obtenerFechaHoraActual()));
        if (factura.getFechaEmision() != null) {
            input.setDoc_date(format.format(factura.getFechaEmision()));
        }
        /*Date fechaBaseCalculoVencimiento = DateUtils.obtenerFechaHoraActual();
        Calendar c = Calendar.getInstance();
        c.setTime(fechaBaseCalculoVencimiento);
        c.add(Calendar.DATE, numDiasPlazo);
        fechaBaseCalculoVencimiento = c.getTime();
        input.setBline_date(format.format(fechaBaseCalculoVencimiento));*/
        log.error("realizarPreregistroFactura_4::: ");
        //}

        BigDecimal montoBruto = factura.getMontoFinal();
        log.error("realizarPreregistroFactura_getIndicadorConCertificado" + factura.getIndicadorConCertificado());
        if (montoBruto != null && factura.getMontoOtrosCargos() != null) {
            if(StringUtils.isBlank(factura.getIndicadorConCertificado()) ||
                    (StringUtils.isNotBlank(factura.getIndicadorConCertificado()) && !factura.getIndicadorConCertificado().equalsIgnoreCase("S"))) {
                montoBruto = montoBruto.subtract(factura.getMontoOtrosCargos());
            }
        }



        input.setRef_doc_no(factura.getTipoComprobanteFactura() + "-" + factura.getSerieFactura() + "-" + factura.getNumeroFactura());
        input.setComp_code(factura.getMtrSociedad().getDescBrv());
        if (montoBruto != null)
            input.setGross_amount("" + montoBruto);
        //input.setCalc_tax_ind("X");
        input.setHeader_txt(factura.getConcepto());

        input.setZfest(factura.getFechaEstimadaPago());
        List<FacEstrategiaIteracion> facEstrategiaIteracionList = this.facEstrategiaIteracionDeltaRepository.
                findByFacFactura(factura);
        if (facEstrategiaIteracionList != null && facEstrategiaIteracionList.size() > 0) {
            for (FacEstrategiaIteracion beanEstrategia : facEstrategiaIteracionList) {
                if (!StringUtils.isBlank(beanEstrategia.getActivo()) && beanEstrategia.getActivo().equalsIgnoreCase("S")) {
                    if (beanEstrategia.getMtrUsuarioFacturacionAprobador0() != null) {
                        input.setZaprob(beanEstrategia.getMtrUsuarioFacturacionAprobador0().getCodigoUsuarioSap());
                        if (beanEstrategia.getMtrTipoContrato() != null)
                            input.setZcont("X");
                        else
                            input.setZcont("");
                    }
                }
            }
        }
        log.error("realizarPreregistroFactura_5::: ");

        List<PreRegistroItemInput> listaItem = new ArrayList<PreRegistroItemInput>();
        List<PreRegistroItemBean> listaItemAuxiliarPre = this.facFacturaMapper.listaItemPreRegistro(factura.getId());
        List<PreRegistroItemBean> listaItemAuxiliar = new ArrayList<PreRegistroItemBean>();
        log.error("realizarPreregistroFactura_5_0::: ");
        if (listaItemAuxiliarPre != null && listaItemAuxiliarPre.size() > 0) {
            for (PreRegistroItemBean elex : listaItemAuxiliarPre) {
                List<CerCertificadoDetalleSap> listaDetalleSap = null;

                if (elex.getTipo().equalsIgnoreCase("S")) {
                    log.error("Tipo s_pregistro " + elex.getCerCertificadoDetalleId());
                    listaDetalleSap = this.cerCertificadoDetalleSapMapper.findCertificadoDetalleSapByCertificadoDetalleServicio(elex.getIdPadre(), elex.getCerCertificadoId());
                } else {
                    log.error("Tipo M_s_pregistro" + elex.getCerCertificadoDetalleId());
                    listaDetalleSap = this.cerCertificadoDetalleSapMapper.findCertificadoDetalleSapByCertificadoDetalle(elex.getCerCertificadoDetalleId(), elex.getPosicionSap());
                }
                PreRegistroItemBean beanx = new PreRegistroItemBean();
                log.error("realizarPreregistroFactura_5_0_0::: " + elex);
                if (listaDetalleSap != null) {
                    log.error("realizarPreregistroFactura_5_0_1::: ");
                    if (listaDetalleSap.size() == 1) {
                        log.error("realizarPreregistroFactura_5_0_2:: ");
                        beanx = (PreRegistroItemBean) org.apache.commons.beanutils.BeanUtils.cloneBean(elex);
                        beanx.setHes(listaDetalleSap.get(0).getDocumentoGenerado());
                        listaItemAuxiliar.add(beanx);
                    } else if (listaDetalleSap.size() > 1) {

                        int numAAgregar = listaDetalleSap.size() - 1;
                        log.error("realizarPreregistroFactura_5_0_3::: " + numAAgregar);
                        Optional<CerCertificadoDetalleSap> optionalItem = listaDetalleSap.stream()
                                .filter(x -> elex.getCerCertificadoDetalleId() == x.getCerCertificadoDetalle().getId())
                                .findFirst();
                        if (optionalItem.isPresent()) {
                            log.error("realizarPreregistroFactura_5_0_4::: present");
                            beanx = (PreRegistroItemBean) org.apache.commons.beanutils.BeanUtils.cloneBean(elex);
                            beanx.setHes(listaDetalleSap.get(0).getDocumentoGenerado());
                            listaItemAuxiliar.add(beanx);
                            for (int i = 0; i < numAAgregar; i++) {
                                PreRegistroItemBean beanx2 = new PreRegistroItemBean();
                                beanx2 = (PreRegistroItemBean) org.apache.commons.beanutils.BeanUtils.cloneBean(elex);
                                beanx2.setHes(listaDetalleSap.get(i + 1).getDocumentoGenerado());
                                listaItemAuxiliar.add(beanx2);
                            }
                        } else {
                            log.error("realizarPreregistroFactura_5_0_4::: no_present");
                            beanx = (PreRegistroItemBean) org.apache.commons.beanutils.BeanUtils.cloneBean(elex);
                            beanx.setHes(listaDetalleSap.get(0).getDocumentoGenerado());
                            listaItemAuxiliar.add(beanx);
                        }
                    }
                    log.error("realizarPreregistroFactura_5_0_4::: no_present");
                }
            }
        }

        log.error("realizarPreregistroFactura_6::: " + listaItemAuxiliar);
        int count = 0;
        if (listaItemAuxiliar != null && listaItemAuxiliar.size() > 0) {
            log.error("realizarPreregistroFactura_7::: ");
            int countSheet = 0;
            String hesAux = "0000";
            for (PreRegistroItemBean ele : listaItemAuxiliar) {
                log.error("realizarPreregistroFactura_8::: ");
                count++;
                //String hes = (!StringUtils.isBlank(ele.getHes())) ? ele.getHes() : ele.getHesMaterial();
                String hes = ele.getHes();
                if (!hes.equalsIgnoreCase(hesAux))
                    countSheet = 1;
                else
                    countSheet++;

                hesAux = ele.getHes();

                PreRegistroItemInput bean = new PreRegistroItemInput();
                bean.setInvoice_doc_item("" + String.format("%06d", count));
                bean.setPo_number(ele.getCodigoNotaPedidoSap());
                bean.setPo_item(ele.getPosicionSap());
                bean.setTax_code(taxCode.getValue1());//
                bean.setSheet_item("" + countSheet);
                bean.setItem_text(ele.getExtrow());
                //bean.setSheet_item(ele.getExtrow());
                if (ele.getCantidadAprobada() != null && ele.getPrecioUnitario() != null)
                    bean.setItem_amount("" + ele.getCantidadAprobada().multiply(ele.getPrecioUnitario()).setScale(2, BigDecimal.ROUND_HALF_EVEN));
                bean.setQuantity("" + ele.getCantidadAprobada());
                //if(ele.getUnidadMedidaId())
                //fdsfsdf
                if (ele.getUnidadMedidaId() != null) {
                    Optional<MtrUnidadMedida> unidad = this.mtrUnidadMedidaDeltaRepository.findById(ele.getUnidadMedidaId());
                    if (unidad.isPresent())
                        bean.setPo_unit(unidad.get().getCodigoSap());

                } else {
                    bean.setPo_unit(ele.getUnidadTextoItem());
                }


                bean.setSheet_no(hes);
                listaItem.add(bean);
            }
        }
        log.error("realizarPreregistroFactura_10::: ");
        input.setListaItem(listaItem);
        //input.setRef_doc_no_long();
        boolean flagOk = true;
        log.error("realizarPreregistroFactura_10::: input ::::: " + input);
        if (factura.getMtrDetraccion() != null) {

            input.setIdDetraccion(factura.getMtrDetraccion().getId());
        }

        BigDecimal tasaAuxiliar = new BigDecimal("0.0");
        if (factura.getMtrMoneda() != null && factura.getMtrMoneda().getDescBrv().equalsIgnoreCase("USD")) {
            MtrMoneda monedaNacional = this.mtrMonedaDeltaRepository.getByDescBrv("NSO");
            MtrTasaCambio tasa = this.mtrTasaCambioDeltaRepository.getByFechaTasaAndMtrMonedaOrigenAndMtrMonedaDestino(factura.getFechaEmision(), monedaNacional, factura.getMtrMoneda());

            log.error("realizarPreregistroFactura_13333::: input_13333 ::::: " + tasa);
           //MtrTasaCambioWeb tasa = this.mtrTasaCambioWebDeltaRepository.obtenerTasaCambio(factura.getMtrMoneda().getId(), monedaNacional.getId(), factura.getFechaEmision());
            if (tasa != null) {
                tasaAuxiliar = tasa.getValor();
            }
        }
        input.setITipoc(tasaAuxiliar);
        UserSession user = this.systemLoggedUser.getUserSession();
        input.setUsRes(user.getRuc());
        PreRegistroOutput output = this.sapRfcDeltaService.preRegistroFactura(input);
        List<MensajeHistorialSap> lista = new ArrayList<MensajeHistorialSap>();
        List<MensajeSap> listaError = new ArrayList<MensajeSap>();
        String msgTextoError = "";
        String breakLine = System.lineSeparator();
        if (output.getListaRetorno() != null && output.getListaRetorno().size() > 0) {
            for (PreRegistroRetornoOutput ele : output.getListaRetorno()) {

                FacMensajeSap mensaje = new FacMensajeSap();
                mensaje.setFacFactura(factura);
                //mensaje.set
                mensaje.setTipoMensaje(ele.getType());
                mensaje.setTextoMensajeSap(ele.getMessage());
                FacMensajeSap mensajeSpOut = this.facMensajeSapDeltaRepository.save(mensaje);

                MensajeHistorialSap msg = new MensajeHistorialSap(mensajeSpOut.getId(), ele.getType(), ele.getNumber(), ele.getMessage());
                lista.add(msg);
                if (ele.getType().equalsIgnoreCase("E")) {
                    msgTextoError = msgTextoError + " " + ele.getMessage() + breakLine;
                    flagOk = false;
                    listaError.add(new MensajeSap(ele.getType(), ele.getNumber(), ele.getMessage()));
                }

            }
        }
        log.error("realizarPreregistroFactura_11::: " + lista);


        if (lista != null && lista.size() > 0 && flagOk) {

            factura.setFechaAprobacion(DateUtils.obtenerFechaHoraActual());
            factura.setNumeroFacturaSap(output.getBelnr());
            factura.setAnioFacturaSap(output.getGjahr());
            this.facFacturaDeltaRepository.save(factura);


        } else if (!flagOk) {
            FacHistorial facHistorial = new FacHistorial();

            MtrEstado mtrEstado = this.mtrEstadoDeltaRepository.
                    getByCodigoAgrupadoAndCodigoEstado(
                            Constants.CODIGO_AGRUPADO_CERTIFICADO,
                            EstadoCertificadoEnum.RECHAZADO.getEstado()
                    );

            facHistorial.setDescripcion(msgTextoError.trim());
            facHistorial.setMtrEstado(mtrEstado);
            facHistorial.setFechaHistorial(DateUtils.obtenerFechaHoraActual());
            //facHistorial.setMtrEstado();
            facHistorial.setFacFactura(factura);
            facHistorial.setUsuarioHistorial("SAP");
            FacHistorial out = this.facHistorialDeltaRepository.save(facHistorial);
            for (MensajeSap ele : listaError) {
                FacMensajeSap mensajex = new FacMensajeSap();
                mensajex.setFacFactura(factura);
                //mensaje.set
                mensajex.setTipoMensaje(ele.getType());
                mensajex.setTextoMensajeSap(ele.getTexto());
                mensajex.setFacHistorial(out);
                FacMensajeSap mensajeSpOut = this.facMensajeSapDeltaRepository.save(mensajex);
                //dfd
            }
        }
        log.error("Fin ::: realizarPreregistroFactura");

        return lista;
    }
    /****************/
    /* METODOS CRUD */

    /****************/

    protected String setValidacionesPrevias(FacFactura bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected FacFactura setCreate(FacFactura bean) throws Exception {
        return bean;
    }

    protected void setSave(FacFactura dto) throws Exception {
        return;
    }

    protected void setDelete(Integer id) throws Exception {

    }

    protected void setDeleteAll() throws Exception {

    }

    /************************/
    /* METODOS CRUD Masivos */

    /************************/

    protected FacFactura setUploadExcel(Cell currentCell, FacFactura facFactura, int contador) throws Exception {
        facFactura = super.setUploadExcel(currentCell, facFactura, contador);
        return facFactura;
    }

    protected String setSaveMasivo(FacFactura dto) throws Exception {
        return "";
    }

    protected List<FacFactura> setBeforeDeleteMasivo(List<FacFactura> listaDto) throws Exception {
        return listaDto;
    }

    protected void setAfterDeleteMasivo() throws Exception {
        return;
    }

    /*****************************/
    /* Metodos que generan Excel */

    /*****************************/

    protected void setDownloadExcelItem(FacFactura bean, HSSFRow dataRow) {

    }

    protected void setDownloadExcel(HSSFSheet sheet) {

    }

    /*****************/
    /* Otros Metodos */

    /*****************/

    protected String setGraphDescripcionByMtrEstado(MtrEstado mtrEstado) {
        return mtrEstado.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrEstado() {
        return "MtrEstado";
    }

    protected String setGraphBarChartTituloByMtrEstado() {
        return "MtrEstado";
    }

    protected String setGraphDescripcionByMtrMoneda(MtrMoneda mtrMoneda) {
        return mtrMoneda.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrMoneda() {
        return "MtrMoneda";
    }

    protected String setGraphBarChartTituloByMtrMoneda() {
        return "MtrMoneda";
    }

    protected String setGraphDescripcionByMtrDetraccion(MtrDetraccion mtrDetraccion) {
        return mtrDetraccion.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrDetraccion() {
        return "MtrDetraccion";
    }

    protected String setGraphBarChartTituloByMtrDetraccion() {
        return "MtrDetraccion";
    }

    protected String setGraphDescripcionByMtrProveedor(MtrProveedor cerProveedor) {
        return cerProveedor.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrProveedor() {
        return "MtrProveedor";
    }

    protected String setGraphBarChartTituloByMtrProveedor() {
        return "MtrProveedor";
    }

    protected String setGraphDescripcionByMtrSector(MtrSector mtrSector) {
        return mtrSector.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrSector() {
        return "MtrSector";
    }

    protected String setGraphBarChartTituloByMtrSector() {
        return "MtrSector";
    }


    public void jobEnviarCorreoFacturaCupa() throws Exception {
        MtrEstado mtrEstado = this.mtrEstadoDeltaRepository.getByCodeGrupoAndCodeEstado(
                Constants.CODIGO_AGRUPADO_FACTURA,
                EstadoFacturaEnum.EN_REVISION_CUPA.getEstado());
        List<FacEstrategiaIteracion> facEstrategiaIteracionList = this.facEstrategiaIteracionDeltaRepository.
                findFacturaAprobarRechazarCupaPorAprobar(mtrEstado.getId());
        if (facEstrategiaIteracionList != null && facEstrategiaIteracionList.size() > 0) {
            for (FacEstrategiaIteracion facEstrategiaIteracion : facEstrategiaIteracionList) {
//                FacFacturaActualizarCupaSalidaDto bean = new FacFacturaActualizarCupaSalidaDto();
//                bean.setFacFactura(facEstrategiaIteracion.getFacFactura());
//                List<MtrUsuarioFacturacion> mtrUsuarioFacturacionList = this.mtrUsuarioFacturacionDeltaRepository.devuelveUsuarioCupa();
//
//                bean.setMtrAprobador0(facEstrategiaIteracion.getMtrUsuarioFacturacionAprobador0());
//                this.enviarEmailGrabarFacturaCupa(bean);
            }
        }

    }

    public void jobEnviarCorreoFacturaAprobador0() throws Exception {
        MtrEstado mtrEstado = this.mtrEstadoDeltaRepository.getByCodeGrupoAndCodeEstado(
                Constants.CODIGO_AGRUPADO_FACTURA,
                EstadoFacturaEnum.PRE_APROBACION.getEstado());
        List<FacEstrategiaIteracion> facEstrategiaIteracionList = this.facEstrategiaIteracionDeltaRepository.
                findFacturaAprobarRechazarAprobador0PorAprobar(Constants.APROBADO, Constants.EN_PROCESO, mtrEstado.getId());
        if (facEstrategiaIteracionList != null && facEstrategiaIteracionList.size() > 0) {
            for (FacEstrategiaIteracion facEstrategiaIteracion : facEstrategiaIteracionList) {
                FacFacturaActualizarCupaSalidaDto bean = new FacFacturaActualizarCupaSalidaDto();
                bean.setFacFactura(facEstrategiaIteracion.getFacFactura());
                bean.setMtrAprobador0(facEstrategiaIteracion.getMtrUsuarioFacturacionAprobador0());
                this.enviarEmailGrabarFacturaCupa(bean);
            }
        }

    }

    public void jobEnviarCorreoFacturaFirmante() throws Exception {
        MtrEstado mtrEstado = this.mtrEstadoDeltaRepository.getByCodeGrupoAndCodeEstado(
                Constants.CODIGO_AGRUPADO_FACTURA,
                EstadoFacturaEnum.PENDIENTE_FIRMA.getEstado());
        List<FacEstrategiaIteracion> facEstrategiaIteracionList = this.facEstrategiaIteracionDeltaRepository.
                findFacturaAprobarRechazarFirmantePorAprobar(
                        Constants.APROBADO,
                        Constants.APROBADO,
                        Constants.EN_PROCESO,
                        mtrEstado.getId());
        if (facEstrategiaIteracionList != null && facEstrategiaIteracionList.size() > 0) {
            for (FacEstrategiaIteracion facEstrategiaIteracion : facEstrategiaIteracionList) {
                FacFacturaGrabarAprobador0SalidaDto bean = new FacFacturaGrabarAprobador0SalidaDto();
                bean.setFacFactura(facEstrategiaIteracion.getFacFactura());

                /* Obteniendo los posibles firmantes */
                FacEstrategiaFirma facEstrategiaFirmaSgte = this.facEstrategiaFirmaDeltaRepository.
                        getByFacEstrategiaIteracionAndOrdenEjecucion(
                                facEstrategiaIteracion,
                                facEstrategiaIteracion.getNroFirmanteEnRevision()
                        );
                if (Optional.ofNullable(facEstrategiaFirmaSgte).isPresent()) {
                    MtrSector mtrSectorFirmante = facEstrategiaFirmaSgte.getMtrSector();
                    MtrTipoGerencia mtrTipoGerenciaFirmante = facEstrategiaFirmaSgte.getMtrTipoGerencia();
                    List<MtrUsuarioFacturacion> mtrUsuarioFacturacionListSgte = new ArrayList<MtrUsuarioFacturacion>();
                    List<MtrUsuarioFacturacion> mtrUsuarioFacturacionListReemplazoSgte = new ArrayList<MtrUsuarioFacturacion>();
                    if (Optional.ofNullable(mtrTipoGerenciaFirmante).isPresent()) {
                        mtrUsuarioFacturacionListSgte = this.mtrUsuarioFacturacionDeltaRepository
                                .devuelveUsuarioFirmanteTipoGerencia(mtrTipoGerenciaFirmante.getId());
                        mtrUsuarioFacturacionListReemplazoSgte = this.mtrReemplazoFacturacionDeltaRepository
                                .devuelveUsuarioFirmanteTipoGerencia(mtrTipoGerenciaFirmante.getId());
                        if (mtrUsuarioFacturacionListReemplazoSgte != null && mtrUsuarioFacturacionListReemplazoSgte.size() > 0) {
                            mtrUsuarioFacturacionListSgte.addAll(mtrUsuarioFacturacionListReemplazoSgte);
                        }
                    } else {
                        mtrUsuarioFacturacionListSgte = this.mtrUsuarioFacturacionDeltaRepository
                                .devuelveUsuarioFirmanteSector(mtrSectorFirmante.getId());
                        mtrUsuarioFacturacionListReemplazoSgte = this.mtrReemplazoFacturacionDeltaRepository
                                .devuelveUsuarioFirmanteSector(mtrSectorFirmante.getId());
                        if (mtrUsuarioFacturacionListReemplazoSgte != null && mtrUsuarioFacturacionListReemplazoSgte.size() > 0) {
                            mtrUsuarioFacturacionListSgte.addAll(mtrUsuarioFacturacionListReemplazoSgte);
                        }
                    }
                    bean.setMtrUsuarioFacturacionFirmantePosiblesSgtes(mtrUsuarioFacturacionListSgte);
                }

                /* enviando correo */
                this.enviarEmailFacturaAprobacionFirmanteSgte(bean);

            }
        }

    }

}

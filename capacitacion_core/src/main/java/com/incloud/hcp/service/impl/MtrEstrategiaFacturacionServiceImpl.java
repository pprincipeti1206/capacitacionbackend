/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.incloud.hcp.service.impl;

import com.incloud.hcp.common.enums.AppParametriaLabelEnum;
import com.incloud.hcp.common.enums.AppParametriaModuloEnum;
import com.incloud.hcp.common.excel.ExcelDefault;
import com.incloud.hcp.common.graph.GraphBarChart;
import com.incloud.hcp.common.graph.GraphBean;
import com.incloud.hcp.common.graph.GraphDataset;
import com.incloud.hcp.common.graph.GraphPieChart;
import com.incloud.hcp.domain.*;
import com.incloud.hcp.domain.response.MtrEstrategiaFacturacionResponse;
import com.incloud.hcp.repository.delta.*;
import com.incloud.hcp.service.MtrEstrategiaFacturacionService;
import com.incloud.hcp.service._framework.bean.BeanCargaMasivoDTO;
import com.incloud.hcp.service._framework.bean.BeanListaMasivoDTO;
import com.incloud.hcp.service._framework.impl.JPACustomServiceImpl;
import com.incloud.hcp.service.delta.MtrRangoMontoEstrategiaDeltaService;
import com.incloud.hcp.service.delta.MtrSectorDeltaService;
import com.incloud.hcp.service.delta.MtrSociedadDeltaService;
import com.incloud.hcp.service.delta.MtrTipoContratoDeltaService;
import com.incloud.hcp.service.requireNew.MtrEstrategiaFacturacionRequireNewService;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.utils.Constants;
import com.incloud.hcp.utils.PredicateUtils;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * A simple DTO Facility for MtrEstrategiaFacturacion.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public abstract class MtrEstrategiaFacturacionServiceImpl extends JPACustomServiceImpl<MtrEstrategiaFacturacionResponse, MtrEstrategiaFacturacion, Integer>
        implements MtrEstrategiaFacturacionService {

    protected final String NAME_SHEET = "MtrEstrategiaFacturacion";
    protected final String CONFIG_TITLE = "com/incloud/hcp/excel/MtrEstrategiaFacturacionExcel.xml";
    private final Integer REGISTROS_COLOR = 10;

    @Autowired
    protected AppParametriaDeltaRepository appParametriaDeltaRepository;

    @Autowired
    protected MtrEstrategiaFacturacionDeltaRepository mtrEstrategiaFacturacionDeltaRepository;

    @Autowired
    protected MtrEstrategiaFacturacionRequireNewService mtrEstrategiaFacturacionRequireNewService;

    @Autowired
    protected MtrRangoMontoEstrategiaDeltaService mtrRangoMontoEstrategiaDeltaService;

    @Autowired
    protected MtrRangoMontoEstrategiaDeltaRepository mtrRangoMontoEstrategiaDeltaRepository;

    @Autowired
    protected MtrTipoContratoDeltaService mtrTipoContratoDeltaService;

    @Autowired
    protected MtrTipoContratoDeltaRepository mtrTipoContratoDeltaRepository;

    @Autowired
    protected MtrSociedadDeltaService mtrSociedadDeltaService;

    @Autowired
    protected MtrSociedadDeltaRepository mtrSociedadDeltaRepository;

    @Autowired
    protected MtrSectorDeltaService mtrSectorDeltaService;

    @Autowired
    protected MtrSectorDeltaRepository mtrSectorDeltaRepository;

    /*****************************/
    /* Metodos de Busqueda       */
    /*****************************/

    protected final ExampleMatcher setAbstractFind(ExampleMatcher matcher) {
        matcher = ExampleMatcher.matching() //
        ;
        return matcher;
    }

    protected abstract Sort setFindAll(Sort sort);

    protected abstract Sort setFind(MtrEstrategiaFacturacion req, ExampleMatcher matcher, Example<MtrEstrategiaFacturacion> example, Sort sort);

    protected abstract void setFindPaginated(PageRequestByExample<MtrEstrategiaFacturacion> req, ExampleMatcher matcher,
            Example<MtrEstrategiaFacturacion> example);

    protected final MtrEstrategiaFacturacion setObtenerBeanResponse(MtrEstrategiaFacturacionResponse bean) {
        return bean.getBean();
    }

    protected final Class<MtrEstrategiaFacturacion> setObtenerClassBean() {
        return MtrEstrategiaFacturacion.class;
    }

    protected List<Predicate> setAbstractPredicate(MtrEstrategiaFacturacionResponse bean, CriteriaBuilder cb, Root<MtrEstrategiaFacturacion> root) {
        List<Predicate> predicates = new ArrayList<>();
        MtrEstrategiaFacturacion entity = bean.getBean();
        /* Obtener condiciones */
        PredicateUtils.addPredicates(predicates, bean.getIdCondicion(), "id", entity.getId(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrRangoMontoEstrategiaCondicion(), "mtrRangoMontoEstrategia", entity.getMtrRangoMontoEstrategia(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrTipoContratoCondicion(), "mtrTipoContrato", entity.getMtrTipoContrato(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrSociedadCondicion(), "mtrSociedad", entity.getMtrSociedad(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrSectorCondicion(), "mtrSector", entity.getMtrSector(), cb, root);
        /* Obtener valores de Lista */
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "id", bean.getIdList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrRangoMontoEstrategia", bean.getMtrRangoMontoEstrategiaList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrTipoContrato", bean.getMtrTipoContratoList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrSociedad", bean.getMtrSociedadList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrSector", bean.getMtrSectorList(), cb, root);
        return predicates;
    }

    /****************/
    /* METODOS CRUD */
    /****************/

    protected final String validacionesPrevias(MtrEstrategiaFacturacion bean) throws Exception {
        String mensaje = "";
        String msg = this.setValidacionesPrevias(bean);
        if (StringUtils.isNotBlank(msg)) {
            mensaje += "* " + msg + "<br/>";
        }
        return mensaje;
    }

    protected String setValidacionesPrevias(MtrEstrategiaFacturacion bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected String validacionesPreviasCreate(MtrEstrategiaFacturacion bean) throws Exception {
        String msg = null;
        MtrEstrategiaFacturacion validar = null;
        return msg;
    }

    protected String validacionesPreviasSave(MtrEstrategiaFacturacion bean) throws Exception {
        String msg = null;
        MtrEstrategiaFacturacion validar = null;
        return msg;
    }

    protected MtrEstrategiaFacturacion completarDatosBean(MtrEstrategiaFacturacion bean) throws Exception {
        BigDecimal data = new BigDecimal(0.00);
        bean = this.setCompletarDatosBean(bean);
        return bean;
    }

    protected MtrEstrategiaFacturacion setCompletarDatosBean(MtrEstrategiaFacturacion bean) throws Exception {
        return bean;
    }

    protected final MtrEstrategiaFacturacion setAbstractCreate(MtrEstrategiaFacturacion dto) throws Exception {
        MtrEstrategiaFacturacion bean = new MtrEstrategiaFacturacion();
        bean = (MtrEstrategiaFacturacion) BeanUtils.cloneBean(dto);
        return bean;
    }

    /************************/
    /* METODOS CRUD Masivos */
    /************************/

    protected MtrEstrategiaFacturacion setUploadExcel(Cell currentCell, MtrEstrategiaFacturacion mtrEstrategiaFacturacion, int contador) throws Exception {
        Double valorDouble = new Double(0);
        BigDecimal valorDecimal = new BigDecimal(0);
        Boolean valorBoolean = new Boolean(true);
        String valorCadena = "";
        switch (contador) {
        default:
            break;
        }
        return mtrEstrategiaFacturacion;
    }

    protected AppParametria setObtenerRegistroConfiguracionUploadExcel() {
        AppParametria appParametriaData = this.appParametriaDeltaRepository.getByModuloAndLabelAndStatus(AppParametriaModuloEnum.CARGA_EXCEL.getEstado(),
                AppParametriaLabelEnum.INICIO_REGISTRO_DATA.getEstado(), Constants.ESTADO_ACTIVO);
        return appParametriaData;
    }

    protected MtrEstrategiaFacturacion setInicializarBeanUpdateExcel() {
        MtrEstrategiaFacturacion bean = new MtrEstrategiaFacturacion();
        bean.setId(null);
        return bean;
    }

    protected final Integer setObtenerId(MtrEstrategiaFacturacion bean) {
        return bean.getId();
    }

    /************************/
    /* Instancia de Bean    */
    /************************/

    protected final MtrEstrategiaFacturacion createInstance() {
        MtrEstrategiaFacturacion mtrEstrategiaFacturacion = new MtrEstrategiaFacturacion();
        return mtrEstrategiaFacturacion;
    }

    protected final BeanCargaMasivoDTO<MtrEstrategiaFacturacion> createInstanceMasivoDTO() {
        BeanCargaMasivoDTO<MtrEstrategiaFacturacion> beanCargaMasivoDTO = new BeanCargaMasivoDTO<MtrEstrategiaFacturacion>();
        return beanCargaMasivoDTO;

    }

    protected final BeanListaMasivoDTO<BeanCargaMasivoDTO<MtrEstrategiaFacturacion>> createInstanceListaMasivoDTO() {
        BeanListaMasivoDTO<BeanCargaMasivoDTO<MtrEstrategiaFacturacion>> beanCargaMasivoDTOBeanListaMasivoDTO = new BeanListaMasivoDTO<BeanCargaMasivoDTO<MtrEstrategiaFacturacion>>();
        return beanCargaMasivoDTOBeanListaMasivoDTO;
    }

    /*****************************/
    /* Metodos que generan Excel */
    /*****************************/

    protected String devuelveNombreSheet() {
        return this.NAME_SHEET;
    }

    protected String devuelveListaHeaderExcelXML() {
        return this.CONFIG_TITLE;
    }

    protected int setAbstractDownloadExcel(MtrEstrategiaFacturacion bean, HSSFRow dataRow) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador));
        contador++;
        return contador;
    }

    protected int setAbstractDownloadExcelSXLSX(MtrEstrategiaFacturacion bean, Row dataRow, List<CellStyle> cellStyleList) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        return contador;
    }

    protected String setAbstractGenerateInsertExcelSXLSX(MtrEstrategiaFacturacion bean) {
        String fechaS = "";
        String sqlInsert = "INSERT INTO mtr_estrategia_facturacion(";
        sqlInsert = sqlInsert + "mtr_estrategia_facturacion_id" + ", ";
        sqlInsert = sqlInsert + "mtr_sociedad_id" + ", ";
        sqlInsert = sqlInsert + "mtr_tipo_contrato_id" + ", ";
        sqlInsert = sqlInsert + "mtr_rango_monto_estrategia_id" + ", ";
        sqlInsert = sqlInsert + "mtr_sector_id" + ")";
        sqlInsert = sqlInsert + " VALUES (";
        sqlInsert = sqlInsert + bean.getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrRangoMontoEstrategia().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrTipoContrato().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrSociedad().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrSector().getId();
        sqlInsert = sqlInsert + " );";
        return sqlInsert;
    }

    /*****************/
    /* Otros Metodos */
    /*****************/

    public Long countByMtrRangoMontoEstrategia(MtrRangoMontoEstrategia mtrRangoMontoEstrategia) {
        return this.mtrEstrategiaFacturacionDeltaRepository.countByMtrRangoMontoEstrategia(mtrRangoMontoEstrategia);
    }

    public GraphBean graphByMtrRangoMontoEstrategia() {
        List<MtrRangoMontoEstrategia> lista = this.mtrRangoMontoEstrategiaDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrRangoMontoEstrategia bean : lista) {
            Long valor = this.mtrEstrategiaFacturacionDeltaRepository.countByMtrRangoMontoEstrategia(bean);
            String descripcion = this.setGraphDescripcionByMtrRangoMontoEstrategia(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrRangoMontoEstrategia();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrRangoMontoEstrategia();
        contador = 0;
        contadorColor = 0;
        for (MtrRangoMontoEstrategia bean : lista) {
            Long valor = this.mtrEstrategiaFacturacionDeltaRepository.countByMtrRangoMontoEstrategia(bean);
            String descripcion = this.setGraphDescripcionByMtrRangoMontoEstrategia(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrRangoMontoEstrategia(MtrRangoMontoEstrategia mtrRangoMontoEstrategia) {
        return mtrRangoMontoEstrategia.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrRangoMontoEstrategia() {
        return "MtrRangoMontoEstrategia";
    }

    protected String setGraphBarChartTituloByMtrRangoMontoEstrategia() {
        return "MtrRangoMontoEstrategia";
    }

    public Long countByMtrTipoContrato(MtrTipoContrato mtrTipoContrato) {
        return this.mtrEstrategiaFacturacionDeltaRepository.countByMtrTipoContrato(mtrTipoContrato);
    }

    public GraphBean graphByMtrTipoContrato() {
        List<MtrTipoContrato> lista = this.mtrTipoContratoDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrTipoContrato bean : lista) {
            Long valor = this.mtrEstrategiaFacturacionDeltaRepository.countByMtrTipoContrato(bean);
            String descripcion = this.setGraphDescripcionByMtrTipoContrato(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrTipoContrato();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrTipoContrato();
        contador = 0;
        contadorColor = 0;
        for (MtrTipoContrato bean : lista) {
            Long valor = this.mtrEstrategiaFacturacionDeltaRepository.countByMtrTipoContrato(bean);
            String descripcion = this.setGraphDescripcionByMtrTipoContrato(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrTipoContrato(MtrTipoContrato mtrTipoContrato) {
        return mtrTipoContrato.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrTipoContrato() {
        return "MtrTipoContrato";
    }

    protected String setGraphBarChartTituloByMtrTipoContrato() {
        return "MtrTipoContrato";
    }

    public Long countByMtrSociedad(MtrSociedad mtrSociedad) {
        return this.mtrEstrategiaFacturacionDeltaRepository.countByMtrSociedad(mtrSociedad);
    }

    public GraphBean graphByMtrSociedad() {
        List<MtrSociedad> lista = this.mtrSociedadDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrSociedad bean : lista) {
            Long valor = this.mtrEstrategiaFacturacionDeltaRepository.countByMtrSociedad(bean);
            String descripcion = this.setGraphDescripcionByMtrSociedad(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrSociedad();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrSociedad();
        contador = 0;
        contadorColor = 0;
        for (MtrSociedad bean : lista) {
            Long valor = this.mtrEstrategiaFacturacionDeltaRepository.countByMtrSociedad(bean);
            String descripcion = this.setGraphDescripcionByMtrSociedad(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrSociedad(MtrSociedad mtrSociedad) {
        return mtrSociedad.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrSociedad() {
        return "MtrSociedad";
    }

    protected String setGraphBarChartTituloByMtrSociedad() {
        return "MtrSociedad";
    }

    public Long countByMtrSector(MtrSector mtrSector) {
        return this.mtrEstrategiaFacturacionDeltaRepository.countByMtrSector(mtrSector);
    }

    public GraphBean graphByMtrSector() {
        List<MtrSector> lista = this.mtrSectorDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrSector bean : lista) {
            Long valor = this.mtrEstrategiaFacturacionDeltaRepository.countByMtrSector(bean);
            String descripcion = this.setGraphDescripcionByMtrSector(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrSector();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrSector();
        contador = 0;
        contadorColor = 0;
        for (MtrSector bean : lista) {
            Long valor = this.mtrEstrategiaFacturacionDeltaRepository.countByMtrSector(bean);
            String descripcion = this.setGraphDescripcionByMtrSector(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrSector(MtrSector mtrSector) {
        return mtrSector.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrSector() {
        return "MtrSector";
    }

    protected String setGraphBarChartTituloByMtrSector() {
        return "MtrSector";
    }

}

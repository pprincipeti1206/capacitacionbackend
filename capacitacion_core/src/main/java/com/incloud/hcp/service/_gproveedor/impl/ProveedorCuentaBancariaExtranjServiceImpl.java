/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.incloud.hcp.service._gproveedor.impl;

import com.incloud.hcp.common.excel.ExcelDefault;
import com.incloud.hcp.domain._gproveedor.domain.ProveedorCuentaBancariaExtranj;
import com.incloud.hcp.domain._gproveedor.domain.ProveedorCuentaBancariaExtranj_;
import com.incloud.hcp.repository._gproveedor.MonedaRepository;
import com.incloud.hcp.repository._gproveedor.ProveedorCuentaBancariaExtranjRepository;
import com.incloud.hcp.repository._gproveedor.ProveedorRepository;
import com.incloud.hcp.repository._gproveedor.UbigeoRepository;
import com.incloud.hcp.service._gproveedor.MonedaService;
import com.incloud.hcp.service._gproveedor.ProveedorCuentaBancariaExtranjService;
import com.incloud.hcp.service._gproveedor.ProveedorService;
import com.incloud.hcp.service._gproveedor.UbigeoService;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.service.support.PageResponse;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.DataFormat;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.streaming.SXSSFSheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.awt.*;
import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * A simple DTO Facility for ProveedorCuentaBancariaExtranj.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public abstract class ProveedorCuentaBancariaExtranjServiceImpl implements ProveedorCuentaBancariaExtranjService {

    protected final Logger log = LoggerFactory.getLogger(ProveedorCuentaBancariaExtranjServiceImpl.class);

    protected final String NAME_SHEET = "ProveedorCuentaBancariaExtranj";
    protected final String CONFIG_TITLE = "com/incloud/hcp/excel/ProveedorCuentaBancariaExtranjExcel.xml";

    @Autowired
    protected MessageSource messageSource;

    @Autowired
    protected ProveedorCuentaBancariaExtranjRepository proveedorCuentaBancariaExtranjRepository;

    @Autowired
    protected UbigeoService ubigeoService;

    @Autowired
    protected UbigeoRepository ubigeoRepository;

    @Autowired
    protected MonedaService monedaService;

    @Autowired
    protected MonedaRepository monedaRepository;

    @Autowired
    protected ProveedorService proveedorService;

    @Autowired
    protected ProveedorRepository proveedorRepository;

    @Transactional(readOnly = true)
    public Optional<ProveedorCuentaBancariaExtranj> findOne(Integer id) {
        log.debug("Ingresando findOne: ", id);
        return this.proveedorCuentaBancariaExtranjRepository.findById(id);
    }

    @Transactional(readOnly = true)
    public List<ProveedorCuentaBancariaExtranj> findAll() {
        log.debug("Ingresando findAll");
        Sort sort = Sort.by("id");
        sort = this.setFindAll(sort);
        List<ProveedorCuentaBancariaExtranj> lista = this.proveedorCuentaBancariaExtranjRepository.findAll(sort);
        return lista;
    }

    protected abstract Sort setFindAll(Sort sort);

    @Transactional(readOnly = true)
    public List<ProveedorCuentaBancariaExtranj> find(ProveedorCuentaBancariaExtranj req) {
        log.debug("Ingresando find: ", req);
        Example<ProveedorCuentaBancariaExtranj> example = null;
        ProveedorCuentaBancariaExtranj proveedorCuentaBancariaExtranj = req;
        ExampleMatcher matcher = null;
        if (proveedorCuentaBancariaExtranj != null) {
            matcher = ExampleMatcher.matching() //
                    .withMatcher(ProveedorCuentaBancariaExtranj_.nombreBenef.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.codigoTipoCuentaBenef.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.cuentaBenef.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.direccionBenef.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.regionPaisBenef.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.ciudadPaisBenef.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.referenciaBenef.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.nombreBancoPagador.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.regionPaisBancoPagador.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.ciudadPaisBancoPagador.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.direccionBancoPagador.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.tipoCodigoBancoPagador.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.codigoBancoPagador.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.nombreBancoInterme.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.regionPaisBancoInterme.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.ciudadPaisBancoInterme.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.tipoCodigoBancoInterme.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.codigoBancoInterme.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.codigoBancoPagadorInterme.getName(), match -> match.ignoreCase().startsWith());
            example = Example.of(proveedorCuentaBancariaExtranj, matcher);
        }
        Sort sort = Sort.by("id");
        sort = this.setFind(req, matcher, example, sort);
        List<ProveedorCuentaBancariaExtranj> lista = this.proveedorCuentaBancariaExtranjRepository.findAll(example, sort);
        return lista;
    }

    protected abstract Sort setFind(ProveedorCuentaBancariaExtranj req, ExampleMatcher matcher, Example<ProveedorCuentaBancariaExtranj> example, Sort sort);

    @Transactional(readOnly = true)
    public PageResponse<ProveedorCuentaBancariaExtranj> findPaginated(PageRequestByExample<ProveedorCuentaBancariaExtranj> req) {
        log.debug("Ingresando findPaginated: ", req);
        Example<ProveedorCuentaBancariaExtranj> example = null;
        ProveedorCuentaBancariaExtranj proveedorCuentaBancariaExtranj = toEntity(req.bean);
        ExampleMatcher matcher = null;
        if (proveedorCuentaBancariaExtranj != null) {
            matcher = ExampleMatcher.matching() //
                    .withMatcher(ProveedorCuentaBancariaExtranj_.nombreBenef.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.codigoTipoCuentaBenef.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.cuentaBenef.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.direccionBenef.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.regionPaisBenef.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.ciudadPaisBenef.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.referenciaBenef.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.nombreBancoPagador.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.regionPaisBancoPagador.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.ciudadPaisBancoPagador.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.direccionBancoPagador.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.tipoCodigoBancoPagador.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.codigoBancoPagador.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.nombreBancoInterme.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.regionPaisBancoInterme.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.ciudadPaisBancoInterme.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.tipoCodigoBancoInterme.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.codigoBancoInterme.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(ProveedorCuentaBancariaExtranj_.codigoBancoPagadorInterme.getName(), match -> match.ignoreCase().startsWith());
            example = Example.of(proveedorCuentaBancariaExtranj, matcher);
        }

        Page<ProveedorCuentaBancariaExtranj> page;
        Sort sort = Sort.by("id");
        sort = this.setFind(proveedorCuentaBancariaExtranj, matcher, example, sort);
        req.generarLazyDefecto();
        this.setFindPaginated(req, matcher, example);
        if (example != null) {
            page = this.proveedorCuentaBancariaExtranjRepository.findAll(example, req.toPageable(sort));
        } else {
            page = this.proveedorCuentaBancariaExtranjRepository.findAll(req.toPageable(sort));
        }

        List<ProveedorCuentaBancariaExtranj> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    protected abstract void setFindPaginated(PageRequestByExample<ProveedorCuentaBancariaExtranj> req, ExampleMatcher matcher,
            Example<ProveedorCuentaBancariaExtranj> example);

    @Transactional(readOnly = true)
    public XSSFWorkbook downloadExcelXLSX(ProveedorCuentaBancariaExtranj req) {
        log.debug("Ingresando downloadExcelXLSX: ", req);
        List<ProveedorCuentaBancariaExtranj> lista = this.find(req);
        Optional<List<ProveedorCuentaBancariaExtranj>> oList = Optional.ofNullable(lista);
        if (!oList.isPresent()) {
            return null;
        }

        XSSFWorkbook book = new XSSFWorkbook();
        XSSFSheet sheet = book.createSheet();
        int numberOfSheets = book.getNumberOfSheets();
        book.setSheetName(numberOfSheets - 1, NAME_SHEET);
        ExcelDefault.createTitle(sheet, CONFIG_TITLE, book.createCellStyle(), book.createFont());
        CellStyle cellStyle = book.createCellStyle();
        DataFormat dataFormat = book.createDataFormat();

        lista.forEach(proveedorCuentaBancariaExtranj -> {
            int lastRow = sheet.getLastRowNum();
            int i = lastRow < 0 ? 0 : lastRow;
            XSSFRow dataRow = sheet.createRow(i + 1);
            int contador = 0;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getId(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getNombreBenef(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getCodigoTipoCuentaBenef(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getCuentaBenef(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getDireccionBenef(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getRegionPaisBenef(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getCiudadPaisBenef(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getReferenciaBenef(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getNombreBancoPagador(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getRegionPaisBancoPagador(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getCiudadPaisBancoPagador(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getDireccionBancoPagador(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getTipoCodigoBancoPagador(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getCodigoBancoPagador(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getNombreBancoInterme(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getRegionPaisBancoInterme(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getCiudadPaisBancoInterme(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getTipoCodigoBancoInterme(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getCodigoBancoInterme(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getCodigoBancoPagadorInterme(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            /* Agregar aqui si desean colocar mas campos del BEAN */
            this.setDownloadExcelItem(proveedorCuentaBancariaExtranj, dataRow);

        });
        this.setDownloadExcel(sheet);
        int totalColumn = sheet.getRow(0).getLastCellNum();
        for (int i = 0; i < totalColumn; i++) {
            sheet.autoSizeColumn(i, true);
        }
        return book;
    }

    protected void setDownloadExcelItem(ProveedorCuentaBancariaExtranj bean, XSSFRow dataRow) {

    }

    protected void setDownloadExcel(XSSFSheet sheet) {

    }

    @Transactional(readOnly = true)
    public SXSSFWorkbook downloadExcelSXLSX(ProveedorCuentaBancariaExtranj req) {
        log.debug("Ingresando downloadExcelSXLSX: ", req);
        List<ProveedorCuentaBancariaExtranj> lista = this.find(req);
        Optional<List<ProveedorCuentaBancariaExtranj>> oList = Optional.ofNullable(lista);
        if (!oList.isPresent()) {
            return null;
        }

        SXSSFWorkbook book = new SXSSFWorkbook(100);
        XSSFWorkbook xbook = book.getXSSFWorkbook();
        SXSSFSheet sheet = book.createSheet();
        sheet.trackAllColumnsForAutoSizing();
        int numberOfSheets = book.getNumberOfSheets();
        book.setSheetName(numberOfSheets - 1, NAME_SHEET);
        int nroColumnas = ExcelDefault.createTitle(xbook, sheet, CONFIG_TITLE);
        for (int i = 0; i < nroColumnas; i++) {
            sheet.autoSizeColumn(i, true);
        }
        sheet.untrackAllColumnsForAutoSizing();

        XSSFCellStyle cellStyle01 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 1), new Color(226, 239, 218), false, (short) 10);
        XSSFCellStyle cellStyle02 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 192), new Color(255, 255, 255), false, (short) 10);
        List<CellStyle> cellStyleList = null;
        List<CellStyle> cellStyleList01 = ExcelDefault.generarCellStyle(xbook, cellStyle01);
        List<CellStyle> cellStyleList02 = ExcelDefault.generarCellStyle(xbook, cellStyle02);
        boolean filaImpar = true;

        for (ProveedorCuentaBancariaExtranj proveedorCuentaBancariaExtranj : lista) {
            int lastRow = sheet.getLastRowNum();
            int i = lastRow < 0 ? 0 : lastRow;
            Row dataRow = sheet.createRow(i + 1);
            int contador = 0;
            if (filaImpar) {
                cellStyleList = cellStyleList01;
            } else {
                cellStyleList = cellStyleList02;
            }
            filaImpar = !filaImpar;

            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getId(), dataRow.createCell(contador), "I", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getNombreBenef(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getCodigoTipoCuentaBenef(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getCuentaBenef(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getDireccionBenef(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getRegionPaisBenef(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getCiudadPaisBenef(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getReferenciaBenef(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getNombreBancoPagador(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getRegionPaisBancoPagador(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getCiudadPaisBancoPagador(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getDireccionBancoPagador(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getTipoCodigoBancoPagador(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getCodigoBancoPagador(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getNombreBancoInterme(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getRegionPaisBancoInterme(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getCiudadPaisBancoInterme(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getTipoCodigoBancoInterme(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getCodigoBancoInterme(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(proveedorCuentaBancariaExtranj.getCodigoBancoPagadorInterme(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            /* Agregar aqui si desean colocar mas campos del BEAN */
            this.setDownloadExcelItem(proveedorCuentaBancariaExtranj, dataRow);

        }
        this.setDownloadExcel(sheet);
        return book;
    }

    protected void setDownloadExcelItem(ProveedorCuentaBancariaExtranj bean, Row dataRow) {

    }

    protected void setDownloadExcel(Sheet sheet) {

    }

    @Transactional(readOnly = true)
    public SXSSFWorkbook generateInsertExcelSXLSX(ProveedorCuentaBancariaExtranj req) {
        log.debug("Ingresando generateInsertExcelSXLSX: ", req);
        List<ProveedorCuentaBancariaExtranj> lista = this.find(req);
        Optional<List<ProveedorCuentaBancariaExtranj>> oList = Optional.ofNullable(lista);
        if (!oList.isPresent()) {
            return null;
        }

        SXSSFWorkbook book = new SXSSFWorkbook(100);
        XSSFWorkbook xbook = book.getXSSFWorkbook();
        SXSSFSheet sheet = book.createSheet();
        sheet.trackAllColumnsForAutoSizing();
        int numberOfSheets = book.getNumberOfSheets();
        book.setSheetName(numberOfSheets - 1, NAME_SHEET);
        int nroColumnas = 1;
        for (int i = 0; i < nroColumnas; i++) {
            sheet.autoSizeColumn(i, true);
        }
        sheet.untrackAllColumnsForAutoSizing();
        XSSFCellStyle cellStyle01 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 1), new Color(226, 239, 218), false, (short) 10);
        XSSFCellStyle cellStyle02 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 192), new Color(255, 255, 255), false, (short) 10);
        List<CellStyle> cellStyleList = null;
        List<CellStyle> cellStyleList01 = ExcelDefault.generarCellStyle(xbook, cellStyle01);
        List<CellStyle> cellStyleList02 = ExcelDefault.generarCellStyle(xbook, cellStyle02);
        boolean filaImpar = true;

        for (ProveedorCuentaBancariaExtranj proveedorCuentaBancariaExtranj : lista) {
            int lastRow = sheet.getLastRowNum();
            int i = lastRow < 0 ? 0 : lastRow;
            Row dataRow = sheet.createRow(i + 1);
            int contador = 0;
            if (filaImpar) {
                cellStyleList = cellStyleList01;
            } else {
                cellStyleList = cellStyleList02;
            }
            filaImpar = !filaImpar;
            String sqlInsert = "INSERT INTO proveedor_cuenta_bancaria_extranj(";
            sqlInsert = sqlInsert + "id_proveedor_cuenta_bancaria_extranj" + ", ";
            sqlInsert = sqlInsert + "nombre_benef" + ", ";
            sqlInsert = sqlInsert + "codigo_tipo_cuenta_benef" + ", ";
            sqlInsert = sqlInsert + "cuenta_benef" + ", ";
            sqlInsert = sqlInsert + "direccion_benef" + ", ";
            sqlInsert = sqlInsert + "region_pais_benef" + ", ";
            sqlInsert = sqlInsert + "ciudad_pais_benef" + ", ";
            sqlInsert = sqlInsert + "referencia_benef" + ", ";
            sqlInsert = sqlInsert + "nombre_banco_pagador" + ", ";
            sqlInsert = sqlInsert + "region_pais_banco_pagador" + ", ";
            sqlInsert = sqlInsert + "ciudad_pais_banco_pagador" + ", ";
            sqlInsert = sqlInsert + "direccion_banco_pagador" + ", ";
            sqlInsert = sqlInsert + "tipo_codigo_banco_pagador" + ", ";
            sqlInsert = sqlInsert + "codigo_banco_pagador" + ", ";
            sqlInsert = sqlInsert + "nombre_banco_interme" + ", ";
            sqlInsert = sqlInsert + "region_pais_banco_interme" + ", ";
            sqlInsert = sqlInsert + "ciudad_pais_banco_interme" + ", ";
            sqlInsert = sqlInsert + "tipo_codigo_banco_interme" + ", ";
            sqlInsert = sqlInsert + "codigo_banco_interme" + ", ";
            sqlInsert = sqlInsert + "codigo_banco_pagador_interme" + ")";
            sqlInsert = sqlInsert + " VALUES (";
            sqlInsert = sqlInsert + proveedorCuentaBancariaExtranj.getId() + ", ";
            if (StringUtils.isBlank(proveedorCuentaBancariaExtranj.getNombreBenef())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + proveedorCuentaBancariaExtranj.getNombreBenef() + "'" + ", ";
            }
            if (StringUtils.isBlank(proveedorCuentaBancariaExtranj.getCodigoTipoCuentaBenef())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + proveedorCuentaBancariaExtranj.getCodigoTipoCuentaBenef() + "'" + ", ";
            }
            if (StringUtils.isBlank(proveedorCuentaBancariaExtranj.getCuentaBenef())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + proveedorCuentaBancariaExtranj.getCuentaBenef() + "'" + ", ";
            }
            if (StringUtils.isBlank(proveedorCuentaBancariaExtranj.getDireccionBenef())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + proveedorCuentaBancariaExtranj.getDireccionBenef() + "'" + ", ";
            }
            if (StringUtils.isBlank(proveedorCuentaBancariaExtranj.getRegionPaisBenef())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + proveedorCuentaBancariaExtranj.getRegionPaisBenef() + "'" + ", ";
            }
            if (StringUtils.isBlank(proveedorCuentaBancariaExtranj.getCiudadPaisBenef())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + proveedorCuentaBancariaExtranj.getCiudadPaisBenef() + "'" + ", ";
            }
            if (StringUtils.isBlank(proveedorCuentaBancariaExtranj.getReferenciaBenef())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + proveedorCuentaBancariaExtranj.getReferenciaBenef() + "'" + ", ";
            }
            if (StringUtils.isBlank(proveedorCuentaBancariaExtranj.getNombreBancoPagador())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + proveedorCuentaBancariaExtranj.getNombreBancoPagador() + "'" + ", ";
            }
            if (StringUtils.isBlank(proveedorCuentaBancariaExtranj.getRegionPaisBancoPagador())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + proveedorCuentaBancariaExtranj.getRegionPaisBancoPagador() + "'" + ", ";
            }
            if (StringUtils.isBlank(proveedorCuentaBancariaExtranj.getCiudadPaisBancoPagador())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + proveedorCuentaBancariaExtranj.getCiudadPaisBancoPagador() + "'" + ", ";
            }
            if (StringUtils.isBlank(proveedorCuentaBancariaExtranj.getDireccionBancoPagador())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + proveedorCuentaBancariaExtranj.getDireccionBancoPagador() + "'" + ", ";
            }
            if (StringUtils.isBlank(proveedorCuentaBancariaExtranj.getTipoCodigoBancoPagador())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + proveedorCuentaBancariaExtranj.getTipoCodigoBancoPagador() + "'" + ", ";
            }
            if (StringUtils.isBlank(proveedorCuentaBancariaExtranj.getCodigoBancoPagador())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + proveedorCuentaBancariaExtranj.getCodigoBancoPagador() + "'" + ", ";
            }
            if (StringUtils.isBlank(proveedorCuentaBancariaExtranj.getNombreBancoInterme())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + proveedorCuentaBancariaExtranj.getNombreBancoInterme() + "'" + ", ";
            }
            if (StringUtils.isBlank(proveedorCuentaBancariaExtranj.getRegionPaisBancoInterme())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + proveedorCuentaBancariaExtranj.getRegionPaisBancoInterme() + "'" + ", ";
            }
            if (StringUtils.isBlank(proveedorCuentaBancariaExtranj.getCiudadPaisBancoInterme())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + proveedorCuentaBancariaExtranj.getCiudadPaisBancoInterme() + "'" + ", ";
            }
            if (StringUtils.isBlank(proveedorCuentaBancariaExtranj.getTipoCodigoBancoInterme())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + proveedorCuentaBancariaExtranj.getTipoCodigoBancoInterme() + "'" + ", ";
            }
            if (StringUtils.isBlank(proveedorCuentaBancariaExtranj.getCodigoBancoInterme())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + proveedorCuentaBancariaExtranj.getCodigoBancoInterme() + "'" + ", ";
            }
            if (StringUtils.isBlank(proveedorCuentaBancariaExtranj.getCodigoBancoPagadorInterme())) {
                sqlInsert = sqlInsert + "null";
            } else {
                sqlInsert = sqlInsert + "'" + proveedorCuentaBancariaExtranj.getCodigoBancoPagadorInterme() + "'";
            }
            sqlInsert = sqlInsert + " );";
            ExcelDefault.setValueCell(sqlInsert, dataRow.createCell(contador), "S", cellStyleList);
            contador++;
        }
        return book;
    }

    protected ProveedorCuentaBancariaExtranj completarDatosBean(ProveedorCuentaBancariaExtranj bean) {
        BigDecimal data = new BigDecimal(0.00);
        bean = this.setCompletarDatosBean(bean);
        return bean;
    }

    protected ProveedorCuentaBancariaExtranj setCompletarDatosBean(ProveedorCuentaBancariaExtranj bean) {
        return bean;
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    public ProveedorCuentaBancariaExtranj save(ProveedorCuentaBancariaExtranj dto) {
        log.debug("Ingresando save: ", dto);
        if (dto == null) {
            return null;
        }
        dto = this.completarDatosBean(dto);
        dto = this.setBeforeSave(dto);
        this.setSave(dto);
        dto = this.proveedorCuentaBancariaExtranjRepository.save(dto);
        dto = this.setAfterSave(dto);
        return dto;
    }

    protected abstract void setSave(ProveedorCuentaBancariaExtranj dto);

    protected ProveedorCuentaBancariaExtranj setBeforeSave(ProveedorCuentaBancariaExtranj dto) {
        return dto;
    }

    protected ProveedorCuentaBancariaExtranj setAfterSave(ProveedorCuentaBancariaExtranj dto) {
        return dto;
    }

    /**
    * Save new entity or update the corresponding entity if any.
    */
    public ProveedorCuentaBancariaExtranj create(ProveedorCuentaBancariaExtranj dto) {
        log.debug("Ingresando create: ", dto);
        if (dto == null) {
            return null;
        }

        ProveedorCuentaBancariaExtranj proveedorCuentaBancariaExtranj;
        proveedorCuentaBancariaExtranj = new ProveedorCuentaBancariaExtranj();

        proveedorCuentaBancariaExtranj.setNombreBenef(dto.getNombreBenef());
        proveedorCuentaBancariaExtranj.setCodigoTipoCuentaBenef(dto.getCodigoTipoCuentaBenef());
        proveedorCuentaBancariaExtranj.setCuentaBenef(dto.getCuentaBenef());
        proveedorCuentaBancariaExtranj.setDireccionBenef(dto.getDireccionBenef());
        proveedorCuentaBancariaExtranj.setRegionPaisBenef(dto.getRegionPaisBenef());
        proveedorCuentaBancariaExtranj.setCiudadPaisBenef(dto.getCiudadPaisBenef());
        proveedorCuentaBancariaExtranj.setReferenciaBenef(dto.getReferenciaBenef());
        proveedorCuentaBancariaExtranj.setNombreBancoPagador(dto.getNombreBancoPagador());
        proveedorCuentaBancariaExtranj.setRegionPaisBancoPagador(dto.getRegionPaisBancoPagador());
        proveedorCuentaBancariaExtranj.setCiudadPaisBancoPagador(dto.getCiudadPaisBancoPagador());
        proveedorCuentaBancariaExtranj.setDireccionBancoPagador(dto.getDireccionBancoPagador());
        proveedorCuentaBancariaExtranj.setTipoCodigoBancoPagador(dto.getTipoCodigoBancoPagador());
        proveedorCuentaBancariaExtranj.setCodigoBancoPagador(dto.getCodigoBancoPagador());
        proveedorCuentaBancariaExtranj.setNombreBancoInterme(dto.getNombreBancoInterme());
        proveedorCuentaBancariaExtranj.setRegionPaisBancoInterme(dto.getRegionPaisBancoInterme());
        proveedorCuentaBancariaExtranj.setCiudadPaisBancoInterme(dto.getCiudadPaisBancoInterme());
        proveedorCuentaBancariaExtranj.setTipoCodigoBancoInterme(dto.getTipoCodigoBancoInterme());
        proveedorCuentaBancariaExtranj.setCodigoBancoInterme(dto.getCodigoBancoInterme());
        proveedorCuentaBancariaExtranj.setCodigoBancoPagadorInterme(dto.getCodigoBancoPagadorInterme());
        proveedorCuentaBancariaExtranj = this.completarDatosBean(proveedorCuentaBancariaExtranj);
        this.setCreate(proveedorCuentaBancariaExtranj);
        return this.proveedorCuentaBancariaExtranjRepository.save(proveedorCuentaBancariaExtranj);
    }

    protected abstract void setCreate(ProveedorCuentaBancariaExtranj dto);

    protected String validacionesPrevias(ProveedorCuentaBancariaExtranj dto) {
        return "";
    }

    /**
     * Delete the passed dto as a new entity or update the corresponding entity if any.
     */
    public void delete(Integer id) {
        log.debug("Ingresando delete: ", id);
        if (id == null) {
            return;
        }
        this.setDelete(id);
        this.proveedorCuentaBancariaExtranjRepository.deleteById(id);
    }

    protected abstract void setDelete(Integer id);

    public void deleteAll() {
        log.debug("Ingresando deleteAll");
        this.setDeleteAll();
        this.proveedorCuentaBancariaExtranjRepository.deleteAll();
    }

    protected abstract void setDeleteAll();

    /**
     * Converts the passed proveedorCuentaBancariaExtranj to a DTO.
     */
    protected ProveedorCuentaBancariaExtranj toDTO(ProveedorCuentaBancariaExtranj proveedorCuentaBancariaExtranj) {
        return proveedorCuentaBancariaExtranj;
    }

    /**
     * Converts the passed dto to a ProveedorCuentaBancariaExtranj.
     * Convenient for query by example.
     */
    protected ProveedorCuentaBancariaExtranj toEntity(ProveedorCuentaBancariaExtranj dto) {
        return dto;
    }

}
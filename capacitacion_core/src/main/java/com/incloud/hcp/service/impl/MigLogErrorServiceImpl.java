/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.incloud.hcp.service.impl;

import com.incloud.hcp.common.enums.AppParametriaLabelEnum;
import com.incloud.hcp.common.enums.AppParametriaModuloEnum;
import com.incloud.hcp.common.excel.ExcelDefault;
import com.incloud.hcp.domain.AppParametria;
import com.incloud.hcp.domain.MigLogError;
import com.incloud.hcp.domain.MigLogError_;
import com.incloud.hcp.domain.response.MigLogErrorResponse;
import com.incloud.hcp.exception.ServiceException;
import com.incloud.hcp.repository.delta.AppParametriaDeltaRepository;
import com.incloud.hcp.repository.delta.MigLogErrorDeltaRepository;
import com.incloud.hcp.service.MigLogErrorService;
import com.incloud.hcp.service._framework.bean.BeanCargaMasivoDTO;
import com.incloud.hcp.service._framework.bean.BeanListaMasivoDTO;
import com.incloud.hcp.service._framework.impl.JPACustomServiceImpl;
import com.incloud.hcp.service.requireNew.MigLogErrorRequireNewService;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.utils.Constants;
import com.incloud.hcp.utils.DateUtils;
import com.incloud.hcp.utils.PredicateUtils;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

/**
 * A simple DTO Facility for MigLogError.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public abstract class MigLogErrorServiceImpl extends JPACustomServiceImpl<MigLogErrorResponse, MigLogError, Integer> implements MigLogErrorService {

    protected final String NAME_SHEET = "MigLogError";
    protected final String CONFIG_TITLE = "com/incloud/hcp/excel/MigLogErrorExcel.xml";
    private final Integer REGISTROS_COLOR = 10;

    @Autowired
    protected AppParametriaDeltaRepository appParametriaDeltaRepository;

    @Autowired
    protected MigLogErrorDeltaRepository migLogErrorDeltaRepository;

    @Autowired
    protected MigLogErrorRequireNewService migLogErrorRequireNewService;

    /*****************************/
    /* Metodos de Busqueda       */
    /*****************************/

    protected final ExampleMatcher setAbstractFind(ExampleMatcher matcher) {
        matcher = ExampleMatcher.matching() //
                .withMatcher(MigLogError_.tabla.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(MigLogError_.error.getName(), match -> match.ignoreCase().startsWith());
        return matcher;
    }

    protected abstract Sort setFindAll(Sort sort);

    protected abstract Sort setFind(MigLogError req, ExampleMatcher matcher, Example<MigLogError> example, Sort sort);

    protected abstract void setFindPaginated(PageRequestByExample<MigLogError> req, ExampleMatcher matcher, Example<MigLogError> example);

    protected final MigLogError setObtenerBeanResponse(MigLogErrorResponse bean) {
        return bean.getBean();
    }

    protected final Class<MigLogError> setObtenerClassBean() {
        return MigLogError.class;
    }

    protected List<Predicate> setAbstractPredicate(MigLogErrorResponse bean, CriteriaBuilder cb, Root<MigLogError> root) {
        List<Predicate> predicates = new ArrayList<>();
        MigLogError entity = bean.getBean();
        /* Obtener condiciones */
        PredicateUtils.addPredicates(predicates, bean.getIdCondicion(), "id", entity.getId(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getTablaCondicion(), "tabla", entity.getTabla(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getIdRegistroCondicion(), "idRegistro", entity.getIdRegistro(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getFechaCreacionCondicion(), "fechaCreacion", entity.getFechaCreacion(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getErrorCondicion(), "error", entity.getError(), cb, root);
        /* Obtener valores de Lista */
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "id", bean.getIdList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "tabla", bean.getTablaList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "idRegistro", bean.getIdRegistroList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "fechaCreacion", bean.getFechaCreacionList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "error", bean.getErrorList(), cb, root);
        return predicates;
    }

    /****************/
    /* METODOS CRUD */
    /****************/

    protected final String validacionesPrevias(MigLogError bean) throws Exception {
        String mensaje = "";
        if (!Optional.of(bean.getTabla()).isPresent()) {
            String msg = this.messageSource.getMessage("message.migLogError.tabla.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getIdRegistro()).isPresent()) {
            String msg = this.messageSource.getMessage("message.migLogError.idRegistro.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getFechaCreacion()).isPresent()) {
            String msg = this.messageSource.getMessage("message.migLogError.fechaCreacion.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        String msg = this.setValidacionesPrevias(bean);
        if (StringUtils.isNotBlank(msg)) {
            mensaje += "* " + msg + "<br/>";
        }
        return mensaje;
    }

    protected String setValidacionesPrevias(MigLogError bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected String validacionesPreviasCreate(MigLogError bean) throws Exception {
        String msg = null;
        MigLogError validar = null;
        return msg;
    }

    protected String validacionesPreviasSave(MigLogError bean) throws Exception {
        String msg = null;
        MigLogError validar = null;
        return msg;
    }

    protected MigLogError completarDatosBean(MigLogError bean) throws Exception {
        BigDecimal data = new BigDecimal(0.00);
        bean = this.setCompletarDatosBean(bean);
        return bean;
    }

    protected MigLogError setCompletarDatosBean(MigLogError bean) throws Exception {
        return bean;
    }

    protected final MigLogError setAbstractCreate(MigLogError dto) throws Exception {
        MigLogError bean = new MigLogError();
        bean = (MigLogError) BeanUtils.cloneBean(dto);
        return bean;
    }

    /************************/
    /* METODOS CRUD Masivos */
    /************************/

    protected MigLogError setUploadExcel(Cell currentCell, MigLogError migLogError, int contador) throws Exception {
        Double valorDouble = new Double(0);
        BigDecimal valorDecimal = new BigDecimal(0);
        Boolean valorBoolean = new Boolean(true);
        String valorCadena = "";
        switch (contador) {
        case 1:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 40) {
                    throw new ServiceException("Valor Campo tabla contiene mas de 40 caracter(es)");
                }
                migLogError.setTabla(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo tabla est치 en formato incorrecto");
            }
            break;
        case 2:
            try {
                valorDouble = new Double(currentCell.getNumericCellValue());
                migLogError.setIdRegistro(valorDouble.intValue());
            } catch (Exception e) {
                throw new ServiceException("Valor Campo idRegistro est치 en formato incorrecto");
            }
            break;
        case 3:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                migLogError.setFechaCreacion(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo fechaCreacion est치 en formato incorrecto");
            }
            break;
        case 4:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 1000) {
                    throw new ServiceException("Valor Campo error contiene mas de 1000 caracter(es)");
                }
                migLogError.setError(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo error est치 en formato incorrecto");
            }
            break;
        default:
            break;
        }
        return migLogError;
    }

    protected AppParametria setObtenerRegistroConfiguracionUploadExcel() {
        AppParametria appParametriaData = this.appParametriaDeltaRepository.getByModuloAndLabelAndStatus(AppParametriaModuloEnum.CARGA_EXCEL.getEstado(),
                AppParametriaLabelEnum.INICIO_REGISTRO_DATA.getEstado(), Constants.ESTADO_ACTIVO);
        return appParametriaData;
    }

    protected MigLogError setInicializarBeanUpdateExcel() {
        MigLogError bean = new MigLogError();
        bean.setId(null);
        return bean;
    }

    protected final Integer setObtenerId(MigLogError bean) {
        return bean.getId();
    }

    /************************/
    /* Instancia de Bean    */
    /************************/

    protected final MigLogError createInstance() {
        MigLogError migLogError = new MigLogError();
        return migLogError;
    }

    protected final BeanCargaMasivoDTO<MigLogError> createInstanceMasivoDTO() {
        BeanCargaMasivoDTO<MigLogError> beanCargaMasivoDTO = new BeanCargaMasivoDTO<MigLogError>();
        return beanCargaMasivoDTO;

    }

    protected final BeanListaMasivoDTO<BeanCargaMasivoDTO<MigLogError>> createInstanceListaMasivoDTO() {
        BeanListaMasivoDTO<BeanCargaMasivoDTO<MigLogError>> beanCargaMasivoDTOBeanListaMasivoDTO = new BeanListaMasivoDTO<BeanCargaMasivoDTO<MigLogError>>();
        return beanCargaMasivoDTOBeanListaMasivoDTO;
    }

    /*****************************/
    /* Metodos que generan Excel */
    /*****************************/

    protected String devuelveNombreSheet() {
        return this.NAME_SHEET;
    }

    protected String devuelveListaHeaderExcelXML() {
        return this.CONFIG_TITLE;
    }

    protected int setAbstractDownloadExcel(MigLogError bean, HSSFRow dataRow) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getTabla(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getIdRegistro(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getFechaCreacion(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getError(), dataRow.createCell(contador));
        contador++;
        return contador;
    }

    protected int setAbstractDownloadExcelSXLSX(MigLogError bean, Row dataRow, List<CellStyle> cellStyleList) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getTabla(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getIdRegistro(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getFechaCreacion(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getError(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        return contador;
    }

    protected String setAbstractGenerateInsertExcelSXLSX(MigLogError bean) {
        String fechaS = "";
        String sqlInsert = "INSERT INTO mig_log_error(";
        sqlInsert = sqlInsert + "mig_log_error_id" + ", ";
        sqlInsert = sqlInsert + "tabla" + ", ";
        sqlInsert = sqlInsert + "id_registro" + ", ";
        sqlInsert = sqlInsert + "fecha_creacion" + ", ";
        sqlInsert = sqlInsert + "error" + ")";
        sqlInsert = sqlInsert + " VALUES (";
        sqlInsert = sqlInsert + bean.getId() + ", ";
        if (StringUtils.isBlank(bean.getTabla())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getTabla() + "'" + ", ";
        }
        sqlInsert = sqlInsert + bean.getIdRegistro() + ", ";
        if (bean.getFechaCreacion() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaCreacion());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        if (StringUtils.isBlank(bean.getError())) {
            sqlInsert = sqlInsert + "null";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getError() + "'";
        }
        sqlInsert = sqlInsert + " );";
        return sqlInsert;
    }

    /*****************/
    /* Otros Metodos */
    /*****************/

}

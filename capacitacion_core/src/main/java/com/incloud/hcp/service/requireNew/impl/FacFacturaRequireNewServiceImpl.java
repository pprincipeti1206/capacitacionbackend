/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntityrequirenewDTOService.java.e.vm
 */
package com.incloud.hcp.service.requireNew.impl;

import com.incloud.hcp._security.SystemLoggedUser;
import com.incloud.hcp._security.UserSession;
import com.incloud.hcp.domain.FacFactura;
import com.incloud.hcp.domain.FacHistorial;
import com.incloud.hcp.repository.delta.FacFacturaDeltaRepository;
import com.incloud.hcp.repository.delta.FacHistorialDeltaRepository;
import com.incloud.hcp.service._framework.impl.JPACustomRequiredNewServiceImpl;
import com.incloud.hcp.service.dto.FacFacturaValidarAdjuntoEntradaDto;
import com.incloud.hcp.service.dto.FacFacturaValidarAdjuntoSalidaDto;
import com.incloud.hcp.service.requireNew.FacFacturaRequireNewService;
import com.incloud.hcp.utils.Constants;
import com.incloud.hcp.utils.DateUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;

@Service
@Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)
public class FacFacturaRequireNewServiceImpl extends JPACustomRequiredNewServiceImpl<FacFactura, Integer> implements FacFacturaRequireNewService {

    @Autowired
    private SystemLoggedUser systemLoggedUser;

    @Autowired
    private FacFacturaDeltaRepository facFacturaDeltaRepository;

    @Autowired
    private FacHistorialDeltaRepository facHistorialDeltaRepository;


    public FacFacturaValidarAdjuntoSalidaDto grabarFacturaValidacionAdjunto(
            FacFacturaValidarAdjuntoEntradaDto beanEntrada) throws Exception {
        FacFacturaValidarAdjuntoSalidaDto bean = new FacFacturaValidarAdjuntoSalidaDto();
        UserSession userSession = this.systemLoggedUser.getUserSession();

        Optional<FacFactura> optionalFacFactura = this.facFacturaDeltaRepository.findById(beanEntrada.getIdFactura());
        if (!optionalFacFactura.isPresent()) {
            throw new Exception("No se encontró Factura con ID: " + beanEntrada.getIdFactura());
        }

        FacFactura facFactura = optionalFacFactura.get();

        String descripcion = "";
        if (beanEntrada.isAprobado()) {
            descripcion = "Validación de Adjuntos APROBADA";
            facFactura.setIndEstadoAdjunto(Constants.APROBADO);
        }
        else {
            descripcion = "Validación de Adjuntos RECHAZADA";
            facFactura.setIndEstadoAdjunto(Constants.RECHAZADO);
        }

        //Actualizando factura
        facFactura = this.facFacturaDeltaRepository.save(facFactura);
        bean.setFacFactura(facFactura);

        //Insertando en FacHistorial
        String nombre = userSession.getFirstName() + " " + userSession.getLastName();
        FacHistorial facHistorial = new FacHistorial();
        facHistorial.setFacFactura(facFactura);
        facHistorial.setDescripcion(descripcion);
        facHistorial.setMtrEstado(facFactura.getMtrEstado());
        facHistorial.setUsuarioHistorial(nombre);
        facHistorial.setFechaHistorial(DateUtils.obtenerFechaHoraActual());
        facHistorial = this.facHistorialDeltaRepository.save(facHistorial);

        bean.setFacHistorial(facHistorial);
        return bean;
    }
}

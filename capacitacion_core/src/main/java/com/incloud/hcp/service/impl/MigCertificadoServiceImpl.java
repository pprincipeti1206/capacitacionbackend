/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.incloud.hcp.service.impl;

import com.incloud.hcp.common.enums.AppParametriaLabelEnum;
import com.incloud.hcp.common.enums.AppParametriaModuloEnum;
import com.incloud.hcp.common.excel.ExcelDefault;
import com.incloud.hcp.domain.AppParametria;
import com.incloud.hcp.domain.MigCertificado;
import com.incloud.hcp.domain.MigCertificado_;
import com.incloud.hcp.domain.response.MigCertificadoResponse;
import com.incloud.hcp.exception.ServiceException;
import com.incloud.hcp.repository.delta.AppParametriaDeltaRepository;
import com.incloud.hcp.repository.delta.MigCertificadoDeltaRepository;
import com.incloud.hcp.service.MigCertificadoService;
import com.incloud.hcp.service._framework.bean.BeanCargaMasivoDTO;
import com.incloud.hcp.service._framework.bean.BeanListaMasivoDTO;
import com.incloud.hcp.service._framework.impl.JPACustomServiceImpl;
import com.incloud.hcp.service.requireNew.MigCertificadoRequireNewService;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.utils.Constants;
import com.incloud.hcp.utils.DateUtils;
import com.incloud.hcp.utils.PredicateUtils;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

/**
 * A simple DTO Facility for MigCertificado.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public abstract class MigCertificadoServiceImpl extends JPACustomServiceImpl<MigCertificadoResponse, MigCertificado, Integer> implements MigCertificadoService {

    protected final String NAME_SHEET = "MigCertificado";
    protected final String CONFIG_TITLE = "com/incloud/hcp/excel/MigCertificadoExcel.xml";
    private final Integer REGISTROS_COLOR = 10;

    @Autowired
    protected AppParametriaDeltaRepository appParametriaDeltaRepository;

    @Autowired
    protected MigCertificadoDeltaRepository migCertificadoDeltaRepository;

    @Autowired
    protected MigCertificadoRequireNewService migCertificadoRequireNewService;

    /*****************************/
    /* Metodos de Busqueda       */
    /*****************************/

    protected final ExampleMatcher setAbstractFind(ExampleMatcher matcher) {
        matcher = ExampleMatcher.matching() //
                .withMatcher(MigCertificado_.nroPedido.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(MigCertificado_.codigoCertificado.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(MigCertificado_.concepto.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(MigCertificado_.hojaServicio.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(MigCertificado_.userFirmaA.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(MigCertificado_.userFirmaB.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(MigCertificado_.solicitante.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(MigCertificado_.sociedad.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(MigCertificado_.moneda.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(MigCertificado_.proveedor.getName(), match -> match.ignoreCase().startsWith());
        return matcher;
    }

    protected abstract Sort setFindAll(Sort sort);

    protected abstract Sort setFind(MigCertificado req, ExampleMatcher matcher, Example<MigCertificado> example, Sort sort);

    protected abstract void setFindPaginated(PageRequestByExample<MigCertificado> req, ExampleMatcher matcher, Example<MigCertificado> example);

    protected final MigCertificado setObtenerBeanResponse(MigCertificadoResponse bean) {
        return bean.getBean();
    }

    protected final Class<MigCertificado> setObtenerClassBean() {
        return MigCertificado.class;
    }

    protected List<Predicate> setAbstractPredicate(MigCertificadoResponse bean, CriteriaBuilder cb, Root<MigCertificado> root) {
        List<Predicate> predicates = new ArrayList<>();
        MigCertificado entity = bean.getBean();
        /* Obtener condiciones */
        PredicateUtils.addPredicates(predicates, bean.getIdCondicion(), "id", entity.getId(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getNroPedidoCondicion(), "nroPedido", entity.getNroPedido(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getCodigoCertificadoCondicion(), "codigoCertificado", entity.getCodigoCertificado(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getConceptoCondicion(), "concepto", entity.getConcepto(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getFechaDesdeCondicion(), "fechaDesde", entity.getFechaDesde(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getFechaHastaCondicion(), "fechaHasta", entity.getFechaHasta(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getMontoTotalCondicion(), "montoTotal", entity.getMontoTotal(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getMontoTotalAjustadoCondicion(), "montoTotalAjustado", entity.getMontoTotalAjustado(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getHojaServicioCondicion(), "hojaServicio", entity.getHojaServicio(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getUserFirmaACondicion(), "userFirmaA", entity.getUserFirmaA(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getUserFirmaBCondicion(), "userFirmaB", entity.getUserFirmaB(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getSolicitanteCondicion(), "solicitante", entity.getSolicitante(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getSociedadCondicion(), "sociedad", entity.getSociedad(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getMonedaCondicion(), "moneda", entity.getMoneda(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getProveedorCondicion(), "proveedor", entity.getProveedor(), cb, root);
        /* Obtener valores de Lista */
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "id", bean.getIdList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "nroPedido", bean.getNroPedidoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "codigoCertificado", bean.getCodigoCertificadoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "concepto", bean.getConceptoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "fechaDesde", bean.getFechaDesdeList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "fechaHasta", bean.getFechaHastaList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "montoTotal", bean.getMontoTotalList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "montoTotalAjustado", bean.getMontoTotalAjustadoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "hojaServicio", bean.getHojaServicioList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "userFirmaA", bean.getUserFirmaAList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "userFirmaB", bean.getUserFirmaBList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "solicitante", bean.getSolicitanteList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "sociedad", bean.getSociedadList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "moneda", bean.getMonedaList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "proveedor", bean.getProveedorList(), cb, root);
        return predicates;
    }

    /****************/
    /* METODOS CRUD */
    /****************/

    protected final String validacionesPrevias(MigCertificado bean) throws Exception {
        String mensaje = "";
        if (!Optional.of(bean.getNroPedido()).isPresent()) {
            String msg = this.messageSource.getMessage("message.migCertificado.nroPedido.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getCodigoCertificado()).isPresent()) {
            String msg = this.messageSource.getMessage("message.migCertificado.codigoCertificado.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getConcepto()).isPresent()) {
            String msg = this.messageSource.getMessage("message.migCertificado.concepto.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getFechaDesde()).isPresent()) {
            String msg = this.messageSource.getMessage("message.migCertificado.fechaDesde.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getFechaHasta()).isPresent()) {
            String msg = this.messageSource.getMessage("message.migCertificado.fechaHasta.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getMontoTotal()).isPresent()) {
            String msg = this.messageSource.getMessage("message.migCertificado.montoTotal.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getMontoTotalAjustado()).isPresent()) {
            String msg = this.messageSource.getMessage("message.migCertificado.montoTotalAjustado.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getSociedad()).isPresent()) {
            String msg = this.messageSource.getMessage("message.migCertificado.sociedad.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getMoneda()).isPresent()) {
            String msg = this.messageSource.getMessage("message.migCertificado.moneda.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getProveedor()).isPresent()) {
            String msg = this.messageSource.getMessage("message.migCertificado.proveedor.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        String msg = this.setValidacionesPrevias(bean);
        if (StringUtils.isNotBlank(msg)) {
            mensaje += "* " + msg + "<br/>";
        }
        return mensaje;
    }

    protected String setValidacionesPrevias(MigCertificado bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected String validacionesPreviasCreate(MigCertificado bean) throws Exception {
        String msg = null;
        MigCertificado validar = null;
        return msg;
    }

    protected String validacionesPreviasSave(MigCertificado bean) throws Exception {
        String msg = null;
        MigCertificado validar = null;
        return msg;
    }

    protected MigCertificado completarDatosBean(MigCertificado bean) throws Exception {
        BigDecimal data = new BigDecimal(0.00);
        if (Optional.ofNullable(bean.getMontoTotal()).isPresent()) {
            bean.setMontoTotal(bean.getMontoTotal().setScale(2, BigDecimal.ROUND_HALF_UP));
        }
        if (Optional.ofNullable(bean.getMontoTotalAjustado()).isPresent()) {
            bean.setMontoTotalAjustado(bean.getMontoTotalAjustado().setScale(2, BigDecimal.ROUND_HALF_UP));
        }
        bean = this.setCompletarDatosBean(bean);
        return bean;
    }

    protected MigCertificado setCompletarDatosBean(MigCertificado bean) throws Exception {
        return bean;
    }

    protected final MigCertificado setAbstractCreate(MigCertificado dto) throws Exception {
        MigCertificado bean = new MigCertificado();
        bean = (MigCertificado) BeanUtils.cloneBean(dto);
        return bean;
    }

    /************************/
    /* METODOS CRUD Masivos */
    /************************/

    protected MigCertificado setUploadExcel(Cell currentCell, MigCertificado migCertificado, int contador) throws Exception {
        Double valorDouble = new Double(0);
        BigDecimal valorDecimal = new BigDecimal(0);
        Boolean valorBoolean = new Boolean(true);
        String valorCadena = "";
        switch (contador) {
        case 1:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 10) {
                    throw new ServiceException("Valor Campo nroPedido contiene mas de 10 caracter(es)");
                }
                migCertificado.setNroPedido(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo nroPedido está en formato incorrecto");
            }
            break;
        case 2:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 20) {
                    throw new ServiceException("Valor Campo codigoCertificado contiene mas de 20 caracter(es)");
                }
                migCertificado.setCodigoCertificado(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo codigoCertificado está en formato incorrecto");
            }
            break;
        case 3:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 200) {
                    throw new ServiceException("Valor Campo concepto contiene mas de 200 caracter(es)");
                }
                migCertificado.setConcepto(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo concepto está en formato incorrecto");
            }
            break;
        case 4:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                migCertificado.setFechaDesde(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo fechaDesde está en formato incorrecto");
            }
            break;
        case 5:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                migCertificado.setFechaHasta(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo fechaHasta está en formato incorrecto");
            }
            break;
        case 6:
            try {
                valorDecimal = new BigDecimal(currentCell.getNumericCellValue());
                migCertificado.setMontoTotal(valorDecimal);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo montoTotal está en formato incorrecto");
            }
            break;
        case 7:
            try {
                valorDecimal = new BigDecimal(currentCell.getNumericCellValue());
                migCertificado.setMontoTotalAjustado(valorDecimal);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo montoTotalAjustado está en formato incorrecto");
            }
            break;
        case 8:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 2000) {
                    throw new ServiceException("Valor Campo hojaServicio contiene mas de 2000 caracter(es)");
                }
                migCertificado.setHojaServicio(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo hojaServicio está en formato incorrecto");
            }
            break;
        case 9:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 10) {
                    throw new ServiceException("Valor Campo userFirmaA contiene mas de 10 caracter(es)");
                }
                migCertificado.setUserFirmaA(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo userFirmaA está en formato incorrecto");
            }
            break;
        case 10:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 10) {
                    throw new ServiceException("Valor Campo userFirmaB contiene mas de 10 caracter(es)");
                }
                migCertificado.setUserFirmaB(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo userFirmaB está en formato incorrecto");
            }
            break;
        case 11:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 60) {
                    throw new ServiceException("Valor Campo solicitante contiene mas de 60 caracter(es)");
                }
                migCertificado.setSolicitante(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo solicitante está en formato incorrecto");
            }
            break;
        case 12:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 10) {
                    throw new ServiceException("Valor Campo sociedad contiene mas de 10 caracter(es)");
                }
                migCertificado.setSociedad(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo sociedad está en formato incorrecto");
            }
            break;
        case 13:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 20) {
                    throw new ServiceException("Valor Campo moneda contiene mas de 20 caracter(es)");
                }
                migCertificado.setMoneda(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo moneda está en formato incorrecto");
            }
            break;
        case 14:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 300) {
                    throw new ServiceException("Valor Campo proveedor contiene mas de 300 caracter(es)");
                }
                migCertificado.setProveedor(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo proveedor está en formato incorrecto");
            }
            break;
        default:
            break;
        }
        return migCertificado;
    }

    protected AppParametria setObtenerRegistroConfiguracionUploadExcel() {
        AppParametria appParametriaData = this.appParametriaDeltaRepository.getByModuloAndLabelAndStatus(AppParametriaModuloEnum.CARGA_EXCEL.getEstado(),
                AppParametriaLabelEnum.INICIO_REGISTRO_DATA.getEstado(), Constants.ESTADO_ACTIVO);
        return appParametriaData;
    }

    protected MigCertificado setInicializarBeanUpdateExcel() {
        MigCertificado bean = new MigCertificado();
        bean.setId(null);
        return bean;
    }

    protected final Integer setObtenerId(MigCertificado bean) {
        return bean.getId();
    }

    /************************/
    /* Instancia de Bean    */
    /************************/

    protected final MigCertificado createInstance() {
        MigCertificado migCertificado = new MigCertificado();
        return migCertificado;
    }

    protected final BeanCargaMasivoDTO<MigCertificado> createInstanceMasivoDTO() {
        BeanCargaMasivoDTO<MigCertificado> beanCargaMasivoDTO = new BeanCargaMasivoDTO<MigCertificado>();
        return beanCargaMasivoDTO;

    }

    protected final BeanListaMasivoDTO<BeanCargaMasivoDTO<MigCertificado>> createInstanceListaMasivoDTO() {
        BeanListaMasivoDTO<BeanCargaMasivoDTO<MigCertificado>> beanCargaMasivoDTOBeanListaMasivoDTO = new BeanListaMasivoDTO<BeanCargaMasivoDTO<MigCertificado>>();
        return beanCargaMasivoDTOBeanListaMasivoDTO;
    }

    /*****************************/
    /* Metodos que generan Excel */
    /*****************************/

    protected String devuelveNombreSheet() {
        return this.NAME_SHEET;
    }

    protected String devuelveListaHeaderExcelXML() {
        return this.CONFIG_TITLE;
    }

    protected int setAbstractDownloadExcel(MigCertificado bean, HSSFRow dataRow) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getNroPedido(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getCodigoCertificado(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getConcepto(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getFechaDesde(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getFechaHasta(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getMontoTotal(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getMontoTotalAjustado(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getHojaServicio(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getUserFirmaA(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getUserFirmaB(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getSolicitante(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getSociedad(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getMoneda(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getProveedor(), dataRow.createCell(contador));
        contador++;
        return contador;
    }

    protected int setAbstractDownloadExcelSXLSX(MigCertificado bean, Row dataRow, List<CellStyle> cellStyleList) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getNroPedido(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getCodigoCertificado(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getConcepto(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getFechaDesde(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getFechaHasta(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getMontoTotal(), dataRow.createCell(contador), "N", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getMontoTotalAjustado(), dataRow.createCell(contador), "N", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getHojaServicio(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getUserFirmaA(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getUserFirmaB(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getSolicitante(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getSociedad(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getMoneda(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getProveedor(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        return contador;
    }

    protected String setAbstractGenerateInsertExcelSXLSX(MigCertificado bean) {
        String fechaS = "";
        String sqlInsert = "INSERT INTO mig_certificado(";
        sqlInsert = sqlInsert + "mig_certificado_id" + ", ";
        sqlInsert = sqlInsert + "nro_pedido" + ", ";
        sqlInsert = sqlInsert + "codigo_certificado" + ", ";
        sqlInsert = sqlInsert + "concepto" + ", ";
        sqlInsert = sqlInsert + "fecha_desde" + ", ";
        sqlInsert = sqlInsert + "fecha_hasta" + ", ";
        sqlInsert = sqlInsert + "monto_total" + ", ";
        sqlInsert = sqlInsert + "monto_total_ajustado" + ", ";
        sqlInsert = sqlInsert + "hoja_servicio" + ", ";
        sqlInsert = sqlInsert + "user_firma_a" + ", ";
        sqlInsert = sqlInsert + "user_firma_b" + ", ";
        sqlInsert = sqlInsert + "solicitante" + ", ";
        sqlInsert = sqlInsert + "sociedad" + ", ";
        sqlInsert = sqlInsert + "moneda" + ", ";
        sqlInsert = sqlInsert + "proveedor" + ")";
        sqlInsert = sqlInsert + " VALUES (";
        sqlInsert = sqlInsert + bean.getId() + ", ";
        if (StringUtils.isBlank(bean.getNroPedido())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getNroPedido() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getCodigoCertificado())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getCodigoCertificado() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getConcepto())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getConcepto() + "'" + ", ";
        }
        if (bean.getFechaDesde() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaDesde());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        if (bean.getFechaHasta() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaHasta());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        sqlInsert = sqlInsert + bean.getMontoTotal() + ", ";
        sqlInsert = sqlInsert + bean.getMontoTotalAjustado() + ", ";
        if (StringUtils.isBlank(bean.getHojaServicio())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getHojaServicio() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getUserFirmaA())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getUserFirmaA() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getUserFirmaB())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getUserFirmaB() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getSolicitante())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getSolicitante() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getSociedad())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getSociedad() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getMoneda())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getMoneda() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getProveedor())) {
            sqlInsert = sqlInsert + "null";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getProveedor() + "'";
        }
        sqlInsert = sqlInsert + " );";
        return sqlInsert;
    }

    /*****************/
    /* Otros Metodos */
    /*****************/

}

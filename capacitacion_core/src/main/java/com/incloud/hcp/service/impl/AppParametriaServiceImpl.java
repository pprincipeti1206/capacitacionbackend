/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.incloud.hcp.service.impl;

import com.incloud.hcp.common.enums.AppParametriaLabelEnum;
import com.incloud.hcp.common.enums.AppParametriaModuloEnum;
import com.incloud.hcp.common.excel.ExcelDefault;
import com.incloud.hcp.domain.AppParametria;
import com.incloud.hcp.domain.AppParametria_;
import com.incloud.hcp.domain.response.AppParametriaResponse;
import com.incloud.hcp.exception.ServiceException;
import com.incloud.hcp.repository.delta.AppParametriaDeltaRepository;
import com.incloud.hcp.service.AppParametriaService;
import com.incloud.hcp.service._framework.bean.BeanCargaMasivoDTO;
import com.incloud.hcp.service._framework.bean.BeanListaMasivoDTO;
import com.incloud.hcp.service._framework.impl.JPACustomServiceImpl;
import com.incloud.hcp.service.requireNew.AppParametriaRequireNewService;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.utils.Constants;
import com.incloud.hcp.utils.PredicateUtils;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * A simple DTO Facility for AppParametria.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public abstract class AppParametriaServiceImpl extends JPACustomServiceImpl<AppParametriaResponse, AppParametria, Integer> implements AppParametriaService {

    protected final String NAME_SHEET = "AppParametria";
    protected final String CONFIG_TITLE = "com/incloud/hcp/excel/AppParametriaExcel.xml";
    private final Integer REGISTROS_COLOR = 10;

    @Autowired
    protected AppParametriaDeltaRepository appParametriaDeltaRepository;

    @Autowired
    protected AppParametriaRequireNewService appParametriaRequireNewService;

    /*****************************/
    /* Metodos de Busqueda       */
    /*****************************/

    protected final ExampleMatcher setAbstractFind(ExampleMatcher matcher) {
        matcher = ExampleMatcher.matching() //
                .withMatcher(AppParametria_.modulo.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(AppParametria_.label.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(AppParametria_.description.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(AppParametria_.value1.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(AppParametria_.value2.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(AppParametria_.value3.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(AppParametria_.status.getName(), match -> match.ignoreCase().startsWith());
        return matcher;
    }

    protected abstract Sort setFindAll(Sort sort);

    protected abstract Sort setFind(AppParametria req, ExampleMatcher matcher, Example<AppParametria> example, Sort sort);

    protected abstract void setFindPaginated(PageRequestByExample<AppParametria> req, ExampleMatcher matcher, Example<AppParametria> example);

    protected final AppParametria setObtenerBeanResponse(AppParametriaResponse bean) {
        return bean.getBean();
    }

    protected final Class<AppParametria> setObtenerClassBean() {
        return AppParametria.class;
    }

    protected List<Predicate> setAbstractPredicate(AppParametriaResponse bean, CriteriaBuilder cb, Root<AppParametria> root) {
        List<Predicate> predicates = new ArrayList<>();
        AppParametria entity = bean.getBean();
        /* Obtener condiciones */
        PredicateUtils.addPredicates(predicates, bean.getIdCondicion(), "id", entity.getId(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getModuloCondicion(), "modulo", entity.getModulo(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getLabelCondicion(), "label", entity.getLabel(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getDescriptionCondicion(), "description", entity.getDescription(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getValue1Condicion(), "value1", entity.getValue1(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getValue2Condicion(), "value2", entity.getValue2(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getValue3Condicion(), "value3", entity.getValue3(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getStatusCondicion(), "status", entity.getStatus(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getCreatedByCondicion(), "createdBy", entity.getCreatedBy(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getCreatedDateCondicion(), "createdDate", entity.getCreatedDate(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getModifiedByCondicion(), "modifiedBy", entity.getModifiedBy(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getModifiedDateCondicion(), "modifiedDate", entity.getModifiedDate(), cb, root);
        /* Obtener valores de Lista */
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "id", bean.getIdList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "modulo", bean.getModuloList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "label", bean.getLabelList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "description", bean.getDescriptionList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "value1", bean.getValue1List(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "value2", bean.getValue2List(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "value3", bean.getValue3List(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "status", bean.getStatusList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "createdBy", bean.getCreatedByList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "createdDate", bean.getCreatedDateList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "modifiedBy", bean.getModifiedByList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "modifiedDate", bean.getModifiedDateList(), cb, root);
        return predicates;
    }

    /****************/
    /* METODOS CRUD */
    /****************/

    protected final String validacionesPrevias(AppParametria bean) throws Exception {
        String mensaje = "";
        String msg = this.setValidacionesPrevias(bean);
        if (StringUtils.isNotBlank(msg)) {
            mensaje += "* " + msg + "<br/>";
        }
        return mensaje;
    }

    protected String setValidacionesPrevias(AppParametria bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected String validacionesPreviasCreate(AppParametria bean) throws Exception {
        String msg = null;
        AppParametria validar = null;
        return msg;
    }

    protected String validacionesPreviasSave(AppParametria bean) throws Exception {
        String msg = null;
        AppParametria validar = null;
        return msg;
    }

    protected AppParametria completarDatosBean(AppParametria bean) throws Exception {
        BigDecimal data = new BigDecimal(0.00);
        bean = this.setCompletarDatosBean(bean);
        return bean;
    }

    protected AppParametria setCompletarDatosBean(AppParametria bean) throws Exception {
        return bean;
    }

    protected final AppParametria setAbstractCreate(AppParametria dto) throws Exception {
        AppParametria bean = new AppParametria();
        bean = (AppParametria) BeanUtils.cloneBean(dto);
        return bean;
    }

    /************************/
    /* METODOS CRUD Masivos */
    /************************/

    protected AppParametria setUploadExcel(Cell currentCell, AppParametria appParametria, int contador) throws Exception {
        Double valorDouble = new Double(0);
        BigDecimal valorDecimal = new BigDecimal(0);
        Boolean valorBoolean = new Boolean(true);
        String valorCadena = "";
        switch (contador) {
        case 1:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 30) {
                    throw new ServiceException("Valor Campo modulo contiene mas de 30 caracter(es)");
                }
                appParametria.setModulo(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo modulo est√° en formato incorrecto");
            }
            break;
        case 2:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 100) {
                    throw new ServiceException("Valor Campo label contiene mas de 100 caracter(es)");
                }
                appParametria.setLabel(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo label est√° en formato incorrecto");
            }
            break;
        case 3:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 100) {
                    throw new ServiceException("Valor Campo description contiene mas de 100 caracter(es)");
                }
                appParametria.setDescription(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo description est√° en formato incorrecto");
            }
            break;
        case 4:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 255) {
                    throw new ServiceException("Valor Campo value1 contiene mas de 255 caracter(es)");
                }
                appParametria.setValue1(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo value1 est√° en formato incorrecto");
            }
            break;
        case 5:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 255) {
                    throw new ServiceException("Valor Campo value2 contiene mas de 255 caracter(es)");
                }
                appParametria.setValue2(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo value2 est√° en formato incorrecto");
            }
            break;
        case 6:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 2000) {
                    throw new ServiceException("Valor Campo value3 contiene mas de 2000 caracter(es)");
                }
                appParametria.setValue3(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo value3 est√° en formato incorrecto");
            }
            break;
        case 7:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 1) {
                    throw new ServiceException("Valor Campo status contiene mas de 1 caracter(es)");
                }
                appParametria.setStatus(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo status est√° en formato incorrecto");
            }
            break;
        default:
            break;
        }
        return appParametria;
    }

    protected AppParametria setObtenerRegistroConfiguracionUploadExcel() {
        AppParametria appParametriaData = this.appParametriaDeltaRepository.getByModuloAndLabelAndStatus(AppParametriaModuloEnum.CARGA_EXCEL.getEstado(),
                AppParametriaLabelEnum.INICIO_REGISTRO_DATA.getEstado(), Constants.ESTADO_ACTIVO);
        return appParametriaData;
    }

    protected AppParametria setInicializarBeanUpdateExcel() {
        AppParametria bean = new AppParametria();
        bean.setId(null);
        return bean;
    }

    protected final Integer setObtenerId(AppParametria bean) {
        return bean.getId();
    }

    /************************/
    /* Instancia de Bean    */
    /************************/

    protected final AppParametria createInstance() {
        AppParametria appParametria = new AppParametria();
        return appParametria;
    }

    protected final BeanCargaMasivoDTO<AppParametria> createInstanceMasivoDTO() {
        BeanCargaMasivoDTO<AppParametria> beanCargaMasivoDTO = new BeanCargaMasivoDTO<AppParametria>();
        return beanCargaMasivoDTO;

    }

    protected final BeanListaMasivoDTO<BeanCargaMasivoDTO<AppParametria>> createInstanceListaMasivoDTO() {
        BeanListaMasivoDTO<BeanCargaMasivoDTO<AppParametria>> beanCargaMasivoDTOBeanListaMasivoDTO = new BeanListaMasivoDTO<BeanCargaMasivoDTO<AppParametria>>();
        return beanCargaMasivoDTOBeanListaMasivoDTO;
    }

    /*****************************/
    /* Metodos que generan Excel */
    /*****************************/

    protected String devuelveNombreSheet() {
        return this.NAME_SHEET;
    }

    protected String devuelveListaHeaderExcelXML() {
        return this.CONFIG_TITLE;
    }

    protected int setAbstractDownloadExcel(AppParametria bean, HSSFRow dataRow) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getModulo(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getLabel(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getDescription(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getValue1(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getValue2(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getValue3(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getStatus(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getCreatedBy(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getCreatedDate(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getModifiedBy(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getModifiedDate(), dataRow.createCell(contador));
        contador++;
        return contador;
    }

    protected int setAbstractDownloadExcelSXLSX(AppParametria bean, Row dataRow, List<CellStyle> cellStyleList) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getModulo(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getLabel(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getDescription(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getValue1(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getValue2(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getValue3(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getStatus(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getCreatedBy(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getCreatedDate(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getModifiedBy(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getModifiedDate(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        return contador;
    }

    protected String setAbstractGenerateInsertExcelSXLSX(AppParametria bean) {
        String fechaS = "";
        String sqlInsert = "INSERT INTO app_parametria(";
        sqlInsert = sqlInsert + "parametria_id" + ", ";
        sqlInsert = sqlInsert + "modulo" + ", ";
        sqlInsert = sqlInsert + "label" + ", ";
        sqlInsert = sqlInsert + "description" + ", ";
        sqlInsert = sqlInsert + "value_1" + ", ";
        sqlInsert = sqlInsert + "value_2" + ", ";
        sqlInsert = sqlInsert + "value_3" + ", ";
        sqlInsert = sqlInsert + "status" + ")";
        sqlInsert = sqlInsert + " VALUES (";
        sqlInsert = sqlInsert + bean.getId() + ", ";
        if (StringUtils.isBlank(bean.getModulo())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getModulo() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getLabel())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getLabel() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getDescription())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getDescription() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getValue1())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getValue1() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getValue2())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getValue2() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getValue3())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getValue3() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getStatus())) {
            sqlInsert = sqlInsert + "null";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getStatus() + "'";
        }
        sqlInsert = sqlInsert + " );";
        return sqlInsert;
    }

    /*****************/
    /* Otros Metodos */
    /*****************/

}

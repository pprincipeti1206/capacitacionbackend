/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.incloud.hcp.service.impl;

import com.incloud.hcp.common.enums.AppParametriaLabelEnum;
import com.incloud.hcp.common.enums.AppParametriaModuloEnum;
import com.incloud.hcp.common.excel.ExcelDefault;
import com.incloud.hcp.common.graph.GraphBarChart;
import com.incloud.hcp.common.graph.GraphBean;
import com.incloud.hcp.common.graph.GraphDataset;
import com.incloud.hcp.common.graph.GraphPieChart;
import com.incloud.hcp.domain.*;
import com.incloud.hcp.domain.response.CerNotaPedidoResponse;
import com.incloud.hcp.exception.ServiceException;
import com.incloud.hcp.repository.delta.*;
import com.incloud.hcp.service.CerNotaPedidoService;
import com.incloud.hcp.service._framework.bean.BeanCargaMasivoDTO;
import com.incloud.hcp.service._framework.bean.BeanListaMasivoDTO;
import com.incloud.hcp.service._framework.impl.JPACustomServiceImpl;
import com.incloud.hcp.service.delta.*;
import com.incloud.hcp.service.requireNew.CerNotaPedidoRequireNewService;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.utils.Constants;
import com.incloud.hcp.utils.DateUtils;
import com.incloud.hcp.utils.PredicateUtils;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

/**
 * A simple DTO Facility for CerNotaPedido.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public abstract class CerNotaPedidoServiceImpl extends JPACustomServiceImpl<CerNotaPedidoResponse, CerNotaPedido, Integer> implements CerNotaPedidoService {

    protected final String NAME_SHEET = "CerNotaPedido";
    protected final String CONFIG_TITLE = "com/incloud/hcp/excel/CerNotaPedidoExcel.xml";
    private final Integer REGISTROS_COLOR = 10;

    @Autowired
    protected AppParametriaDeltaRepository appParametriaDeltaRepository;

    @Autowired
    protected CerNotaPedidoDeltaRepository cerNotaPedidoDeltaRepository;

    @Autowired
    protected CerNotaPedidoRequireNewService cerNotaPedidoRequireNewService;

    @Autowired
    protected MtrEstadoDeltaService mtrEstadoDeltaService;

    @Autowired
    protected MtrEstadoDeltaRepository mtrEstadoDeltaRepository;

    @Autowired
    protected MtrOrgCompraDeltaService mtrOrgCompraDeltaService;

    @Autowired
    protected MtrOrgCompraDeltaRepository mtrOrgCompraDeltaRepository;

    @Autowired
    protected MtrSociedadDeltaService mtrSociedadDeltaService;

    @Autowired
    protected MtrSociedadDeltaRepository mtrSociedadDeltaRepository;

    @Autowired
    protected MtrClaseDocumentoDeltaService mtrClaseDocumentoDeltaService;

    @Autowired
    protected MtrClaseDocumentoDeltaRepository mtrClaseDocumentoDeltaRepository;

    @Autowired
    protected MtrMonedaDeltaService mtrMonedaDeltaService;

    @Autowired
    protected MtrMonedaDeltaRepository mtrMonedaDeltaRepository;

    @Autowired
    protected MtrCondicionPagoDeltaService mtrCondicionPagoDeltaService;

    @Autowired
    protected MtrCondicionPagoDeltaRepository mtrCondicionPagoDeltaRepository;

    @Autowired
    protected MtrProveedorDeltaService mtrProveedorDeltaService;

    @Autowired
    protected MtrProveedorDeltaRepository mtrProveedorDeltaRepository;

    /*****************************/
    /* Metodos de Busqueda       */
    /*****************************/

    protected final ExampleMatcher setAbstractFind(ExampleMatcher matcher) {
        matcher = ExampleMatcher.matching() //
                .withMatcher(CerNotaPedido_.codigoNotaPedidoSap.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerNotaPedido_.userCompra.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerNotaPedido_.tnotasAclaratorias.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerNotaPedido_.tlugarPago.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerNotaPedido_.tformaPago.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerNotaPedido_.tdocParticulares.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerNotaPedido_.tconcepto.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerNotaPedido_.nroPedidoOriginal.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerNotaPedido_.nroBid.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerNotaPedido_.descripcion.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerNotaPedido_.concepto.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerNotaPedido_.emailUserCompra.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerNotaPedido_.tipo.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerNotaPedido_.nombreCompletoCompra.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerNotaPedido_.tformaPago01.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerNotaPedido_.tformaPago02.getName(), match -> match.ignoreCase().startsWith());
        return matcher;
    }

    protected abstract Sort setFindAll(Sort sort);

    protected abstract Sort setFind(CerNotaPedido req, ExampleMatcher matcher, Example<CerNotaPedido> example, Sort sort);

    protected abstract void setFindPaginated(PageRequestByExample<CerNotaPedido> req, ExampleMatcher matcher, Example<CerNotaPedido> example);

    protected final CerNotaPedido setObtenerBeanResponse(CerNotaPedidoResponse bean) {
        return bean.getBean();
    }

    protected final Class<CerNotaPedido> setObtenerClassBean() {
        return CerNotaPedido.class;
    }

    protected List<Predicate> setAbstractPredicate(CerNotaPedidoResponse bean, CriteriaBuilder cb, Root<CerNotaPedido> root) {
        List<Predicate> predicates = new ArrayList<>();
        CerNotaPedido entity = bean.getBean();
        /* Obtener condiciones */
        PredicateUtils.addPredicates(predicates, bean.getIdCondicion(), "id", entity.getId(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getCodigoNotaPedidoSapCondicion(), "codigoNotaPedidoSap", entity.getCodigoNotaPedidoSap(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getUserCompraCondicion(), "userCompra", entity.getUserCompra(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getTnotasAclaratoriasCondicion(), "tnotasAclaratorias", entity.getTnotasAclaratorias(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getTlugarPagoCondicion(), "tlugarPago", entity.getTlugarPago(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getTformaPagoCondicion(), "tformaPago", entity.getTformaPago(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getTdocParticularesCondicion(), "tdocParticulares", entity.getTdocParticulares(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getTconceptoCondicion(), "tconcepto", entity.getTconcepto(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getPlazoCondicion(), "plazo", entity.getPlazo(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getNroPedidoOriginalCondicion(), "nroPedidoOriginal", entity.getNroPedidoOriginal(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getNroBidCondicion(), "nroBid", entity.getNroBid(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getMontoCondicion(), "monto", entity.getMonto(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getFechaInicioCondicion(), "fechaInicio", entity.getFechaInicio(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getFechaFinCondicion(), "fechaFin", entity.getFechaFin(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getFechaDocumentoCondicion(), "fechaDocumento", entity.getFechaDocumento(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getFechaCierreCondicion(), "fechaCierre", entity.getFechaCierre(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getFechaAcuseReciboCondicion(), "fechaAcuseRecibo", entity.getFechaAcuseRecibo(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getDescripcionCondicion(), "descripcion", entity.getDescripcion(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getConceptoCondicion(), "concepto", entity.getConcepto(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getFechaFinVigenciaCondicion(), "fechaFinVigencia", entity.getFechaFinVigencia(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getEmailUserCompraCondicion(), "emailUserCompra", entity.getEmailUserCompra(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getTipoCondicion(), "tipo", entity.getTipo(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getNombreCompletoCompraCondicion(), "nombreCompletoCompra", entity.getNombreCompletoCompra(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getTformaPago01Condicion(), "tformaPago01", entity.getTformaPago01(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getTformaPago02Condicion(), "tformaPago02", entity.getTformaPago02(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrEstadoCondicion(), "mtrEstado", entity.getMtrEstado(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrOrgCompraCondicion(), "mtrOrgCompra", entity.getMtrOrgCompra(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrSociedadCondicion(), "mtrSociedad", entity.getMtrSociedad(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrClaseDocumentoCondicion(), "mtrClaseDocumento", entity.getMtrClaseDocumento(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrMonedaCondicion(), "mtrMoneda", entity.getMtrMoneda(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrCondicionPagoCondicion(), "mtrCondicionPago", entity.getMtrCondicionPago(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrProveedorCondicion(), "mtrProveedor", entity.getMtrProveedor(), cb, root);
        /* Obtener valores de Lista */
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "id", bean.getIdList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "codigoNotaPedidoSap", bean.getCodigoNotaPedidoSapList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "userCompra", bean.getUserCompraList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "tnotasAclaratorias", bean.getTnotasAclaratoriasList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "tlugarPago", bean.getTlugarPagoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "tformaPago", bean.getTformaPagoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "tdocParticulares", bean.getTdocParticularesList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "tconcepto", bean.getTconceptoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "plazo", bean.getPlazoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "nroPedidoOriginal", bean.getNroPedidoOriginalList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "nroBid", bean.getNroBidList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "monto", bean.getMontoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "fechaInicio", bean.getFechaInicioList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "fechaFin", bean.getFechaFinList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "fechaDocumento", bean.getFechaDocumentoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "fechaCierre", bean.getFechaCierreList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "fechaAcuseRecibo", bean.getFechaAcuseReciboList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "descripcion", bean.getDescripcionList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "concepto", bean.getConceptoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "fechaFinVigencia", bean.getFechaFinVigenciaList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "emailUserCompra", bean.getEmailUserCompraList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "tipo", bean.getTipoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "nombreCompletoCompra", bean.getNombreCompletoCompraList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "tformaPago01", bean.getTformaPago01List(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "tformaPago02", bean.getTformaPago02List(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrEstado", bean.getMtrEstadoList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrOrgCompra", bean.getMtrOrgCompraList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrSociedad", bean.getMtrSociedadList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrClaseDocumento", bean.getMtrClaseDocumentoList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrMoneda", bean.getMtrMonedaList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrCondicionPago", bean.getMtrCondicionPagoList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrProveedor", bean.getMtrProveedorList(), cb, root);
        return predicates;
    }

    /****************/
    /* METODOS CRUD */
    /****************/

    protected final String validacionesPrevias(CerNotaPedido bean) throws Exception {
        String mensaje = "";
        if (!Optional.of(bean.getCodigoNotaPedidoSap()).isPresent()) {
            String msg = this.messageSource.getMessage("message.cerNotaPedido.codigoNotaPedidoSap.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        String msg = this.setValidacionesPrevias(bean);
        if (StringUtils.isNotBlank(msg)) {
            mensaje += "* " + msg + "<br/>";
        }
        return mensaje;
    }

    protected String setValidacionesPrevias(CerNotaPedido bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected String validacionesPreviasCreate(CerNotaPedido bean) throws Exception {
        String msg = null;
        CerNotaPedido validar = null;
        validar = this.cerNotaPedidoDeltaRepository.getByCodigoNotaPedidoSap(bean.getCodigoNotaPedidoSap());
        if (Optional.ofNullable(validar).isPresent()) {
            msg = this.messageSource.getMessage("message.cerNotaPedido.codigoNotaPedidoSap.duplicado", null, LocaleContextHolder.getLocale());
            return msg;
        }
        return msg;
    }

    protected String validacionesPreviasSave(CerNotaPedido bean) throws Exception {
        String msg = null;
        CerNotaPedido validar = null;
        validar = this.cerNotaPedidoDeltaRepository.getByCodigoNotaPedidoSap(bean.getCodigoNotaPedidoSap());
        if (Optional.ofNullable(validar).isPresent()) {
            if (bean.getId().intValue() != validar.getId().intValue()) {
                msg = this.messageSource.getMessage("message.cerNotaPedido.codigoNotaPedidoSap.duplicado", null, LocaleContextHolder.getLocale());
                return msg;
            }
        }
        return msg;
    }

    protected CerNotaPedido completarDatosBean(CerNotaPedido bean) throws Exception {
        BigDecimal data = new BigDecimal(0.00);
        if (Optional.ofNullable(bean.getMonto()).isPresent()) {
            bean.setMonto(bean.getMonto().setScale(2, BigDecimal.ROUND_HALF_UP));
        }
        bean = this.setCompletarDatosBean(bean);
        return bean;
    }

    protected CerNotaPedido setCompletarDatosBean(CerNotaPedido bean) throws Exception {
        return bean;
    }

    protected final CerNotaPedido setAbstractCreate(CerNotaPedido dto) throws Exception {
        CerNotaPedido bean = new CerNotaPedido();
        bean = (CerNotaPedido) BeanUtils.cloneBean(dto);
        return bean;
    }

    /************************/
    /* METODOS CRUD Masivos */
    /************************/

    protected CerNotaPedido setUploadExcel(Cell currentCell, CerNotaPedido cerNotaPedido, int contador) throws Exception {
        Double valorDouble = new Double(0);
        BigDecimal valorDecimal = new BigDecimal(0);
        Boolean valorBoolean = new Boolean(true);
        String valorCadena = "";
        switch (contador) {
        case 1:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 20) {
                    throw new ServiceException("Valor Campo codigoNotaPedidoSap contiene mas de 20 caracter(es)");
                }
                cerNotaPedido.setCodigoNotaPedidoSap(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo codigoNotaPedidoSap está en formato incorrecto");
            }
            break;
        case 2:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 20) {
                    throw new ServiceException("Valor Campo userCompra contiene mas de 20 caracter(es)");
                }
                cerNotaPedido.setUserCompra(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo userCompra está en formato incorrecto");
            }
            break;
        case 3:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 4000) {
                    throw new ServiceException("Valor Campo tnotasAclaratorias contiene mas de 4000 caracter(es)");
                }
                cerNotaPedido.setTnotasAclaratorias(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo tnotasAclaratorias está en formato incorrecto");
            }
            break;
        case 4:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 4000) {
                    throw new ServiceException("Valor Campo tlugarPago contiene mas de 4000 caracter(es)");
                }
                cerNotaPedido.setTlugarPago(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo tlugarPago está en formato incorrecto");
            }
            break;
        case 5:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 4000) {
                    throw new ServiceException("Valor Campo tformaPago contiene mas de 4000 caracter(es)");
                }
                cerNotaPedido.setTformaPago(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo tformaPago está en formato incorrecto");
            }
            break;
        case 6:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 4000) {
                    throw new ServiceException("Valor Campo tdocParticulares contiene mas de 4000 caracter(es)");
                }
                cerNotaPedido.setTdocParticulares(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo tdocParticulares está en formato incorrecto");
            }
            break;
        case 7:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 4000) {
                    throw new ServiceException("Valor Campo tconcepto contiene mas de 4000 caracter(es)");
                }
                cerNotaPedido.setTconcepto(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo tconcepto está en formato incorrecto");
            }
            break;
        case 8:
            try {
                valorDouble = new Double(currentCell.getNumericCellValue());
                cerNotaPedido.setPlazo(valorDouble.intValue());
            } catch (Exception e) {
                throw new ServiceException("Valor Campo plazo está en formato incorrecto");
            }
            break;
        case 9:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 100) {
                    throw new ServiceException("Valor Campo nroPedidoOriginal contiene mas de 100 caracter(es)");
                }
                cerNotaPedido.setNroPedidoOriginal(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo nroPedidoOriginal está en formato incorrecto");
            }
            break;
        case 10:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 10) {
                    throw new ServiceException("Valor Campo nroBid contiene mas de 10 caracter(es)");
                }
                cerNotaPedido.setNroBid(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo nroBid está en formato incorrecto");
            }
            break;
        case 11:
            try {
                valorDecimal = new BigDecimal(currentCell.getNumericCellValue());
                cerNotaPedido.setMonto(valorDecimal);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo monto está en formato incorrecto");
            }
            break;
        case 12:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                cerNotaPedido.setFechaInicio(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo fechaInicio está en formato incorrecto");
            }
            break;
        case 13:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                cerNotaPedido.setFechaFin(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo fechaFin está en formato incorrecto");
            }
            break;
        case 14:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                cerNotaPedido.setFechaDocumento(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo fechaDocumento está en formato incorrecto");
            }
            break;
        case 15:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                cerNotaPedido.setFechaCierre(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo fechaCierre está en formato incorrecto");
            }
            break;
        case 16:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                cerNotaPedido.setFechaAcuseRecibo(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo fechaAcuseRecibo está en formato incorrecto");
            }
            break;
        case 17:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 255) {
                    throw new ServiceException("Valor Campo descripcion contiene mas de 255 caracter(es)");
                }
                cerNotaPedido.setDescripcion(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo descripcion está en formato incorrecto");
            }
            break;
        case 18:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 4000) {
                    throw new ServiceException("Valor Campo concepto contiene mas de 4000 caracter(es)");
                }
                cerNotaPedido.setConcepto(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo concepto está en formato incorrecto");
            }
            break;
        case 19:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                cerNotaPedido.setFechaFinVigencia(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo fechaFinVigencia está en formato incorrecto");
            }
            break;
        case 20:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 100) {
                    throw new ServiceException("Valor Campo emailUserCompra contiene mas de 100 caracter(es)");
                }
                cerNotaPedido.setEmailUserCompra(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo emailUserCompra está en formato incorrecto");
            }
            break;
        case 21:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 1) {
                    throw new ServiceException("Valor Campo tipo contiene mas de 1 caracter(es)");
                }
                cerNotaPedido.setTipo(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo tipo está en formato incorrecto");
            }
            break;
        case 22:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 200) {
                    throw new ServiceException("Valor Campo nombreCompletoCompra contiene mas de 200 caracter(es)");
                }
                cerNotaPedido.setNombreCompletoCompra(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo nombreCompletoCompra está en formato incorrecto");
            }
            break;
        case 23:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 4000) {
                    throw new ServiceException("Valor Campo tformaPago01 contiene mas de 4000 caracter(es)");
                }
                cerNotaPedido.setTformaPago01(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo tformaPago01 está en formato incorrecto");
            }
            break;
        case 24:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 4000) {
                    throw new ServiceException("Valor Campo tformaPago02 contiene mas de 4000 caracter(es)");
                }
                cerNotaPedido.setTformaPago02(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo tformaPago02 está en formato incorrecto");
            }
            break;
        default:
            break;
        }
        return cerNotaPedido;
    }

    protected AppParametria setObtenerRegistroConfiguracionUploadExcel() {
        AppParametria appParametriaData = this.appParametriaDeltaRepository.getByModuloAndLabelAndStatus(AppParametriaModuloEnum.CARGA_EXCEL.getEstado(),
                AppParametriaLabelEnum.INICIO_REGISTRO_DATA.getEstado(), Constants.ESTADO_ACTIVO);
        return appParametriaData;
    }

    protected CerNotaPedido setInicializarBeanUpdateExcel() {
        CerNotaPedido bean = new CerNotaPedido();
        bean.setId(null);
        return bean;
    }

    protected final Integer setObtenerId(CerNotaPedido bean) {
        return bean.getId();
    }

    /************************/
    /* Instancia de Bean    */
    /************************/

    protected final CerNotaPedido createInstance() {
        CerNotaPedido cerNotaPedido = new CerNotaPedido();
        return cerNotaPedido;
    }

    protected final BeanCargaMasivoDTO<CerNotaPedido> createInstanceMasivoDTO() {
        BeanCargaMasivoDTO<CerNotaPedido> beanCargaMasivoDTO = new BeanCargaMasivoDTO<CerNotaPedido>();
        return beanCargaMasivoDTO;

    }

    protected final BeanListaMasivoDTO<BeanCargaMasivoDTO<CerNotaPedido>> createInstanceListaMasivoDTO() {
        BeanListaMasivoDTO<BeanCargaMasivoDTO<CerNotaPedido>> beanCargaMasivoDTOBeanListaMasivoDTO = new BeanListaMasivoDTO<BeanCargaMasivoDTO<CerNotaPedido>>();
        return beanCargaMasivoDTOBeanListaMasivoDTO;
    }

    /*****************************/
    /* Metodos que generan Excel */
    /*****************************/

    protected String devuelveNombreSheet() {
        return this.NAME_SHEET;
    }

    protected String devuelveListaHeaderExcelXML() {
        return this.CONFIG_TITLE;
    }

    protected int setAbstractDownloadExcel(CerNotaPedido bean, HSSFRow dataRow) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getCodigoNotaPedidoSap(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getUserCompra(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getTnotasAclaratorias(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getTlugarPago(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getTformaPago(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getTdocParticulares(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getTconcepto(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getPlazo(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getNroPedidoOriginal(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getNroBid(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getMonto(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getFechaInicio(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getFechaFin(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getFechaDocumento(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getFechaCierre(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getFechaAcuseRecibo(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getDescripcion(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getConcepto(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getFechaFinVigencia(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getEmailUserCompra(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getTipo(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getNombreCompletoCompra(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getTformaPago01(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getTformaPago02(), dataRow.createCell(contador));
        contador++;
        return contador;
    }

    protected int setAbstractDownloadExcelSXLSX(CerNotaPedido bean, Row dataRow, List<CellStyle> cellStyleList) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getCodigoNotaPedidoSap(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getUserCompra(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getTnotasAclaratorias(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getTlugarPago(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getTformaPago(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getTdocParticulares(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getTconcepto(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getPlazo(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getNroPedidoOriginal(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getNroBid(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getMonto(), dataRow.createCell(contador), "N", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getFechaInicio(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getFechaFin(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getFechaDocumento(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getFechaCierre(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getFechaAcuseRecibo(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getDescripcion(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getConcepto(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getFechaFinVigencia(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getEmailUserCompra(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getTipo(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getNombreCompletoCompra(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getTformaPago01(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getTformaPago02(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        return contador;
    }

    protected String setAbstractGenerateInsertExcelSXLSX(CerNotaPedido bean) {
        String fechaS = "";
        String sqlInsert = "INSERT INTO cer_nota_pedido(";
        sqlInsert = sqlInsert + "cer_nota_pedido_id" + ", ";
        sqlInsert = sqlInsert + "codigo_nota_pedido_sap" + ", ";
        sqlInsert = sqlInsert + "user_compra" + ", ";
        sqlInsert = sqlInsert + "tnotas_aclaratorias" + ", ";
        sqlInsert = sqlInsert + "tlugar_pago" + ", ";
        sqlInsert = sqlInsert + "tforma_pago" + ", ";
        sqlInsert = sqlInsert + "tdoc_particulares" + ", ";
        sqlInsert = sqlInsert + "tconcepto" + ", ";
        sqlInsert = sqlInsert + "plazo" + ", ";
        sqlInsert = sqlInsert + "nro_pedido_original" + ", ";
        sqlInsert = sqlInsert + "nro_bid" + ", ";
        sqlInsert = sqlInsert + "monto" + ", ";
        sqlInsert = sqlInsert + "fecha_inicio" + ", ";
        sqlInsert = sqlInsert + "fecha_fin" + ", ";
        sqlInsert = sqlInsert + "fecha_documento" + ", ";
        sqlInsert = sqlInsert + "fecha_cierre" + ", ";
        sqlInsert = sqlInsert + "fecha_acuse_recibo" + ", ";
        sqlInsert = sqlInsert + "descripcion" + ", ";
        sqlInsert = sqlInsert + "concepto" + ", ";
        sqlInsert = sqlInsert + "fecha_fin_vigencia" + ", ";
        sqlInsert = sqlInsert + "email_user_compra" + ", ";
        sqlInsert = sqlInsert + "tipo" + ", ";
        sqlInsert = sqlInsert + "nombre_completo_compra" + ", ";
        sqlInsert = sqlInsert + "tforma_pago_01" + ", ";
        sqlInsert = sqlInsert + "tforma_pago_02" + ", ";
        sqlInsert = sqlInsert + "mtr_sociedad_id" + ", ";
        sqlInsert = sqlInsert + "mtr_proveedor_id" + ", ";
        sqlInsert = sqlInsert + "mtr_condicion_pago_id" + ", ";
        sqlInsert = sqlInsert + "mtr_moneda_id" + ", ";
        sqlInsert = sqlInsert + "mtr_clase_documento_id" + ", ";
        sqlInsert = sqlInsert + "mtr_org_compra_id" + ", ";
        sqlInsert = sqlInsert + "mtr_estado_id" + ")";
        sqlInsert = sqlInsert + " VALUES (";
        sqlInsert = sqlInsert + bean.getId() + ", ";
        if (StringUtils.isBlank(bean.getCodigoNotaPedidoSap())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getCodigoNotaPedidoSap() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getUserCompra())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getUserCompra() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getTnotasAclaratorias())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getTnotasAclaratorias() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getTlugarPago())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getTlugarPago() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getTformaPago())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getTformaPago() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getTdocParticulares())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getTdocParticulares() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getTconcepto())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getTconcepto() + "'" + ", ";
        }
        sqlInsert = sqlInsert + bean.getPlazo() + ", ";
        if (StringUtils.isBlank(bean.getNroPedidoOriginal())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getNroPedidoOriginal() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getNroBid())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getNroBid() + "'" + ", ";
        }
        sqlInsert = sqlInsert + bean.getMonto() + ", ";
        if (bean.getFechaInicio() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaInicio());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        if (bean.getFechaFin() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaFin());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        if (bean.getFechaDocumento() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaDocumento());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        if (bean.getFechaCierre() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaCierre());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        if (bean.getFechaAcuseRecibo() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaAcuseRecibo());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        if (StringUtils.isBlank(bean.getDescripcion())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getDescripcion() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getConcepto())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getConcepto() + "'" + ", ";
        }
        if (bean.getFechaFinVigencia() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaFinVigencia());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        if (StringUtils.isBlank(bean.getEmailUserCompra())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getEmailUserCompra() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getTipo())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getTipo() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getNombreCompletoCompra())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getNombreCompletoCompra() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getTformaPago01())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getTformaPago01() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getTformaPago02())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getTformaPago02() + "'" + ", ";
        }
        sqlInsert = sqlInsert + bean.getMtrEstado().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrOrgCompra().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrSociedad().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrClaseDocumento().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrMoneda().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrCondicionPago().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrProveedor().getId();
        sqlInsert = sqlInsert + " );";
        return sqlInsert;
    }

    /*****************/
    /* Otros Metodos */
    /*****************/

    public Long countByMtrEstado(MtrEstado mtrEstado) {
        return this.cerNotaPedidoDeltaRepository.countByMtrEstado(mtrEstado);
    }

    public GraphBean graphByMtrEstado() {
        List<MtrEstado> lista = this.mtrEstadoDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrEstado bean : lista) {
            Long valor = this.cerNotaPedidoDeltaRepository.countByMtrEstado(bean);
            String descripcion = this.setGraphDescripcionByMtrEstado(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrEstado();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrEstado();
        contador = 0;
        contadorColor = 0;
        for (MtrEstado bean : lista) {
            Long valor = this.cerNotaPedidoDeltaRepository.countByMtrEstado(bean);
            String descripcion = this.setGraphDescripcionByMtrEstado(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrEstado(MtrEstado mtrEstado) {
        return mtrEstado.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrEstado() {
        return "MtrEstado";
    }

    protected String setGraphBarChartTituloByMtrEstado() {
        return "MtrEstado";
    }

    public Long countByMtrOrgCompra(MtrOrgCompra mtrOrgCompra) {
        return this.cerNotaPedidoDeltaRepository.countByMtrOrgCompra(mtrOrgCompra);
    }

    public GraphBean graphByMtrOrgCompra() {
        List<MtrOrgCompra> lista = this.mtrOrgCompraDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrOrgCompra bean : lista) {
            Long valor = this.cerNotaPedidoDeltaRepository.countByMtrOrgCompra(bean);
            String descripcion = this.setGraphDescripcionByMtrOrgCompra(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrOrgCompra();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrOrgCompra();
        contador = 0;
        contadorColor = 0;
        for (MtrOrgCompra bean : lista) {
            Long valor = this.cerNotaPedidoDeltaRepository.countByMtrOrgCompra(bean);
            String descripcion = this.setGraphDescripcionByMtrOrgCompra(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrOrgCompra(MtrOrgCompra mtrOrgCompra) {
        return mtrOrgCompra.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrOrgCompra() {
        return "MtrOrgCompra";
    }

    protected String setGraphBarChartTituloByMtrOrgCompra() {
        return "MtrOrgCompra";
    }

    public Long countByMtrSociedad(MtrSociedad mtrSociedad) {
        return this.cerNotaPedidoDeltaRepository.countByMtrSociedad(mtrSociedad);
    }

    public GraphBean graphByMtrSociedad() {
        List<MtrSociedad> lista = this.mtrSociedadDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrSociedad bean : lista) {
            Long valor = this.cerNotaPedidoDeltaRepository.countByMtrSociedad(bean);
            String descripcion = this.setGraphDescripcionByMtrSociedad(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrSociedad();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrSociedad();
        contador = 0;
        contadorColor = 0;
        for (MtrSociedad bean : lista) {
            Long valor = this.cerNotaPedidoDeltaRepository.countByMtrSociedad(bean);
            String descripcion = this.setGraphDescripcionByMtrSociedad(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrSociedad(MtrSociedad mtrSociedad) {
        return mtrSociedad.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrSociedad() {
        return "MtrSociedad";
    }

    protected String setGraphBarChartTituloByMtrSociedad() {
        return "MtrSociedad";
    }

    public Long countByMtrClaseDocumento(MtrClaseDocumento mtrClaseDocumento) {
        return this.cerNotaPedidoDeltaRepository.countByMtrClaseDocumento(mtrClaseDocumento);
    }

    public GraphBean graphByMtrClaseDocumento() {
        List<MtrClaseDocumento> lista = this.mtrClaseDocumentoDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrClaseDocumento bean : lista) {
            Long valor = this.cerNotaPedidoDeltaRepository.countByMtrClaseDocumento(bean);
            String descripcion = this.setGraphDescripcionByMtrClaseDocumento(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrClaseDocumento();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrClaseDocumento();
        contador = 0;
        contadorColor = 0;
        for (MtrClaseDocumento bean : lista) {
            Long valor = this.cerNotaPedidoDeltaRepository.countByMtrClaseDocumento(bean);
            String descripcion = this.setGraphDescripcionByMtrClaseDocumento(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrClaseDocumento(MtrClaseDocumento mtrClaseDocumento) {
        return mtrClaseDocumento.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrClaseDocumento() {
        return "MtrClaseDocumento";
    }

    protected String setGraphBarChartTituloByMtrClaseDocumento() {
        return "MtrClaseDocumento";
    }

    public Long countByMtrMoneda(MtrMoneda mtrMoneda) {
        return this.cerNotaPedidoDeltaRepository.countByMtrMoneda(mtrMoneda);
    }

    public GraphBean graphByMtrMoneda() {
        List<MtrMoneda> lista = this.mtrMonedaDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrMoneda bean : lista) {
            Long valor = this.cerNotaPedidoDeltaRepository.countByMtrMoneda(bean);
            String descripcion = this.setGraphDescripcionByMtrMoneda(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrMoneda();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrMoneda();
        contador = 0;
        contadorColor = 0;
        for (MtrMoneda bean : lista) {
            Long valor = this.cerNotaPedidoDeltaRepository.countByMtrMoneda(bean);
            String descripcion = this.setGraphDescripcionByMtrMoneda(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrMoneda(MtrMoneda mtrMoneda) {
        return mtrMoneda.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrMoneda() {
        return "MtrMoneda";
    }

    protected String setGraphBarChartTituloByMtrMoneda() {
        return "MtrMoneda";
    }

    public Long countByMtrCondicionPago(MtrCondicionPago mtrCondicionPago) {
        return this.cerNotaPedidoDeltaRepository.countByMtrCondicionPago(mtrCondicionPago);
    }

    public GraphBean graphByMtrCondicionPago() {
        List<MtrCondicionPago> lista = this.mtrCondicionPagoDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrCondicionPago bean : lista) {
            Long valor = this.cerNotaPedidoDeltaRepository.countByMtrCondicionPago(bean);
            String descripcion = this.setGraphDescripcionByMtrCondicionPago(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrCondicionPago();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrCondicionPago();
        contador = 0;
        contadorColor = 0;
        for (MtrCondicionPago bean : lista) {
            Long valor = this.cerNotaPedidoDeltaRepository.countByMtrCondicionPago(bean);
            String descripcion = this.setGraphDescripcionByMtrCondicionPago(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrCondicionPago(MtrCondicionPago mtrCondicionPago) {
        return mtrCondicionPago.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrCondicionPago() {
        return "MtrCondicionPago";
    }

    protected String setGraphBarChartTituloByMtrCondicionPago() {
        return "MtrCondicionPago";
    }

    public Long countByMtrProveedor(MtrProveedor mtrProveedor) {
        return this.cerNotaPedidoDeltaRepository.countByMtrProveedor(mtrProveedor);
    }

    public GraphBean graphByMtrProveedor() {
        List<MtrProveedor> lista = this.mtrProveedorDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrProveedor bean : lista) {
            Long valor = this.cerNotaPedidoDeltaRepository.countByMtrProveedor(bean);
            String descripcion = this.setGraphDescripcionByMtrProveedor(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrProveedor();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrProveedor();
        contador = 0;
        contadorColor = 0;
        for (MtrProveedor bean : lista) {
            Long valor = this.cerNotaPedidoDeltaRepository.countByMtrProveedor(bean);
            String descripcion = this.setGraphDescripcionByMtrProveedor(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrProveedor(MtrProveedor mtrProveedor) {
        return mtrProveedor.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrProveedor() {
        return "MtrProveedor";
    }

    protected String setGraphBarChartTituloByMtrProveedor() {
        return "MtrProveedor";
    }

}

/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.incloud.hcp.service.impl;

import com.incloud.hcp.common.enums.AppParametriaLabelEnum;
import com.incloud.hcp.common.enums.AppParametriaModuloEnum;
import com.incloud.hcp.common.excel.ExcelDefault;
import com.incloud.hcp.domain.AppParametria;
import com.incloud.hcp.domain.MtrTasaCambioWeb;
import com.incloud.hcp.domain.response.MtrTasaCambioWebResponse;
import com.incloud.hcp.exception.ServiceException;
import com.incloud.hcp.repository.delta.AppParametriaDeltaRepository;
import com.incloud.hcp.repository.delta.MtrTasaCambioWebDeltaRepository;
import com.incloud.hcp.service.MtrTasaCambioWebService;
import com.incloud.hcp.service._framework.bean.BeanCargaMasivoDTO;
import com.incloud.hcp.service._framework.bean.BeanListaMasivoDTO;
import com.incloud.hcp.service._framework.impl.JPACustomServiceImpl;
import com.incloud.hcp.service.requireNew.MtrTasaCambioWebRequireNewService;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.utils.Constants;
import com.incloud.hcp.utils.DateUtils;
import com.incloud.hcp.utils.PredicateUtils;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

/**
 * A simple DTO Facility for MtrTasaCambioWeb.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public abstract class MtrTasaCambioWebServiceImpl extends JPACustomServiceImpl<MtrTasaCambioWebResponse, MtrTasaCambioWeb, Integer>
        implements MtrTasaCambioWebService {

    protected final String NAME_SHEET = "MtrTasaCambioWeb";
    protected final String CONFIG_TITLE = "com/incloud/hcp/excel/MtrTasaCambioWebExcel.xml";
    private final Integer REGISTROS_COLOR = 10;

    @Autowired
    protected AppParametriaDeltaRepository appParametriaDeltaRepository;

    @Autowired
    protected MtrTasaCambioWebDeltaRepository mtrTasaCambioWebDeltaRepository;

    @Autowired
    protected MtrTasaCambioWebRequireNewService mtrTasaCambioWebRequireNewService;

    /*****************************/
    /* Metodos de Busqueda       */
    /*****************************/

    protected final ExampleMatcher setAbstractFind(ExampleMatcher matcher) {
        matcher = ExampleMatcher.matching() //
        ;
        return matcher;
    }

    protected abstract Sort setFindAll(Sort sort);

    protected abstract Sort setFind(MtrTasaCambioWeb req, ExampleMatcher matcher, Example<MtrTasaCambioWeb> example, Sort sort);

    protected abstract void setFindPaginated(PageRequestByExample<MtrTasaCambioWeb> req, ExampleMatcher matcher, Example<MtrTasaCambioWeb> example);

    protected final MtrTasaCambioWeb setObtenerBeanResponse(MtrTasaCambioWebResponse bean) {
        return bean.getBean();
    }

    protected final Class<MtrTasaCambioWeb> setObtenerClassBean() {
        return MtrTasaCambioWeb.class;
    }

    protected List<Predicate> setAbstractPredicate(MtrTasaCambioWebResponse bean, CriteriaBuilder cb, Root<MtrTasaCambioWeb> root) {
        List<Predicate> predicates = new ArrayList<>();
        MtrTasaCambioWeb entity = bean.getBean();
        /* Obtener condiciones */
        PredicateUtils.addPredicates(predicates, bean.getIdCondicion(), "id", entity.getId(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getFechaTasaCondicion(), "fechaTasa", entity.getFechaTasa(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getMtrMonedaOrigenIdCondicion(), "mtrMonedaOrigenId", entity.getMtrMonedaOrigenId(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getMtrMonedaDestinoIdCondicion(), "mtrMonedaDestinoId", entity.getMtrMonedaDestinoId(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getValorCondicion(), "valor", entity.getValor(), cb, root);
        /* Obtener valores de Lista */
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "id", bean.getIdList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "fechaTasa", bean.getFechaTasaList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "mtrMonedaOrigenId", bean.getMtrMonedaOrigenIdList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "mtrMonedaDestinoId", bean.getMtrMonedaDestinoIdList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "valor", bean.getValorList(), cb, root);
        return predicates;
    }

    /****************/
    /* METODOS CRUD */
    /****************/

    protected final String validacionesPrevias(MtrTasaCambioWeb bean) throws Exception {
        String mensaje = "";
        if (!Optional.of(bean.getFechaTasa()).isPresent()) {
            String msg = this.messageSource.getMessage("message.mtrTasaCambioWeb.fechaTasa.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getMtrMonedaOrigenId()).isPresent()) {
            String msg = this.messageSource.getMessage("message.mtrTasaCambioWeb.mtrMonedaOrigenId.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getMtrMonedaDestinoId()).isPresent()) {
            String msg = this.messageSource.getMessage("message.mtrTasaCambioWeb.mtrMonedaDestinoId.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getValor()).isPresent()) {
            String msg = this.messageSource.getMessage("message.mtrTasaCambioWeb.valor.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        String msg = this.setValidacionesPrevias(bean);
        if (StringUtils.isNotBlank(msg)) {
            mensaje += "* " + msg + "<br/>";
        }
        return mensaje;
    }

    protected String setValidacionesPrevias(MtrTasaCambioWeb bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected String validacionesPreviasCreate(MtrTasaCambioWeb bean) throws Exception {
        String msg = null;
        MtrTasaCambioWeb validar = null;
        return msg;
    }

    protected String validacionesPreviasSave(MtrTasaCambioWeb bean) throws Exception {
        String msg = null;
        MtrTasaCambioWeb validar = null;
        return msg;
    }

    protected MtrTasaCambioWeb completarDatosBean(MtrTasaCambioWeb bean) throws Exception {
        BigDecimal data = new BigDecimal(0.00);
        if (Optional.ofNullable(bean.getValor()).isPresent()) {
            bean.setValor(bean.getValor().setScale(4, BigDecimal.ROUND_HALF_UP));
        }
        bean = this.setCompletarDatosBean(bean);
        return bean;
    }

    protected MtrTasaCambioWeb setCompletarDatosBean(MtrTasaCambioWeb bean) throws Exception {
        return bean;
    }

    protected final MtrTasaCambioWeb setAbstractCreate(MtrTasaCambioWeb dto) throws Exception {
        MtrTasaCambioWeb bean = new MtrTasaCambioWeb();
        bean = (MtrTasaCambioWeb) BeanUtils.cloneBean(dto);
        return bean;
    }

    /************************/
    /* METODOS CRUD Masivos */
    /************************/

    protected MtrTasaCambioWeb setUploadExcel(Cell currentCell, MtrTasaCambioWeb mtrTasaCambioWeb, int contador) throws Exception {
        Double valorDouble = new Double(0);
        BigDecimal valorDecimal = new BigDecimal(0);
        Boolean valorBoolean = new Boolean(true);
        String valorCadena = "";
        switch (contador) {
        case 1:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                mtrTasaCambioWeb.setFechaTasa(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo fechaTasa está en formato incorrecto");
            }
            break;
        case 2:
            try {
                valorDouble = new Double(currentCell.getNumericCellValue());
                mtrTasaCambioWeb.setMtrMonedaOrigenId(valorDouble.intValue());
            } catch (Exception e) {
                throw new ServiceException("Valor Campo mtrMonedaOrigenId está en formato incorrecto");
            }
            break;
        case 3:
            try {
                valorDouble = new Double(currentCell.getNumericCellValue());
                mtrTasaCambioWeb.setMtrMonedaDestinoId(valorDouble.intValue());
            } catch (Exception e) {
                throw new ServiceException("Valor Campo mtrMonedaDestinoId está en formato incorrecto");
            }
            break;
        case 4:
            try {
                valorDecimal = new BigDecimal(currentCell.getNumericCellValue());
                mtrTasaCambioWeb.setValor(valorDecimal);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo valor está en formato incorrecto");
            }
            break;
        default:
            break;
        }
        return mtrTasaCambioWeb;
    }

    protected AppParametria setObtenerRegistroConfiguracionUploadExcel() {
        AppParametria appParametriaData = this.appParametriaDeltaRepository.getByModuloAndLabelAndStatus(AppParametriaModuloEnum.CARGA_EXCEL.getEstado(),
                AppParametriaLabelEnum.INICIO_REGISTRO_DATA.getEstado(), Constants.ESTADO_ACTIVO);
        return appParametriaData;
    }

    protected MtrTasaCambioWeb setInicializarBeanUpdateExcel() {
        MtrTasaCambioWeb bean = new MtrTasaCambioWeb();
        bean.setId(null);
        return bean;
    }

    protected final Integer setObtenerId(MtrTasaCambioWeb bean) {
        return bean.getId();
    }

    /************************/
    /* Instancia de Bean    */
    /************************/

    protected final MtrTasaCambioWeb createInstance() {
        MtrTasaCambioWeb mtrTasaCambioWeb = new MtrTasaCambioWeb();
        return mtrTasaCambioWeb;
    }

    protected final BeanCargaMasivoDTO<MtrTasaCambioWeb> createInstanceMasivoDTO() {
        BeanCargaMasivoDTO<MtrTasaCambioWeb> beanCargaMasivoDTO = new BeanCargaMasivoDTO<MtrTasaCambioWeb>();
        return beanCargaMasivoDTO;

    }

    protected final BeanListaMasivoDTO<BeanCargaMasivoDTO<MtrTasaCambioWeb>> createInstanceListaMasivoDTO() {
        BeanListaMasivoDTO<BeanCargaMasivoDTO<MtrTasaCambioWeb>> beanCargaMasivoDTOBeanListaMasivoDTO = new BeanListaMasivoDTO<BeanCargaMasivoDTO<MtrTasaCambioWeb>>();
        return beanCargaMasivoDTOBeanListaMasivoDTO;
    }

    /*****************************/
    /* Metodos que generan Excel */
    /*****************************/

    protected String devuelveNombreSheet() {
        return this.NAME_SHEET;
    }

    protected String devuelveListaHeaderExcelXML() {
        return this.CONFIG_TITLE;
    }

    protected int setAbstractDownloadExcel(MtrTasaCambioWeb bean, HSSFRow dataRow) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getFechaTasa(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getMtrMonedaOrigenId(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getMtrMonedaDestinoId(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getValor(), dataRow.createCell(contador));
        contador++;
        return contador;
    }

    protected int setAbstractDownloadExcelSXLSX(MtrTasaCambioWeb bean, Row dataRow, List<CellStyle> cellStyleList) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getFechaTasa(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getMtrMonedaOrigenId(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getMtrMonedaDestinoId(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getValor(), dataRow.createCell(contador), "N", cellStyleList);
        contador++;
        return contador;
    }

    protected String setAbstractGenerateInsertExcelSXLSX(MtrTasaCambioWeb bean) {
        String fechaS = "";
        String sqlInsert = "INSERT INTO mtr_tasa_cambio_web(";
        sqlInsert = sqlInsert + "mtr_tasa_cambio_web_id" + ", ";
        sqlInsert = sqlInsert + "fecha_tasa" + ", ";
        sqlInsert = sqlInsert + "mtr_moneda_origen_id" + ", ";
        sqlInsert = sqlInsert + "mtr_moneda_destino_id" + ", ";
        sqlInsert = sqlInsert + "valor" + ")";
        sqlInsert = sqlInsert + " VALUES (";
        sqlInsert = sqlInsert + bean.getId() + ", ";
        if (bean.getFechaTasa() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaTasa());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        sqlInsert = sqlInsert + bean.getMtrMonedaOrigenId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrMonedaDestinoId() + ", ";
        sqlInsert = sqlInsert + bean.getValor();
        sqlInsert = sqlInsert + " );";
        return sqlInsert;
    }

    /*****************/
    /* Otros Metodos */
    /*****************/

}

/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.incloud.hcp.service.impl;

import com.incloud.hcp.common.enums.AppParametriaLabelEnum;
import com.incloud.hcp.common.enums.AppParametriaModuloEnum;
import com.incloud.hcp.common.excel.ExcelDefault;
import com.incloud.hcp.common.graph.GraphBarChart;
import com.incloud.hcp.common.graph.GraphBean;
import com.incloud.hcp.common.graph.GraphDataset;
import com.incloud.hcp.common.graph.GraphPieChart;
import com.incloud.hcp.domain.*;
import com.incloud.hcp.domain.response.FacMensajeSapResponse;
import com.incloud.hcp.exception.ServiceException;
import com.incloud.hcp.repository.delta.AppParametriaDeltaRepository;
import com.incloud.hcp.repository.delta.FacFacturaDeltaRepository;
import com.incloud.hcp.repository.delta.FacHistorialDeltaRepository;
import com.incloud.hcp.repository.delta.FacMensajeSapDeltaRepository;
import com.incloud.hcp.service.FacMensajeSapService;
import com.incloud.hcp.service._framework.bean.BeanCargaMasivoDTO;
import com.incloud.hcp.service._framework.bean.BeanListaMasivoDTO;
import com.incloud.hcp.service._framework.impl.JPACustomServiceImpl;
import com.incloud.hcp.service.delta.FacFacturaDeltaService;
import com.incloud.hcp.service.delta.FacHistorialDeltaService;
import com.incloud.hcp.service.requireNew.FacMensajeSapRequireNewService;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.utils.Constants;
import com.incloud.hcp.utils.PredicateUtils;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * A simple DTO Facility for FacMensajeSap.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public abstract class FacMensajeSapServiceImpl extends JPACustomServiceImpl<FacMensajeSapResponse, FacMensajeSap, Integer> implements FacMensajeSapService {

    protected final String NAME_SHEET = "FacMensajeSap";
    protected final String CONFIG_TITLE = "com/incloud/hcp/excel/FacMensajeSapExcel.xml";
    private final Integer REGISTROS_COLOR = 10;

    @Autowired
    protected AppParametriaDeltaRepository appParametriaDeltaRepository;

    @Autowired
    protected FacMensajeSapDeltaRepository facMensajeSapDeltaRepository;

    @Autowired
    protected FacMensajeSapRequireNewService facMensajeSapRequireNewService;

    @Autowired
    protected FacFacturaDeltaService facFacturaDeltaService;

    @Autowired
    protected FacFacturaDeltaRepository facFacturaDeltaRepository;

    @Autowired
    protected FacHistorialDeltaService facHistorialDeltaService;

    @Autowired
    protected FacHistorialDeltaRepository facHistorialDeltaRepository;

    /*****************************/
    /* Metodos de Busqueda       */
    /*****************************/

    protected final ExampleMatcher setAbstractFind(ExampleMatcher matcher) {
        matcher = ExampleMatcher.matching() //
                .withMatcher(FacMensajeSap_.tipoMensaje.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(FacMensajeSap_.textoMensajeSap.getName(), match -> match.ignoreCase().startsWith());
        return matcher;
    }

    protected abstract Sort setFindAll(Sort sort);

    protected abstract Sort setFind(FacMensajeSap req, ExampleMatcher matcher, Example<FacMensajeSap> example, Sort sort);

    protected abstract void setFindPaginated(PageRequestByExample<FacMensajeSap> req, ExampleMatcher matcher, Example<FacMensajeSap> example);

    protected final FacMensajeSap setObtenerBeanResponse(FacMensajeSapResponse bean) {
        return bean.getBean();
    }

    protected final Class<FacMensajeSap> setObtenerClassBean() {
        return FacMensajeSap.class;
    }

    protected List<Predicate> setAbstractPredicate(FacMensajeSapResponse bean, CriteriaBuilder cb, Root<FacMensajeSap> root) {
        List<Predicate> predicates = new ArrayList<>();
        FacMensajeSap entity = bean.getBean();
        /* Obtener condiciones */
        PredicateUtils.addPredicates(predicates, bean.getIdCondicion(), "id", entity.getId(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getTipoMensajeCondicion(), "tipoMensaje", entity.getTipoMensaje(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getTextoMensajeSapCondicion(), "textoMensajeSap", entity.getTextoMensajeSap(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getFacFacturaCondicion(), "facFactura", entity.getFacFactura(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getFacHistorialCondicion(), "facHistorial", entity.getFacHistorial(), cb, root);
        /* Obtener valores de Lista */
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "id", bean.getIdList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "tipoMensaje", bean.getTipoMensajeList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "textoMensajeSap", bean.getTextoMensajeSapList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "facFactura", bean.getFacFacturaList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "facHistorial", bean.getFacHistorialList(), cb, root);
        return predicates;
    }

    /****************/
    /* METODOS CRUD */
    /****************/

    protected final String validacionesPrevias(FacMensajeSap bean) throws Exception {
        String mensaje = "";
        if (!Optional.of(bean.getTipoMensaje()).isPresent()) {
            String msg = this.messageSource.getMessage("message.facMensajeSap.tipoMensaje.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getTextoMensajeSap()).isPresent()) {
            String msg = this.messageSource.getMessage("message.facMensajeSap.textoMensajeSap.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        String msg = this.setValidacionesPrevias(bean);
        if (StringUtils.isNotBlank(msg)) {
            mensaje += "* " + msg + "<br/>";
        }
        return mensaje;
    }

    protected String setValidacionesPrevias(FacMensajeSap bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected String validacionesPreviasCreate(FacMensajeSap bean) throws Exception {
        String msg = null;
        FacMensajeSap validar = null;
        return msg;
    }

    protected String validacionesPreviasSave(FacMensajeSap bean) throws Exception {
        String msg = null;
        FacMensajeSap validar = null;
        return msg;
    }

    protected FacMensajeSap completarDatosBean(FacMensajeSap bean) throws Exception {
        BigDecimal data = new BigDecimal(0.00);
        bean = this.setCompletarDatosBean(bean);
        return bean;
    }

    protected FacMensajeSap setCompletarDatosBean(FacMensajeSap bean) throws Exception {
        return bean;
    }

    protected final FacMensajeSap setAbstractCreate(FacMensajeSap dto) throws Exception {
        FacMensajeSap bean = new FacMensajeSap();
        bean = (FacMensajeSap) BeanUtils.cloneBean(dto);
        return bean;
    }

    /************************/
    /* METODOS CRUD Masivos */
    /************************/

    protected FacMensajeSap setUploadExcel(Cell currentCell, FacMensajeSap facMensajeSap, int contador) throws Exception {
        Double valorDouble = new Double(0);
        BigDecimal valorDecimal = new BigDecimal(0);
        Boolean valorBoolean = new Boolean(true);
        String valorCadena = "";
        switch (contador) {
        case 1:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 20) {
                    throw new ServiceException("Valor Campo tipoMensaje contiene mas de 20 caracter(es)");
                }
                facMensajeSap.setTipoMensaje(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo tipoMensaje está en formato incorrecto");
            }
            break;
        case 2:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 4000) {
                    throw new ServiceException("Valor Campo textoMensajeSap contiene mas de 4000 caracter(es)");
                }
                facMensajeSap.setTextoMensajeSap(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo textoMensajeSap está en formato incorrecto");
            }
            break;
        default:
            break;
        }
        return facMensajeSap;
    }

    protected AppParametria setObtenerRegistroConfiguracionUploadExcel() {
        AppParametria appParametriaData = this.appParametriaDeltaRepository.getByModuloAndLabelAndStatus(AppParametriaModuloEnum.CARGA_EXCEL.getEstado(),
                AppParametriaLabelEnum.INICIO_REGISTRO_DATA.getEstado(), Constants.ESTADO_ACTIVO);
        return appParametriaData;
    }

    protected FacMensajeSap setInicializarBeanUpdateExcel() {
        FacMensajeSap bean = new FacMensajeSap();
        bean.setId(null);
        return bean;
    }

    protected final Integer setObtenerId(FacMensajeSap bean) {
        return bean.getId();
    }

    /************************/
    /* Instancia de Bean    */
    /************************/

    protected final FacMensajeSap createInstance() {
        FacMensajeSap facMensajeSap = new FacMensajeSap();
        return facMensajeSap;
    }

    protected final BeanCargaMasivoDTO<FacMensajeSap> createInstanceMasivoDTO() {
        BeanCargaMasivoDTO<FacMensajeSap> beanCargaMasivoDTO = new BeanCargaMasivoDTO<FacMensajeSap>();
        return beanCargaMasivoDTO;

    }

    protected final BeanListaMasivoDTO<BeanCargaMasivoDTO<FacMensajeSap>> createInstanceListaMasivoDTO() {
        BeanListaMasivoDTO<BeanCargaMasivoDTO<FacMensajeSap>> beanCargaMasivoDTOBeanListaMasivoDTO = new BeanListaMasivoDTO<BeanCargaMasivoDTO<FacMensajeSap>>();
        return beanCargaMasivoDTOBeanListaMasivoDTO;
    }

    /*****************************/
    /* Metodos que generan Excel */
    /*****************************/

    protected String devuelveNombreSheet() {
        return this.NAME_SHEET;
    }

    protected String devuelveListaHeaderExcelXML() {
        return this.CONFIG_TITLE;
    }

    protected int setAbstractDownloadExcel(FacMensajeSap bean, HSSFRow dataRow) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getTipoMensaje(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getTextoMensajeSap(), dataRow.createCell(contador));
        contador++;
        return contador;
    }

    protected int setAbstractDownloadExcelSXLSX(FacMensajeSap bean, Row dataRow, List<CellStyle> cellStyleList) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getTipoMensaje(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getTextoMensajeSap(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        return contador;
    }

    protected String setAbstractGenerateInsertExcelSXLSX(FacMensajeSap bean) {
        String fechaS = "";
        String sqlInsert = "INSERT INTO fac_mensaje_sap(";
        sqlInsert = sqlInsert + "fac_mensaje_sap_id" + ", ";
        sqlInsert = sqlInsert + "tipo_mensaje" + ", ";
        sqlInsert = sqlInsert + "texto_mensaje_sap" + ", ";
        sqlInsert = sqlInsert + "fac_factura_id" + ", ";
        sqlInsert = sqlInsert + "fac_historial_id" + ")";
        sqlInsert = sqlInsert + " VALUES (";
        sqlInsert = sqlInsert + bean.getId() + ", ";
        if (StringUtils.isBlank(bean.getTipoMensaje())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getTipoMensaje() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getTextoMensajeSap())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getTextoMensajeSap() + "'" + ", ";
        }
        sqlInsert = sqlInsert + bean.getFacFactura().getId() + ", ";
        sqlInsert = sqlInsert + bean.getFacHistorial().getId();
        sqlInsert = sqlInsert + " );";
        return sqlInsert;
    }

    /*****************/
    /* Otros Metodos */
    /*****************/

    public Long countByFacFactura(FacFactura facFactura) {
        return this.facMensajeSapDeltaRepository.countByFacFactura(facFactura);
    }

    public GraphBean graphByFacFactura() {
        List<FacFactura> lista = this.facFacturaDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (FacFactura bean : lista) {
            Long valor = this.facMensajeSapDeltaRepository.countByFacFactura(bean);
            String descripcion = this.setGraphDescripcionByFacFactura(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByFacFactura();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByFacFactura();
        contador = 0;
        contadorColor = 0;
        for (FacFactura bean : lista) {
            Long valor = this.facMensajeSapDeltaRepository.countByFacFactura(bean);
            String descripcion = this.setGraphDescripcionByFacFactura(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByFacFactura(FacFactura facFactura) {
        return facFactura.getId().toString();
    }

    protected String setGraphPieChartTituloByFacFactura() {
        return "FacFactura";
    }

    protected String setGraphBarChartTituloByFacFactura() {
        return "FacFactura";
    }

    public Long countByFacHistorial(FacHistorial facHistorial) {
        return this.facMensajeSapDeltaRepository.countByFacHistorial(facHistorial);
    }

    public GraphBean graphByFacHistorial() {
        List<FacHistorial> lista = this.facHistorialDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (FacHistorial bean : lista) {
            Long valor = this.facMensajeSapDeltaRepository.countByFacHistorial(bean);
            String descripcion = this.setGraphDescripcionByFacHistorial(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByFacHistorial();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByFacHistorial();
        contador = 0;
        contadorColor = 0;
        for (FacHistorial bean : lista) {
            Long valor = this.facMensajeSapDeltaRepository.countByFacHistorial(bean);
            String descripcion = this.setGraphDescripcionByFacHistorial(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByFacHistorial(FacHistorial facHistorial) {
        return facHistorial.getId().toString();
    }

    protected String setGraphPieChartTituloByFacHistorial() {
        return "FacHistorial";
    }

    protected String setGraphBarChartTituloByFacHistorial() {
        return "FacHistorial";
    }

}

/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 *
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntitydeltaDTOService.java.e.vm
 */
/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 *
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntitydeltaDTOService.java.e.vm
 */
package com.incloud.hcp.service.delta.impl;

import com.incloud.hcp.bean.custom.*;
import com.incloud.hcp.domain.*;
import com.incloud.hcp.enums.EstadoFacturaEnum;
import com.incloud.hcp.mapper.*;
import com.incloud.hcp.repository.delta.*;
import com.incloud.hcp.service.delta.SapRfcDeltaService;
import com.incloud.hcp.service.impl.SapRfcServiceImpl;
import com.incloud.hcp.service.notificacion.CertificadoNotaPedidoNotificacion;
import com.incloud.hcp.service.notificacion.CertificadoNotificacion;
import com.incloud.hcp.service.notificacion.MailSetting;
import com.incloud.hcp.util.Utils;
import com.incloud.hcp.utils.Constants;
import com.incloud.hcp.utils.DateUtils;
import com.sap.conn.jco.*;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.text.ParseException;
import java.util.*;
import java.util.stream.Collectors;

/**
 * A simple DTO Facility for AppParametria.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public class SapRfcDeltaServiceImpl extends SapRfcServiceImpl implements SapRfcDeltaService {
    private final Logger logger = LoggerFactory.getLogger(this.getClass());
    private final Logger log = LoggerFactory.getLogger(SapRfcDeltaServiceImpl.class);

    private final int NRO_EJECUCIONES_RFC = 3;

    @Autowired
    private MtrClaseDocumentoDeltaRepository mtrClaseDocumentoDeltaRepository;

    @Autowired
    private MtrCentroAlmacenDeltaRepository mtrCentroAlmacenDeltaRepository;

    @Autowired
    private MtrUnidadMedidaDeltaRepository mtrUnidadMedidaDeltaRepository;

    @Autowired
    private FacFacturaDeltaRepository facFacturaDeltaRepository;

    @Autowired
    private FacImputacionDeltaRepository facImputacionDeltaRepository;

    @Autowired
    private FacMensajeSapDeltaRepository facMensajeSapDeltaRepository;

    @Autowired
    private FacFacturaCertificadoDeltaRepository facFacturaCertificadoDeltaRepository;

    @Autowired
    private FacHistorialDeltaRepository facHistorialDeltaRepository;

    @Autowired
    private MtrTasaCambioDeltaRepository mtrTasaCambioDeltaRepository;

    @Autowired
    private MtrTasaCambioWebDeltaRepository mtrTasaCambioWebDeltaRepository;

    @Autowired
    private MtrMonedaDeltaRepository mtrMonedaDeltaRepository;


    @Autowired
    private MtrGrupoArticuloDeltaRepository mtrGrupoArticuloDeltaRepository;


    @Autowired
    private MtrGrupoArticuloMapper mtrGrupoArticuloMapper;

    @Autowired
    private MtrUsuarioFacturacionDeltaRepository mtrUsuarioFacturacionDeltaRepository;

    @Autowired
    private MtrProveedorDeltaRepository mtrProveedorDeltaRepository;

    @Autowired
    private MtrUnidadMedidaMapper mtrUnidadMedidaMapper;

    @Autowired
    private MtrBienServicioMapper mtrBienServicioMapper;

    @Autowired
    private MtrBienServicioDeltaRepository mtrBienServicioDeltaRepository;


    @Autowired
    private MtrCondicionPagoDeltaRepository mtrCondicionPagoDeltaRepository;

    @Autowired
    private MtrEstadoDeltaRepository mtrEstadoDeltaRepository;


    @Autowired
    private MtrOrgCompraDeltaRepository mtrOrgCompraDeltaRepository;

    @Autowired
    private MtrCuentaMayorDeltaRepository mtrCuentaMayorDeltaRepository;

    @Autowired
    private MtrSociedadDeltaRepository mtrSociedadDeltaRepository;

    @Autowired
    private CerNotaPedidoDeltaRepository cerNotaPedidoDeltaRepository;

    @Autowired
    private CerCertificadoFirmaDeltaRepository cerCertificadoFirmaDeltaRepository;

    @Autowired
    private CerNotaPedidoDetalleDeltaRepository cerNotaPedidoDetalleDeltaRepository;

    @Autowired
    private CerFirmaDeltaRepository cerFirmaDeltaRepository;

    @Autowired
    private CerCertificadoDetalleDeltaRepository cerCertificadoDetalleDeltaRepository;

    @Autowired
    private MtrTipoFirmaDeltaRepository mtrTipoFirmaDeltaRepository;

    @Autowired
    private MtrAprobadorDeltaRepository mtrAprobadorDeltaRepository;

    @Autowired
    private AppParametriaDeltaRepository appParametriaDeltaRepository;

    @Autowired
    private MtrCuentaImputacionDeltaRepository mtrCuentaImputacionDeltaRepository;

    @Autowired
    private MtrTipoImputacionDeltaRepository mtrTipoImputacionDeltaRepository;

    @Autowired
    protected CertificadoNotificacion certificadoNotificacion;


    @Autowired
    protected CertificadoNotaPedidoNotificacion certificadoNotaPedidoNotificacion;

    @Autowired
    private AppProcesoLogDeltaRepository appProcesoLogDeltaRepository;

    @Autowired
    private CerNotaPedidoMapper cerNotaPedidoMapper;

    @Autowired
    private MtrClaseDocumentoMapper mtrClaseDocumentoMapper;

    @Autowired
    private MtrEstadoMapper mtrEstadoMapper;

    @Autowired
    private MtrMonedaMapper mtrMonedaMapper;

    @Autowired
    private MtrProveedorMapper mtrProveedorMapper;

    @Autowired
    private MtrSociedadMapper mtrSociedadMapper;

    @Autowired
    private FacEstrategiaIteracionDeltaRepository facEstrategiaIteracionDeltaRepository;


    //SMTP Values
    @Value("${spring.mail.username}")
    private String username;
    @Value("${spring.mail.password}")
    private String password;
    @Value("${spring.mail.host}")
    private String host;
    @Value("${spring.mail.port}")
    private String port;

    @Value("${sm.portal.dev}")
    private Boolean isDev;

    @Override
    public MensajeSap integrarNotaPedido(List<RangeSap> rangeDoc, List<RangeSap> rangeFecha, String enviarCorreo) throws Exception {

        List<DescargaServicioSap> lista = new ArrayList<DescargaServicioSap>();
        DescargaServicioSap descarga = new DescargaServicioSap();
        List<MensajeSap> listaMensaje = new ArrayList<MensajeSap>();
        MensajeSap msg = new MensajeSap("S", "", "La nota de pedido se actualiz√≥ correctamente");
        //this.mtrSociedadMapper.findAllByCodesSap("'dfdf'").get(0).getDescBrv()
        //Listas de dependencias
        List<MtrProveedor> listaProveedor = this.mtrProveedorDeltaRepository.findAll();
        List<MtrCondicionPago> listaCondicion = this.mtrCondicionPagoDeltaRepository.findAll();
        List<MtrEstado> listaEstado = this.mtrEstadoDeltaRepository.findAll();
        List<MtrMoneda> listaMoneda = this.mtrMonedaDeltaRepository.findAll();
        List<MtrOrgCompra> listaOrgCompra = this.mtrOrgCompraDeltaRepository.findAll();
        List<MtrSociedad> listaSociedad = this.mtrSociedadDeltaRepository.findAll();
        List<MtrClaseDocumento> listaDoc = this.mtrClaseDocumentoDeltaRepository.findAll();

        //Lista de cabecera detalle
        List<CerNotaPedido> listaOrden = this.cerNotaPedidoDeltaRepository.findAll();
        List<CerNotaPedidoDetalle> listaDetalle = this.cerNotaPedidoDetalleDeltaRepository.findAll();
        List<CerFirma> listaCerFirma = this.cerFirmaDeltaRepository.findAll();
        List<MtrTipoFirma> listaTipoFirma = this.mtrTipoFirmaDeltaRepository.findAll();
        List<MtrAprobador> listaAprobador = this.mtrAprobadorDeltaRepository.findAll();
        List<AppParametria> listaParametria = this.appParametriaDeltaRepository.findAll();

        //Formato de fechas de entrada y de salida
        java.text.SimpleDateFormat formatIn = new java.text.SimpleDateFormat("yyyy/MM/dd");
        java.text.SimpleDateFormat formatSap = new java.text.SimpleDateFormat("yyyyMMdd");

        //Obtener parametro de estado inicial para notas de pedido provenientes de SAP
        String codEstadoInicial = "NPCE";
        Optional<AppParametria> optionalParametroEstado = listaParametria.stream()
                .filter(x -> "IPROVIDER".equalsIgnoreCase(x.getModulo())
                        && "Estado Inicial Posicion".equalsIgnoreCase(x.getLabel()))
                .findFirst();
        if (optionalParametroEstado.isPresent())
            codEstadoInicial = optionalParametroEstado.get().getValue1();

        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_DESCARGA_DOC_COMPRA");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            JCoTable tableImportDocCompra = imports.getTable("TI_EBELN");
            JCoTable tableImportFechaPedido = imports.getTable("TI_BEDAT");
            log.error("integrarNotaPedido :: Iniciando :: ");
            //Poblamos Rango documento de compras
            if (rangeDoc != null && rangeDoc.size() > 0) {
                for (RangeSap ele : rangeDoc) {
                    tableImportDocCompra.appendRow();
                    tableImportDocCompra.setValue("SIGN", ele.getSign());
                    tableImportDocCompra.setValue("OPTION", ele.getOption());
                    String low = (!StringUtils.isBlank(ele.getLow())) ? String.format("%010d", new Long(ele.getLow().trim())) : "";
                    String high = (!StringUtils.isBlank(ele.getHigh())) ? String.format("%010d", new Long(ele.getHigh().trim())) : "";

                    tableImportDocCompra.setValue("LOW", low);
                    tableImportDocCompra.setValue("HIGH", high);

                }
                log.error("integrarNotaPedido :: tableImportDocCompra :: " + tableImportDocCompra);
            }
            //Poblamos Rango fecha de pedidos
            if (rangeFecha != null && rangeFecha.size() > 0) {
                for (RangeSap ele : rangeFecha) {
                    tableImportFechaPedido.appendRow();
                    tableImportFechaPedido.setValue("SIGN", ele.getSign());
                    tableImportFechaPedido.setValue("OPTION", ele.getOption());


                    java.util.Date utilDInicio = formatIn.parse(ele.getLow());
                    java.util.Date utilDFin = formatIn.parse(ele.getHigh());

                    tableImportFechaPedido.setValue("LOW", utilDInicio);
                    tableImportFechaPedido.setValue("HIGH", utilDFin);
                }
                log.error("integrarNotaPedido :: tableImportFechaPedido :: " + tableImportFechaPedido);
            }
            //imports.setValue("TI_EXIT", "X");
            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableGeneral = exports.getTable("TO_DESC_SERV");
            JCoTable tableCabecera = exports.getTable("TO_TCAB");
            JCoTable tablePosicion = exports.getTable("TO_TPOS");
            JCoTable tableServicio = exports.getTable("TO_TSERV");
            JCoTable tableTexto = exports.getTable("TO_TEXT_CAB");

            log.error("integrarNotaPedido :: tableGeneral :: " + tableGeneral);
            log.error("integrarNotaPedido :: tableCabecera :: " + tableCabecera);
            log.error("integrarNotaPedido :: tablePosicion :: " + tablePosicion);
            log.error("integrarNotaPedido :: tableServicio :: " + tableServicio);
            //log.error("integrarNotaPedido :: tableTexto :: " + tableTexto);

            List<CerNotaPedido> listaEntity = new ArrayList<CerNotaPedido>();
            //Recuperar datos de pedidos

            for (int i = 0; i < tableCabecera.getNumRows(); i++) {

                //DescargaServicioSap des = new DescargaServicioSap();
                tableCabecera.setRow(i);

                //Setear Valores a la tabla
                CerNotaPedido pedido = new CerNotaPedido();

                Optional<CerNotaPedido> optionalPedido = listaOrden.stream()
                        .filter(x -> tableCabecera.getString("EBELN").equalsIgnoreCase(x.getCodigoNotaPedidoSap()))
                        .findFirst();
                if (optionalPedido.isPresent())
                    pedido = optionalPedido.get();

                Optional<MtrProveedor> optionalProveedor = listaProveedor.stream()
                        .filter(x -> tableCabecera.getString("LIFNR").equalsIgnoreCase(x.getLifnr()))
                        .findFirst();

                logger.error("========================= orden compra cabecera" + tableCabecera.getString("EBELN") + "=============================================");
                if (optionalProveedor.isPresent()) {
                    logger.error("integrarNotaPedido Proveedor ok");
                    //log.error("Proveedor ok");
                    Optional<MtrCondicionPago> optionalCondicion = listaCondicion.stream()
                            .filter(x -> tableCabecera.getString("ZTERM").equalsIgnoreCase(x.getCodigoCondicionPagoSap()))
                            .findFirst();
                    if (optionalCondicion.isPresent()) {
                        logger.error("integrarNotaPedido condicion pago ok");
                        //log.error("condicion pago ok");
                        // String finalEstadoInicial = estadoInicial;
                        //String finalCodEstadoFinal = codEstadoFinal;
                        String finalCodEstadoInicial = codEstadoInicial;
                        Optional<MtrEstado> optionalEstado = listaEstado.stream()
                                .filter(x -> finalCodEstadoInicial.equalsIgnoreCase(x.getCodigoEstado()))
                                .findFirst();
                        if (optionalEstado.isPresent()) {
                            logger.error("integrarNotaPedido Estado ok");
                            //log.error("Estado ok");

                            Optional<MtrMoneda> optionalMoneda = listaMoneda.stream()
                                    .filter(x -> tableCabecera.getString("WAERS").equalsIgnoreCase(x.getDescBrv()))
                                    .findFirst();
                            if (optionalMoneda.isPresent()) {
                                logger.error("integrarNotaPedido Moneda ok");
                                //log.error("Moneda ok");
                                Optional<MtrOrgCompra> optionalOrg = listaOrgCompra.stream()
                                        .filter(x -> tableCabecera.getString("EKORG").equalsIgnoreCase(x.getCodigoOrgCompraSap()))
                                        .findFirst();
                                if (optionalOrg.isPresent()) {
                                    logger.error("integrarNotaPedido Organizacion ok");
                                    //log.error("Organizacion ok");
                                    /*Optional<MtrCentroAlmacen> optionalCentro = listaCentro.stream()
                                            .filter(x -> descargaDoc.getWerks().equalsIgnoreCase(x.getCodigoCentroSap()))
                                            .findFirst();
                                    if(optionalCentro.isPresent()) {

                                    }*/
                                    Optional<MtrSociedad> optionalSociedad = listaSociedad.stream()
                                            .filter(x -> tableCabecera.getString("BUKRS").equalsIgnoreCase(x.getDescBrv()))
                                            .findFirst();
                                    if (optionalSociedad.isPresent()) {
                                        logger.error("integrarNotaPedido Sociedad ok");
                                        //log.error("Sociedad ok");
                                        Optional<MtrClaseDocumento> optionalClase = listaDoc.stream()
                                                .filter(x -> tableCabecera.getString("CLDOC").equalsIgnoreCase(x.getCodigoSap()))
                                                .findFirst();
                                        if (optionalClase.isPresent()) {
                                            logger.error("integrarNotaPedido Clase doc ok");
                                            //log.error("Clase doc ok34");
                                            pedido.setMtrProveedor(optionalProveedor.get());
                                            pedido.setMtrCondicionPago(optionalCondicion.get());
                                            if (StringUtils.isBlank(enviarCorreo))
                                                pedido.setMtrEstado(optionalEstado.get());
                                            pedido.setMtrMoneda(optionalMoneda.get());
                                            pedido.setMtrOrgCompra(optionalOrg.get());
                                            pedido.setMtrSociedad(optionalSociedad.get());
                                            pedido.setMtrClaseDocumento(optionalClase.get());
                                            if (StringUtils.isNotBlank(tableCabecera.getString("IHREZ")))
                                                pedido.setNroBid(tableCabecera.getString("IHREZ"));

                                            /*if() {

                                            }*/

                                            pedido.setCodigoNotaPedidoSap(tableCabecera.getString("EBELN"));

                                            pedido.setUserCompra(tableCabecera.getString("ERNAM"));
                                            pedido.setEmailUserCompra(tableCabecera.getString("SMTP_ADDR"));
                                            pedido.setTipo(tableCabecera.getString("TIPO"));
                                            pedido.setMonto(new BigDecimal("0.00"));
                                            if (!StringUtils.isBlank(tableCabecera.getString("VALOR_AJUSTADO"))) {
                                                if (!tableCabecera.getString("VALOR_AJUSTADO").trim().equalsIgnoreCase("n/a")) {
                                                    pedido.setMonto(new BigDecimal(tableCabecera.getString("VALOR_AJUSTADO").trim()));
                                                }
                                            }
                                            if (!StringUtils.isBlank(tableCabecera.getString("ZPLAZO"))) {
                                                pedido.setPlazo(Integer.parseInt(tableCabecera.getString("ZPLAZO").trim()));
                                            }
                                            if (!StringUtils.isBlank(tableCabecera.getString("ZKDATE"))
                                                    && !tableCabecera.getString("ZKDATE").equalsIgnoreCase("00000000")) {
                                                pedido.setFechaFinVigencia(formatSap.parse(tableCabecera.getString("ZKDATE").trim()));
                                            }
                                            pedido.setNombreCompletoCompra(tableCabecera.getString("NAME_TEXT"));


                                            if (!StringUtils.isBlank(tableCabecera.getString("BEDAT")) && !tableCabecera.getString("BEDAT").equalsIgnoreCase("00000000"))
                                                pedido.setFechaDocumento(formatSap.parse(tableCabecera.getString("BEDAT").trim()));
                                            if (!StringUtils.isBlank(tableCabecera.getString("VIGDES")) && !tableCabecera.getString("VIGDES").equalsIgnoreCase("00000000"))
                                                pedido.setFechaInicio(formatSap.parse(tableCabecera.getString("VIGDES").trim()));
                                            if (!StringUtils.isBlank(tableCabecera.getString("VIGHAS")) && !tableCabecera.getString("VIGHAS").equalsIgnoreCase("00000000"))
                                                pedido.setFechaFin(formatSap.parse(tableCabecera.getString("VIGHAS").trim()));
                                            //Inicio  texto grandes
                                            String tnotasAclaratorias = "";
                                            String tlugarPago = "";
                                            String tformaPago = "";
                                            String tdocParticulares = "";
                                            String tconcepto = "";
                                            String breakLine = System.lineSeparator();
                                            for (int z = 0; z < tableTexto.getNumRows(); z++) {
                                                //tconcepto
                                                tableTexto.setRow(z);
                                                if (tableCabecera.getString("EBELN").equalsIgnoreCase(tableTexto.getString("PO_NUMBER"))) {
                                                    //tconcepto
                                                    if (tableTexto.getString("ID").equalsIgnoreCase("F01") || tableTexto.getString("ID").equalsIgnoreCase("K01")) {
                                                        tconcepto = tconcepto + tableTexto.getString("TDLINE");
                                                        tconcepto = tconcepto + breakLine;
                                                    }
                                                    //Notas aclaratorias

                                                    if (tableTexto.getString("ID").equalsIgnoreCase("F02") || tableTexto.getString("ID").equalsIgnoreCase("K08")) {
                                                        tnotasAclaratorias = tnotasAclaratorias + tableTexto.getString("TDLINE");
                                                        tnotasAclaratorias = tnotasAclaratorias + breakLine;
                                                    }

                                                    //Lugar y forma de entrega

                                                    if (tableTexto.getString("ID").equalsIgnoreCase("F05") || tableTexto.getString("ID").equalsIgnoreCase("K05")) {
                                                        tlugarPago = tlugarPago + tableTexto.getString("TDLINE");
                                                        tlugarPago = tlugarPago + breakLine;
                                                    }

                                                    //Forma de pago

                                                    if (tableTexto.getString("ID").equalsIgnoreCase("F07") || tableTexto.getString("ID").equalsIgnoreCase("K07")) {
                                                        tformaPago = tformaPago + tableTexto.getString("TDLINE");
                                                        tformaPago = tformaPago + breakLine;
                                                    }

                                                    //Documentos de aplicacion

                                                    if (tableTexto.getString("ID").equalsIgnoreCase("F20")) {
                                                        tdocParticulares = tdocParticulares + tableTexto.getString("TDLINE");
                                                        tdocParticulares = tdocParticulares + breakLine;
                                                    }


                                                }


                                            }
                                            String tformaPago01 = "";
                                            if (tformaPago.length() > 4000) {
                                                tformaPago01 = tformaPago.substring(4000, tformaPago.length());
                                                tformaPago = tformaPago.substring(0, 4000);
                                            }
                                            pedido.setTconcepto(tconcepto.trim());
                                            pedido.setTdocParticulares(tdocParticulares.trim());
                                            pedido.setTlugarPago(tlugarPago.trim());
                                            pedido.setTformaPago(tformaPago.trim());
                                            pedido.setTformaPago01(tformaPago01.trim());
                                            pedido.setTnotasAclaratorias(tnotasAclaratorias.trim());
                                            pedido.setConcepto(tconcepto.trim());
                                            //Fin texto grande

                                            CerNotaPedido pedidoOut = this.cerNotaPedidoDeltaRepository.save(pedido);
                                            //Inicio eliminar y/o Actualizar Firmas - en Cascada
                                            List<CerFirma> filteredList = listaCerFirma.stream()
                                                    .filter(fm ->
                                                            fm.getCerNotaPedido().getCodigoNotaPedidoSap().equalsIgnoreCase(pedidoOut.getCodigoNotaPedidoSap()))
                                                    .collect(Collectors.toList());

                                            if (filteredList != null && filteredList.size() > 0) {
                                                for (CerFirma ele : filteredList) {
                                                    //System.out.println("" + ele.getId());
                                                    this.cerCertificadoFirmaDeltaRepository.deleteByFirmaId(ele.getId());
                                                }

                                            }
                                            this.cerFirmaDeltaRepository.deleteByEbeln(pedidoOut.getCodigoNotaPedidoSap());
                                            //Inicio eliminar y/o Actualizar Firmas

                                            if (!StringUtils.isBlank(tableCabecera.getString("FIRMAA1"))) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FA".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> tableCabecera.getString("FIRMAA1").trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {
                                                        /*Optional<CerFirma> optionalCerFirma = listaCerFirma.stream()
                                                                .filter(x -> optionalTipoFirma.get().getId() == x.getMtrTipoFirma().getId() &&
                                                                        pedidoOut.getId() == x.getCerNotaPedido().getId() &&
                                                                        descargaDoc.getFirmaa1().trim().equalsIgnoreCase(x.getMtrAprobador().getAprobadorSap()))
                                                                .findFirst();*/
                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(tableCabecera.getString("EBELN"));
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    } else {
                                                        logger.error("integrarNotaPedido No hay aprobador  FIRMAA1");
                                                        msg = new MensajeSap("W", "", "No se encuentra APROBADOR FIRMAA1 " + tableCabecera.getString("FIRMAA1"));
                                                        this.enviarCorreoWarning(msg.getTexto(), tableCabecera.getString("EBELN"));
                                                        throw new Exception(msg.getTexto());
                                                    }


                                                }

                                            }

                                            if (!StringUtils.isBlank(tableCabecera.getString("FIRMAA2"))) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FA".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> tableCabecera.getString("FIRMAA2").trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {

                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(tableCabecera.getString("EBELN"));
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    } else {
                                                        logger.error("integrarNotaPedido No hay aprobador  FIRMAA2");
                                                        msg = new MensajeSap("W", "", "No se encuentra APROBADOR FIRMAA2 " + tableCabecera.getString("FIRMAA2"));
                                                        this.enviarCorreoWarning(msg.getTexto(), tableCabecera.getString("EBELN"));
                                                        throw new Exception(msg.getTexto());
                                                    }


                                                }

                                            }

                                            if (!StringUtils.isBlank(tableCabecera.getString("FIRMAA3"))) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FA".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> tableCabecera.getString("FIRMAA3").trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {

                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(tableCabecera.getString("EBELN"));
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    } else {
                                                        logger.error("integrarNotaPedido No hay aprobador  FIRMAA3");
                                                        msg = new MensajeSap("W", "", "No se encuentra APROBADOR FIRMAA3 " + tableCabecera.getString("FIRMAA3"));
                                                        this.enviarCorreoWarning(msg.getTexto(), tableCabecera.getString("EBELN"));
                                                        throw new Exception(msg.getTexto());
                                                    }


                                                }

                                            }
                                            if (!StringUtils.isBlank(tableCabecera.getString("FIRMAA4"))) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FA".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> tableCabecera.getString("FIRMAA4").trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {

                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(tableCabecera.getString("EBELN"));
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    } else {
                                                        logger.error("integrarNotaPedido No hay aprobador  FIRMAA4");
                                                        msg = new MensajeSap("W", "", "No se encuentra APROBADOR FIRMAA4 " + tableCabecera.getString("FIRMAA4"));
                                                        this.enviarCorreoWarning(msg.getTexto(), tableCabecera.getString("EBELN"));
                                                        throw new Exception(msg.getTexto());
                                                    }


                                                }

                                            }
                                            //Firma b
                                            if (!StringUtils.isBlank(tableCabecera.getString("FIRMAB1"))) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FB".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> tableCabecera.getString("FIRMAB1").trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {

                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(tableCabecera.getString("EBELN"));
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    } else {
                                                        logger.error("integrarNotaPedido No hay aprobador  FIRMAB1");
                                                        msg = new MensajeSap("W", "", "No se encuentra APROBADOR FIRMAB1 " + tableCabecera.getString("FIRMAB1"));
                                                        this.enviarCorreoWarning(msg.getTexto(), tableCabecera.getString("EBELN"));
                                                        throw new Exception(msg.getTexto());
                                                    }


                                                }

                                            }
                                            if (!StringUtils.isBlank(tableCabecera.getString("FIRMAB2"))) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FB".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> tableCabecera.getString("FIRMAB2").trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {

                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(tableCabecera.getString("EBELN"));
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    } else {
                                                        logger.error("integrarNotaPedido No hay aprobador  FIRMAB2");
                                                        msg = new MensajeSap("W", "", "No se encuentra APROBADOR FIRMAB2 " + tableCabecera.getString("FIRMAB2"));
                                                        this.enviarCorreoWarning(msg.getTexto(), tableCabecera.getString("EBELN"));
                                                        throw new Exception(msg.getTexto());
                                                    }


                                                }

                                            }
                                            if (!StringUtils.isBlank(tableCabecera.getString("FIRMAB3"))) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FB".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> tableCabecera.getString("FIRMAB3").trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {

                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(tableCabecera.getString("EBELN"));
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    } else {
                                                        logger.error("integrarNotaPedido No hay aprobador  FIRMAB3");
                                                        msg = new MensajeSap("W", "", "No se encuentra APROBADOR FIRMAB3 " + tableCabecera.getString("FIRMAB3"));
                                                        this.enviarCorreoWarning(msg.getTexto(), tableCabecera.getString("EBELN"));
                                                        throw new Exception(msg.getTexto());
                                                    }


                                                }

                                            }

                                            if (!StringUtils.isBlank(tableCabecera.getString("FIRMAB4"))) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FB".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> tableCabecera.getString("FIRMAB4").trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {

                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(tableCabecera.getString("EBELN"));
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    } else {
                                                        logger.error("integrarNotaPedido No hay aprobador  FIRMAB4");
                                                        msg = new MensajeSap("W", "", "No se encuentra APROBADOR FIRMAB4 " + tableCabecera.getString("FIRMAB4"));
                                                        this.enviarCorreoWarning(msg.getTexto(), tableCabecera.getString("EBELN"));
                                                        throw new Exception(msg.getTexto());
                                                    }


                                                }

                                            }

                                            /*if (i < 100)
                                                lista.add(descargaDoc);*/

                                            //listaEntity.add(pedido);
                                            log.error("Pedido_generado pedidoOut ::: " + pedidoOut);

                                            this.guardarPosicionServicio(pedidoOut, tablePosicion, tableServicio);
                                            //Enviar correo AL PROVEEDOR Y COMPRADOR
                                            log.error("Pedido_generado pedidoOut_3 ::: ");
                                            ;
                                            if (pedidoOut != null) {
                                                MailSetting setting = new MailSetting();
                                                setting.setEmailFrom(username);
                                                setting.setPassword(password);
                                                setting.setHost(host);
                                                setting.setNameFrom(username);
                                                setting.setPort(port);
                                                setting.setUser(username);
                                                String emailDestinatarios = pedidoOut.getMtrProveedor().getEmailContacto() + "," + pedidoOut.getEmailUserCompra();
                                                //String emailDestinatarios = pedidoOut.getEmailUserCompra();
                                                String nroPedido = pedidoOut.getCodigoNotaPedidoSap();
                                                String nombreProveedor = pedidoOut.getMtrProveedor().getRazonSocial();
                                                log.error("enviar correo liberacion inicio ::: ");
                                                try {
                                                    if (StringUtils.isBlank(enviarCorreo)) {
                                                        this.certificadoNotificacion.enviarMailLiberacion(setting, nroPedido, nombreProveedor, emailDestinatarios);
                                                        log.error("enviar correo liberacion inicio_enviarCorreo ::: " + enviarCorreo);
                                                    }

                                                } catch (Exception e) {
                                                    log.error("Exception envio email liberacion ::: " + e.toString());
                                                }
                                                log.error("enviar correo liberacion fin ::: ");
                                            }

                                        } else {
                                            logger.error("No se encuentra Clase documento " + tableCabecera.getString("CLDOC"));
                                            msg = new MensajeSap("E", "", "No se encuentra Clase documento " + tableCabecera.getString("CLDOC"));
                                            this.enviarCorreoWarning(msg.getTexto(), tableCabecera.getString("EBELN"));
                                        }
                                    } else {
                                        logger.error("No se encuentra Sociedad " + tableCabecera.getString("BUKRS"));
                                        msg = new MensajeSap("E", "", "No se encuentra Sociedad " + tableCabecera.getString("BUKRS"));
                                        this.enviarCorreoWarning(msg.getTexto(), tableCabecera.getString("EBELN"));
                                    }

                                } else {
                                    logger.error("No se encuentra Organizacion " + tableCabecera.getString("EKORG"));
                                    msg = new MensajeSap("E", "", "No se encuentra Organizacion " + tableCabecera.getString("EKORG"));
                                    this.enviarCorreoWarning(msg.getTexto(), tableCabecera.getString("EBELN"));
                                }
                            } else {
                                logger.error("No se encuentra Moneda " + tableCabecera.getString("WAERS"));
                                msg = new MensajeSap("E", "", "No se encuentra Moneda " + tableCabecera.getString("WAERS"));
                                this.enviarCorreoWarning(msg.getTexto(), tableCabecera.getString("EBELN"));
                            }
                        } else {
                            logger.error("No se encuentra Estado " + finalCodEstadoInicial);
                            msg = new MensajeSap("E", "", "No se encuentra Estado " + finalCodEstadoInicial);
                            this.enviarCorreoWarning(msg.getTexto(), tableCabecera.getString("EBELN"));
                        }
                    } else {
                        logger.error("No se encuentra Condicion de pago " + tableCabecera.getString("ZTERM"));
                        msg = new MensajeSap("E", "", "No se encuentra Condicion de pago " + tableCabecera.getString("ZTERM"));
                        this.enviarCorreoWarning(msg.getTexto(), tableCabecera.getString("EBELN"));
                    }

                } else {
                    logger.error("No se encuentra Proveedor " + tableCabecera.getString("LIFNR"));
                    msg = new MensajeSap("E", "", "No se encuentra Proveedor " + tableCabecera.getString("LIFNR"));
                    this.enviarCorreoWarning(msg.getTexto(), tableCabecera.getString("EBELN"));
                }


            }
            //this.cerNotaPedidoDeltaRepository.saveAll(listaEntity);

        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            descarga.setCabtx(error);
            lista.add(descarga);
            msg = new MensajeSap("E", "", error);
            // lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            descarga.setCabtx(error);
            lista.add(descarga);
            msg = new MensajeSap("E", "", error);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (ParseException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            descarga.setCabtx(error);
            lista.add(descarga);
            msg = new MensajeSap("E", "", error);
        }


        return msg;
    }

    public void enviarCorreoWarning(String texto, String notaPedido) {
        log.error("enviarCorreoWarning inicio ");

        try {
            if (isDev){
                texto += "DEV: " + texto;
            }
            String email = "";
            AppParametria destinatario = this.appParametriaDeltaRepository.obtenerParametroPorModuloYLabel("Nota_pedido", "Correo_Auxiliar");
            if (destinatario.getValue1() != null)
                email = destinatario.getValue1();
            this.certificadoNotaPedidoNotificacion.enviarNotaPedidoErrorSap(notaPedido, texto, email);
        } catch (Exception e) {
            log.error("enviarCorreoWarning " + e.toString());
        }
    }

    public void guardarPosicionServicio(CerNotaPedido pedido, JCoTable tablePosicion, JCoTable tableServicio) throws Exception {

        List<DescargaServicioSap> lista = new ArrayList<DescargaServicioSap>();
        DescargaServicioSap descarga = new DescargaServicioSap();
        //Lista de cabecera detalle
        List<CerNotaPedido> listaOrden = this.cerNotaPedidoDeltaRepository.findAll();
        List<CerNotaPedidoDetalle> listaDetalle = this.cerNotaPedidoDetalleDeltaRepository.findAll();
        List<MtrCentroAlmacen> listaCentro = this.mtrCentroAlmacenDeltaRepository.findAll();
        List<MtrBienServicio> listaBienServicio = this.mtrBienServicioDeltaRepository.findAll();
        List<MtrCuentaImputacion> listaCuentaImputacion = this.mtrCuentaImputacionDeltaRepository.findAll();
        List<MtrCuentaMayor> listaCuentaMayor = this.mtrCuentaMayorDeltaRepository.findAll();


        java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("yyyy/MM/dd");
        java.text.SimpleDateFormat formatOut = new java.text.SimpleDateFormat("yyyyMMdd");
        List<DescargaServicioSap> listaServicio = new ArrayList<DescargaServicioSap>();
        try {


            for (int i = 0; i < tableServicio.getNumRows(); i++) {

                tableServicio.setRow(i);
                DescargaServicioSap bs = new DescargaServicioSap();
                bs.setEbeln(tableServicio.getString("EBELN"));
                bs.setEbelp(tableServicio.getString("EBELP"));
                bs.setExtrow(tableServicio.getString("EXTROW"));
                bs.setIntrow(tableServicio.getString("INTROW"));
                bs.setCodBienServicio(tableServicio.getString("SRVPOS"));
                logger.error(" valor cod servicio :: " + tableServicio.getString("SRVPOS"));
                bs.setTipo("S");
                bs.setCanreq(tableServicio.getString("CANREQ"));
                bs.setCanent(tableServicio.getString("CANENT"));
                bs.setPrecio(tableServicio.getString("PRECIO"));
                bs.setTextoAdicional(tableServicio.getString("DESCRI"));
                bs.setUnimed(tableServicio.getString("UNIMED"));

                bs.setKnttp(tableServicio.getString("KNTTP"));
                bs.setKostl(tableServicio.getString("KOSTL"));
                bs.setPosid(tableServicio.getString("POSID"));
                bs.setAufnr(tableServicio.getString("AUFNR"));
                bs.setSakto(tableServicio.getString("SAKTO"));
                //bs.setWerks(tableServ.getString("WERKS"));
                bs.setBurks(tableServicio.getString("BUKRS"));
                // listaBienServioAuxiliar
                //Fin

                listaServicio.add(bs);

            }


            List<CerNotaPedidoDetalle> listaEntity = new ArrayList<CerNotaPedidoDetalle>();
            //Recuperar descarga
            for (int i = 0; i < tablePosicion.getNumRows(); i++) {

                //tableExportDescargaServicio.setRow(i);
                tablePosicion.setRow(i);


                //Setear Valores a la tabla
                logger.error("============================= orden compra detalle" + tablePosicion.getString("EBELP") + "===================================");


                if (pedido != null) {
                    //CerNotaPedido pedido = optionalPedido.get();
                    logger.error("Existe pedido:: " + pedido.getCodigoNotaPedidoSap());
                    Optional<CerNotaPedidoDetalle> optionalDetalle = listaDetalle.stream()
                            .filter(x -> tablePosicion.getString("EBELN").equalsIgnoreCase(x.getEbeln()) && tablePosicion.getString("EBELP").equalsIgnoreCase(x.getPosicionSap())
                                    && "0000000000".equalsIgnoreCase(x.getExtrow()))
                            .findFirst();
                    CerNotaPedidoDetalle detalle = new CerNotaPedidoDetalle();
                    if (optionalDetalle.isPresent())
                        detalle = optionalDetalle.get();
                    Optional<MtrCentroAlmacen> optionalCentro = listaCentro.stream()
                            .filter(x -> tablePosicion.getString("WERKS").equalsIgnoreCase(x.getCodigoCentroSap()) && x.getIdPadre() == 0)
                            .findFirst();
                    if (optionalCentro.isPresent()) {
                        logger.error("Existe centro:: " + optionalCentro.get().getCodigoCentroSap());


                        detalle.setCerNotaPedido(pedido);
                        detalle.setExtrow("0000000000");
                        detalle.setIntrow("0000000000");
                        detalle.setMtrCentro(optionalCentro.get());
                        detalle.setPosicionSap(tablePosicion.getString("EBELP"));
                        detalle.setEbeln(tablePosicion.getString("EBELN"));
                        //Inicio @add 04.12.2020
                        if(tablePosicion.getBigDecimal("PEINH") != null) {
                            detalle.setCantidadBase(tablePosicion.getBigDecimal("PEINH").setScale(3, BigDecimal.ROUND_HALF_EVEN));
                        }
                        //Fin @add 04.12.2020
                        if (!StringUtils.isBlank(tablePosicion.getString("UNIMED"))) {
                            MtrUnidadMedida unidad = this.mtrUnidadMedidaDeltaRepository.findByCodigoSap(tablePosicion.getString("UNIMED"));
                            if (unidad != null)
                                detalle.setMtrUnidadMedida(unidad);
                        }
                        //detalle.setUnidadTextoItem(tablePosicion.getString("UNIMED"));

                        //detalle.setCuentaMayor(tablePos.getString("SAKTO"));
                        //detalle.setCeco(tablePos.getString("KOSTL"));
                        //detalle.setAfe(tablePos.getString("POSID"));
                        //detalle.setOrden(tablePos.getString("AUFNR")	);

                        //detalle.setIdPadre(0);
                        if (!StringUtils.isBlank(tablePosicion.getString("KNTTP")) && !tablePosicion.getString("KNTTP").equalsIgnoreCase("U")) {
                            String codeCuentaMayor = tablePosicion.getString("SAKTO");
                            String codeCuentaImputacion = "";
                            if (tablePosicion.getString("KNTTP").equalsIgnoreCase("K"))
                                codeCuentaImputacion = tablePosicion.getString("KOSTL");
                            if (tablePosicion.getString("KNTTP").equalsIgnoreCase("P"))
                                codeCuentaImputacion = tablePosicion.getString("POSID");
                            if (tablePosicion.getString("KNTTP").equalsIgnoreCase("F"))
                                codeCuentaImputacion = tablePosicion.getString("AUFNR");
                            //Guardar imputacion
                            if (!StringUtils.isBlank(codeCuentaImputacion) && !StringUtils.isBlank(tablePosicion.getString("BUKRS"))) {
                                String finalCodeCuentaImputacion = codeCuentaImputacion;
                                Optional<MtrCuentaImputacion> optionalCuentaImputacion = listaCuentaImputacion.stream()
                                        .filter(x -> tablePosicion.getString("KNTTP").equalsIgnoreCase(x.getMtrTipoImputacion().getCodigoTipoImputacion()) &&
                                                finalCodeCuentaImputacion.equalsIgnoreCase(x.getCodigoCuentaImputacion()) &&
                                                tablePosicion.getString("BUKRS").equalsIgnoreCase(x.getMtrSociedad().getDescBrv())).findFirst();
                                if (optionalCuentaImputacion.isPresent()) {
                                    detalle.setMtrCuentaImputacion(optionalCuentaImputacion.get());
                                } else {
                                    logger.error("guardarPosicionServicio No hay Cuenta imputacion " + tablePosicion.getString("MATNR"));
                                    MensajeSap msg = new MensajeSap("W", "", "No hay Cuenta imputacion " + tablePosicion.getString("KNTTP") + " Sociedad " + tablePosicion.getString("BUKRS"));
                                    this.enviarCorreoWarning(msg.getTexto(), tablePosicion.getString("EBELN"));
                                    throw new Exception(msg.getTexto());
                                }

                            }
                            //Guardar cuenta mayor
                            if (!StringUtils.isBlank(codeCuentaMayor) && !StringUtils.isBlank(tablePosicion.getString("BUKRS"))) {

                                Optional<MtrCuentaMayor> optionalCuentaMayor = listaCuentaMayor.stream()
                                        .filter(x -> tablePosicion.getString("KNTTP").equalsIgnoreCase(x.getMtrTipoImputacion().getCodigoTipoImputacion()) &&
                                                codeCuentaMayor.equalsIgnoreCase(x.getCodigoCuentaMayor()) &&
                                                tablePosicion.getString("BUKRS").equalsIgnoreCase(x.getMtrSociedad().getDescBrv())).findFirst();
                                if (optionalCuentaMayor.isPresent())
                                    detalle.setMtrCuentaMayor(optionalCuentaMayor.get());
                            }


                        }


                        if (!StringUtils.isBlank(tablePosicion.getString("MATNR"))) {
                            Optional<MtrBienServicio> optionaBsAux = listaBienServicio.stream()
                                    .filter(x -> tablePosicion.getString("MATNR").equalsIgnoreCase(x.getCodigoSap()) &&
                                            "M".equalsIgnoreCase(x.getTipoItem()))
                                    .findFirst();
                            if (optionaBsAux.isPresent()) {
                                detalle.setMtrBienServicio(optionaBsAux.get());
                            } else {
                                logger.error("guardarPosicionServicio No hay material_ " + tablePosicion.getString("MATNR"));
                                MensajeSap msg = new MensajeSap("W", "", "guardarPosicionServicio No hay material_ " + tablePosicion.getString("MATNR"));
                                this.enviarCorreoWarning(msg.getTexto(), tablePosicion.getString("EBELN"));
                                throw new Exception(msg.getTexto());
                            }
                        } else {
                            detalle.setTextoItem(tablePosicion.getString("TXZ01"));

                        }

                        BigDecimal cantEntregada = new BigDecimal("0.0");
                        logger.error("descargaDoc.getCanent(): " + tablePosicion.getString("CANENT"));
                        //log.error("descargaDoc.getCanent()x: " + descargaDoc.getCanent());
                        if (!StringUtils.isBlank(tablePosicion.getString("CANENT"))) {
                            //java.sql.Date sDateEntregada = new java.sql.Date(format.parse(descargaDoc.getCanent()).getTime());
                            cantEntregada = new BigDecimal(tablePosicion.getString("CANENT").trim());

                        }

                        detalle.setCantidadEntregada(cantEntregada);
                        BigDecimal cantidadRequerida = new BigDecimal("0.0");
                        logger.error("descargaDoc.getCanreq(): " + tablePosicion.getString("CANREQ"));
                        //log.error("descargaDoc.getCanreq()x: " + descargaDoc.getCanreq());
                        if (!StringUtils.isBlank(tablePosicion.getString("CANREQ")) && tablePosicion.getString("CANREQ") != null) {
                            //java.sql.Date sDateRequerida = new java.sql.Date(format.parse(descargaDoc.getCanreq()).getTime());
                            cantidadRequerida = new BigDecimal(tablePosicion.getString("CANREQ").trim());

                        }
                        detalle.setCantidadRequerida(cantidadRequerida);
                        //detalle.setCerCuentaMayor();
                        logger.error("descargaDoc.getFecent(): " + tablePosicion.getString("FECENT"));
                        //log.error("descargaDoc.getFecent()x: " + descargaDoc.getFecent());
                        if (!StringUtils.isBlank(tablePosicion.getString("FECENT")) && !tablePosicion.getString("FECENT").equalsIgnoreCase("00000000")) {
                            java.sql.Date fecent = new java.sql.Date(formatOut.parse(tablePosicion.getString("FECENT").trim()).getTime());
                            detalle.setFechaEntrega(fecent);
                        }
                        logger.error("NFECENT : " + tablePosicion.getString("NFECENT"));
                        if (!StringUtils.isBlank(tablePosicion.getString("NFECENT")) && !tablePosicion.getString("NFECENT").trim().equalsIgnoreCase("00000000")) {
                            java.sql.Date fecentx = new java.sql.Date(formatOut.parse(tablePosicion.getString("NFECENT").trim()).getTime());
                            detalle.setNuevaFechaEntrega(fecentx);
                        }
                        logger.error("PLIFZ : " + tablePosicion.getString("PLIFZ"));
                        if (!StringUtils.isBlank(tablePosicion.getString("PLIFZ"))) {
                            detalle.setPlazoEntrega(tablePosicion.getString("PLIFZ").trim());
                        }
                        logger.error("INDIMP__  : " + tablePosicion.getString("INDIMP"));
                        if (!StringUtils.isBlank(tablePosicion.getString("INDIMP"))) {
                            detalle.setIndicadorImpuesto(tablePosicion.getString("INDIMP").trim());
                        }
                        logger.error("descargaDoc.getPrecio(): " + tablePosicion.getString("PRECIO"));
                        //log.error("descargaDoc.getPrecio()x: " + descargaDoc.getPrecio());
                        BigDecimal precio = new BigDecimal("0.0");
                        if (!StringUtils.isBlank(tablePosicion.getString("PRECIO"))) {
                            precio = new BigDecimal(tablePosicion.getString("PRECIO").trim());

                        }
                        detalle.setPrecioUnitario(precio);
                        CerNotaPedidoDetalle detalleOut = this.cerNotaPedidoDetalleDeltaRepository.save(detalle);
                        //listaEntity.add(detalle);
                        //detalle.setMtrAlmacen();
                        //detalle.setMtrBienServicio();
                        //detalle.setMtrCentro();
                        for (DescargaServicioSap servicio : listaServicio) {
                            if (servicio.getEbeln().equalsIgnoreCase(tablePosicion.getString("EBELN")) &&
                                    servicio.getEbelp().equalsIgnoreCase(tablePosicion.getString("EBELP"))) {

                                Optional<CerNotaPedidoDetalle> optionalServicio = listaDetalle.stream()
                                        .filter(x -> servicio.getEbeln().equalsIgnoreCase(x.getEbeln()) && servicio.getEbelp().equalsIgnoreCase(x.getPosicionSap())
                                                && servicio.getExtrow().equalsIgnoreCase(x.getExtrow()))
                                        .findFirst();
                                CerNotaPedidoDetalle detalleServicio = new CerNotaPedidoDetalle();
                                if (optionalServicio.isPresent())
                                    detalleServicio = optionalServicio.get();

                                detalleServicio.setCerNotaPedido(pedido);
                                detalleServicio.setMtrCentro(optionalCentro.get());
                                detalleServicio.setPosicionSap(servicio.getEbelp());
                                detalleServicio.setEbeln(servicio.getEbeln());
                                detalleServicio.setExtrow(servicio.getExtrow());
                                detalleServicio.setIntrow(servicio.getIntrow());
                                detalleServicio.setIdPadre(detalleOut.getId());
                                detalleServicio.setUnidadTextoItem(servicio.getUnimed());

                                //Datos para detalle de psocicion
                                if (!StringUtils.isBlank(servicio.getKnttp()) && !servicio.getKnttp().equalsIgnoreCase("U")) {
                                    String codeCuentaMayor = servicio.getSakto();
                                    String codeCuentaImputacion = "";
                                    if (servicio.getKnttp().equalsIgnoreCase("K"))
                                        codeCuentaImputacion = servicio.getKostl();
                                    if (servicio.getKnttp().equalsIgnoreCase("P"))
                                        codeCuentaImputacion = servicio.getPosid();
                                    if (servicio.getKnttp().equalsIgnoreCase("F"))
                                        codeCuentaImputacion = servicio.getAufnr();
                                    //Guardar imputacion
                                    if (!StringUtils.isBlank(codeCuentaImputacion) && !StringUtils.isBlank(servicio.getBurks())) {
                                        String finalCodeCuentaImputacion = codeCuentaImputacion;
                                        Optional<MtrCuentaImputacion> optionalCuentaImputacion = listaCuentaImputacion.stream()
                                                .filter(x -> servicio.getKnttp().equalsIgnoreCase(x.getMtrTipoImputacion().getCodigoTipoImputacion()) &&
                                                        finalCodeCuentaImputacion.equalsIgnoreCase(x.getCodigoCuentaImputacion()) &&
                                                        servicio.getBurks().equalsIgnoreCase(x.getMtrSociedad().getDescBrv())).findFirst();
                                        if (optionalCuentaImputacion.isPresent())
                                            detalleServicio.setMtrCuentaImputacion(optionalCuentaImputacion.get());
                                    }
                                    //Guardar cuenta mayor
                                    if (!StringUtils.isBlank(codeCuentaMayor) && !StringUtils.isBlank(servicio.getBurks())) {

                                        Optional<MtrCuentaMayor> optionalCuentaMayor = listaCuentaMayor.stream()
                                                .filter(x -> servicio.getKnttp().equalsIgnoreCase(x.getMtrTipoImputacion().getCodigoTipoImputacion()) &&
                                                        codeCuentaMayor.equalsIgnoreCase(x.getCodigoCuentaMayor()) &&
                                                        servicio.getBurks().equalsIgnoreCase(x.getMtrSociedad().getDescBrv())).findFirst();
                                        if (optionalCuentaMayor.isPresent())
                                            detalleServicio.setMtrCuentaMayor(optionalCuentaMayor.get());
                                    }


                                }
                                //Fin

                                if (!StringUtils.isBlank(servicio.getCodBienServicio())) {
                                    Optional<MtrBienServicio> optionaBsServicioAux = listaBienServicio.stream()
                                            .filter(x -> servicio.getCodBienServicio().equalsIgnoreCase(x.getCodigoSap()) &&
                                                    "S".equalsIgnoreCase(x.getTipoItem()))
                                            .findFirst();
                                    if (optionaBsServicioAux.isPresent()) {
                                        detalleServicio.setMtrBienServicio(optionaBsServicioAux.get());
                                    }/*else {
                                        detalle.setTextoAdicional(tablePos.getString("TXZ01"));
                                    }*/
                                } else {
                                    detalleServicio.setTextoItem(servicio.getTextoAdicional());
                                }

                                //Cantifdades y precios
                                BigDecimal cantEntregadaServicio = new BigDecimal("0.0");
                                logger.error("servicio.getCanent() 2: " + servicio.getCanent());

                                if (!StringUtils.isBlank(servicio.getCanent())) {
                                    //java.sql.Date sDateEntregada = new java.sql.Date(format.parse(descargaDoc.getCanent()).getTime());
                                    cantEntregadaServicio = new BigDecimal(servicio.getCanent().trim());

                                }

                                detalleServicio.setCantidadEntregada(cantEntregadaServicio);

                                BigDecimal cantidadRequeridaServicio = new BigDecimal("0.0");
                                logger.error("servicio.getCanreq() 2: " + servicio.getCanreq());

                                if (!StringUtils.isBlank(servicio.getCanreq()) && servicio.getCanreq() != null) {
                                    //java.sql.Date sDateRequerida = new java.sql.Date(format.parse(descargaDoc.getCanreq()).getTime());
                                    cantidadRequeridaServicio = new BigDecimal(servicio.getCanreq().trim());

                                }
                                detalleServicio.setCantidadRequerida(cantidadRequeridaServicio);
                                //detalle.setCerCuentaMayor();
                                logger.error("servicio.getFecent() 2: " + servicio.getFecent());

                                if (!StringUtils.isBlank(tablePosicion.getString("FECENT")) && !tablePosicion.getString("FECENT").equalsIgnoreCase("00000000")) {
                                    java.sql.Date fecent = new java.sql.Date(formatOut.parse(tablePosicion.getString("FECENT").trim()).getTime());
                                    detalleServicio.setFechaEntrega(fecent);
                                }
                                logger.error("servicio.getPrecio() 2: " + servicio.getPrecio());

                                BigDecimal precioServicio = new BigDecimal("0.0");
                                if (!StringUtils.isBlank(servicio.getPrecio())) {
                                    precioServicio = new BigDecimal(servicio.getPrecio().trim());

                                }
                                detalleServicio.setPrecioUnitario(precioServicio);
                                //listaEntity.add(detalleServicio);
                                this.cerNotaPedidoDetalleDeltaRepository.save(detalleServicio);

                            }
                        }


                        //Cargar Hijos

                         /*if (i < 100)
                             lista.add(descargaDoc);*/


                        //}

                    }
                }


            }
            //this.cerNotaPedidoDetalleDeltaRepository.saveAll(listaEntity);

        } catch (ParseException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            descarga.setCabtx(error);
            lista.add(descarga);
        }

        //return lista;

    }

    @Override
    public List<DescargaServicioSap> listaDescarga(List<RangeSap> rangeDoc, List<RangeSap> rangeFecha) {
        List<DescargaServicioSap> lista = new ArrayList<DescargaServicioSap>();
        DescargaServicioSap descarga = new DescargaServicioSap();
        //Listas de dependencias
        List<MtrProveedor> listaProveedor = this.mtrProveedorDeltaRepository.findAll();
        List<MtrCondicionPago> listaCondicion = this.mtrCondicionPagoDeltaRepository.findAll();
        List<MtrEstado> listaEstado = this.mtrEstadoDeltaRepository.findAll();
        List<MtrMoneda> listaMoneda = this.mtrMonedaDeltaRepository.findAll();
        List<MtrOrgCompra> listaOrgCompra = this.mtrOrgCompraDeltaRepository.findAll();
        List<MtrSociedad> listaSociedad = this.mtrSociedadDeltaRepository.findAll();
        List<MtrClaseDocumento> listaDoc = this.mtrClaseDocumentoDeltaRepository.findAll();
        //List<MtrCentroAlmacen> listaCentro = this.mtrCentroAlmacenDeltaRepository.findAll();
        //Lista de cabecera detalle
        List<CerNotaPedido> listaOrden = this.cerNotaPedidoDeltaRepository.findAll();
        List<CerNotaPedidoDetalle> listaDetalle = this.cerNotaPedidoDetalleDeltaRepository.findAll();
        List<CerFirma> listaCerFirma = this.cerFirmaDeltaRepository.findAll();
        List<MtrTipoFirma> listaTipoFirma = this.mtrTipoFirmaDeltaRepository.findAll();
        List<MtrAprobador> listaAprobador = this.mtrAprobadorDeltaRepository.findAll();
        List<AppParametria> listaParametria = this.appParametriaDeltaRepository.findAll();


        //Obtener parametro de estado inicial para posiciones de pedido
        String codEstadoInicial = "NPCE";
        Optional<AppParametria> optionalParametroEstado = listaParametria.stream()
                .filter(x -> "IPROVIDER".equalsIgnoreCase(x.getModulo())
                        && "Estado Inicial Posicion".equalsIgnoreCase(x.getLabel()))
                .findFirst();
        if (optionalParametroEstado.isPresent())
            codEstadoInicial = optionalParametroEstado.get().getValue1();
        java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("yyyy/MM/dd");
        java.text.SimpleDateFormat formatOut = new java.text.SimpleDateFormat("yyyyMMdd");

        String[] arrAttributesName = new String[]{"EBELN", "EKORG", "LIFNR", "ERNAM", "FIRMAA1", "FIRMAA2", "FIRMAA3", "FIRMAA4",
                "FIRMAB1",
                "FIRMAB2",
                "FIRMAB3",
                "FIRMAB4",
                "WAERS",
                "VIGDES",
                "VIGHAS",
                "TIPDOC",
                "BEDAT",
                "CLDOC",
                "WERKS",
                "NAME1",
                "PEDIDO_VERSION",
                "ZTERM",
                "EBELP",
                "TXZ01",
                "FECENT",
                "PRECIO",
                "KNTTP",
                "LGORT",
                "MATKL",
                "WGBEZ",
                "PACKNO",
                "INTROW",
                "EXTROW",
                "SRVPOS",
                "DESCRI",
                "UNIMED",
                "CANREQ",
                "CANENT",
                //"PRECIO2",
                "SAKTO",
                "KOSTL",
                "POSID",
                "AUFNR",
                "CABTX",
                "ZPLAZO",
                "PRETP"};
        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_DESCARGA_DOC_COMPRA");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            JCoTable tableImportDocCompra = imports.getTable("TI_EBELN");
            JCoTable tableImportFechaPedido = imports.getTable("TI_BEDAT");
            //Poblamos Rango documento de compras
            if (rangeDoc != null && rangeDoc.size() > 0) {
                for (RangeSap ele : rangeDoc) {
                    tableImportDocCompra.appendRow();
                    tableImportDocCompra.setValue("SIGN", ele.getSign());
                    tableImportDocCompra.setValue("OPTION", ele.getOption());
                    tableImportDocCompra.setValue("LOW", ele.getLow());
                    tableImportDocCompra.setValue("HIGH", ele.getHigh());
                }
            }
            //Poblamos Rango fecha de pedidos
            if (rangeFecha != null && rangeFecha.size() > 0) {
                for (RangeSap ele : rangeFecha) {
                    tableImportFechaPedido.appendRow();
                    tableImportFechaPedido.setValue("SIGN", ele.getSign());
                    tableImportFechaPedido.setValue("OPTION", ele.getOption());


                    java.util.Date utilDInicio = format.parse(ele.getLow());
                    java.util.Date utilDFin = format.parse(ele.getHigh());

                    tableImportFechaPedido.setValue("LOW", utilDInicio);
                    tableImportFechaPedido.setValue("HIGH", utilDFin);
                }
            }
            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExportDescargaServicio = exports.getTable("TO_DESC_SERV");
            JCoTable tablePos = exports.getTable("TO_TCAB");
            List<DescargaServicioSap> listaBienServioAuxiliar = new ArrayList<DescargaServicioSap>();
            for (int i = 0; i < tablePos.getNumRows(); i++) {
                //DescargaServicioSap des = new DescargaServicioSap();
                tablePos.setRow(i);
                DescargaServicioSap bs = new DescargaServicioSap();
                bs.setEbeln(tablePos.getString("EBELN"));
                //bs.setEbelp(tablePos.getString("EBELP"));
                bs.setErnam(tablePos.getString("ERNAM"));
                bs.setSmtpAddr(tablePos.getString("SMTP_ADDR"));
                bs.setZkate(tablePos.getString("ZKDATE"));
                bs.setZplazo(tablePos.getString("ZPLAZO"));
                bs.setTipo(tablePos.getString("TIPO"));
                bs.setMonto(tablePos.getString("VALOR_AJUSTADO"));
                bs.setNameText(tablePos.getString("NAME_TEXT"));
                //bs.set
                //bs.setUnimed();
                //UNIMED
                //bs.set n/av

                listaBienServioAuxiliar.add(bs);

            }


            List<CerNotaPedido> listaEntity = new ArrayList<CerNotaPedido>();
            //Recuperar descarga
            String ebelnAux = "XYZ";
            for (int i = 0; i < tableExportDescargaServicio.getNumRows(); i++) {

                //DescargaServicioSap des = new DescargaServicioSap();
                tableExportDescargaServicio.setRow(i);
                if (ebelnAux.equalsIgnoreCase(tableExportDescargaServicio.getString("EBELN"))) {
                    continue;
                }
                ebelnAux = tableExportDescargaServicio.getString("EBELN");
                DescargaServicioSap descargaDoc = new DescargaServicioSap();
                //Setear cada valor al bean desde SAP
                for (String attributeName : arrAttributesName) {
                    Class<DescargaServicioSap> clazz = DescargaServicioSap.class;
                    Field fieldName = clazz.getDeclaredField(attributeName.toLowerCase());
                    fieldName.setAccessible(true);
                    fieldName.set(descargaDoc, tableExportDescargaServicio.getString(attributeName));

                }
                //Setear Valores a la tabla
                CerNotaPedido pedido = new CerNotaPedido();

                Optional<CerNotaPedido> optionalPedido = listaOrden.stream()
                        .filter(x -> descargaDoc.getEbeln().equalsIgnoreCase(x.getCodigoNotaPedidoSap()))
                        .findFirst();
                if (optionalPedido.isPresent())
                    pedido = optionalPedido.get();

                Optional<MtrProveedor> optionalProveedor = listaProveedor.stream()
                        .filter(x -> descargaDoc.getLifnr().equalsIgnoreCase(x.getLifnr()))
                        .findFirst();

                logger.error("========================= orden compra cabecera" + descargaDoc.getEbeln() + "=============================================");
                if (optionalProveedor.isPresent()) {
                    logger.error("Proveedor ok");
                    //log.error("Proveedor ok");
                    Optional<MtrCondicionPago> optionalCondicion = listaCondicion.stream()
                            .filter(x -> descargaDoc.getZterm().equalsIgnoreCase(x.getCodigoCondicionPagoSap()))
                            .findFirst();
                    if (optionalCondicion.isPresent()) {
                        logger.error("condicion pago ok");
                        //log.error("condicion pago ok");
                        // String finalEstadoInicial = estadoInicial;
                        //String finalCodEstadoFinal = codEstadoFinal;
                        String finalCodEstadoInicial = codEstadoInicial;
                        Optional<MtrEstado> optionalEstado = listaEstado.stream()
                                .filter(x -> finalCodEstadoInicial.equalsIgnoreCase(x.getCodigoEstado()))
                                .findFirst();
                        if (optionalEstado.isPresent()) {
                            logger.error("Estado ok");
                            //log.error("Estado ok");

                            Optional<MtrMoneda> optionalMoneda = listaMoneda.stream()
                                    .filter(x -> descargaDoc.getWaers().equalsIgnoreCase(x.getDescBrv()))
                                    .findFirst();
                            if (optionalMoneda.isPresent()) {
                                logger.error("Moneda ok");
                                //log.error("Moneda ok");
                                Optional<MtrOrgCompra> optionalOrg = listaOrgCompra.stream()
                                        .filter(x -> descargaDoc.getEkorg().equalsIgnoreCase(x.getCodigoOrgCompraSap()))
                                        .findFirst();
                                if (optionalOrg.isPresent()) {
                                    logger.error("Organizacion ok");
                                    //log.error("Organizacion ok");
                                    /*Optional<MtrCentroAlmacen> optionalCentro = listaCentro.stream()
                                            .filter(x -> descargaDoc.getWerks().equalsIgnoreCase(x.getCodigoCentroSap()))
                                            .findFirst();
                                    if(optionalCentro.isPresent()) {

                                    }*/
                                    Optional<MtrSociedad> optionalSociedad = listaSociedad.stream()
                                            .filter(x -> tableExportDescargaServicio.getString("BUKRS").equalsIgnoreCase(x.getDescBrv()))
                                            .findFirst();
                                    if (optionalSociedad.isPresent()) {
                                        logger.error("Sociedad ok");
                                        //log.error("Sociedad ok");
                                        Optional<MtrClaseDocumento> optionalClase = listaDoc.stream()
                                                .filter(x -> descargaDoc.getCldoc().equalsIgnoreCase(x.getCodigoSap()))
                                                .findFirst();
                                        if (optionalClase.isPresent()) {
                                            logger.error("Clase doc ok");
                                            //log.error("Clase doc ok");
                                            pedido.setMtrProveedor(optionalProveedor.get());
                                            pedido.setMtrCondicionPago(optionalCondicion.get());
                                            pedido.setMtrEstado(optionalEstado.get());
                                            pedido.setMtrMoneda(optionalMoneda.get());
                                            pedido.setMtrOrgCompra(optionalOrg.get());
                                            pedido.setMtrSociedad(optionalSociedad.get());
                                            pedido.setMtrClaseDocumento(optionalClase.get());

                                            /*if() {

                                            }*/

                                            pedido.setCodigoNotaPedidoSap(descargaDoc.getEbeln());
                                            Optional<DescargaServicioSap> optionalDatosAdicionales = listaBienServioAuxiliar.stream()
                                                    .filter(x -> descargaDoc.getEbeln().equalsIgnoreCase(x.getEbeln()))
                                                    .findFirst();
                                            if (optionalDatosAdicionales.isPresent()) {
                                                pedido.setUserCompra(optionalDatosAdicionales.get().getErnam());
                                                pedido.setEmailUserCompra(optionalDatosAdicionales.get().getSmtpAddr());
                                                pedido.setTipo(optionalDatosAdicionales.get().getTipo());
                                                pedido.setMonto(new BigDecimal("0.00"));
                                                if (!StringUtils.isBlank(optionalDatosAdicionales.get().getMonto())) {
                                                    if (!optionalDatosAdicionales.get().getMonto().trim().equalsIgnoreCase("n/a")) {
                                                        pedido.setMonto(new BigDecimal(optionalDatosAdicionales.get().getMonto().trim()));
                                                    }
                                                }
                                                if (!StringUtils.isBlank(optionalDatosAdicionales.get().getZplazo())) {
                                                    pedido.setPlazo(Integer.parseInt(optionalDatosAdicionales.get().getZplazo().trim()));
                                                }
                                                if (!StringUtils.isBlank(optionalDatosAdicionales.get().getZkate())
                                                        && !optionalDatosAdicionales.get().getZkate().equalsIgnoreCase("00000000")) {
                                                    pedido.setFechaFinVigencia(formatOut.parse(optionalDatosAdicionales.get().getZkate().trim()));
                                                }
                                                pedido.setNombreCompletoCompra(optionalDatosAdicionales.get().getNameText());
                                            }

                                            if (!StringUtils.isBlank(descargaDoc.getBedat()) && !descargaDoc.getBedat().equalsIgnoreCase("00000000"))
                                                pedido.setFechaDocumento(formatOut.parse(descargaDoc.getBedat().trim()));
                                            if (!StringUtils.isBlank(descargaDoc.getVigdes()) && !descargaDoc.getVigdes().equalsIgnoreCase("00000000"))
                                                pedido.setFechaInicio(formatOut.parse(descargaDoc.getVigdes().trim()));
                                            if (!StringUtils.isBlank(descargaDoc.getVighas()) && !descargaDoc.getVighas().equalsIgnoreCase("00000000"))
                                                pedido.setFechaFin(formatOut.parse(descargaDoc.getVighas().trim()));

                                            CerNotaPedido pedidoOut = this.cerNotaPedidoDeltaRepository.save(pedido);
                                            //this.cerFirmaDeltaRepository.deleteByEbeln(pedidoOut.getCodigoNotaPedidoSap());

                                            //Inicio eliminar y/o Actualizar Firmas - en Cascada
                                            List<CerFirma> filteredList = listaCerFirma.stream()
                                                    .filter(fm ->
                                                            fm.getCerNotaPedido().getCodigoNotaPedidoSap().equalsIgnoreCase(pedidoOut.getCodigoNotaPedidoSap()))
                                                    .collect(Collectors.toList());

                                            if (filteredList != null && filteredList.size() > 0) {
                                                for (CerFirma ele : filteredList) {
                                                    //System.out.println("" + ele.getId());
                                                    this.cerCertificadoFirmaDeltaRepository.deleteByFirmaId(ele.getId());
                                                }

                                            }
                                            this.cerFirmaDeltaRepository.deleteByEbeln(pedidoOut.getCodigoNotaPedidoSap());
                                            //Inicio eliminar y/o Actualizar Firmas
                                            log.error("carga uno getFirmaa1 " + descargaDoc.getFirmaa1());
                                            if (!StringUtils.isBlank(descargaDoc.getFirmaa1())) {
                                                log.error("carga uno getFirmaa1 ok " + descargaDoc.getFirmaa1());
                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FA".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> descargaDoc.getFirmaa1().trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {
                                                        /*Optional<CerFirma> optionalCerFirma = listaCerFirma.stream()
                                                                .filter(x -> optionalTipoFirma.get().getId() == x.getMtrTipoFirma().getId() &&
                                                                        pedidoOut.getId() == x.getCerNotaPedido().getId() &&
                                                                        descargaDoc.getFirmaa1().trim().equalsIgnoreCase(x.getMtrAprobador().getAprobadorSap()))
                                                                .findFirst();*/
                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(descargaDoc.getEbeln());
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    }


                                                }

                                            }
                                            log.error("carga uno getFirmaa2 ok " + descargaDoc.getFirmaa2());
                                            if (!StringUtils.isBlank(descargaDoc.getFirmaa2())) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FA".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> descargaDoc.getFirmaa2().trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {

                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(descargaDoc.getEbeln());
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    }


                                                }

                                            }
                                            log.error("carga uno getFirmaa3 ok " + descargaDoc.getFirmaa3());
                                            if (!StringUtils.isBlank(descargaDoc.getFirmaa3())) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FA".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> descargaDoc.getFirmaa3().trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {

                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(descargaDoc.getEbeln());
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    }


                                                }

                                            }
                                            log.error("carga uno getFirmaa4 ok " + descargaDoc.getFirmaa4());
                                            if (!StringUtils.isBlank(descargaDoc.getFirmaa4())) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FA".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> descargaDoc.getFirmaa4().trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {

                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(descargaDoc.getEbeln());
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    }


                                                }

                                            }
                                            //Firma b
                                            log.error("carga uno getFirmab1 ok " + descargaDoc.getFirmab1());
                                            if (!StringUtils.isBlank(descargaDoc.getFirmab1())) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FB".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> descargaDoc.getFirmab1().trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {

                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(descargaDoc.getEbeln());
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    }


                                                }

                                            }
                                            log.error("carga uno getFirmab2 ok " + descargaDoc.getFirmab2());
                                            if (!StringUtils.isBlank(descargaDoc.getFirmab2())) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FB".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> descargaDoc.getFirmab2().trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {

                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(descargaDoc.getEbeln());
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    }


                                                }

                                            }
                                            log.error("carga uno getFirmab3 ok " + descargaDoc.getFirmab3());
                                            if (!StringUtils.isBlank(descargaDoc.getFirmab3())) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FB".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> descargaDoc.getFirmab3().trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {

                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(descargaDoc.getEbeln());
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    }


                                                }

                                            }
                                            log.error("carga uno getFirmab4 ok " + descargaDoc.getFirmab4());
                                            if (!StringUtils.isBlank(descargaDoc.getFirmab4())) {

                                                Optional<MtrTipoFirma> optionalTipoFirma = listaTipoFirma.stream()
                                                        .filter(x -> "FB".equalsIgnoreCase(x.getCodigoTipoFirma()))
                                                        .findFirst();
                                                if (optionalTipoFirma.isPresent()) {

                                                    Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                                                            .filter(x -> descargaDoc.getFirmab4().trim().equalsIgnoreCase(x.getAprobadorSap()))
                                                            .findFirst();

                                                    if (optionalAprobador.isPresent()) {

                                                        CerFirma firma = cerFirmaDeltaRepository.getByUniqueCode(pedidoOut.getId(),
                                                                optionalTipoFirma.get().getId(), optionalAprobador.get().getId());
                                                        if (firma == null)
                                                            firma = new CerFirma();
                                                        firma.setCerNotaPedido(pedidoOut);
                                                        firma.setMtrTipoFirma(optionalTipoFirma.get());
                                                        firma.setMtrAprobador(optionalAprobador.get());
                                                        firma.setEbeln(descargaDoc.getEbeln());
                                                        this.cerFirmaDeltaRepository.save(firma);
                                                    }


                                                }

                                            }

                                            if (i < 100)
                                                lista.add(descargaDoc);

                                            //listaEntity.add(pedido);
                                        }
                                    }

                                }
                            }
                        }
                    }

                }


            }
            //this.cerNotaPedidoDeltaRepository.saveAll(listaEntity);

        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            descarga.setCabtx(error);
            lista.add(descarga);
            // lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            descarga.setCabtx(error);
            lista.add(descarga);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (NoSuchFieldException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            descarga.setCabtx(error);
            lista.add(descarga);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (IllegalAccessException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            descarga.setCabtx(error);
            lista.add(descarga);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (ParseException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            descarga.setCabtx(error);
            lista.add(descarga);
        }

        return lista;

    }

    @Override
    public List<RemitoOutSap> creacionHes(List<RemitoInSap> listaIn) {
        List<RemitoOutSap> lista = new ArrayList<RemitoOutSap>();
        RemitoOutSap remito = new RemitoOutSap();
        String[] arrAttributesName = new String[]{"EBELN",
                "POSICION",
                "PACNO",
                "INTROW",
                "CENTRO",
                "OCURRENCIA",
                "EXTROW",
                "EXTGROUP",
                "RANG",
                "SUBPACNO",
                "SRVNBR",
                "UMEDIDA",
                "QAPRO",
                "RMPRV",
                "LOCDES",
                "IMPUTACION",
                "USRSOLIC",
                "MATPRV",
                "MND",
                "PUNITARIO",
                "DESCUENTO",
                "ITEMAD",
                "TXZ01",
                "MATKL",
                "SAKNR",
                "KOSTL",
                "POSID",
                "USRAAUTO",
                "DLORT",
                "AUFNR",
                "LIFNR",
                "EKORG",
                "EKGRP",
                "LZVON",
                "LZBIS",
                "SBNAMAN",
                "BUDAT",
                "DESCUENTOH",
                "LGORT",
                "RESWK"};

        log.error("creacionHes ::: 01");
        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_CREA_HES");
            log.error("creacionHes ::: 02");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            JCoTable tableImport = imports.getTable("IT_TCERT");
            log.error("creacionHes ::: 03");
            //Poblamos datos de entrada
            for (RemitoInSap ele : listaIn) {
                tableImport.appendRow();
                for (String attributeName : arrAttributesName) {
                    Class<RemitoInSap> clazz = RemitoInSap.class;
                    Field fieldName = clazz.getDeclaredField(attributeName.toLowerCase());
                    fieldName.setAccessible(true);
                    String value = (String) fieldName.get(ele);
                    tableImport.setValue(attributeName, value);

                }
                log.error("creacionHes ::: 04");
                tableImport.setValue("PACKAGE", ele.getPackagex());
            }

            //Ejecutar Funcion
            log.error("creacionHes ::: 04_01");
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExport = exports.getTable("TO_REMITOSAP");
            log.error("creacionHes ::: 05");
            //Recuperar datos de salida
            for (int i = 0; i < tableExport.getNumRows(); i++) {

                tableExport.setRow(i);
                RemitoOutSap ele = new RemitoOutSap();

                ele.setIntrow(tableExport.getString("INTROW"));
                ele.setImporte(tableExport.getString("IMPORTE"));
                ele.setError(tableExport.getString("ERROR"));
                ele.setEbeln(tableExport.getString("EBELN"));
                ele.setPosicion(tableExport.getString("POSICION"));
                ele.setPacno(tableExport.getString("PACNO"));
                ele.setCentro(tableExport.getString("CENTRO"));
                ele.setOcurrencia(tableExport.getString("OCURRENCIA"));
                ele.setEntrega(tableExport.getString("ENTREGA"));
                ele.setRmprv(tableExport.getString("RMPRV"));
                ele.setState(tableExport.getString("STATE"));
                ele.setMnd(tableExport.getString("MND"));
                lista.add(ele);

            }
            log.error("creacionHes ::: 10");

        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            remito.setCentro(error);
            lista.add(remito);
            log.error("creacionHes ::: 04");
            // lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            remito.setCentro(error);
            lista.add(remito);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
            log.error("creacionHes ::: 11" + error);
        } catch (NoSuchFieldException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            remito.setCentro(error);
            lista.add(remito);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
            log.error("creacionHes ::: 12" + error);
        } catch (IllegalAccessException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            remito.setCentro(error);
            lista.add(remito);
            log.error("creacionHes ::: 13" + error);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        }

        return lista;
    }

    @Override
    public List<MensajeSap> validarPresupuesto(CerCertificado certificado) throws Exception {
        log.error("CBAZALAR validarPresupuesto INI");
        List<MensajeSap> lista = new ArrayList<MensajeSap>();
        //List<CerCertificadoDetalle> listaDetalleCertificado = this.cerCertificadoDetalleDeltaRepository.findByCerCertificado(certificado);

        List<CerCertificadoDetalle> listaDetalleCertificado = this.cerCertificadoDetalleDeltaRepository.obtenerListaDetallePorCertificadoId(certificado.getId());

        log.error("CBAZALAR validarPresupuesto 01 listaDetalleCertificadox " + listaDetalleCertificado.size());
        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZFM_GET_BUDGET_PORTAL");

            JCoParameterList imports = stfcConnection.getImportParameterList();

            JCoParameterList tablesImport = stfcConnection.getTableParameterList();
            JCoTable tableImport = tablesImport.getTable("DETAIL_TAB");
            JCoTable tablePosicionImport = tablesImport.getTable("PO_ORDER_TAB");

            log.error("CBAZALAR validarPresupuesto 02 tableImport " + tableImport.toString());
            log.error("CBAZALAR validarPresupuesto 02 tablePosicionImport " + tablePosicionImport.toString());
            imports.setValue("I_CHECK_DATE", DateUtils.obtenerFechaActual());
            int year = Calendar.getInstance().get(Calendar.YEAR);

            List<ImputacionCustom> listaImputacionAux = new ArrayList<ImputacionCustom>();

            List<CerCertificadoDetalle> listaCerificadoSingle = new ArrayList<CerCertificadoDetalle>();
            log.error("CBAZALAR validarPresupuesto 02 listaDetalleCertificado ::: " + listaDetalleCertificado);
            for (CerCertificadoDetalle ele : listaDetalleCertificado) {
                Optional<CerCertificadoDetalle> optionalSingle = listaCerificadoSingle.stream()
                        .filter(x -> ele.getMtrCuentaImputacion().getMtrTipoImputacion().getCodigoTipoImputacion().equalsIgnoreCase(x.getMtrCuentaImputacion().getMtrTipoImputacion().getCodigoTipoImputacion())
                                && ele.getMtrCuentaImputacion().getCodigoCuentaImputacion().equalsIgnoreCase(x.getMtrCuentaImputacion().getCodigoCuentaImputacion()) &&
                                ele.getMtrCuentaMayor().getCodigoCuentaMayor().equalsIgnoreCase(x.getMtrCuentaMayor().getCodigoCuentaMayor()))
                        .findFirst();

                if (optionalSingle.isPresent()) {
                    CerCertificadoDetalle auxCertificado = optionalSingle.get();
                    log.error("CBAZALAR validarPresupuesto 03 __ auxCertificado ::: " + auxCertificado + "  ::: " + ele);
                    BigDecimal montoLineaAuxiliar = auxCertificado.getTotalLinea().add(ele.getTotalLinea());
                    auxCertificado.setTotalLinea(montoLineaAuxiliar);
                } else {
                    CerCertificadoDetalle bean = (CerCertificadoDetalle) BeanUtils.cloneBean(ele);
                    log.error("CBAZALAR validarPresupuesto 04 bean " + bean.toString());
                    listaCerificadoSingle.add(bean);
                }
                tablePosicionImport.appendRow();
                tablePosicionImport.setValue("REFDOCNO", certificado.getCerNotaPedido().getCodigoNotaPedidoSap());
                tablePosicionImport.setValue("ITEM", ele.getCerNotaPedidoDetalle().getPosicionSap());
                //tablePosicion.setValue("");

            }
            log.error("CBAZALAR validarPresupuesto 05 listaCerificadoSingle ::: " + listaCerificadoSingle);

            for (CerCertificadoDetalle ele : listaCerificadoSingle) {
                // ele.getMtrCuentaImputacion()
                tableImport.appendRow();
                //Inicio - Validacion
                ImputacionCustom imputacionAux = new ImputacionCustom();
                listaImputacionAux.add(imputacionAux);

                imputacionAux.setValorImputacion(ele.getTotalLinea());
                log.error("CBAZALAR validarPresupuesto 06 ele " + ele.toString());
                //Fin Validacion
                imputacionAux.setSociedad(ele.getCerCertificado().getMtrSociedad().getDescBrv());
                tableImport.setValue("COMP_CODE", certificado.getMtrSociedad().getDescBrv());
                tableImport.setValue("FISC_YEAR", year + "");

                if (ele.getMtrCuentaImputacion() != null) {
                    log.error("CBAZALAR validarPresupuesto 07 ele.getMtrCuentaImputacion()  " + ele.getMtrCuentaImputacion().getCodigoCuentaImputacion());
                    imputacionAux.setTipoImputacion(ele.getMtrCuentaImputacion().getMtrTipoImputacion().getCodigoTipoImputacion());
                    String codigoImputacion = ele.getMtrCuentaImputacion().getCodigoCuentaImputacion();
                    imputacionAux.setCodigoImputacion(codigoImputacion);
                    if (ele.getMtrCuentaImputacion().getMtrTipoImputacion().getCodigoTipoImputacion().equalsIgnoreCase("K")) {
                        tableImport.setValue("COSTCENTER", ele.getMtrCuentaImputacion().getCodigoCuentaImputacion());
                    }
                    if (ele.getMtrCuentaImputacion().getMtrTipoImputacion().getCodigoTipoImputacion().equalsIgnoreCase("P")) {
                        tableImport.setValue("WBS_ELEMENT", ele.getMtrCuentaImputacion().getCodigoCuentaImputacion());
                    }
                    if (ele.getMtrCuentaImputacion().getMtrTipoImputacion().getCodigoTipoImputacion().equalsIgnoreCase("F")) {
                        tableImport.setValue("ORDERID", ele.getMtrCuentaImputacion().getCodigoCuentaImputacion());
                    }

                }

                log.error("CBAZALAR validarPresupuesto 08 getMtrMoneda " + certificado.getMtrMoneda().toString());
                if (certificado.getMtrMoneda() != null) {
                    tableImport.setValue("CURRENCY", certificado.getMtrMoneda().getDescBrv());
                    imputacionAux.setMoneda(certificado.getMtrMoneda().getDescBrv());
                }
                if (ele.getMtrCuentaMayor() != null) {
                    tableImport.setValue("GL_ACCOUNT", ele.getMtrCuentaMayor().getCodigoCuentaMayor());
                    log.error("validarPresupuesto_____ " + ele.getMtrCuentaMayor().getCodigoCuentaMayor());
                    imputacionAux.setCuentaMayor(ele.getMtrCuentaMayor().getCodigoCuentaMayor());
                }

            }

            log.error("CBAZALAR validarPresupuesto 09");
            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            //JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoParameterList tables = stfcConnection.getTableParameterList();
            JCoTable tableDetail = tables.getTable("DETAIL_TAB");
            JCoTable tableReturn = tables.getTable("RETURN_TAB");
            JCoTable tablePosicion = tablesImport.getTable("PO_ORDER_TAB");
            log.error("validarPresupuesto_____3 " + tableReturn);
            log.error("CBAZALAR validarPresupuesto 10 tableDetail " + tableDetail.toString());
            log.error("CBAZALAR validarPresupuesto 10 tableReturn " + tableReturn.toString());
            log.error("CBAZALAR validarPresupuesto 10 tablePosicion " + tablePosicion.toString());

            List<String> listaPosicionesAValidar = new ArrayList<String>();
            for (int i = 0; i < tablePosicion.getNumRows(); i++) {
                tablePosicion.setRow(i);
                log.error("CBAZALAR validarPresupuesto 11 __RESERVED " + tablePosicion.getString("ITEM") + " :: " + tablePosicion.getString("RESERVED"));
                if (StringUtils.isBlank(tablePosicion.getString("RESERVED")) ) {
                    listaPosicionesAValidar.add(tablePosicion.getString("ITEM"));
                }

            }
            log.error("CBAZALAR validarPresupuesto 12 listaPosicionesAValidar " + listaPosicionesAValidar);
            //Inicio Validar posiciones pprincipe 05/11/2020
            listaCerificadoSingle = new ArrayList<CerCertificadoDetalle>();
            log.error("CBAZALAR validarPresupuesto 12 listaDetalleCertificado_xyz ::: " + listaDetalleCertificado);
            for (CerCertificadoDetalle ele : listaDetalleCertificado) {

                Optional<String> optionalPosicion = listaPosicionesAValidar.stream()
                        .filter(x -> x.equalsIgnoreCase(ele.getCerNotaPedidoDetalle().getPosicionSap()))
                        .findFirst();
                log.error("CBAZALAR validarPresupuesto 13 ele" + ele.toString());
                log.error("CBAZALAR validarPresupuesto 13 getPosicionSap" + ele.getCerNotaPedidoDetalle().getPosicionSap());

                if (optionalPosicion.isPresent()) {
                    log.error("CBAZALAR validarPresupuesto 14 optionalPosicion.isPresent()");
                    Optional<CerCertificadoDetalle> optionalSingle = listaCerificadoSingle.stream()
                            .filter(x -> ele.getMtrCuentaImputacion().getMtrTipoImputacion().getCodigoTipoImputacion().equalsIgnoreCase(x.getMtrCuentaImputacion().getMtrTipoImputacion().getCodigoTipoImputacion())
                                    && ele.getMtrCuentaImputacion().getCodigoCuentaImputacion().equalsIgnoreCase(x.getMtrCuentaImputacion().getCodigoCuentaImputacion()) &&
                                    ele.getMtrCuentaMayor().getCodigoCuentaMayor().equalsIgnoreCase(x.getMtrCuentaMayor().getCodigoCuentaMayor()))
                            .findFirst();

                    if (optionalSingle.isPresent()) {
                        CerCertificadoDetalle auxCertificado = optionalSingle.get();
                        log.error("CBAZALAR validarPresupuesto 15__ auxCertificado_xyw ::: " + auxCertificado + "  ::: " + ele);
                        BigDecimal montoLineaAuxiliar = auxCertificado.getTotalLinea().add(ele.getTotalLinea());
                        auxCertificado.setTotalLinea(montoLineaAuxiliar);
                    } else {
                        CerCertificadoDetalle bean = (CerCertificadoDetalle) BeanUtils.cloneBean(ele);
                        listaCerificadoSingle.add(bean);
                    }
                }


            }

            log.error("CBAZALAR validarPresupuesto 16 listaCerificadoSingle_2 ::: " + listaCerificadoSingle);
            listaImputacionAux = new ArrayList<ImputacionCustom>();

            for (CerCertificadoDetalle ele : listaCerificadoSingle) {

                ImputacionCustom imputacionAux = new ImputacionCustom();
                listaImputacionAux.add(imputacionAux);

                imputacionAux.setValorImputacion(ele.getTotalLinea());
                log.error("CBAZALAR validarPresupuesto 17 ele " + ele.toString());
                //Fin Validacion
                imputacionAux.setSociedad(ele.getCerCertificado().getMtrSociedad().getDescBrv());


                if (ele.getMtrCuentaImputacion() != null) {
                    log.error("CBAZALAR validarPresupuesto 18 " + ele.getMtrCuentaImputacion().getCodigoCuentaImputacion());
                    imputacionAux.setTipoImputacion(ele.getMtrCuentaImputacion().getMtrTipoImputacion().getCodigoTipoImputacion());
                    String codigoImputacion = ele.getMtrCuentaImputacion().getCodigoCuentaImputacion();
                    imputacionAux.setCodigoImputacion(codigoImputacion);


                }

                log.error("CBAZALAR validarPresupuesto 19 " + certificado.getMtrMoneda().getDescBrv());
                if (certificado.getMtrMoneda() != null) {

                    imputacionAux.setMoneda(certificado.getMtrMoneda().getDescBrv());
                }
                if (ele.getMtrCuentaMayor() != null) {

                    log.error("CBAZALAR validarPresupuesto 20 " + ele.getMtrCuentaMayor().getCodigoCuentaMayor());
                    imputacionAux.setCuentaMayor(ele.getMtrCuentaMayor().getCodigoCuentaMayor());
                }

            }
            //Fin Validar posociones
            //lista.add(new MensajeSap("S", exports.getString("PO_CODE"), exports.getString("PO_MSJE")));
            boolean flagMensaje = true;
            log.error("CBAZALAR validarPresupuesto 21  flagMensaje" + flagMensaje);
            for (int i = 0; i < tableReturn.getNumRows(); i++) {
                tableReturn.setRow(i);
                MensajeSap beanMensaje = new MensajeSap(tableReturn.getString("TYPE"), tableReturn.getString("NUMBER"), tableReturn.getString("MESSAGE"));
                log.error("CBAZALAR validarPresupuesto 22  beanMensaje" + beanMensaje.toString());
                lista.add(beanMensaje);
                if (tableReturn.getString("TYPE").equalsIgnoreCase("E")) {
                    flagMensaje = false;
                    log.error("CBAZALAR validarPresupuesto 22e beanMensaje" + beanMensaje.toString());
                }

            }
            log.error("CBAZALAR validarPresupuesto 23 " + flagMensaje + "--- " + tableDetail);
            BigDecimal auxMonto = new BigDecimal("0.0");
            log.error("CBAZALAR validarPresupuesto 23 listaImputacionAux_ final " + listaImputacionAux);
            log.error("CBAZALAR validarPresupuesto 24");
            if (flagMensaje) {
                boolean flagOk = true;
                lista = new ArrayList<MensajeSap>();

                //Inicio
                for (int i = 0; i < tableDetail.getNumRows(); i++) {
                    tableDetail.setRow(i);

                    String codigoImputacion = "";
                    String tipoImputacion = "";

                    if (!StringUtils.isBlank(tableDetail.getString("COSTCENTER"))) {
                        codigoImputacion = tableDetail.getString("COSTCENTER");
                        tipoImputacion = "K";
                    } else if (!StringUtils.isBlank(tableDetail.getString("WBS_ELEMENT"))) {
                        codigoImputacion = tableDetail.getString("WBS_ELEMENT");
                        tipoImputacion = "P";
                    } else if (!StringUtils.isBlank(tableDetail.getString("ORDERID"))) {
                        codigoImputacion = tableDetail.getString("ORDERID");
                        tipoImputacion = "F";
                    }

                    String finalTipoImputacion = tipoImputacion;
                    String finalCodigoImputacion = codigoImputacion;

                    log.error("CBAZALAR validarPresupuesto 25 tableDetail: " + tableDetail.toString());

                    Optional<ImputacionCustom> optionalImputacionAux = listaImputacionAux.stream()
                            .filter(x -> finalTipoImputacion.equalsIgnoreCase(x.getTipoImputacion()) &&
                                    finalCodigoImputacion.equalsIgnoreCase(x.getCodigoImputacion()) &&
                                    tableDetail.getString("COMP_CODE").equalsIgnoreCase(x.getSociedad()) &&
                                    tableDetail.getString("CURRENCY").equalsIgnoreCase(x.getMoneda()) && tableDetail.getString("GL_ACCOUNT").equalsIgnoreCase(x.getCuentaMayor()))
                            .findFirst();
                    log.error("CBAZALAR validarPresupuesto 26");
                    if (optionalImputacionAux.isPresent()) {
                        log.error("CBAZALAR validarPresupuesto 27 optionalImputacionAux: " + optionalImputacionAux.get().toString());
                        auxMonto = optionalImputacionAux.get().getValorImputacion();
                        BigDecimal montoSap = tableDetail.getBigDecimal("AVAILABLE").setScale(2, BigDecimal.ROUND_HALF_UP);
                        log.error("CBAZALAR validarPresupuesto 27 montoSap: " + montoSap);
                        int res = montoSap.compareTo(optionalImputacionAux.get().getValorImputacion());
                        log.error("CBAZALAR validarPresupuesto 27 auxMonto: " + auxMonto);
                        log.error("CBAZALAR validarPresupuesto 27 res: " + res);
                        if (0 > res) {
                            log.error("CBAZALAR validarPresupuesto 28 ");
                            flagOk = false;
                            break;

                        }
                    }


                }
                //Fin

                /*for (int i = 0; i < tableDetail.getNumRows(); i++) {
                    tableDetail.setRow(i);
                    BigDecimal montoSap = tableDetail.getBigDecimal("AVAILABLE").setScale(2, BigDecimal.ROUND_HALF_UP);
                    log.error("validarPresupuesto_____5_1 " + montoSap);
                    int res = montoSap.compareTo(certificado.getMontoTotal());
                    log.error("validarPresupuesto_____5_2 " + certificado.getMontoTotal());
                    log.error("validarPresupuesto_____5_3 " + res);
                    if (0 > res) {
                        log.error("validarPresupuesto_____5_4 ");
                        flagOk = false;
                        break;

                    }

                }*/

                log.error("CBAZALAR validarPresupuesto 29 flagOk: " + flagOk);
                if (flagOk) {
                    lista.add(new MensajeSap("S", "", "El monto del certificado est√° dentro del presupuesto"));
                    log.error("CBAZALAR validarPresupuesto 29a flagOk: " + flagOk);
                } else {
                    // lista.add(new MensajeSap("E", "", "FM: El monto del certificado excede al presupuesto"));
                    lista.add(new MensajeSap("E", "", "FM: El monto " + auxMonto.toString() + " del certificado excede al presupuesto"));
                    log.error("CBAZALAR validarPresupuesto 29b flagOk: " + flagOk);
                }
            }


        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            //lista.add(new MensajeSap("E", error, error));
            log.error("CBAZALAR validarPresupuesto 30e " + error);
            throw new Exception(Constants.ERROR_ABAP);
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            //lista.add(new MensajeSap("E", error, error));
            log.error("CBAZALAR validarPresupuesto 30eb " + error);
            throw new Exception(Constants.ERROR_JCO_JAVA);
        }
        log.error("CBAZALAR validarPresupuesto FIN");
        return lista;
    }


    public List<MensajeSap> validarPresupuestoFacturacion(
            FacFactura facFactura,
            List<FacImputacion> facImputacionList) throws Exception {
        List<MensajeSap> lista = new ArrayList<MensajeSap>();
        if (facImputacionList == null || facImputacionList.size() <= 0) {
            return null;
        }
        if(facFactura != null)
            log.error("validarPresupuestoFacturacion_ ::: facFactura ::: " + facFactura.toString());

        if(facImputacionList != null)
            log.error("validarPresupuestoFacturacion_ ::: facImputacionList ::: " + facImputacionList.toString());

        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZFM_GET_BUDGET_ELEMENT");

            JCoParameterList imports = stfcConnection.getImportParameterList();

            JCoParameterList tablesImport = stfcConnection.getTableParameterList();
            JCoTable tableImport = tablesImport.getTable("DETAIL_TAB");
            log.error("validarPresupuestoFacturacion_____0 ");
            imports.setValue("I_CHECK_DATE", DateUtils.obtenerFechaActual());
            int year = Calendar.getInstance().get(Calendar.YEAR);
            List<ImputacionCustom> listaImputacionAux = new ArrayList<ImputacionCustom>();
            for (FacImputacion ele : facImputacionList) {
                //ele.getValorImputacion()
                ImputacionCustom imputacionAux = new ImputacionCustom();
                listaImputacionAux.add(imputacionAux);
                imputacionAux.setValorImputacion(ele.getValorImputacion());
                MtrCuentaImputacion mtrCuentaImputacion = this.mtrCuentaImputacionDeltaRepository.
                        getOne(ele.getMtrCuentaImputacion().getId());
                if (!Optional.ofNullable(mtrCuentaImputacion).isPresent()) {
                    throw new Exception("no se encontr√≥ Cuenta Imputaci√≥n con ID: " + ele.getMtrCuentaImputacion().getId());
                }
                log.error("validarPresupuestoFacturacion_ ::: mtrCuentaImputacion ::: " + mtrCuentaImputacion.toString());
                MtrCuentaMayor mtrCuentaMayor = this.mtrCuentaMayorDeltaRepository.
                        getOne((ele.getMtrCuentaMayor().getId()));
                if (!Optional.ofNullable(mtrCuentaMayor).isPresent()) {
                    throw new Exception("no se encontr√≥ Cuenta Mayor con ID: " + ele.getMtrCuentaMayor().getId());
                }
                log.error("validarPresupuestoFacturacion_ ::: mtrCuentaMayor ::: " + mtrCuentaMayor.toString());
                tableImport.appendRow();
                tableImport.setValue("COMP_CODE", facFactura.getMtrSociedad().getDescBrv());
                imputacionAux.setSociedad(facFactura.getMtrSociedad().getDescBrv());
                log.error("validarPresupuestoFacturacion_____ " + facFactura.getMtrSociedad().getDescBrv());
                tableImport.setValue("FISC_YEAR", year + "");

                if (mtrCuentaImputacion != null) {
                    log.error("validarPresupuestoFacturacion_____ " + mtrCuentaImputacion.getCodigoCuentaImputacion());
                    imputacionAux.setTipoImputacion(mtrCuentaImputacion.getMtrTipoImputacion().getCodigoTipoImputacion());
                    String codigoImputacion = mtrCuentaImputacion.getCodigoCuentaImputacion();
                    imputacionAux.setCodigoImputacion(codigoImputacion);
                    if (mtrCuentaImputacion.getMtrTipoImputacion().getCodigoTipoImputacion().equalsIgnoreCase("K")) {
                        tableImport.setValue("COSTCENTER", mtrCuentaImputacion.getCodigoCuentaImputacion());
                    }
                    if (mtrCuentaImputacion.getMtrTipoImputacion().getCodigoTipoImputacion().equalsIgnoreCase("P")) {
                        tableImport.setValue("WBS_ELEMENT", mtrCuentaImputacion.getCodigoCuentaImputacion());
                    }
                    if (mtrCuentaImputacion.getMtrTipoImputacion().getCodigoTipoImputacion().equalsIgnoreCase("F")) {
                        tableImport.setValue("ORDERID", mtrCuentaImputacion.getCodigoCuentaImputacion());
                    }

                }

                log.error("validarPresupuestoFacturacion_____44555 " + facFactura.getMtrMoneda().getDescBrv());
                if (facFactura.getMtrMoneda() != null) {
                    tableImport.setValue("CURRENCY", facFactura.getMtrMoneda().getDescBrv());
                    imputacionAux.setMoneda(facFactura.getMtrMoneda().getDescBrv());
                }
                if (mtrCuentaMayor != null) {
                    tableImport.setValue("GL_ACCOUNT", mtrCuentaMayor.getCodigoCuentaMayor());
                    log.error("validarPresupuestoFacturacion_____ " + mtrCuentaMayor.getCodigoCuentaMayor());
                    imputacionAux.setCuentaMayor(mtrCuentaMayor.getCodigoCuentaMayor());
                }

            }

            log.error("validarPresupuestoFacturacion_____1 ");
            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            //JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoParameterList tables = stfcConnection.getTableParameterList();
            JCoTable tableDetail = tables.getTable("DETAIL_TAB");
            JCoTable tableReturn = tables.getTable("RETURN_TAB");
            log.error("validarPresupuestoFacturacion_____3 ");
            //lista.add(new MensajeSap("S", exports.getString("PO_CODE"), exports.getString("PO_MSJE")));
            boolean flagMensaje = true;
            for (int i = 0; i < tableReturn.getNumRows(); i++) {
                tableReturn.setRow(i);
                lista.add(new MensajeSap(tableReturn.getString("TYPE"), tableReturn.getString("NUMBER"), tableReturn.getString("MESSAGE")));
                if (tableReturn.getString("TYPE").equalsIgnoreCase("E")) {
                    flagMensaje = false;
                }

            }
            log.error("validarPresupuestoFacturacion_____5 " + flagMensaje);
            BigDecimal auxMonto = new BigDecimal("0.0");
            if (flagMensaje) {
                boolean flagOk = true;
                lista = new ArrayList<MensajeSap>();
                for (int i = 0; i < tableDetail.getNumRows(); i++) {
                    tableDetail.setRow(i);

                    String codigoImputacion = "";
                    String tipoImputacion = "";

                    if (!StringUtils.isBlank(tableDetail.getString("COSTCENTER"))) {
                        codigoImputacion = tableDetail.getString("COSTCENTER");
                        tipoImputacion = "K";
                    } else if (!StringUtils.isBlank(tableDetail.getString("WBS_ELEMENT"))) {
                        codigoImputacion = tableDetail.getString("WBS_ELEMENT");
                        tipoImputacion = "P";
                    } else if (!StringUtils.isBlank(tableDetail.getString("ORDERID"))) {
                        codigoImputacion = tableDetail.getString("ORDERID");
                        tipoImputacion = "F";
                    }

                    String finalTipoImputacion = tipoImputacion;
                    String finalCodigoImputacion = codigoImputacion;
                    Optional<ImputacionCustom> optionalImputacionAux = listaImputacionAux.stream()
                            .filter(x -> finalTipoImputacion.equalsIgnoreCase(x.getTipoImputacion()) &&
                                    finalCodigoImputacion.equalsIgnoreCase(x.getCodigoImputacion()) &&
                                    tableDetail.getString("COMP_CODE").equalsIgnoreCase(x.getSociedad()) &&
                                    tableDetail.getString("CURRENCY").equalsIgnoreCase(x.getMoneda()) && tableDetail.getString("GL_ACCOUNT").equalsIgnoreCase(x.getCuentaMayor()))
                            .findFirst();

                    if (optionalImputacionAux.isPresent()) {
                        auxMonto = optionalImputacionAux.get().getValorImputacion();
                        BigDecimal montoSap = tableDetail.getBigDecimal("AVAILABLE").setScale(2, BigDecimal.ROUND_HALF_UP);
                        log.error("validarPresupuestoFacturacion_____5_1 " + montoSap);
                        int res = montoSap.compareTo(optionalImputacionAux.get().getValorImputacion());
                        log.error("validarPresupuestoFacturacion_____5_2 " + optionalImputacionAux.get().getValorImputacion());
                        log.error("validarPresupuestoFacturacion_____5_3 " + res);
                        if (0 > res) {
                            log.error("validarPresupuestoFacturacion_____5_4 ");
                            flagOk = false;
                            break;

                        }
                    }


                }
                log.error("validarPresupuestoFacturacion_____6 " + flagOk);
                if (flagOk) {
                    lista.add(new MensajeSap("S", "", "El monto del certificado est√° dentro del presupuesto"));
                } else {
                    lista.add(new MensajeSap("E", "", "FM: El monto " + auxMonto.toString() + " del certificado excede al presupuesto"));
                }
            }


        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            //lista.add(new MensajeSap("E", error, error));
            log.error("validarPresupuestoFacturacion_____11 " + error);
            throw new Exception(Constants.ERROR_ABAP);
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            //lista.add(new MensajeSap("E", error, error));
            log.error("validarPresupuestoFacturacion_____11 " + error);
            throw new Exception(Constants.ERROR_JCO_JAVA);
        }

        return lista;
    }


    @Override
    public List<RemitoOutSap> crearHes(List<RemitoInSap> listaIn) throws Exception {
        List<RemitoOutSap> lista = new ArrayList<RemitoOutSap>();
        RemitoOutSap remito = new RemitoOutSap();
        try {
            log.error("crearHes_____01");
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            log.error("crearHes_____02");
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_CREA_HES");
            log.error("crearHes_____03");

            JCoParameterList imports = stfcConnection.getImportParameterList();

            JCoTable tableImport = imports.getTable("IT_TCERT");
            log.error("crearHes_____04 :: listaIn " + listaIn);
            //JCoTable tableImportFechaPedido = imports.getTable("TI_BEDAT");
            //Poblamos Rango documento de compras
            //log.error("listaIn");
            for (RemitoInSap ele : listaIn) {
                tableImport.appendRow();
                log.error("ele.getIdCertificado() :: " + ele.getIdCertificado());
                tableImport.setValue("OCURRENCIA", ele.getIdCertificado());
                tableImport.setValue("EBELN", ele.getEbeln());
                tableImport.setValue("POSICION", ele.getPosicion());
                tableImport.setValue("PACNO", ele.getPacno());
                tableImport.setValue("INTROW", ele.getIntrow());
                tableImport.setValue("CENTRO", ele.getCentro());
                //tableImport.setValue("OCURRENCIA", ele.getOcurrencia());
                tableImport.setValue("EXTROW", ele.getExtrow());
                tableImport.setValue("EXTGROUP", ele.getExtgroup());
                tableImport.setValue("RANG", ele.getRang());
                tableImport.setValue("PACKAGE", ele.getPackagex());
                tableImport.setValue("SUBPACNO", ele.getSubpacno());
                tableImport.setValue("SRVNBR", ele.getSrvnbr());
                tableImport.setValue("UMEDIDA", ele.getUmedida());
                tableImport.setValue("QAPRO", ele.getQapro());
                tableImport.setValue("RMPRV", ele.getRmprv());
                tableImport.setValue("LOCDES", ele.getLocdes());
                tableImport.setValue("IMPUTACION", ele.getImputacion());
                tableImport.setValue("USRSOLIC", ele.getUsrsolic());
                log.error("ele.getUsrsolic() ::: " + ele.getUsrsolic());
                tableImport.setValue("MATPRV", ele.getMatprv());
                tableImport.setValue("MND", ele.getMnd());
                tableImport.setValue("PUNITARIO", ele.getPunitario());
                tableImport.setValue("DESCUENTO", ele.getDescuento());
                tableImport.setValue("ITEMAD", ele.getItemad());
                tableImport.setValue("TXZ01", ele.getTxz01());
                tableImport.setValue("MATKL", ele.getMatkl());
                tableImport.setValue("SAKNR", ele.getSaknr());
                log.error("ele.getSaknr() ::: " + ele.getSaknr());
                tableImport.setValue("KOSTL", ele.getKostl());
                log.error("ele.getKostl() ::: " + ele.getKostl());
                tableImport.setValue("POSID", ele.getPosid());
                log.error("ele.getPosid() ::: " + ele.getPosid());
                tableImport.setValue("USRAAUTO", ele.getUsraauto());
                log.error("ele.getUsraauto() ::: " + ele.getUsraauto());
                if (!StringUtils.isBlank(ele.getPrestServ()))
                    tableImport.setValue("DLORT", ele.getPrestServ());
                else
                    tableImport.setValue("DLORT", ele.getDlort());
                log.error("ele.getPrestServ() ::: " + ele.getPrestServ());
                tableImport.setValue("AUFNR", ele.getAufnr());
                log.error("ele.getAufnr() ::: " + ele.getAufnr());
                tableImport.setValue("LIFNR", ele.getLifnr());
                tableImport.setValue("EKORG", ele.getEkorg());
                tableImport.setValue("EKGRP", ele.getEkgrp());
                tableImport.setValue("LZVON", ele.getLzvon());
                tableImport.setValue("LZBIS", ele.getLzbis());
                //tableImport.setValue("SBNAMAN", ele.get);
                tableImport.setValue("BUDAT", ele.getBudat());
                tableImport.setValue("DESCUENTOH", ele.getDescuento());
                tableImport.setValue("LGORT", ele.getLgort());
                tableImport.setValue("RESWK", ele.getReswk());
                tableImport.setValue("BKTXT", ele.getGuiaRemision());
                tableImport.setValue("FIRMAA", ele.getFirma());
                //tableImport.setValue("BSART",  ele.getbs);

            }
            log.error("crearHes_____05");


            //Ejecutar Funcion
            stfcConnection.execute(destination);
            log.error("crearHes_____06");
            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            log.error("crearHes_____07");
            JCoTable tableExport = exports.getTable("TO_REMITOSAP");
            log.error("crearHes_____08");
            for (int i = 0; i < tableExport.getNumRows(); i++) {
                log.error("crearHes_____09_" + i);
                tableExport.setRow(i);
                RemitoOutSap ele = new RemitoOutSap();

                ele.setIntrow(tableExport.getString("INTROW"));
                ele.setImporte(tableExport.getString("IMPORTE"));
                ele.setError(tableExport.getString("ERROR"));
                ele.setEbeln(tableExport.getString("EBELN"));
                String posicion = tableExport.getString("POSICION");
                if(StringUtils.isBlank(tableExport.getString("POSICION")) || (StringUtils.isNotBlank(tableExport.getString("POSICION")) && tableExport.getString("POSICION").equalsIgnoreCase("0"))) {
                    posicion = "00001";
                    log.error("crearHes_____posicion_auxiliar_" + i + " - " + posicion);
                }
                log.error("crearHes_____posicion_" + i + " - " + posicion);
                ele.setPosicion(posicion);
                ele.setPacno(tableExport.getString("PACNO"));
                ele.setCentro(tableExport.getString("CENTRO"));
                ele.setOcurrencia(tableExport.getString("OCURRENCIA"));
                ele.setEntrega(tableExport.getString("ENTREGA"));
                ele.setRmprv(tableExport.getString("RMPRV"));
                ele.setState(tableExport.getString("STATE"));
                ele.setMnd(tableExport.getString("MND"));
                ele.setType(tableExport.getString("TYPE"));
                lista.add(ele);

            }
            log.error("crearHes_____10");

        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            remito.setState("A");
            lista.add(remito);
            log.error("crearHes_____11 " + error);
            throw new Exception(Constants.ERROR_ABAP);
            // lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            remito.setState("J");
            lista.add(remito);
            log.error("crearHes_____12 " + error);
            throw new Exception(Constants.ERROR_JCO_JAVA);

            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());

        }

        return lista;

    }

    @Override
    public List<TextClaseDocSap> listaClaseDocumentos() {
        List<TextClaseDocSap> lista = new ArrayList<TextClaseDocSap>();
        TextClaseDocSap claseDoc = new TextClaseDocSap();
        List<MtrClaseDocumento> listaDoc = this.mtrClaseDocumentoDeltaRepository.findAll();

        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_CLASE_DOCS_COMP");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            //JCoTable tableImport = imports.getTable("IT_TCERT");

            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExport = exports.getTable("T_T161T");
            //Recuperar datos de salida
            for (int i = 0; i < tableExport.getNumRows(); i++) {

                tableExport.setRow(i);
                Optional<MtrClaseDocumento> optionalClaseDoc = listaDoc.stream()
                        .filter(x -> tableExport.getString("BSART").equalsIgnoreCase(x.getCodigoSap()))
                        .findFirst();
                MtrClaseDocumento claDoc = new MtrClaseDocumento();
                if (optionalClaseDoc.isPresent())
                    claDoc = optionalClaseDoc.get();
                TextClaseDocSap ele = new TextClaseDocSap();
                ele.setBatxt(tableExport.getString("BATXT"));
                ele.setBsart(tableExport.getString("BSART"));
                ele.setBstyp(tableExport.getString("BSTYP"));
                ele.setSpras(tableExport.getString("SPRAS"));
                lista.add(ele);
                claDoc.setCodigoSap(tableExport.getString("BSART"));
                claDoc.setDescripcion(tableExport.getString("BATXT"));
                claDoc.setEstado("1");
                this.mtrClaseDocumentoDeltaRepository.save(claDoc);
            }


        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            claseDoc.setBatxt(error);
            lista.add(claseDoc);
            // lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            claseDoc.setBatxt(error);
            lista.add(claseDoc);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        }

        return lista;
    }

    @Override
    public List<CentroSap> listaCentroSap(String bukrs) {
        List<CentroSap> lista = new ArrayList<CentroSap>();
        CentroSap centro = new CentroSap();
        List<MtrCentroAlmacen> listaCentro = this.mtrCentroAlmacenDeltaRepository.findAll();
        List<MtrSociedad> listaSociedad = this.mtrSociedadDeltaRepository.findAll();

        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_LISTA_CENTRO");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            //JCoTable tableImport = imports.getTable("IT_TCERT");
            imports.setValue("PI_BUKRS", bukrs);
            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExport = exports.getTable("TO_CENTRO");
            //Recuperar datos de salida
            for (int i = 0; i < tableExport.getNumRows(); i++) {

                tableExport.setRow(i);

                Optional<MtrSociedad> optionalSociedad = listaSociedad.stream()
                        .filter(x -> bukrs.equalsIgnoreCase(x.getDescBrv()))
                        .findFirst();
                if (optionalSociedad.isPresent()) {

                    Optional<MtrCentroAlmacen> optionalCentro = listaCentro.stream()
                            .filter(x -> tableExport.getString("WERKS").equalsIgnoreCase(x.getCodigoCentroSap()) && x.getIdPadre() == 0)
                            .findFirst();

                    MtrCentroAlmacen centroAlmacen = new MtrCentroAlmacen();

                    if (optionalCentro.isPresent())
                        centroAlmacen = optionalCentro.get();
                    centroAlmacen.setCodigoCentroSap(tableExport.getString("WERKS"));
                    centroAlmacen.setDescripcion(tableExport.getString("NAME1"));
                    centroAlmacen.setIdPadre(0);
                    centroAlmacen.setMtrSociedad(optionalSociedad.get());

                    CentroSap ele = new CentroSap();
                    ele.setName1(tableExport.getString("NAME1"));
                    ele.setCity2(tableExport.getString("CITY2"));
                    ele.setOrt01(tableExport.getString("ORT01"));
                    ele.setStras(tableExport.getString("STRAS"));
                    ele.setWerks(tableExport.getString("WERKS"));
                    lista.add(ele);

                    //MtrCentroAlmacen centroAlmacen = new MtrCentroAlmacen();
                    //centroAlmacen.setCodigoCentroSap(tableExport.getString("WERKS"));
                    //centroAlmacen.setDescripcion(tableExport.getString("NAME1"));
                    this.mtrCentroAlmacenDeltaRepository.save(centroAlmacen);
                }

            }


        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            centro.setName1(error);
            lista.add(centro);
            // lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            centro.setName1(error);
            lista.add(centro);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        }

        return lista;
    }

    @Override
    public List<CentroAlmacenSap> listaCentroAlmacen(String sociedad) {
        List<CentroAlmacenSap> lista = new ArrayList<CentroAlmacenSap>();
        CentroAlmacenSap centroAlmacen = new CentroAlmacenSap();
        List<MtrCentroAlmacen> listaCentro = this.mtrCentroAlmacenDeltaRepository.findAll();
        List<MtrSociedad> listaSociedad = this.mtrSociedadDeltaRepository.findAll();

        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_LISTA_CENTRO_ALMACEN");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            //JCoTable tableImport = imports.getTable("IT_TCERT");
            imports.setValue("PI_BUKRS", sociedad);
            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExport = exports.getTable("TO_CTRO_ALMCN");
            //Recuperar datos de salida
            for (int i = 0; i < tableExport.getNumRows(); i++) {

                tableExport.setRow(i);
                Optional<MtrSociedad> optionalSociedad = listaSociedad.stream()
                        .filter(x -> tableExport.getString("BUKRS").equalsIgnoreCase(x.getDescBrv()))
                        .findFirst();

                if (optionalSociedad.isPresent()) {
                    Optional<MtrCentroAlmacen> optionalCentroPadre = listaCentro.stream()
                            .filter(x -> tableExport.getString("WERKS").equalsIgnoreCase(x.getCodigoCentroSap()) &&
                                    tableExport.getString("BUKRS").equalsIgnoreCase(x.getMtrSociedad().getDescBrv()) &&
                                    x.getIdPadre() == 0)
                            .findFirst();
                    if (optionalCentroPadre.isPresent()) {
                        MtrCentroAlmacen centroLamacen = new MtrCentroAlmacen();
                        Optional<MtrCentroAlmacen> optionalCentro = listaCentro.stream()
                                .filter(x -> tableExport.getString("LGOBE").equalsIgnoreCase(x.getCodigoCentroSap()) &&
                                        tableExport.getString("LGORT").equalsIgnoreCase(x.getDescripcion()) &&
                                        tableExport.getString("BUKRS").equalsIgnoreCase(x.getMtrSociedad().getDescBrv()) &&
                                        x.getIdPadre() != 0)
                                .findFirst();
                        if (optionalCentro.isPresent())
                            centroLamacen = optionalCentro.get();


                        CentroAlmacenSap ele = new CentroAlmacenSap();
                        ele.setCity2(tableExport.getString("CITY2"));
                        ele.setOrt01(tableExport.getString("ORT01"));
                        ele.setStras(tableExport.getString("STRAS"));
                        ele.setWerks(tableExport.getString("WERKS"));
                        ele.setLgobe(tableExport.getString("LGOBE"));
                        ele.setLgort(tableExport.getString("LGORT"));
                        lista.add(ele);

                        centroLamacen.setMtrSociedad(optionalSociedad.get());
                        centroLamacen.setCodigoCentroSap(tableExport.getString("LGORT"));
                        centroLamacen.setDescripcion(tableExport.getString("LGOBE"));
                        centroLamacen.setIdPadre(optionalCentroPadre.get().getId());
                        this.mtrCentroAlmacenDeltaRepository.save(centroLamacen);
                    }


                }
            }


        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            centroAlmacen.setWerks(error);
            lista.add(centroAlmacen);
            // lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            centroAlmacen.setWerks(error);
            lista.add(centroAlmacen);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        }

        return lista;
    }

    @Override
    public List<MensajeSap> integrarUnidadMedida() {

        List<MensajeSap> lista = new ArrayList<MensajeSap>();
        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_LISTA_UM");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            //JCoTable tableImport = imports.getTable("IT_TCERT");

            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExport = exports.getTable("TO_LIST_UM");
            lista.add(new MensajeSap("S", exports.getString("PO_CODE"), exports.getString("PO_MSJE")));

            //Recuperar datos de salida
            List<MtrUnidadMedida> listaEntity = new ArrayList<MtrUnidadMedida>();
            for (int i = 0; i < tableExport.getNumRows(); i++) {
                tableExport.setRow(i);
                MtrUnidadMedida unidad = this.mtrUnidadMedidaDeltaRepository.findByCodigoSap(tableExport.getString("MSEHI"));
                if (unidad == null)
                    unidad = new MtrUnidadMedida();
                listaEntity.add(unidad);
                unidad.setCodigoSap(tableExport.getString("MSEHI"));
                unidad.setDescripcion(tableExport.getString("MSEHL"));
                this.mtrUnidadMedidaDeltaRepository.save(unidad);
            }
            //Guardar Batch
            //this.mtrUnidadMedidaDeltaRepository.saveAll(listaEntity);

        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        }

        return lista;
    }

    @Override
    public List<MensajeSap> integrarGrupoArticulos(String piMatkl) {
        List<MensajeSap> lista = new ArrayList<MensajeSap>();
        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_CONSULTA_GR_ARTICULOS");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            if (piMatkl != null && piMatkl.length() > 0 && !piMatkl.equalsIgnoreCase(""))
                imports.setValue("PI_MATKL", piMatkl);
            //JCoTable tableImport = imports.getTable("IT_TCERT");

            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExport = exports.getTable("TO_GR_ART");
            lista.add(new MensajeSap("S", exports.getString("PO_CODE"), exports.getString("PO_MSJE")));

            //Recuperar datos de salida
            List<MtrGrupoArticulo> listaEntity = new ArrayList<MtrGrupoArticulo>();
            for (int i = 0; i < tableExport.getNumRows(); i++) {
                tableExport.setRow(i);
                MtrGrupoArticulo grupo = this.mtrGrupoArticuloDeltaRepository.findByCodigoSap(tableExport.getString("MATKL"));
                if (grupo == null)
                    grupo = new MtrGrupoArticulo();
                listaEntity.add(grupo);
                grupo.setCodigoSap(tableExport.getString("MATKL"));
                grupo.setDescripcion(tableExport.getString("WGBEZ"));
                //grupo.set
                //this.mtrUnidadMedidaDeltaRepository.save(unidad);
                //this.mtrGrupoArticuloDeltaRepository.save(grupo);
            }
            //Guardar Batch
            this.mtrGrupoArticuloDeltaRepository.saveAll(listaEntity);

        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        }

        return lista;
    }

    @Override
    public List<MensajeSap> integrarServicios(String fechaInicial, String fechaFinal) {
        List<MensajeSap> lista = new ArrayList<MensajeSap>();
        java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("yyyy/MM/dd");
        List<MtrUnidadMedida> listaUnidadMedida = mtrUnidadMedidaMapper.getLista(new MtrUnidadMedida());
        List<MtrGrupoArticulo> listaGrupoArticulo = mtrGrupoArticuloMapper.getLista(new MtrGrupoArticulo());
        List<MtrBienServicio> listaServicio = mtrBienServicioMapper.getListaByTipo("S");

        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_LISTA_SERVICIOS");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            JCoStructure struct = imports.getStructure("PI_ERDAT");
            if (!StringUtils.isBlank(fechaInicial) && !StringUtils.isBlank(fechaFinal)) {

                java.util.Date utilDInicio = format.parse(fechaInicial);
                ;
                java.util.Date utilDFin = format.parse(fechaFinal);
                ;

                struct.setValue("SIGN", "I");
                struct.setValue("OPTION", "BT");
                struct.setValue("LOW", utilDInicio);
                struct.setValue("HIGH", utilDFin);
            }

            //JCoTable tableImport = imports.getTable("IT_TCERT");

            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExport = exports.getTable("TO_SERVICIOS");
            lista.add(new MensajeSap("S", exports.getString("PO_CODE"), exports.getString("PO_MSJE")));

            //Recuperar datos de salida
            List<MtrBienServicio> listaEntity = new ArrayList<MtrBienServicio>();
            for (int i = 0; i < tableExport.getNumRows(); i++) {
                tableExport.setRow(i);
                String meins = tableExport.getString("MEINS");
                String codGrupoArticulo = tableExport.getString("MATKL");
                String codServicio = tableExport.getString("ASNUM");
                String descServicio = tableExport.getString("ASKTX");

                //Verificando si ya existe unidad de medida
                Optional<MtrUnidadMedida> optionalMeins = listaUnidadMedida.stream()
                        .filter(x -> meins.equalsIgnoreCase(x.getCodigoSap()))
                        .findFirst();
                if (optionalMeins.isPresent()) {
                    //Verificando si existe grupo de articulo
                    Optional<MtrGrupoArticulo> optionalGrupo = listaGrupoArticulo.stream()
                            .filter(x -> codGrupoArticulo.equalsIgnoreCase(x.getCodigoSap()))
                            .findFirst();
                    if (optionalGrupo.isPresent()) {
                        MtrBienServicio bs = new MtrBienServicio();
                        //validadando si ya existe el servicio
                        Optional<MtrBienServicio> optionalServicio = listaServicio.stream()
                                .filter(x -> codServicio.equalsIgnoreCase(x.getCodigoSap()))
                                .findFirst();
                        if (optionalServicio.isPresent())
                            bs = optionalServicio.get();

                        bs.setCodigoSap(codServicio);
                        bs.setDescripcion(descServicio);
                        bs.setTipoItem("S");
                        bs.setMtrUnidadMedida(optionalMeins.get());
                        bs.setMtrGrupoArticulo(optionalGrupo.get());
                        listaEntity.add(bs);
                    }
                }

            }
            //Guardar Batch
            this.mtrBienServicioDeltaRepository.saveAll(listaEntity);

        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        } catch (ParseException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        }

        return lista;
    }

    @Override
    public List<MensajeSap> integrarMateriales(String fechaInicial, String fechaFinal) {
        List<MensajeSap> lista = new ArrayList<MensajeSap>();
        java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("yyyy/MM/dd");
        List<MtrUnidadMedida> listaUnidadMedida = mtrUnidadMedidaMapper.getLista(new MtrUnidadMedida());
        List<MtrGrupoArticulo> listaGrupoArticulo = mtrGrupoArticuloMapper.getLista(new MtrGrupoArticulo());
        List<MtrBienServicio> listaMaterial = mtrBienServicioMapper.getListaByTipo("M");

        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_CONSULTA_MATERIALES");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            JCoStructure struct = imports.getStructure("PI_ERSDA");
            if (!StringUtils.isBlank(fechaInicial) && !StringUtils.isBlank(fechaFinal)) {

                java.util.Date utilDInicio = format.parse(fechaInicial);
                ;
                java.util.Date utilDFin = format.parse(fechaFinal);
                ;

                struct.setValue("SIGN", "I");
                struct.setValue("OPTION", "BT");
                struct.setValue("LOW", utilDInicio);
                struct.setValue("HIGH", utilDFin);
            }

            //JCoTable tableImport = imports.getTable("IT_TCERT");

            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExport = exports.getTable("TO_MATNR");
            lista.add(new MensajeSap("S", exports.getString("PO_CODE"), exports.getString("PO_MSJE")));

            //Recuperar datos de salida
            List<MtrBienServicio> listaEntity = new ArrayList<MtrBienServicio>();
            for (int i = 0; i < tableExport.getNumRows(); i++) {
                tableExport.setRow(i);
                String meins = tableExport.getString("MEINS");
                String codGrupoArticulo = tableExport.getString("MATKL");
                String codMaterial = tableExport.getString("MATNR");
                String descMaterial = tableExport.getString("MAKTX");

                //Verificando si ya existe unidad de medida
                Optional<MtrUnidadMedida> optionalMeins = listaUnidadMedida.stream()
                        .filter(x -> meins.equalsIgnoreCase(x.getCodigoSap()))
                        .findFirst();
                if (optionalMeins.isPresent()) {
                    //Verificando si existe grupo de articulo
                    Optional<MtrGrupoArticulo> optionalGrupo = listaGrupoArticulo.stream()
                            .filter(x -> codGrupoArticulo.equalsIgnoreCase(x.getCodigoSap()))
                            .findFirst();
                    if (optionalGrupo.isPresent()) {
                        MtrBienServicio bs = new MtrBienServicio();
                        //validadando si ya existe el servicio
                        Optional<MtrBienServicio> optionalMaterial = listaMaterial.stream()
                                .filter(x -> codMaterial.equalsIgnoreCase(x.getCodigoSap()))
                                .findFirst();
                        if (optionalMaterial.isPresent())
                            bs = optionalMaterial.get();
                        bs.setCodigoSap(codMaterial);
                        bs.setDescripcion(descMaterial);
                        bs.setTipoItem("M");
                        bs.setMtrUnidadMedida(optionalMeins.get());
                        bs.setMtrGrupoArticulo(optionalGrupo.get());
                        listaEntity.add(bs);
                    }
                }

            }
            //Guardar Batch
            this.mtrBienServicioDeltaRepository.saveAll(listaEntity);

        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        } catch (ParseException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        }

        return lista;
    }

    @Override
    public List<MensajeSap> integrarProveedor(String fechaInicial, String fechaFinal, String lifnr) {
        List<MensajeSap> lista = new ArrayList<MensajeSap>();
        java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("yyyy/MM/dd");
        List<MtrProveedor> listaProv = this.mtrProveedorDeltaRepository.findAll();

        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_CONSULTA_PROVEEDOR");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            JCoStructure struct = imports.getStructure("TI_ERDAT");

            if (!StringUtils.isBlank(lifnr))
                imports.setValue("PI_LIFNR", lifnr);

            if (!StringUtils.isBlank(fechaInicial) && !StringUtils.isBlank(fechaFinal)) {

                java.util.Date utilDInicio = format.parse(fechaInicial);
                ;
                java.util.Date utilDFin = format.parse(fechaFinal);
                ;

                struct.setValue("LOW", utilDInicio);
                struct.setValue("HIGH", utilDFin);
                //struct.setValue("LOW",utilDInicio);
                //struct.setValue("HIGH",utilDFin);
            }

            //JCoTable tableImport = imports.getTable("IT_TCERT");

            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoParameterList tables = stfcConnection.getTableParameterList();
            JCoTable tableExport = tables.getTable("ITAB_LFA1");
            lista.add(new MensajeSap("S", exports.getString("PO_CODE"), exports.getString("PO_MSJE")));

            //Recuperar datos de salida
            List<MtrProveedor> listaEntity = new ArrayList<MtrProveedor>();
            for (int i = 0; i < tableExport.getNumRows(); i++) {
                tableExport.setRow(i);
                String lifnrx = tableExport.getString("LIFNR");
                String razonSocial = tableExport.getString("NAME1");
                String direccion = tableExport.getString("STRAS");
                String ruc = tableExport.getString("STCD1");

                //Verificando si ya existe unidad de medida
                Optional<MtrProveedor> optionalProv = listaProv.stream()
                        .filter(x -> lifnrx.equalsIgnoreCase(x.getLifnr()))
                        .findFirst();
                MtrProveedor proveedor = new MtrProveedor();
                if (optionalProv.isPresent())
                    proveedor = optionalProv.get();

                proveedor.setLifnr(lifnrx);
                proveedor.setDireccion(direccion);
                proveedor.setRazonSocial(razonSocial);
                proveedor.setRuc(ruc);
                if (!StringUtils.isBlank(tableExport.getString("STCD1")) && !StringUtils.isBlank(tableExport.getString("NAME1"))) {
                    log.error("integrarProveedor_x ::: " + proveedor);
                    //listaEntity.add(proveedor);
                    this.mtrProveedorDeltaRepository.save(proveedor);
                    log.error("integrarProveedor_y ::: " + i);
                }

            }
            //Guardar Batch
            //this.mtrProveedorDeltaRepository.saveAll(listaEntity);

        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        } catch (ParseException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        }

        return lista;
    }

    @Override
    public List<DescargaServicioSap> listaDescargaDetalle(List<RangeSap> rangeDoc, List<RangeSap> rangeFecha) {
        List<DescargaServicioSap> lista = new ArrayList<DescargaServicioSap>();
        DescargaServicioSap descarga = new DescargaServicioSap();
        //Lista de cabecera detalle
        List<CerNotaPedido> listaOrden = this.cerNotaPedidoDeltaRepository.findAll();
        List<CerNotaPedidoDetalle> listaDetalle = this.cerNotaPedidoDetalleDeltaRepository.findAll();
        List<MtrCentroAlmacen> listaCentro = this.mtrCentroAlmacenDeltaRepository.findAll();
        List<MtrBienServicio> listaBienServicio = this.mtrBienServicioDeltaRepository.findAll();
        List<MtrCuentaImputacion> listaCuentaImputacion = this.mtrCuentaImputacionDeltaRepository.findAll();
        List<MtrCuentaMayor> listaCuentaMayor = this.mtrCuentaMayorDeltaRepository.findAll();
        //List<MtrCentroAlmacen> listaCe

        java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("yyyy/MM/dd");
        java.text.SimpleDateFormat formatOut = new java.text.SimpleDateFormat("yyyyMMdd");

        /*String[] arrAttributesName = new String[]{"EBELN", "EKORG", "LIFNR", "ERNAM", "FIRMAA1", "FIRMAA2", "FIRMAA3", "FIRMAA4",
                "FIRMAB1",
                "FIRMAB2",
                "FIRMAB3",
                "FIRMAB4",
                "WAERS",
                "VIGDES",
                "VIGHAS",
                "TIPDOC",
                "BEDAT",
                "CLDOC",
                "WERKS",
                "NAME1",
                "PEDIDO_VERSION",
                "ZTERM",
                "EBELP",
                "TXZ01",
                "FECENT",
                "PRECIO",
                "KNTTP",
                "LGORT",
                "MATKL",
                "WGBEZ",
                "PACKNO",
                "INTROW",
                "EXTROW",
                "SRVPOS",
                "DESCRI",
                "UNIMED",
                "CANREQ",
                "CANENT",
                //"PRECIO2",
                "SAKTO",
                "KOSTL",
                "POSID",
                "AUFNR",
                "CABTX",
                "ZPLAZO",
                "PRETP"};*/
        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_DESCARGA_DOC_COMPRA");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            JCoTable tableImportDocCompra = imports.getTable("TI_EBELN");
            JCoTable tableImportFechaPedido = imports.getTable("TI_BEDAT");
            //Poblamos Rango documento de compras
            if (rangeDoc != null && rangeDoc.size() > 0) {
                for (RangeSap ele : rangeDoc) {
                    tableImportDocCompra.appendRow();
                    tableImportDocCompra.setValue("SIGN", ele.getSign());
                    tableImportDocCompra.setValue("OPTION", ele.getOption());
                    tableImportDocCompra.setValue("LOW", ele.getLow());
                    tableImportDocCompra.setValue("HIGH", ele.getHigh());
                }
            }
            //Poblamos Rango fecha de pedidos
            if (rangeFecha != null && rangeFecha.size() > 0) {
                for (RangeSap ele : rangeFecha) {
                    tableImportFechaPedido.appendRow();
                    tableImportFechaPedido.setValue("SIGN", ele.getSign());
                    tableImportFechaPedido.setValue("OPTION", ele.getOption());


                    java.util.Date utilDInicio = format.parse(ele.getLow());
                    java.util.Date utilDFin = format.parse(ele.getHigh());

                    tableImportFechaPedido.setValue("LOW", utilDInicio);
                    tableImportFechaPedido.setValue("HIGH", utilDFin);
                }
            }
            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExportDescargaServicio = exports.getTable("TO_DESC_SERV");
            JCoTable tablePos = exports.getTable("TO_TPOS");
            JCoTable tableServ = exports.getTable("TO_TSERV");

            List<DescargaServicioSap> listaBienServioAuxiliar = new ArrayList<DescargaServicioSap>();
            //List<BienServicioCustom> listaMaterialesAux = new ArrayList<BienServicioCustom>();
            //List<BienServicioCustom> listaServicioAux = new ArrayList<BienServicioCustom>();
            /*for (int i = 0; i < tablePos.getNumRows(); i++) {
                //DescargaServicioSap des = new DescargaServicioSap();
                tablePos.setRow(i);
                if(!StringUtils.isBlank(tablePos.getString("MATNR"))) {
                    logger.error("valor material :: " + tablePos.getString("MATNR"));
                    BienServicioCustom bs = new BienServicioCustom();
                    bs.setEbeln(tablePos.getString("EBELN"));
                    bs.setEbelp(tablePos.getString("EBELP"));
                    bs.setExtrow("0000000000");
                    bs.setCodBienServicio(tablePos.getString("MATNR"));
                    bs.setTipo("M");
                    listaBienServioAuxiliar.add(bs);
                }

            }*/

            for (int i = 0; i < tableServ.getNumRows(); i++) {
                //DescargaServicioSap des = new DescargaServicioSap();
                tableServ.setRow(i);
                DescargaServicioSap bs = new DescargaServicioSap();
                bs.setEbeln(tableServ.getString("EBELN"));
                bs.setEbelp(tableServ.getString("EBELP"));
                bs.setExtrow(tableServ.getString("EXTROW"));
                bs.setIntrow(tableServ.getString("INTROW"));
                bs.setCodBienServicio(tableServ.getString("SRVPOS"));
                logger.error(" valor cod servicio :: " + tableServ.getString("SRVPOS"));
                bs.setTipo("S");
                bs.setCanreq(tableServ.getString("CANREQ"));
                bs.setCanent(tableServ.getString("CANENT"));
                bs.setPrecio(tableServ.getString("PRECIO"));
                bs.setTextoAdicional(tableServ.getString("DESCRI"));
                bs.setUnimed(tableServ.getString("UNIMED"));

                //Inicio
                //detalle.setCuentaMayor(tableServ.getString("SAKTO"));
                //detalle.setCeco(tableServ.getString("KOSTL"));
                //detalle.setAfe(tableServ.getString("POSID"));
                //detalle.setOrden(tableServ.getString("AUFNR")	);
                bs.setKnttp(tableServ.getString("KNTTP"));
                bs.setKostl(tableServ.getString("KOSTL"));
                bs.setPosid(tableServ.getString("POSID"));
                bs.setAufnr(tableServ.getString("AUFNR"));
                bs.setSakto(tableServ.getString("SAKTO"));
                //bs.setWerks(tableServ.getString("WERKS"));
                bs.setBurks(tableServ.getString("BUKRS"));
                bs.setDel(tableServ.getString("DEL"));

                // listaBienServioAuxiliar
                //Fin

                listaBienServioAuxiliar.add(bs);

            }


            List<CerNotaPedidoDetalle> listaEntity = new ArrayList<CerNotaPedidoDetalle>();
            //Recuperar descarga
            for (int i = 0; i < tablePos.getNumRows(); i++) {

                //tableExportDescargaServicio.setRow(i);
                tablePos.setRow(i);
                DescargaServicioSap descargaDoc = new DescargaServicioSap();

                descargaDoc.setEbeln(tablePos.getString("EBELN"));
                descargaDoc.setEbelp(tablePos.getString("EBELP"));
                descargaDoc.setWerks(tablePos.getString("WERKS"));
                descargaDoc.setExtrow("0000000000");
                descargaDoc.setIntrow("0000000000");
                descargaDoc.setCanreq(tablePos.getString("CANREQ"));
                descargaDoc.setCanent(tablePos.getString("CANENT"));
                descargaDoc.setPrecio(tablePos.getString("PRECIO"));
                descargaDoc.setCodBienServicio(tablePos.getString("MATNR"));
                descargaDoc.setFecent(tablePos.getString("FECENT"));
                descargaDoc.setDel(tablePos.getString("DEL"));

                /*for (String attributeName : arrAttributesName) {
                    Class<DescargaServicioSap> clazz = DescargaServicioSap.class;
                    Field fieldName = clazz.getDeclaredField(attributeName.toLowerCase());
                    fieldName.setAccessible(true);
                    fieldName.set(descargaDoc, tableExportDescargaServicio.getString(attributeName));

                }*/
                //Setear Valores a la tabla
                logger.error("============================= orden compra detalle" + descargaDoc.getEbelp() + "===================================");
                Optional<CerNotaPedido> optionalPedido = listaOrden.stream()
                        .filter(x -> descargaDoc.getEbeln().equalsIgnoreCase(x.getCodigoNotaPedidoSap()))
                        .findFirst();

                if (optionalPedido.isPresent()) {
                    CerNotaPedido pedido = optionalPedido.get();
                    logger.error("Existe pedido:: " + pedido.getCodigoNotaPedidoSap());
                    Optional<CerNotaPedidoDetalle> optionalDetalle = listaDetalle.stream()
                            .filter(x -> descargaDoc.getEbeln().equalsIgnoreCase(x.getEbeln()) && descargaDoc.getEbelp().equalsIgnoreCase(x.getPosicionSap())
                                    && descargaDoc.getExtrow().equalsIgnoreCase(x.getExtrow()))
                            .findFirst();
                    CerNotaPedidoDetalle detalle = new CerNotaPedidoDetalle();
                    if (optionalDetalle.isPresent())
                        detalle = optionalDetalle.get();
                    Optional<MtrCentroAlmacen> optionalCentro = listaCentro.stream()
                            .filter(x -> descargaDoc.getWerks().equalsIgnoreCase(x.getCodigoCentroSap()) && x.getIdPadre() == 0)
                            .findFirst();
                    if (optionalCentro.isPresent()) {
                        logger.error("Existe centro:: " + optionalCentro.get().getCodigoCentroSap());


                        detalle.setCerNotaPedido(pedido);
                        detalle.setExtrow(descargaDoc.getExtrow());
                        detalle.setIntrow(descargaDoc.getIntrow());
                        detalle.setMtrCentro(optionalCentro.get());
                        detalle.setPosicionSap(descargaDoc.getEbelp());
                        detalle.setEbeln(descargaDoc.getEbeln());
                        //detalle.setUnidadTextoItem(tablePos.getString("UNIMED"));
                        if (!StringUtils.isBlank(tablePos.getString("UNIMED"))) {
                            MtrUnidadMedida unidad = this.mtrUnidadMedidaDeltaRepository.findByCodigoSap(tablePos.getString("UNIMED"));
                            if (unidad != null)
                                detalle.setMtrUnidadMedida(unidad);
                        }

                        //detalle.setCuentaMayor(tablePos.getString("SAKTO"));
                        //detalle.setCeco(tablePos.getString("KOSTL"));
                        //detalle.setAfe(tablePos.getString("POSID"));
                        //detalle.setOrden(tablePos.getString("AUFNR")	);

                        //detalle.setIdPadre(0);
                        log.error("Ingreso cuenta imputacion - mayor :: " + tablePos.getString("KNTTP"));
                        if (!StringUtils.isBlank(tablePos.getString("KNTTP")) && !tablePos.getString("KNTTP").equalsIgnoreCase("U")) {
                            String codeCuentaMayor = tablePos.getString("SAKTO");
                            log.error("Ingreso cuenta imputacion 2 - mayor :: " + codeCuentaMayor);
                            String codeCuentaImputacion = "";
                            if (tablePos.getString("KNTTP").equalsIgnoreCase("K"))
                                codeCuentaImputacion = tablePos.getString("KOSTL");
                            if (tablePos.getString("KNTTP").equalsIgnoreCase("P"))
                                codeCuentaImputacion = tablePos.getString("POSID");
                            if (tablePos.getString("KNTTP").equalsIgnoreCase("F"))
                                codeCuentaImputacion = tablePos.getString("AUFNR");
                            log.error("Ingreso cuenta imputacion 3 - mayor :: " + codeCuentaImputacion);
                            //Guardar imputacion
                            if (!StringUtils.isBlank(codeCuentaImputacion) && !StringUtils.isBlank(tablePos.getString("BUKRS"))) {

                                String finalCodeCuentaImputacion = codeCuentaImputacion;
                                log.error("Ingreso cuenta imputacion 4 - mayor :: " + finalCodeCuentaImputacion);
                                log.error("Ingreso cuenta imputacion 5 - mayor :: " + tablePos.getString("KNTTP") + " - " + finalCodeCuentaImputacion + " - " + tablePos.getString("BUKRS"));
                                Optional<MtrCuentaImputacion> optionalCuentaImputacion = listaCuentaImputacion.stream()
                                        .filter(x -> tablePos.getString("KNTTP").equalsIgnoreCase(x.getMtrTipoImputacion().getCodigoTipoImputacion()) &&
                                                finalCodeCuentaImputacion.equalsIgnoreCase(x.getCodigoCuentaImputacion()) &&
                                                tablePos.getString("BUKRS").equalsIgnoreCase(x.getMtrSociedad().getDescBrv())).findFirst();
                                if (optionalCuentaImputacion.isPresent())
                                    detalle.setMtrCuentaImputacion(optionalCuentaImputacion.get());
                            }
                            //Guardar cuenta mayor
                            log.error("Ingreso cuenta mayor 6 - mayor :: " + codeCuentaMayor + " - " + tablePos.getString("BUKRS"));
                            if (!StringUtils.isBlank(codeCuentaMayor) && !StringUtils.isBlank(tablePos.getString("BUKRS"))) {
                                log.error("Ingreso cuenta mayor 7 - mayor :: " + tablePos.getString("KNTTP") + " - " + codeCuentaMayor + " - " + tablePos.getString("BUKRS"));
                                Optional<MtrCuentaMayor> optionalCuentaMayor = listaCuentaMayor.stream()
                                        .filter(x -> tablePos.getString("KNTTP").equalsIgnoreCase(x.getMtrTipoImputacion().getCodigoTipoImputacion()) &&
                                                codeCuentaMayor.equalsIgnoreCase(x.getCodigoCuentaMayor()) &&
                                                tablePos.getString("BUKRS").equalsIgnoreCase(x.getMtrSociedad().getDescBrv())).findFirst();
                                if (optionalCuentaMayor.isPresent())
                                    detalle.setMtrCuentaMayor(optionalCuentaMayor.get());
                            }


                        }


                        if (!StringUtils.isBlank(descargaDoc.getCodBienServicio())) {
                            Optional<MtrBienServicio> optionaBsAux = listaBienServicio.stream()
                                    .filter(x -> descargaDoc.getCodBienServicio().equalsIgnoreCase(x.getCodigoSap()) &&
                                            "M".equalsIgnoreCase(x.getTipoItem()))
                                    .findFirst();
                            if (optionaBsAux.isPresent()) {
                                detalle.setMtrBienServicio(optionaBsAux.get());
                            }/*else {
                                        detalle.setTextoAdicional(tablePos.getString("TXZ01"));
                                    }*/
                        } else {
                            detalle.setTextoItem(tablePos.getString("TXZ01"));
                        }

                        BigDecimal cantEntregada = new BigDecimal("0.0");
                        logger.error("descargaDoc.getCanent(): " + descargaDoc.getCanent());
                        //log.error("descargaDoc.getCanent()x: " + descargaDoc.getCanent());
                        if (!StringUtils.isBlank(descargaDoc.getCanent())) {
                            //java.sql.Date sDateEntregada = new java.sql.Date(format.parse(descargaDoc.getCanent()).getTime());
                            cantEntregada = new BigDecimal(descargaDoc.getCanent().trim());

                        }

                        detalle.setCantidadEntregada(cantEntregada);
                        BigDecimal cantidadRequerida = new BigDecimal("0.0");
                        logger.error("descargaDoc.getCanreq(): " + descargaDoc.getCanreq());
                        //log.error("descargaDoc.getCanreq()x: " + descargaDoc.getCanreq());
                        if (!StringUtils.isBlank(descargaDoc.getCanreq()) && descargaDoc.getCanreq() != null) {
                            //java.sql.Date sDateRequerida = new java.sql.Date(format.parse(descargaDoc.getCanreq()).getTime());
                            cantidadRequerida = new BigDecimal(descargaDoc.getCanreq().trim());

                        }
                        detalle.setCantidadRequerida(cantidadRequerida);
                        //detalle.setCerCuentaMayor();
                        logger.error("descargaDoc.getFecent(): " + descargaDoc.getFecent());
                        //log.error("descargaDoc.getFecent()x: " + descargaDoc.getFecent());
                        if (!StringUtils.isBlank(descargaDoc.getFecent()) && !descargaDoc.getFecent().equalsIgnoreCase("00000000")) {
                            java.sql.Date fecent = new java.sql.Date(formatOut.parse(descargaDoc.getFecent().trim()).getTime());
                            detalle.setFechaEntrega(fecent);
                        }
                        logger.error("NFECENT : " + tablePos.getString("NFECENT"));
                        if (!StringUtils.isBlank(tablePos.getString("NFECENT")) && !tablePos.getString("NFECENT").trim().equalsIgnoreCase("00000000")) {
                            java.sql.Date fecentx = new java.sql.Date(formatOut.parse(tablePos.getString("NFECENT").trim()).getTime());
                            detalle.setNuevaFechaEntrega(fecentx);
                        }
                        logger.error("PLIFZ : " + tablePos.getString("PLIFZ"));
                        if (!StringUtils.isBlank(tablePos.getString("PLIFZ"))) {
                            detalle.setPlazoEntrega(tablePos.getString("PLIFZ").trim());
                        }

                        logger.error("descargaDoc.getPrecio(): " + descargaDoc.getPrecio());
                        //log.error("descargaDoc.getPrecio()x: " + descargaDoc.getPrecio());
                        BigDecimal precio = new BigDecimal("0.0");
                        if (!StringUtils.isBlank(descargaDoc.getPrecio())) {
                            precio = new BigDecimal(descargaDoc.getPrecio().trim());

                        }
                        detalle.setPrecioUnitario(precio);
                        detalle.setIndEliminado(tablePos.getString("DEL"));
                        CerNotaPedidoDetalle detalleOut = this.cerNotaPedidoDetalleDeltaRepository.save(detalle);
                        //listaEntity.add(detalle);
                        //detalle.setMtrAlmacen();
                        //detalle.setMtrBienServicio();
                        //detalle.setMtrCentro();
                        for (DescargaServicioSap servicio : listaBienServioAuxiliar) {
                            if (servicio.getEbeln().equalsIgnoreCase(descargaDoc.getEbeln()) &&
                                    servicio.getEbelp().equalsIgnoreCase(descargaDoc.getEbelp())) {

                                Optional<CerNotaPedidoDetalle> optionalServicio = listaDetalle.stream()
                                        .filter(x -> servicio.getEbeln().equalsIgnoreCase(x.getEbeln()) && servicio.getEbelp().equalsIgnoreCase(x.getPosicionSap())
                                                && servicio.getExtrow().equalsIgnoreCase(x.getExtrow()))
                                        .findFirst();
                                CerNotaPedidoDetalle detalleServicio = new CerNotaPedidoDetalle();
                                if (optionalServicio.isPresent())
                                    detalleServicio = optionalServicio.get();

                                detalleServicio.setCerNotaPedido(pedido);
                                detalleServicio.setMtrCentro(optionalCentro.get());
                                detalleServicio.setPosicionSap(servicio.getEbelp());
                                detalleServicio.setEbeln(servicio.getEbeln());
                                detalleServicio.setExtrow(servicio.getExtrow());
                                detalleServicio.setIntrow(servicio.getIntrow());
                                detalleServicio.setIdPadre(detalleOut.getId());
                                detalleServicio.setUnidadTextoItem(servicio.getUnimed());

                                //Datos para detalle de psocicion
                                if (!StringUtils.isBlank(servicio.getKnttp()) && !servicio.getKnttp().equalsIgnoreCase("U")) {
                                    String codeCuentaMayor = servicio.getSakto();
                                    String codeCuentaImputacion = "";
                                    if (servicio.getKnttp().equalsIgnoreCase("K"))
                                        codeCuentaImputacion = servicio.getKostl();
                                    if (servicio.getKnttp().equalsIgnoreCase("P"))
                                        codeCuentaImputacion = servicio.getPosid();
                                    if (servicio.getKnttp().equalsIgnoreCase("F"))
                                        codeCuentaImputacion = servicio.getAufnr();
                                    //Guardar imputacion
                                    if (!StringUtils.isBlank(codeCuentaImputacion) && !StringUtils.isBlank(servicio.getBurks())) {
                                        String finalCodeCuentaImputacion = codeCuentaImputacion;
                                        Optional<MtrCuentaImputacion> optionalCuentaImputacion = listaCuentaImputacion.stream()
                                                .filter(x -> servicio.getKnttp().equalsIgnoreCase(x.getMtrTipoImputacion().getCodigoTipoImputacion()) &&
                                                        finalCodeCuentaImputacion.equalsIgnoreCase(x.getCodigoCuentaImputacion()) &&
                                                        servicio.getBurks().equalsIgnoreCase(x.getMtrSociedad().getDescBrv())).findFirst();
                                        if (optionalCuentaImputacion.isPresent())
                                            detalleServicio.setMtrCuentaImputacion(optionalCuentaImputacion.get());
                                    }
                                    //Guardar cuenta mayor
                                    if (!StringUtils.isBlank(codeCuentaMayor) && !StringUtils.isBlank(servicio.getBurks())) {

                                        Optional<MtrCuentaMayor> optionalCuentaMayor = listaCuentaMayor.stream()
                                                .filter(x -> servicio.getKnttp().equalsIgnoreCase(x.getMtrTipoImputacion().getCodigoTipoImputacion()) &&
                                                        codeCuentaMayor.equalsIgnoreCase(x.getCodigoCuentaMayor()) &&
                                                        servicio.getBurks().equalsIgnoreCase(x.getMtrSociedad().getDescBrv())).findFirst();
                                        if (optionalCuentaMayor.isPresent())
                                            detalleServicio.setMtrCuentaMayor(optionalCuentaMayor.get());
                                    }


                                }
                                //Fin

                                if (!StringUtils.isBlank(servicio.getCodBienServicio())) {
                                    Optional<MtrBienServicio> optionaBsServicioAux = listaBienServicio.stream()
                                            .filter(x -> servicio.getCodBienServicio().equalsIgnoreCase(x.getCodigoSap()) &&
                                                    "S".equalsIgnoreCase(x.getTipoItem()))
                                            .findFirst();
                                    if (optionaBsServicioAux.isPresent()) {
                                        detalleServicio.setMtrBienServicio(optionaBsServicioAux.get());
                                    }/*else {
                                        detalle.setTextoAdicional(tablePos.getString("TXZ01"));
                                    }*/
                                } else {
                                    detalleServicio.setTextoItem(servicio.getTextoAdicional());
                                }

                                //Cantifdades y precios
                                BigDecimal cantEntregadaServicio = new BigDecimal("0.0");
                                logger.error("servicio.getCanent() 2: " + servicio.getCanent());

                                if (!StringUtils.isBlank(servicio.getCanent())) {
                                    //java.sql.Date sDateEntregada = new java.sql.Date(format.parse(descargaDoc.getCanent()).getTime());
                                    cantEntregadaServicio = new BigDecimal(servicio.getCanent().trim());

                                }

                                detalleServicio.setCantidadEntregada(cantEntregadaServicio);

                                BigDecimal cantidadRequeridaServicio = new BigDecimal("0.0");
                                logger.error("servicio.getCanreq() 2: " + servicio.getCanreq());

                                if (!StringUtils.isBlank(servicio.getCanreq()) && servicio.getCanreq() != null) {
                                    //java.sql.Date sDateRequerida = new java.sql.Date(format.parse(descargaDoc.getCanreq()).getTime());
                                    cantidadRequeridaServicio = new BigDecimal(servicio.getCanreq().trim());

                                }
                                detalleServicio.setCantidadRequerida(cantidadRequeridaServicio);
                                //detalle.setCerCuentaMayor();
                                logger.error("servicio.getFecent() 2: " + servicio.getFecent());

                                if (!StringUtils.isBlank(descargaDoc.getFecent()) && !descargaDoc.getFecent().equalsIgnoreCase("00000000")) {
                                    java.sql.Date fecent = new java.sql.Date(formatOut.parse(descargaDoc.getFecent().trim()).getTime());
                                    detalleServicio.setFechaEntrega(fecent);
                                }
                                logger.error("servicio.getPrecio() 2: " + servicio.getPrecio());

                                BigDecimal precioServicio = new BigDecimal("0.0");
                                if (!StringUtils.isBlank(servicio.getPrecio())) {
                                    precioServicio = new BigDecimal(servicio.getPrecio().trim());

                                }
                                detalleServicio.setPrecioUnitario(precioServicio);
                                detalleServicio.setIndEliminado(servicio.getDel());
                                //listaEntity.add(detalleServicio);
                                this.cerNotaPedidoDetalleDeltaRepository.save(detalleServicio);

                            }
                        }


                        //Cargar Hijos

                        if (i < 100)
                            lista.add(descargaDoc);


                        //}

                    }
                }


            }
            //this.cerNotaPedidoDetalleDeltaRepository.saveAll(listaEntity);

        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            descarga.setCabtx(error);
            lista.add(descarga);
            // lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            descarga.setCabtx(error);
            lista.add(descarga);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (ParseException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            descarga.setCabtx(error);
            lista.add(descarga);
        }

        return lista;

    }

    @Override
    public MensajeSap integrarAprobadores() {
        List<MtrAprobador> listaAprobador = this.mtrAprobadorDeltaRepository.findAll();
        MensajeSap msg = new MensajeSap("S", "S", "La integracion se realiz√≥ correctamente");
        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_USR_APROBADORES");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            //JCoTable tableImport = imports.getTable("IT_TCERT");

            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExport = exports.getTable("T_USRAPROB");
            //Recuperar datos de salida
            for (int i = 0; i < tableExport.getNumRows(); i++) {

                tableExport.setRow(i);
                Optional<MtrAprobador> optionalAprobador = listaAprobador.stream()
                        .filter(x -> tableExport.getString("TITULAR").equalsIgnoreCase(x.getAprobadorSap()))
                        .findFirst();
                MtrAprobador aprobador = new MtrAprobador();
                if (optionalAprobador.isPresent())
                    aprobador = optionalAprobador.get();
                aprobador.setEstado("1");
                aprobador.setAprobadorSap(tableExport.getString("TITULAR"));
                aprobador.setApellidos(tableExport.getString("APELLIDO"));
                aprobador.setNombre(tableExport.getString("NOMBRE"));
                aprobador.setEmail(tableExport.getString("MAIL"));

                this.mtrAprobadorDeltaRepository.save(aprobador);
            }


        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            msg = new MensajeSap("E", "E", e.toString());
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            msg = new MensajeSap("E", "E", e.toString());
        }

        return msg;
    }

    @Override
    public List<DescargaServicioSap> integraTextosPedido(List<RangeSap> rangeDoc, List<RangeSap> rangeFecha) {
        List<DescargaServicioSap> lista = new ArrayList<DescargaServicioSap>();
        DescargaServicioSap descarga = new DescargaServicioSap();
        List<CerNotaPedido> listaOrden = this.cerNotaPedidoDeltaRepository.findAll();
        java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("yyyy/MM/dd");
        java.text.SimpleDateFormat formatOut = new java.text.SimpleDateFormat("yyyyMMdd");

        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_DESCARGA_DOC_COMPRA");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            JCoTable tableImportDocCompra = imports.getTable("TI_EBELN");
            JCoTable tableImportFechaPedido = imports.getTable("TI_BEDAT");
            //Poblamos Rango documento de compras
            if (rangeDoc != null && rangeDoc.size() > 0) {
                for (RangeSap ele : rangeDoc) {
                    tableImportDocCompra.appendRow();
                    tableImportDocCompra.setValue("SIGN", ele.getSign());
                    tableImportDocCompra.setValue("OPTION", ele.getOption());
                    tableImportDocCompra.setValue("LOW", ele.getLow());
                    tableImportDocCompra.setValue("HIGH", ele.getHigh());
                }
            }
            //Poblamos Rango fecha de pedidos
            if (rangeFecha != null && rangeFecha.size() > 0) {
                for (RangeSap ele : rangeFecha) {
                    tableImportFechaPedido.appendRow();
                    tableImportFechaPedido.setValue("SIGN", ele.getSign());
                    tableImportFechaPedido.setValue("OPTION", ele.getOption());


                    java.util.Date utilDInicio = format.parse(ele.getLow());
                    java.util.Date utilDFin = format.parse(ele.getHigh());

                    tableImportFechaPedido.setValue("LOW", utilDInicio);
                    tableImportFechaPedido.setValue("HIGH", utilDFin);
                }
            }
            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExportDescargaServicio = exports.getTable("TO_TCAB");
            JCoTable tableTexto = exports.getTable("TO_TEXT_CAB");
            List<DescargaServicioSap> listaTextoAuxiliar = new ArrayList<DescargaServicioSap>();
            for (int i = 0; i < tableTexto.getNumRows(); i++) {
                //DescargaServicioSap des = new DescargaServicioSap();
                tableTexto.setRow(i);
                DescargaServicioSap bs = new DescargaServicioSap();
                bs.setEbeln(tableTexto.getString("PO_NUMBER"));
                bs.setIdText(tableTexto.getString("ID"));
                bs.setTdLine(tableTexto.getString("TDLINE"));
                //bs.setUnimed();
                //UNIMED
                //bs.set n/av

                listaTextoAuxiliar.add(bs);

            }

            String breakLine = System.lineSeparator();
            List<CerNotaPedido> listaEntity = new ArrayList<CerNotaPedido>();
            //Recuperar descarga
            String ebelnAux = "XYZ";
            for (int i = 0; i < tableExportDescargaServicio.getNumRows(); i++) {
                tableExportDescargaServicio.setRow(i);
                Optional<CerNotaPedido> optionalPedido = listaOrden.stream()
                        .filter(x -> tableExportDescargaServicio.getString("EBELN").equalsIgnoreCase(x.getCodigoNotaPedidoSap()))
                        .findFirst();
                if (optionalPedido.isPresent()) {
                    CerNotaPedido pedido = optionalPedido.get();
                    String tnotasAclaratorias = "";
                    String tlugarPago = "";
                    String tformaPago = "";
                    String tdocParticulares = "";
                    String tconcepto = "";
                    for (DescargaServicioSap ele : listaTextoAuxiliar) {
                        //tconcepto
                        if (pedido.getCodigoNotaPedidoSap().equalsIgnoreCase(ele.getEbeln())) {
                            if (ele.getIdText().equalsIgnoreCase("F01") || ele.getIdText().equalsIgnoreCase("K01")) {
                                tconcepto = tconcepto + ele.getTdLine();
                                tconcepto = tconcepto + breakLine;
                            }
                        }
                        //Notas aclaratorias
                        if (pedido.getCodigoNotaPedidoSap().equalsIgnoreCase(ele.getEbeln())) {
                            if (ele.getIdText().equalsIgnoreCase("F02") || ele.getIdText().equalsIgnoreCase("K08")) {
                                tnotasAclaratorias = tnotasAclaratorias + ele.getTdLine();
                                tnotasAclaratorias = tnotasAclaratorias + breakLine;
                            }
                        }
                        //Lugar y forma de entrega
                        if (pedido.getCodigoNotaPedidoSap().equalsIgnoreCase(ele.getEbeln())) {
                            if (ele.getIdText().equalsIgnoreCase("F05") || ele.getIdText().equalsIgnoreCase("K05")) {
                                tlugarPago = tlugarPago + ele.getTdLine();
                                tlugarPago = tlugarPago + breakLine;
                            }
                        }
                        //Forma de pago
                        if (pedido.getCodigoNotaPedidoSap().equalsIgnoreCase(ele.getEbeln())) {
                            if (ele.getIdText().equalsIgnoreCase("F07") || ele.getIdText().equalsIgnoreCase("K07")) {
                                tformaPago = tformaPago + ele.getTdLine();
                                tformaPago = tformaPago + breakLine;
                            }
                        }
                        //Documentos de aplicacion
                        if (pedido.getCodigoNotaPedidoSap().equalsIgnoreCase(ele.getEbeln())) {
                            if (ele.getIdText().equalsIgnoreCase("F20")) {
                                tdocParticulares = tdocParticulares + ele.getTdLine();
                                tdocParticulares = tdocParticulares + breakLine;
                            }
                        }

                    }
                    pedido.setTconcepto(tconcepto.trim());
                    pedido.setTdocParticulares(tdocParticulares.trim());
                    pedido.setTlugarPago(tlugarPago.trim());
                    pedido.setTformaPago(tformaPago.trim());
                    pedido.setTnotasAclaratorias(tnotasAclaratorias.trim());
                    pedido.setConcepto(tconcepto.trim());
                    //actualizar
                    this.cerNotaPedidoDeltaRepository.save(pedido);
                    if (i < 100) {
                        DescargaServicioSap descargaDoc = new DescargaServicioSap();
                        descargaDoc.setEbeln(tableExportDescargaServicio.getString("EBELN"));
                        lista.add(descargaDoc);
                    }


                }


            }
            //this.cerNotaPedidoDeltaRepository.saveAll(listaEntity);

        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            descarga.setCabtx(error);
            lista.add(descarga);
            // lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            descarga.setCabtx(error);
            lista.add(descarga);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (ParseException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            descarga.setCabtx(error);
            lista.add(descarga);
        }

        return lista;
    }

    @Override
    public List<MensajeSap> integrarCuentaImputacion(Integer rangoMenor, Integer rangoMayor, String tipoImputacion, String codigoSap) {
        List<MensajeSap> lista = new ArrayList<MensajeSap>();
        List<MtrSociedad> listaSociedad = this.mtrSociedadDeltaRepository.findAll();
        List<MtrTipoImputacion> listaTipo = this.mtrTipoImputacionDeltaRepository.findAll();
        List<MtrCuentaImputacion> listaCuentaAll = this.mtrCuentaImputacionDeltaRepository.findAll();
        List<MtrCuentaImputacion> listaCuenta = new ArrayList<MtrCuentaImputacion>();
        listaCuenta = listaCuentaAll;
        if (!StringUtils.isBlank(tipoImputacion) && !StringUtils.isBlank(codigoSap)) {
            listaCuenta = listaCuentaAll.stream()
                    .filter(x ->
                            tipoImputacion.equalsIgnoreCase(x.getMtrTipoImputacion().getCodigoTipoImputacion()) && codigoSap.equalsIgnoreCase(x.getCodigoCuentaImputacion()))
                    .collect(Collectors.toList());
            log.error("integrarCuentaImputacion_0 :: " + listaCuenta.size());

        } else if (!StringUtils.isBlank(tipoImputacion)) {
            listaCuenta = listaCuentaAll.stream()
                    .filter(x ->
                            tipoImputacion.equalsIgnoreCase(x.getMtrTipoImputacion().getCodigoTipoImputacion()))
                    .collect(Collectors.toList());
            log.error("integrarCuentaImputacion_00 :: " + listaCuenta.size());
        }
        log.error("integrarCuentaImputacion :: " + listaCuenta.size());

        List<MtrCuentaImputacion> listaCuentaAux = new ArrayList<MtrCuentaImputacion>();
        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_CTA_IMPUTACION");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            if (rangoMenor != null && rangoMenor > 0 && rangoMayor != null && rangoMayor > 0) {
                imports.setValue("I_INICIO", rangoMenor);
                imports.setValue("I_FIN", rangoMayor);
            }
            imports.setValue("I_TIPO", tipoImputacion);
            imports.setValue("I_AUFNR", codigoSap);
            imports.setValue("I_KOSTL", codigoSap);
            imports.setValue("I_POSID", codigoSap);

            //JCoTable tableImport = imports.getTable("IT_TCERT");

            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExport = exports.getTable("OT_CTAIMPUTA");


            //Recuperar datos de salida
            //List<MtrGrupoArticulo> listaEntity = new ArrayList<MtrGrupoArticulo>();
            for (int i = 0; i < tableExport.getNumRows(); i++) {
                tableExport.setRow(i);
                log.error("Cuenta imputacion 1:  " + tableExport.getString("BUKRS"));
                Optional<MtrSociedad> optionalSociedad = listaSociedad.stream()
                        .filter(x -> tableExport.getString("BUKRS").equalsIgnoreCase(x.getDescBrv()))
                        .findFirst();
                if (optionalSociedad.isPresent()) {
                    log.error("Cuenta imputacion 2:  " + tableExport.getString("KNTTP"));
                    Optional<MtrTipoImputacion> optionalTipoImputacion = listaTipo.stream()
                            .filter(x -> tableExport.getString("KNTTP").equalsIgnoreCase(x.getCodigoTipoImputacion()))
                            .findFirst();
                    if (optionalTipoImputacion.isPresent()) {
                        log.error("Cuenta imputacion 3:  " + optionalSociedad.get().getDescBrv() + " - " + optionalTipoImputacion.get().getCodigoTipoImputacion() + " - " + tableExport.getString("SAKNR"));
                        Optional<MtrCuentaImputacion> optionalCuentaImputacion = listaCuenta.stream()
                                .filter(x -> optionalSociedad.get().getDescBrv().equalsIgnoreCase(x.getMtrSociedad().getDescBrv()) &&
                                        optionalTipoImputacion.get().getCodigoTipoImputacion().equalsIgnoreCase(x.getMtrTipoImputacion().getCodigoTipoImputacion()) &&
                                        tableExport.getString("SAKNR").equalsIgnoreCase(x.getCodigoCuentaImputacion()))
                                .findFirst();

                        MtrCuentaImputacion cuenta = new MtrCuentaImputacion();
                        if (optionalCuentaImputacion.isPresent())
                            cuenta = optionalCuentaImputacion.get();
                        cuenta.setCodigoCuentaImputacion(tableExport.getString("SAKNR"));
                        cuenta.setMtrSociedad(optionalSociedad.get());
                        cuenta.setMtrTipoImputacion(optionalTipoImputacion.get());
                        cuenta.setDescripcion(tableExport.getString("MCTXT"));
                        cuenta.setEstatus("1");
                        listaCuentaAux.add(cuenta);
                        this.mtrCuentaImputacionDeltaRepository.save(cuenta);
                    }
                }
            }
            lista.add(new MensajeSap("S", "", "Las cuentas se actualizaron correctamente"));
            log.error("Cuenta imputacion 4 " + listaCuentaAux.size());
            for (MtrCuentaImputacion ele : listaCuenta) {
                Optional<MtrCuentaImputacion> optionalCuentaMayorAux = listaCuentaAux.stream()
                        .filter(x -> ele.getCodigoCuentaImputacion().equalsIgnoreCase(x.getCodigoCuentaImputacion()) &&
                                ele.getMtrTipoImputacion().getCodigoTipoImputacion().equalsIgnoreCase(x.getMtrTipoImputacion().getCodigoTipoImputacion()) &&
                                ele.getMtrSociedad().getDescBrv().equalsIgnoreCase(x.getMtrSociedad().getDescBrv())).findFirst();

                if (!optionalCuentaMayorAux.isPresent()) {
                    ele.setEstatus("0");
                    this.mtrCuentaImputacionDeltaRepository.save(ele);
                }
            }
            //Guardar Batch
            //this.mtrGrupoArticuloDeltaRepository.saveAll(listaEntity);

        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        }

        return lista;
    }

    @Override
    public List<MensajeSap> integrarCuentaMayor(Integer rangoMenor, Integer rangoMayor, String codigoSap) {
        List<MensajeSap> lista = new ArrayList<MensajeSap>();
        List<MtrSociedad> listaSociedad = this.mtrSociedadDeltaRepository.findAll();
        List<MtrTipoImputacion> listaTipo = this.mtrTipoImputacionDeltaRepository.findAll();
        List<MtrCuentaMayor> listaCuentaAll = this.mtrCuentaMayorDeltaRepository.findAll();
        List<MtrCuentaMayor> listaCuenta = new ArrayList<MtrCuentaMayor>();
        listaCuenta = listaCuentaAll;

        if (!StringUtils.isBlank(codigoSap)) {
            listaCuenta = listaCuentaAll.stream()
                    .filter(x ->
                            codigoSap.equalsIgnoreCase(x.getCodigoCuentaMayor()))
                    .collect(Collectors.toList());
            log.error("integrarCuentaMayor_0 :: " + listaCuenta.size());
        }

        List<MtrCuentaMayor> listaCuentaAux = new ArrayList<MtrCuentaMayor>();
        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_CTA_MAYOR");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            if (rangoMenor != null && rangoMenor > 0 && rangoMayor != null && rangoMayor > 0) {
                imports.setValue("I_INICIO", rangoMenor);
                imports.setValue("I_FIN", rangoMayor);
            }
            imports.setValue("I_SAKNR", codigoSap);
            //JCoTable tableImport = imports.getTable("IT_TCERT");

            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExport = exports.getTable("OT_CTAIMPUTA");


            //Recuperar datos de salida
            //List<MtrGrupoArticulo> listaEntity = new ArrayList<MtrGrupoArticulo>();
            for (int i = 0; i < tableExport.getNumRows(); i++) {
                tableExport.setRow(i);
                log.error("Cuenta mayor :: " + tableExport.getString("BUKRS"));
                Optional<MtrSociedad> optionalSociedad = listaSociedad.stream()
                        .filter(x -> tableExport.getString("BUKRS").equalsIgnoreCase(x.getDescBrv()))
                        .findFirst();
                if (optionalSociedad.isPresent()) {
                    log.error("Cuenta mayor 2 :: " + tableExport.getString("KNTTP"));
                    Optional<MtrTipoImputacion> optionalTipoImputacion = listaTipo.stream()
                            .filter(x -> tableExport.getString("KNTTP").equalsIgnoreCase(x.getCodigoTipoImputacion()))
                            .findFirst();
                    if (optionalTipoImputacion.isPresent()) {
                        log.error("Cuenta mayor 3 :: " + optionalSociedad.get().getDescBrv() + " - " + optionalTipoImputacion.get().getCodigoTipoImputacion() + " - " + tableExport.getString("SAKNR"));
                        Optional<MtrCuentaMayor> optionalCuentaMayor = listaCuenta.stream()
                                .filter(x -> optionalSociedad.get().getDescBrv().equalsIgnoreCase(x.getMtrSociedad().getDescBrv()) &&
                                        optionalTipoImputacion.get().getCodigoTipoImputacion().equalsIgnoreCase(x.getMtrTipoImputacion().getCodigoTipoImputacion()) &&
                                        tableExport.getString("SAKNR").equalsIgnoreCase(x.getCodigoCuentaMayor()))
                                .findFirst();
                        MtrCuentaMayor cuenta = new MtrCuentaMayor();
                        if (optionalCuentaMayor.isPresent())
                            cuenta = optionalCuentaMayor.get();
                        cuenta.setCodigoCuentaMayor(tableExport.getString("SAKNR"));
                        cuenta.setMtrSociedad(optionalSociedad.get());
                        cuenta.setMtrTipoImputacion(optionalTipoImputacion.get());
                        cuenta.setDescripcion(tableExport.getString("MCTXT"));
                        cuenta.setEstatus("1");
                        listaCuentaAux.add(cuenta);
                        this.mtrCuentaMayorDeltaRepository.save(cuenta);
                    }
                }
            }
            lista.add(new MensajeSap("S", "", "Las cuentas se actualizaron correctamente"));

            for (MtrCuentaMayor ele : listaCuenta) {
                Optional<MtrCuentaMayor> optionalCuentaMayorAux = listaCuentaAux.stream()
                        .filter(x -> ele.getCodigoCuentaMayor().equalsIgnoreCase(x.getCodigoCuentaMayor()) &&
                                ele.getMtrTipoImputacion().getCodigoTipoImputacion().equalsIgnoreCase(x.getMtrTipoImputacion().getCodigoTipoImputacion()) &&
                                ele.getMtrSociedad().getDescBrv().equalsIgnoreCase(x.getMtrSociedad().getDescBrv())).findFirst();

                if (!optionalCuentaMayorAux.isPresent()) {
                    ele.setEstatus("0");
                    this.mtrCuentaMayorDeltaRepository.save(ele);
                }
            }

            //Guardar Batch
            //this.mtrGrupoArticuloDeltaRepository.saveAll(listaEntity);

        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            lista.add(new MensajeSap("E", error, error));
        }

        return lista;
    }

    @Override
    public PreRegistroOutput preRegistroFactura(PreRegistroInput registro) throws Exception {

        PreRegistroOutput out = new PreRegistroOutput();
        //RemitoOutSap remito = new RemitoOutSap();
        List<PreRegistroRetornoOutput> listaRetorno = new ArrayList<PreRegistroRetornoOutput>();
        List<PreRegistroFacturaOutput> listaFactura = new ArrayList<PreRegistroFacturaOutput>();

        Map<String, String> attItemInput = new HashMap<String, String>();
        Map<String, String> attRetornoOutput = new HashMap<String, String>();
        Map<String, String> attFacturaOutput = new HashMap<String, String>();
        //attFacturaOutput.put("AB", "Aprobaci√≥n firma A");
        log.error("preRegistroFactura ::: 00 :: " + registro);

        attItemInput.put("invoice_doc_item", "string");
        attItemInput.put("po_number", "string");
        attItemInput.put("po_item", "string");
        attItemInput.put("ref_doc", "string");
        attItemInput.put("ref_doc_year", "string");
        attItemInput.put("ref_doc_it", "string");
        attItemInput.put("de_cre_ind", "string");
        attItemInput.put("tax_code", "string");
        attItemInput.put("taxjurcode", "string");
        attItemInput.put("item_amount", "decimal");//decimal
        attItemInput.put("quantity", "decimal");//decimal
        attItemInput.put("po_unit", "string");
        attItemInput.put("po_unit_iso", "string");
        attItemInput.put("po_pr_qnt", "decimal");//decimal
        attItemInput.put("po_pr_uom", "string");
        attItemInput.put("po_pr_uom_iso", "string");
        attItemInput.put("cond_type", "string");
        attItemInput.put("cond_st_no", "string");
        attItemInput.put("cond_count", "string");
        attItemInput.put("sheet_no", "string");
        attItemInput.put("item_text", "string");
        attItemInput.put("final_inv", "string");
        attItemInput.put("sheet_item", "string");
        attItemInput.put("grir_clear_srv", "string");
        attItemInput.put("freight_ven", "string");
        attItemInput.put("cshdis_ind", "string");
        attItemInput.put("retention_docu_currency", "decimal");//decimal
        attItemInput.put("retention_percentage", "decimal");//decimal
        attItemInput.put("retention_due_date", "date");//Date
        attItemInput.put("no_retention", "string");
        attItemInput.put("valuation_type", "string");
        attItemInput.put("inv_relation", "string");
        attItemInput.put("inv_itm_origin", "string");

        attRetornoOutput.put("type", "string");
        attRetornoOutput.put("id", "string");
        attRetornoOutput.put("number", "string");
        attRetornoOutput.put("message", "string");
        attRetornoOutput.put("log_no", "string");
        attRetornoOutput.put("log_msg_no", "string");
        attRetornoOutput.put("message_v1", "string");
        attRetornoOutput.put("message_v2", "string");
        attRetornoOutput.put("message_v3", "string");
        attRetornoOutput.put("message_v4", "string");
        attRetornoOutput.put("parameter", "string");
        attRetornoOutput.put("row", "int");//INT
        attRetornoOutput.put("field", "string");
        attRetornoOutput.put("system", "string");

        attFacturaOutput.put("invoice_doc_item", "string");
        attFacturaOutput.put("gl_account", "string");
        attFacturaOutput.put("item_amount", "decimal");//decimal
        attFacturaOutput.put("db_cr_ind", "string");
        attFacturaOutput.put("neg_postng", "string");
        attFacturaOutput.put("comp_code", "string");
        attFacturaOutput.put("tax_code", "string");
        attFacturaOutput.put("taxjurcode", "string");
        attFacturaOutput.put("item_text", "string");
        attFacturaOutput.put("costcenter", "string");
        attFacturaOutput.put("sd_doc", "string");
        attFacturaOutput.put("sdoc_item", "string");
        attFacturaOutput.put("orderid", "string");
        attFacturaOutput.put("ref_date", "date");//Date
        attFacturaOutput.put("cmmt_item", "string");
        attFacturaOutput.put("funds_ctr", "string");
        attFacturaOutput.put("fund", "string");
        attFacturaOutput.put("bus_area", "string");
        attFacturaOutput.put("tr_part_ba", "string");
        attFacturaOutput.put("costobject", "string");
        attFacturaOutput.put("network", "string");
        attFacturaOutput.put("activity", "string");
        attFacturaOutput.put("wbs_elem", "string");
        attFacturaOutput.put("acttype", "string");
        attFacturaOutput.put("rl_est_key", "string");
        attFacturaOutput.put("person_no", "string");
        attFacturaOutput.put("co_busproc", "string");
        attFacturaOutput.put("grant_nbr", "string");
        attFacturaOutput.put("cmmt_item_long", "string");
        attFacturaOutput.put("func_area_long", "string");
        attFacturaOutput.put("quantity", "decimal");//Decimal
        attFacturaOutput.put("base_uom", "string");
        attFacturaOutput.put("alloc_nmbr", "string");
        attFacturaOutput.put("cshdis_ind", "string");
        attFacturaOutput.put("tax_base_amount", "decimal");//Decimal
        attFacturaOutput.put("profit_segm_no", "string");
        attFacturaOutput.put("plant", "string");
        attFacturaOutput.put("budget_period", "string");

        java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("yyyy/MM/dd");


        log.error("preRegistroFactura ::: 01");
        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_PREREG_FACTS");
            log.error("preRegistroFactura ::: 02");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            JCoTable tableImport = imports.getTable("IT_ITEMS");
            JCoTable tableImportTax = imports.getTable("IT_WITHTAXDATA");

            if (!StringUtils.isBlank(registro.getEbeln()))
                imports.setValue("I_EBELN", registro.getEbeln());
            if (!StringUtils.isBlank(registro.getInvoice_ind()))
                imports.setValue("I_INVOICE_IND", registro.getInvoice_ind());

            if (!StringUtils.isBlank(registro.getDoc_type())) {
                log.error("preRegistroFactura:___xyz " + registro.getDoc_type().trim());
                if (registro.getDoc_type().trim().equalsIgnoreCase("01")) {
                    imports.setValue("I_DOC_TYPE", "PO");
                }

                if (registro.getDoc_type().trim().equalsIgnoreCase("91")) {
                    imports.setValue("I_DOC_TYPE", "PS");
                }

            }

            if (registro.getITipoc() != null)
                imports.setValue("I_TIPOC", registro.getITipoc());
            if (!StringUtils.isBlank(registro.getPstng_date()))
                imports.setValue("I_PSTNG_DATE", format.parse(registro.getPstng_date()));
            if (!StringUtils.isBlank(registro.getDoc_date()))
                imports.setValue("I_DOC_DATE", format.parse(registro.getDoc_date()));
            if (!StringUtils.isBlank(registro.getRef_doc_no()))
                imports.setValue("I_REF_DOC_NO", registro.getRef_doc_no());
            if (!StringUtils.isBlank(registro.getComp_code()))
                imports.setValue("I_COMP_CODE", registro.getComp_code());
            if (!StringUtils.isBlank(registro.getGross_amount()))
                imports.setValue("I_GROSS_AMOUNT", new BigDecimal("" + registro.getGross_amount()));
            if (!StringUtils.isBlank(registro.getCalc_tax_ind()))
                imports.setValue("I_CALC_TAX_IND", registro.getCalc_tax_ind());
            if (!StringUtils.isBlank(registro.getExch_rate()))
                imports.setValue("I_EXCH_RATE", new BigDecimal("" + registro.getExch_rate()));
            if (!StringUtils.isBlank(registro.getBline_date()))
                imports.setValue("I_BLINE_DATE", format.parse(registro.getBline_date()));
            if (!StringUtils.isBlank(registro.getHeader_txt()))
                imports.setValue("I_HEADER_TXT", registro.getHeader_txt());
            if (!StringUtils.isBlank(registro.getRef_doc_no_long()))
                imports.setValue("I_REF_DOC_NO_LONG", registro.getRef_doc_no_long());
            if (!StringUtils.isBlank(registro.getZaprob())) {
                imports.setValue("I_ZAPROB", registro.getZaprob());
            }
            if (registro.getZfest() != null) {
                imports.setValue("I_ZFEST", registro.getZfest());
            }
            String codigoSap = registro.getUsRes();
            /*String codigoSap = "";
            List<MtrUsuarioFacturacion> usuarioCoga = this.mtrUsuarioFacturacionDeltaRepository.getByIdp(registro.getUsRes());
            if(usuarioCoga != null && usuarioCoga.size() > 0) {
                codigoSap = usuarioCoga.get(0).getCodigoUsuarioSap();
            }*/


            imports.setValue("I_ZAPROBF", codigoSap);
            if (!StringUtils.isBlank(registro.getZcont())) {
                imports.setValue("I_ZCONT", registro.getZcont());
            }
            log.error("creacionHes ::: 03");

            if (registro.getIdDetraccion() != null && registro.getIdDetraccion() > 0) {
                tableImportTax.appendRow();
                if (!StringUtils.isBlank(registro.getTax_code()))
                    tableImportTax.setValue("WI_TAX_CODE", registro.getTax_code());

                if (registro.getTax_base() != null)
                    tableImportTax.setValue("WI_TAX_BASE", registro.getTax_base());
            }

            //Poblamos datos de entrada
            for (PreRegistroItemInput ele : registro.getListaItem()) {
                tableImport.appendRow();
                /*for (String attributeName : arrAttributesName) {
                    Class<RemitoInSap> clazz = RemitoInSap.class;
                    Field fieldName = clazz.getDeclaredField(attributeName.toLowerCase());
                    fieldName.setAccessible(true);
                    String value = (String) fieldName.get(ele);
                    tableImport.setValue(attributeName, value);

                }*/
                for (Map.Entry<String, String> entry : attItemInput.entrySet()) {
                    // System.out.println(entry.getKey() + ":" + entry.getValue());
                    Class<PreRegistroItemInput> clazz = PreRegistroItemInput.class;
                    Field fieldName = clazz.getDeclaredField(entry.getKey().toLowerCase());
                    fieldName.setAccessible(true);
                    if (fieldName.get(ele) != null) {
                        String value = (String) fieldName.get(ele);
                        //fieldName.set(ele,"");
                        if (entry.getValue().equalsIgnoreCase("string")) {
                            tableImport.setValue(entry.getKey().toUpperCase(), value);
                        } else if (entry.getValue().equalsIgnoreCase("int")) {
                            tableImport.setValue(entry.getKey().toUpperCase(), Integer.parseInt(value));
                        } else if (entry.getValue().equalsIgnoreCase("decimal")) {
                            tableImport.setValue(entry.getKey().toUpperCase(), new BigDecimal("" + value.trim()));
                        } else if (entry.getValue().equalsIgnoreCase("date")) {
                            tableImport.setValue(entry.getKey().toUpperCase(), format.parse(value.trim()));
                        }

                    }

                }

                log.error("preRegistroFactura ::: 04");
                //tableImport.setValue("PACKAGE", ele.getPackagex());
            }

            //Ejecutar Funcion
            log.error("preRegistroFactura ::: 04_01");
            stfcConnection.execute(destination);
            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExportReturn = exports.getTable("OT_RETURN");
            JCoTable tableExportFactura = exports.getTable("OT_GLACCOUNTDATA");

            log.error("preRegistroFactura ::: 04_02");
            out.setBelnr(exports.getString("E_BELNR"));
            out.setBkpfbelnr(exports.getString("E_BKPFBELNR"));
            out.setGjahr(exports.getString("E_GJAHR"));

            log.error("preRegistroFactura ::: 05");
            //Recuperar datos de salida
            for (int i = 0; i < tableExportReturn.getNumRows(); i++) {
                log.error("preRegistroFactura ::: 05_1");
                tableExportReturn.setRow(i);
                PreRegistroRetornoOutput ele = new PreRegistroRetornoOutput();

                for (Map.Entry<String, String> entry : attRetornoOutput.entrySet()) {
                    // System.out.println(entry.getKey() + ":" + entry.getValue());
                    log.error("preRegistroFactura ::: 05_1 " + entry.getKey() + ":" + entry.getValue());
                    Class<PreRegistroRetornoOutput> clazz = PreRegistroRetornoOutput.class;
                    Field fieldName = clazz.getDeclaredField(entry.getKey().toLowerCase());
                    fieldName.setAccessible(true);

                    if (entry.getValue().equalsIgnoreCase("string")) {
                        fieldName.set(ele, tableExportReturn.getString(entry.getKey().toUpperCase()));
                    } else if (entry.getValue().equalsIgnoreCase("int")) {
                        fieldName.set(ele, "" + tableExportReturn.getInt(entry.getKey().toUpperCase()));
                    } else if (entry.getValue().equalsIgnoreCase("decimal")) {
                        fieldName.set(ele, "" + tableExportReturn.getBigDecimal(entry.getKey().toUpperCase()));
                    } else if (entry.getValue().equalsIgnoreCase("date")) {
                        fieldName.set(ele, "" + tableExportReturn.getDate(entry.getKey().toUpperCase()));
                    }

                }
                //ele.setIntrow(tableExport.getString("INTROW"));
                //ele.setImporte(tableExport.getString("IMPORTE"));
                //ele.setError(tableExport.getString("ERROR"));

                listaRetorno.add(ele);

            }
            log.error("preRegistroFactura ::: 10");

            for (int i = 0; i < tableExportFactura.getNumRows(); i++) {
                log.error("preRegistroFactura ::: 10_1");
                tableExportFactura.setRow(i);
                PreRegistroFacturaOutput ele2 = new PreRegistroFacturaOutput();

                for (Map.Entry<String, String> entry : attFacturaOutput.entrySet()) {
                    // System.out.println(entry.getKey() + ":" + entry.getValue());
                    log.error("preRegistroFactura ::: 10_1 " + entry.getKey() + ":" + entry.getValue());
                    Class<PreRegistroFacturaOutput> clazz = PreRegistroFacturaOutput.class;
                    Field fieldName = clazz.getDeclaredField(entry.getKey().toLowerCase());
                    fieldName.setAccessible(true);

                    if (entry.getValue().equalsIgnoreCase("string")) {
                        fieldName.set(ele2, tableExportFactura.getString(entry.getKey().toUpperCase()));
                    } else if (entry.getValue().equalsIgnoreCase("int")) {
                        fieldName.set(ele2, "" + tableExportFactura.getInt(entry.getKey().toUpperCase()));
                    } else if (entry.getValue().equalsIgnoreCase("decimal")) {
                        fieldName.set(ele2, "" + tableExportFactura.getBigDecimal(entry.getKey().toUpperCase()));
                    } else if (entry.getValue().equalsIgnoreCase("date")) {
                        fieldName.set(ele2, "" + tableExportFactura.getDate(entry.getKey().toUpperCase()));
                    }

                }
                //ele.setIntrow(tableExport.getString("INTROW"));
                //ele.setImporte(tableExport.getString("IMPORTE"));
                //ele.setError(tableExport.getString("ERROR"));
                log.error("preRegistroFactura ::: 11");
                listaFactura.add(ele2);

            }
            out.setListaRetorno(listaRetorno);
            out.setListaFactura(listaFactura);

        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            // out.setBelnr(error);
            //lista.add(remito);
            log.error("preRegistroFactura ::: 04_e " + error);
            throw new Exception(Constants.ERROR_ABAP);
            // lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            //out.setBelnr(error);
            //lista.add(remito);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
            log.error("preRegistroFactura ::: 11_e" + error);
            throw new Exception(Constants.ERROR_JCO_JAVA);
        } catch (NoSuchFieldException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            //out.setBelnr(error);
            //lista.add(remito);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
            log.error("preRegistroFactura ::: 12_e" + error);
            throw new Exception(error);
        } catch (IllegalAccessException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            //out.setBelnr(error);
            //lista.add(remito);
            log.error("preRegistroFactura ::: 13_e" + error);
            throw new Exception(error);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (ParseException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            //out.setBelnr(error);
            //lista.add(remito);
            log.error("creacionHes ::: 13" + error);
            throw new Exception(error);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        }
        log.error("preRegistroFactura ::: 12 ok");

        return out;

    }

    @Override
    public List<ComprobantePagoSap> obtenerComprobantesPago(List<IndicadorFiscalSap> listaIndicadorFiscalSap, List<RangeSap> listaFechaRegistro, List<RangeSap> listaClaseDocumento) {
        //return null;
        List<ComprobantePagoSap> lista = new ArrayList<ComprobantePagoSap>();
        java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("yyyy/MM/dd");
        //java.text.SimpleDateFormat formatOut = new java.text.SimpleDateFormat("yyyyMMdd");
        Map<String, String> attRetornoOutput = new HashMap<String, String>();
        ComprobantePagoSap elex = new ComprobantePagoSap();

        attRetornoOutput.put("budat", "date");
        attRetornoOutput.put("bldat", "date");
        attRetornoOutput.put("cpudt", "date");
        attRetornoOutput.put("dzbd1t", "decimal");
        attRetornoOutput.put("wmwst1", "decimal");
        attRetornoOutput.put("wskto", "decimal");
        attRetornoOutput.put("rmwwr", "decimal");
        attRetornoOutput.put("fdtag", "date");
        //attRetornoOutput.put("augdt", "date");
        attRetornoOutput.put("zfbdt", "date");

        attRetornoOutput.put("belnr", "string");
        attRetornoOutput.put("gjahr", "string");
        attRetornoOutput.put("stcd1", "string");
        attRetornoOutput.put("xblnr", "string");
        attRetornoOutput.put("stceg", "string");
        attRetornoOutput.put("zlsch", "string");
        attRetornoOutput.put("waers", "string");
        attRetornoOutput.put("mwskz_bnk", "string");
        attRetornoOutput.put("bktxt", "string");
        attRetornoOutput.put("blart", "string");
        attRetornoOutput.put("awkey", "string");
        attRetornoOutput.put("stblg", "string");
        attRetornoOutput.put("stjah", "string");
        attRetornoOutput.put("augbl", "string");
        attRetornoOutput.put("bukrs_ref", "string");
        attRetornoOutput.put("belnr_ref", "string");
        attRetornoOutput.put("gjahr_ref", "string");
        attRetornoOutput.put("razonsocial", "string");
        attRetornoOutput.put("direccion", "string");
        attRetornoOutput.put("lifnr", "string");
        attRetornoOutput.put("status", "string");
        attRetornoOutput.put("b2mining", "string");
        attRetornoOutput.put("text1", "string");
        attRetornoOutput.put("banka", "string");


        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_COMPROBANTE_PAGO");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            JCoTable tableImportRuc = imports.getTable("IT_STCD1");
            JCoTable tableImportFechaRegistro = imports.getTable("IT_RGE_BLDAT");
            JCoTable tableImportClaseDocumento = imports.getTable("IT_RGE_BLART");

            if (listaIndicadorFiscalSap != null && listaIndicadorFiscalSap.size() > 0) {
                for (IndicadorFiscalSap ele : listaIndicadorFiscalSap) {
                    tableImportRuc.appendRow();
                    tableImportRuc.setValue("STCD1", ele.getStcd1());
                    tableImportRuc.setValue("BUKRS", ele.getBukrs());
                    tableImportRuc.setValue("LIFNR", ele.getLifnr());

                }
            }

            //Poblamos Rango fecha de pedidos
            if (listaFechaRegistro != null && listaFechaRegistro.size() > 0) {
                for (RangeSap ele : listaFechaRegistro) {
                    tableImportFechaRegistro.appendRow();
                    tableImportFechaRegistro.setValue("SIGN", ele.getSign());
                    tableImportFechaRegistro.setValue("OPTION", ele.getOption());


                    java.util.Date utilDInicio = format.parse(ele.getLow());
                    java.util.Date utilDFin = format.parse(ele.getHigh());

                    tableImportFechaRegistro.setValue("LOW", utilDInicio);
                    tableImportFechaRegistro.setValue("HIGH", utilDFin);
                }
            }

            //Poblamos Rango documento de compras
            if (listaClaseDocumento != null && listaClaseDocumento.size() > 0) {
                for (RangeSap ele : listaClaseDocumento) {
                    tableImportClaseDocumento.appendRow();
                    tableImportClaseDocumento.setValue("SIGN", ele.getSign());
                    tableImportClaseDocumento.setValue("OPTION", ele.getOption());
                    tableImportClaseDocumento.setValue("LOW", ele.getLow());
                    tableImportClaseDocumento.setValue("HIGH", ele.getHigh());
                }
            }

            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExportHeader = exports.getTable("OT_DH_INV_REC");

            for (int i = 0; i < tableExportHeader.getNumRows(); i++) {
                log.error("obtenerComprobantesPago ::: 05_1");
                tableExportHeader.setRow(i);
                ComprobantePagoSap ele = new ComprobantePagoSap();

                for (Map.Entry<String, String> entry : attRetornoOutput.entrySet()) {
                    // System.out.println(entry.getKey() + ":" + entry.getValue());
                    log.error("obtenerComprobantesPago ::: 05_1 " + entry.getKey() + ":" + entry.getValue());
                    Class<ComprobantePagoSap> clazz = ComprobantePagoSap.class;
                    Field fieldName = clazz.getDeclaredField(entry.getKey().toLowerCase());
                    fieldName.setAccessible(true);
                    log.error("obtenerComprobantesPago ::: 05_2 ");

                    if (entry.getValue().equalsIgnoreCase("string")) {
                        fieldName.set(ele, tableExportHeader.getString(entry.getKey().toUpperCase()));
                    } else if (entry.getValue().equalsIgnoreCase("int")) {
                        fieldName.set(ele, "" + tableExportHeader.getInt(entry.getKey().toUpperCase()));
                    } else if (entry.getValue().equalsIgnoreCase("decimal")) {
                        fieldName.set(ele, "" + tableExportHeader.getBigDecimal(entry.getKey().toUpperCase()));
                    } else if (entry.getValue().equalsIgnoreCase("date")) {
                        fieldName.set(ele, "" + tableExportHeader.getDate(entry.getKey().toUpperCase()));
                    }

                }
                if (tableExportHeader.getDate("AUGDT") != null) {
                    ele.setAugdt(tableExportHeader.getDate("AUGDT"));
                }
                //ele.setIntrow(tableExport.getString("INTROW"));
                //ele.setImporte(tableExport.getString("IMPORTE"));
                //ele.setError(tableExport.getString("ERROR"));

                lista.add(ele);

            }


        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            elex.setBelnr(error);
            lista.add(elex);
            // lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            elex.setBelnr(error);
            lista.add(elex);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (ParseException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            elex.setBelnr(error);
            lista.add(elex);
        } catch (NoSuchFieldException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            elex.setBelnr(error);
            lista.add(elex);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
            log.error("obtenerComprobantesPago ::: 12_e" + error);
        } catch (IllegalAccessException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            elex.setBelnr(error);
            lista.add(elex);
            log.error("obtenerComprobantesPago ::: 13_e" + error);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        }
        return lista;
    }

    @Override
    public List<ComprobantePagoSap> obtenerComprobantesPagoV2(List<RangeSap> listaSociedad, List<RangeSap> listaClaseDocumento, List<RangeSap> listaFechaRegistro) {
        //return null;
        List<ComprobantePagoSap> lista = new ArrayList<ComprobantePagoSap>();
        java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("yyyy/MM/dd");
        //java.text.SimpleDateFormat formatOut = new java.text.SimpleDateFormat("yyyyMMdd");
        Map<String, String> attRetornoOutput = new HashMap<String, String>();
        ComprobantePagoSap elex = new ComprobantePagoSap();

        attRetornoOutput.put("budat", "date");
        attRetornoOutput.put("bldat", "date");
        attRetornoOutput.put("land1", "string");
        attRetornoOutput.put("detrac", "string");
        attRetornoOutput.put("buzei", "string");
        attRetornoOutput.put("augcp_d", "date");
        attRetornoOutput.put("augbl_d", "string");
        attRetornoOutput.put("belnr", "string");
        attRetornoOutput.put("gjahr", "string");
        attRetornoOutput.put("stcd1", "string");
        attRetornoOutput.put("xblnr", "string");
        attRetornoOutput.put("blart", "string");
        attRetornoOutput.put("awkey", "string");
        attRetornoOutput.put("name1", "string");
        attRetornoOutput.put("augbl", "string");
        attRetornoOutput.put("bukrs", "string");
        attRetornoOutput.put("lifnr", "string");
        //attRetornoOutput.put("augdt", "date");


        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_CONSULTA_COMPENSACIONES");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            //imports.setValue("I_BUKRS", sociedad);
            JCoTable tableImportSociedad = imports.getTable("I_BUKRS");
            JCoTable tableImportClaseDocumento = imports.getTable("I_BLART");
            JCoTable tableImportFechaRegistro = imports.getTable("I_AUGDT");
            //JCoTable tableImportClaseDocumento = imports.getTable("IT_RGE_BLART");
            //Sociedad
            if (listaSociedad != null && listaSociedad.size() > 0) {
                for (RangeSap ele : listaSociedad) {
                    tableImportSociedad.appendRow();
                    tableImportSociedad.setValue("SIGN", ele.getSign());
                    tableImportSociedad.setValue("OPTION", ele.getOption());
                    tableImportSociedad.setValue("LOW", ele.getLow());

                }
            }

            //Poblamos Rango fecha de pedidos
            if (listaFechaRegistro != null && listaFechaRegistro.size() > 0) {
                for (RangeSap ele : listaFechaRegistro) {
                    tableImportFechaRegistro.appendRow();
                    tableImportFechaRegistro.setValue("SIGN", ele.getSign());
                    tableImportFechaRegistro.setValue("OPTION", ele.getOption());


                    java.util.Date utilDInicio = format.parse(ele.getLow());
                    java.util.Date utilDFin = format.parse(ele.getHigh());

                    tableImportFechaRegistro.setValue("LOW", utilDInicio);
                    tableImportFechaRegistro.setValue("HIGH", utilDFin);
                }
            }

            //Poblamos Rango documento de compras
            if (listaClaseDocumento != null && listaClaseDocumento.size() > 0) {
                for (RangeSap ele : listaClaseDocumento) {
                    tableImportClaseDocumento.appendRow();
                    tableImportClaseDocumento.setValue("SIGN", ele.getSign());
                    tableImportClaseDocumento.setValue("OPTION", ele.getOption());
                    tableImportClaseDocumento.setValue("LOW", ele.getLow());
                    tableImportClaseDocumento.setValue("HIGH", ele.getHigh());
                }
            }

            //Ejecutar Funcion
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoTable tableExportHeader = exports.getTable("O_DOCUMENTOS");

            for (int i = 0; i < tableExportHeader.getNumRows(); i++) {
                log.error("obtenerComprobantesPago ::: 05_1");
                tableExportHeader.setRow(i);
                ComprobantePagoSap ele = new ComprobantePagoSap();

                for (Map.Entry<String, String> entry : attRetornoOutput.entrySet()) {
                    // System.out.println(entry.getKey() + ":" + entry.getValue());
                    log.error("obtenerComprobantesPago ::: 05_1 " + entry.getKey() + ":" + entry.getValue());
                    Class<ComprobantePagoSap> clazz = ComprobantePagoSap.class;
                    Field fieldName = clazz.getDeclaredField(entry.getKey().toLowerCase());
                    fieldName.setAccessible(true);
                    log.error("obtenerComprobantesPago ::: 05_2 ");

                    if (entry.getValue().equalsIgnoreCase("string")) {
                        fieldName.set(ele, tableExportHeader.getString(entry.getKey().toUpperCase()));
                    } else if (entry.getValue().equalsIgnoreCase("int")) {
                        fieldName.set(ele, "" + tableExportHeader.getInt(entry.getKey().toUpperCase()));
                    } else if (entry.getValue().equalsIgnoreCase("decimal")) {
                        fieldName.set(ele, "" + tableExportHeader.getBigDecimal(entry.getKey().toUpperCase()));
                    } else if (entry.getValue().equalsIgnoreCase("date")) {
                        fieldName.set(ele, "" + tableExportHeader.getDate(entry.getKey().toUpperCase()));
                    }

                }
                if (tableExportHeader.getDate("AUGDT") != null) {
                    ele.setAugdt(tableExportHeader.getDate("AUGDT"));
                }
                //ele.setIntrow(tableExport.getString("INTROW"));
                //ele.setImporte(tableExport.getString("IMPORTE"));
                //ele.setError(tableExport.getString("ERROR"));

                lista.add(ele);

            }


        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            elex.setBelnr(error);
            lista.add(elex);
            AppProcesoLog appProcesoLog = new AppProcesoLog();
            appProcesoLog.setModulo("ZPE_MM_CONSULTA_COMPENSACIONES");
            appProcesoLog.setEstadoEjecucion("Error");
            appProcesoLog.setResultadoSalida(error.substring(0,3998));
            this.appProcesoLogDeltaRepository.save(appProcesoLog);
            // lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            elex.setBelnr(error);
            lista.add(elex);
            AppProcesoLog appProcesoLog = new AppProcesoLog();
            appProcesoLog.setModulo("ZPE_MM_CONSULTA_COMPENSACIONES");
            appProcesoLog.setEstadoEjecucion("Error");
            appProcesoLog.setResultadoSalida(error.substring(0,3998));
            this.appProcesoLogDeltaRepository.save(appProcesoLog);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (ParseException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            elex.setBelnr(error);
            lista.add(elex);
            AppProcesoLog appProcesoLog = new AppProcesoLog();
            appProcesoLog.setModulo("ZPE_MM_CONSULTA_COMPENSACIONES");
            appProcesoLog.setEstadoEjecucion("Error");
            appProcesoLog.setResultadoSalida(error.substring(0,3998));
            this.appProcesoLogDeltaRepository.save(appProcesoLog);
        } catch (NoSuchFieldException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            elex.setBelnr(error);
            lista.add(elex);
            AppProcesoLog appProcesoLog = new AppProcesoLog();
            appProcesoLog.setModulo("ZPE_MM_CONSULTA_COMPENSACIONES");
            appProcesoLog.setEstadoEjecucion("Error");
            appProcesoLog.setResultadoSalida(error.substring(0,3998));
            this.appProcesoLogDeltaRepository.save(appProcesoLog);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
            log.error("obtenerComprobantesPago ::: 12_e" + error);
        } catch (IllegalAccessException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            elex.setBelnr(error);
            lista.add(elex);
            log.error("obtenerComprobantesPago ::: 13_e" + error);
            AppProcesoLog appProcesoLog = new AppProcesoLog();
            appProcesoLog.setModulo("ZPE_MM_CONSULTA_COMPENSACIONES");
            appProcesoLog.setEstadoEjecucion("Error");
            appProcesoLog.setResultadoSalida(error.substring(0,3998));
            this.appProcesoLogDeltaRepository.save(appProcesoLog);
            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        }
        return lista;
    }

    @Override
    public List<TipoCambioBean> listaTipoCambio(Date fecha) {
        //return null;
        List<TipoCambioBean> lista = new ArrayList<TipoCambioBean>();
        java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("yyyyMMdd");
        TipoCambioBean elex = new TipoCambioBean();
        log.error("listaTipoCambio ::: INI");
        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_CONSULTA_TIPO_CAMBIO");
            log.error("listaTipoCambio ::: 02");
            JCoParameterList imports = stfcConnection.getImportParameterList();
            imports.setValue("PI_DATE", fecha);

            //Ejecutar Funcion
            log.error("listaTipoCambio ::: 03");
            for (int contador = 0; contador < NRO_EJECUCIONES_RFC; contador++) {
                try {
                    stfcConnection.execute(destination);
              break;
                } catch (Exception e) {
                    if (contador == NRO_EJECUCIONES_RFC - 1) {
                        logger.error("Ingresando listaTipoCambio - INI RFC ERROR: " + contador + "__" + e.toString());
                        throw new Exception(e);
                    }
                }
            }
            log.error("listaTipoCambio ::: 04");
            stfcConnection.execute(destination);
            log.error("listaTipoCambio ::: 05");

            //Recuperar Datos de SAP
            JCoParameterList tables = stfcConnection.getTableParameterList();
            //tables.getTa
            JCoTable tableResult = tables.getTable("T_TIP_CAMBIO");
            log.error("listaTipoCambio ::: tableResult: " + tableResult.toString());
            for (int i = 0; i < tableResult.getNumRows(); i++) {
                log.error("listaTipoCambio ::: 6");
                tableResult.setRow(i);
                TipoCambioBean ele = new TipoCambioBean();
                if (tableResult.getString("PI_DATE") != null && !tableResult.getString("PI_DATE").trim().equalsIgnoreCase("00000000"))
                    ele.setFecha(format.parse(tableResult.getString("PI_DATE")));
                ele.setFactorUnidad(tableResult.getBigDecimal("FOREIGN_AMOUNT"));
                ele.setMonedaextranjera(tableResult.getString("FOREIGN_CURRENCY"));
                ele.setMonedaLocal(tableResult.getString("LOCAL_CURRENCY"));
                ele.setTipoCambio(tableResult.getBigDecimal("EXCHANGE_RATE"));
                log.error("listaTipoCambio ::: 6 ele: " + ele.toString());
                lista.add(ele);
            }

            log.error("listaTipoCambio ::: 7 lista size" + lista.size());
            log.error("listaTipoCambio ::: 7 lista " + lista.toString());


        } catch (AbapException e) {
            e.printStackTrace();
            String error = Utils.obtieneMensajeErrorException(e);
            elex.setMonedaLocal(error);
            lista.add(elex);
            log.error("listaTipoCambio ::: 05_2_0000 " + error);

        } catch (JCoException e) {
            e.printStackTrace();
            String error = Utils.obtieneMensajeErrorException(e);
            elex.setMonedaLocal(error);
            lista.add(elex);
            log.error("listaTipoCambio ::: 05_2_00001 " + error);

        } catch (ParseException e) {
            e.printStackTrace();
            String error = Utils.obtieneMensajeErrorException(e);
            elex.setMonedaLocal(error);
            log.error("listaTipoCambio ::: 05_2_00002 " + error);
            lista.add(elex);
        } catch (Exception e) {
            e.printStackTrace();
            String error = Utils.obtieneMensajeErrorException(e);
            elex.setMonedaLocal(error);
            log.error("listaTipoCambio ::: 05_2_00003 " + error);
            lista.add(elex);
        }
        return lista;
    }

    @Override
    public ContabilizacionPreliminarOutput contabilizarDocumentoPreliminar(String nroDocumento, String sociedad, String annio, String flagConta, String flagAnula) throws Exception {

        List<MensajeSap> lista = new ArrayList<MensajeSap>();
        ContabilizacionPreliminarOutput output = new ContabilizacionPreliminarOutput();
        RemitoOutSap remito = new RemitoOutSap();
        try {
            log.error("contabilizarDocumentoPreliminar_____01");
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            log.error("contabilizarDocumentoPreliminar_____02");
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_CONTAB_DOC_PRELIMINAR");
            log.error("contabilizarDocumentoPreliminar_____03");

            JCoParameterList imports = stfcConnection.getImportParameterList();

            imports.setValue("I_BELNR", nroDocumento);
            imports.setValue("I_BUKRS", sociedad);
            imports.setValue("I_GJAHR", annio);
            if (StringUtils.isNotBlank(flagConta))
                imports.setValue("I_CONTA_DP", flagConta);
            if (StringUtils.isNotBlank(flagAnula))
                imports.setValue("I_ANULA_DP", flagAnula);

            //Ejecutar Funcion
            stfcConnection.execute(destination);
            log.error("contabilizarDocumentoPreliminar_____06");
            //Recuperar Datos de SAP
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoParameterList exportsTable = stfcConnection.getTableParameterList();
            String numeroDoc = exports.getString("O_BELNR");
            String annyo = exports.getString("O_GJAHR");

            output.setNumeroDocumento(numeroDoc);
            output.setEjercicio(annyo);


            log.error("contabilizarDocumentoPreliminar_____07_x");
            JCoTable tableExport = exportsTable.getTable("O_RETURN");
            log.error("contabilizarDocumentoPreliminar_____08" + tableExport);
            for (int i = 0; i < tableExport.getNumRows(); i++) {
                log.error("contabilizarDocumentoPreliminar_____09_" + i);
                tableExport.setRow(i);
                MensajeSap ele = new MensajeSap(tableExport.getString("TYPE"), tableExport.getString("ID"), tableExport.getString("MESSAGE"));

                lista.add(ele);

            }
            output.setListaMensaje(lista);
            log.error("contabilizarDocumentoPreliminar_____10");

        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            log.error("contabilizarDocumentoPreliminar_____11 " + error);
            throw new Exception(Constants.ERROR_ABAP);
            // lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);

            log.error("contabilizarDocumentoPreliminar_____12 " + error);
            throw new Exception(Constants.ERROR_JCO_JAVA);

            //lista.add(new MessageCustom("E", e.toString()));
            //throw new RuntimeException(error);
            //return new MessageCustom("E", e.toString());

        }

        return output;

    }

    @Override
    public ContabilizacionComprobanteOutput generaContablizacionComprobante(ContabilizacionInput input, FacFactura bean, List<FacImputacion> beanListaImputacion, String docStatus) throws Exception {
        Integer idFactura = input.getIdFactura();
        java.text.SimpleDateFormat formatIn = new java.text.SimpleDateFormat("yyyy/MM/dd");
        Optional<FacFactura> optionalFactura = this.facFacturaDeltaRepository.findById(idFactura);
        if (!optionalFactura.isPresent()) {
            throw new Exception("No se encontr√≥ Factura con ID: " + idFactura);
        }

        FacFactura factura = bean;
        if (bean == null) {
            factura = optionalFactura.get();
            log.error("generaContablizacionComprobante factura memoria " + factura);
        }


        List<MensajeHistorialSap> lista = new ArrayList<MensajeHistorialSap>();
        ContabilizacionComprobanteOutput outPut = new ContabilizacionComprobanteOutput();
        boolean flagConIgv = false;
        BigDecimal auxMonto = new BigDecimal("0.0");
        if (factura.getMontoIgv() != null && (factura.getMontoIgv().compareTo(auxMonto) > 0))
            flagConIgv = true;

        /*List<FacFacturaCertificado> listaCertificado = this.facFacturaCertificadoDeltaRepository.findByFacturaId(idFactura);
        List<CerCertificadoDetalle> listaDetalleCertificado = new ArrayList<CerCertificadoDetalle>();
        if(listaCertificado != null && listaCertificado.size() > 0) {
            for (FacFacturaCertificado ele: listaCertificado) {
                List<CerCertificadoDetalle> listaDetalleCertificadoAux =
                        this.cerCertificadoDetalleDeltaRepository.findByCerCertificado(ele.getCerCertificado());
                if(listaDetalleCertificadoAux != null && listaDetalleCertificadoAux.size() > 0) {
                    for(CerCertificadoDetalle eleDet: listaDetalleCertificadoAux) {
                        listaDetalleCertificado.add(eleDet);
                    }
                }
            }

        }*/

        List<FacImputacion> listaImputacion = beanListaImputacion;
        if (bean == null) {
            listaImputacion = this.facImputacionDeltaRepository.findByFacturaId(idFactura);
            log.error("generaContablizacionComprobante listaImputacion memoria " + listaImputacion);
        }

        //
        List<MensajeSap> listaMensajeSap = new ArrayList<MensajeSap>();
        AppParametria operacion = this.appParametriaDeltaRepository.obtenerParametroPorModuloYLabel("CONTABILIZACION_COMPROBANTE", "OPERACION");
        AppParametria docType = this.appParametriaDeltaRepository.obtenerParametroPorModuloYLabel("CONTABILIZACION_COMPROBANTE", "DOC_TYPE");
        AppParametria glAccount = this.appParametriaDeltaRepository.obtenerParametroPorModuloYLabel("CONTABILIZACION_COMPROBANTE", "GL_ACCOUNT");
        AppParametria taxCode = this.appParametriaDeltaRepository.obtenerParametroPorModuloYLabel("CONTABILIZACION_COMPROBANTE", "TAX_CODE");
        AppParametria suplemento = this.appParametriaDeltaRepository.obtenerParametroPorModuloYLabel("CONTABILIZACION_COMPROBANTE", "SUPLEMENTO");
        AppParametria facturaIgv = this.appParametriaDeltaRepository.obtenerParametroPorModuloYLabel("CONTABILIZACION_COMPROBANTE", "FACTURA_IGV");

        try {
            JCoDestination destination = JCoDestinationManager.getDestination("COGA_DEST_RFC");
            JCoRepository repo = destination.getRepository();
            JCoFunction stfcConnection = repo.getFunction("ZPE_MM_CONTAB_COMPROB");

            JCoParameterList imports = stfcConnection.getImportParameterList();
            JCoParameterList tablesImport = stfcConnection.getTableParameterList();
            JCoTable tableAccountgl = tablesImport.getTable("ACCOUNTGL");
            JCoTable tableAccounttax = tablesImport.getTable("ACCOUNTTAX");
            JCoTable tableAccountpayable = tablesImport.getTable("ACCOUNTPAYABLE");
            JCoTable tableCurrencyamount = tablesImport.getTable("CURRENCYAMOUNT");
            JCoTable tableAccountwt = tablesImport.getTable("ACCOUNTWT");
            JCoTable tableExtension = tablesImport.getTable("EXTENSION1");
            //
            imports.setValue("I_ZFEST", factura.getFechaEstimadaPago());
            String codigoSap = input.getUsRes();
            /*String codigoSap = "";
            List<MtrUsuarioFacturacion> usuarioCoga = this.mtrUsuarioFacturacionDeltaRepository.getByIdp(input.getUsRes());
            if(usuarioCoga != null && usuarioCoga.size() > 0) {
                codigoSap = usuarioCoga.get(0).getCodigoUsuarioSap();
            }*/
            imports.setValue("I_ZAPROBF", codigoSap);
            List<FacEstrategiaIteracion> facEstrategiaIteracionList = this.facEstrategiaIteracionDeltaRepository.
                    findByFacFactura(factura);
            if (facEstrategiaIteracionList != null && facEstrategiaIteracionList.size() > 0) {
                for (FacEstrategiaIteracion beanEstrategia : facEstrategiaIteracionList) {
                    if (!StringUtils.isBlank(beanEstrategia.getActivo()) && beanEstrategia.getActivo().equalsIgnoreCase("S")) {
                        if (beanEstrategia.getMtrUsuarioFacturacionAprobador0() != null) {
                            imports.setValue("I_ZAPROB", beanEstrategia.getMtrUsuarioFacturacionAprobador0().getCodigoUsuarioSap());
                            if (beanEstrategia.getMtrTipoContrato() != null)
                                imports.setValue("I_ZCONT", "X");
                            else
                                imports.setValue("I_ZCONT", "");
                        }

                    }
                }
            }
            //
            JCoStructure header = imports.getStructure("DOCUMENTHEADER");
            header.setValue("BUS_ACT", operacion.getValue1());
            header.setValue("USERNAME", input.getUserLogin());
            header.setValue("HEADER_TXT", factura.getConcepto());
            header.setValue("DOC_STATUS", docStatus);//@PPRINCIPE
            if (factura.getMtrSociedad() != null)
                header.setValue("COMP_CODE", factura.getMtrSociedad().getDescBrv());
            header.setValue("DOC_DATE", factura.getFechaEmision());
            header.setValue("TRANS_DATE", factura.getFechaEmision());
            if (StringUtils.isNotBlank(input.getFechaAuxiliar())) {
                header.setValue("PSTNG_DATE", formatIn.parse(input.getFechaAuxiliar()));
            } else {
                header.setValue("PSTNG_DATE", DateUtils.obtenerFechaActual());
            }

            //header.setValue("TRANS_DATE", DateUtils.obtenerFechaActual());
            header.setValue("FISC_YEAR", DateUtils.getAnnioActual());
            log.error("generaContablizacionComprobante factura.getTipoComprobanteFactura() ::: " + factura.getTipoComprobanteFactura());
            if (!StringUtils.isBlank(factura.getTipoComprobanteFactura()) && factura.getTipoComprobanteFactura().equalsIgnoreCase("01")) {
                log.error("generaContablizacionComprobante x::: " + factura.getTipoComprobanteFactura());
                header.setValue("DOC_TYPE", "PF");
            }


            if (!StringUtils.isBlank(factura.getTipoComprobanteFactura()) && factura.getTipoComprobanteFactura().equalsIgnoreCase("91")) {
                header.setValue("DOC_TYPE", "PE");
                log.error("generaContablizacionComprobante _y ::: " + factura.getTipoComprobanteFactura());
            }

            BigDecimal auxCero = new BigDecimal("0.0");
            header.setValue("REF_DOC_NO", factura.getTipoComprobanteFactura() + "-" + factura.getSerieFactura() + "-" + factura.getNumeroFactura());
            int count = 1;
            //int count = 0;
            log.error("generaContablizacionComprobante listaImputacion : " + listaImputacion);
            String lifnr = "";
            if (factura.getMtrProveedor() != null && StringUtils.isNotBlank(factura.getMtrProveedor().getLifnr())) {
                lifnr = factura.getMtrProveedor().getLifnr();
            }
            log.error("generaContablizacionComprobante lifnr : " + lifnr);

            if (listaImputacion != null && listaImputacion.size() > 0) {
                for (FacImputacion eleDet : listaImputacion) {
                    //Consultar cuenta imputacion
                    Optional<MtrCuentaImputacion> optCtaImpu = this.mtrCuentaImputacionDeltaRepository.findById(eleDet.getMtrCuentaImputacion().getId());
                    Optional<MtrCuentaMayor> optCtaMayor = this.mtrCuentaMayorDeltaRepository.findById(eleDet.getMtrCuentaMayor().getId());

                    MtrCuentaImputacion eleImpu = optCtaImpu.get();
                    MtrCuentaMayor eleMayor = optCtaMayor.get();

                    //Consultar cuentamayor
                    tableAccountgl.appendRow();
                    count++;
                    boolean flagOtrosCargos = false;
                    if (eleDet.getValorOtrosCargos() != null && eleDet.getValorOtrosCargos().compareTo(auxCero) > 0)
                        flagOtrosCargos = true;

                    tableAccountgl.setValue("ITEMNO_ACC", String.format("%010d", new Long(count)));
                    if (eleMayor != null)
                        tableAccountgl.setValue("GL_ACCOUNT", eleMayor.getCodigoCuentaMayor());
                    // tableAccountgl.setValue("ITEM_TEXT", eleDet.getFacFactura().getConcepto());
                    tableAccountgl.setValue("ITEM_TEXT", lifnr + " / " + factura.getConcepto());
                    //
                    if (flagConIgv)
                        tableAccountgl.setValue("TAX_CODE", taxCode.getValue1());
                    else
                        tableAccountgl.setValue("TAX_CODE", "CE");


                    //String codeCuentaImputacion = "";;
                    if (eleImpu != null &&
                            eleImpu.getMtrTipoImputacion() != null) {
                        String tipoImputacion = eleImpu.getMtrTipoImputacion().getCodigoTipoImputacion();
                        if (tipoImputacion.equalsIgnoreCase("K"))
                            tableAccountgl.setValue("COSTCENTER", eleImpu.getCodigoCuentaImputacion());
                        if (tipoImputacion.equalsIgnoreCase("P"))
                            tableAccountgl.setValue("WBS_ELEMENT", eleImpu.getCodigoCuentaImputacion());
                        if (tipoImputacion.equalsIgnoreCase("F"))
                            tableAccountgl.setValue("ORDERID", eleImpu.getCodigoCuentaImputacion());
                    }
                    //Duplicar solo los que tengan otros cargos mayor a cero
                    if (flagOtrosCargos) {
                        tableAccountgl.appendRow();
                        count++;
                        tableAccountgl.setValue("ITEMNO_ACC", String.format("%010d", new Long(count)));
                        if (eleMayor != null)
                            tableAccountgl.setValue("GL_ACCOUNT", eleMayor.getCodigoCuentaMayor());
                        //tableAccountgl.setValue("ITEM_TEXT", eleDet.getFacFactura().getConcepto());

                        tableAccountgl.setValue("ITEM_TEXT", lifnr + " / " + factura.getConcepto());
                        tableAccountgl.setValue("TAX_CODE", "CE");


                        //codeCuentaImputacion = "";
                        if (eleImpu != null &&
                                eleImpu.getMtrTipoImputacion() != null) {
                            String tipoImputacion = eleImpu.getMtrTipoImputacion().getCodigoTipoImputacion();
                            if (tipoImputacion.equalsIgnoreCase("K"))
                                tableAccountgl.setValue("COSTCENTER", eleImpu.getCodigoCuentaImputacion());
                            if (tipoImputacion.equalsIgnoreCase("P"))
                                tableAccountgl.setValue("WBS_ELEMENT", eleImpu.getCodigoCuentaImputacion());
                            if (tipoImputacion.equalsIgnoreCase("F"))
                                tableAccountgl.setValue("ORDERID", eleImpu.getCodigoCuentaImputacion());
                        }
                    }

                }
            }

            if (flagConIgv) {
                count++;
                tableAccounttax.appendRow();
                tableAccounttax.setValue("ITEMNO_ACC", String.format("%010d", new Long(count)));
                tableAccounttax.setValue("GL_ACCOUNT", glAccount.getValue1());
                tableAccounttax.setValue("TAX_CODE", taxCode.getValue1());
            }


            //count++;
            int countAuxPayable = 1;
            tableAccountpayable.appendRow();
            tableAccountpayable.setValue("ITEMNO_ACC", String.format("%010d", new Long(countAuxPayable)));
            tableAccountpayable.setValue("VENDOR_NO", factura.getMtrProveedor().getLifnr());
            tableAccountpayable.setValue("ALLOC_NMBR", factura.getMtrProveedor().getLifnr());
            if (factura.getMtrSociedad() != null)
                tableAccountpayable.setValue("BUS_AREA", factura.getMtrSociedad().getDescBrv());

            String lifnrAux = factura.getMtrProveedor().getLifnr();
            if (!StringUtils.isBlank(lifnrAux)) {
                lifnrAux = Long.parseLong(lifnrAux) + "";
            }
            tableAccountpayable.setValue("ITEM_TEXT", lifnrAux + " / " + factura.getConcepto());
            //tableAccountpayable.setValue("PMTMTHSUPL",suplemento.getValue1());Gf
            tableAccountpayable.setValue("PYMT_METH", suplemento.getValue1());
            if (flagConIgv)
                tableAccountpayable.setValue("TAX_CODE", taxCode.getValue1());
            else
                tableAccountpayable.setValue("TAX_CODE", "CE");

            tableAccountpayable.setValue("BLINE_DATE", factura.getFechaCreacion());


            count = 1;

            BigDecimal tasaAuxiliar = new BigDecimal("0.0");
            if (factura.getMtrMoneda() != null && factura.getMtrMoneda().getDescBrv().equalsIgnoreCase("USD")) {
                MtrMoneda monedaNacional = this.mtrMonedaDeltaRepository.getByDescBrv("NSO");
                //MtrTasaCambioWeb tasa = this.mtrTasaCambioWebDeltaRepository.obtenerTasaCambio(factura.getMtrMoneda().getId(), monedaNacional.getId(), factura.getFechaEmision());
                MtrTasaCambio tasa = this.mtrTasaCambioDeltaRepository.getByFechaTasaAndMtrMonedaOrigenAndMtrMonedaDestino(factura.getFechaEmision(), monedaNacional, factura.getMtrMoneda());

                if (tasa != null) {//dd
                    tasaAuxiliar = tasa.getValor();
                }
            }


            BigDecimal montoTotal = new BigDecimal("0.0");
            BigDecimal montoTotalOtros = new BigDecimal("0.0");
            log.error("generaContablizacionComprobante listaImputacion : " + listaImputacion);
            if (listaImputacion != null && listaImputacion.size() > 0) {
                for (FacImputacion ele : listaImputacion) {
                    count++;
                    tableCurrencyamount.appendRow();

                    boolean flagOtrosCargos = false;
                    if (ele.getValorOtrosCargos() != null && ele.getValorOtrosCargos().compareTo(auxCero) > 0)
                        flagOtrosCargos = true;

                    tableCurrencyamount.setValue("ITEMNO_ACC", String.format("%010d", new Long(count)));
                    tableCurrencyamount.setValue("CURRENCY", factura.getMtrMoneda().getDescBrv());
                    tableCurrencyamount.setValue("EXCH_RATE", tasaAuxiliar);

                    //
                    if (ele.getValorImputacion() != null) {
                        tableCurrencyamount.setValue("AMT_DOCCUR", ele.getValorImputacion());
                        montoTotal = montoTotal.add(ele.getValorImputacion());
                    }
                    //Duplicar solo los que tengan otros cargos mayor a cero
                    if (flagOtrosCargos) {
                        count++;
                        tableCurrencyamount.appendRow();
                        tableCurrencyamount.setValue("ITEMNO_ACC", String.format("%010d", new Long(count)));
                        tableCurrencyamount.setValue("CURRENCY", factura.getMtrMoneda().getDescBrv());
                        tableCurrencyamount.setValue("EXCH_RATE", tasaAuxiliar);
                        if (ele.getValorImputacion() != null) {
                            tableCurrencyamount.setValue("AMT_DOCCUR", ele.getValorOtrosCargos());
                            montoTotalOtros = montoTotalOtros.add(ele.getValorOtrosCargos());
                        }
                    }


                    //g
                }
            }
            BigDecimal auxigv = new BigDecimal(facturaIgv.getValue1());
            BigDecimal auxiliar = new BigDecimal("0.0");
            BigDecimal montoNegativoAux = new BigDecimal("0.0");
            if (flagConIgv) {

                count++;
                tableCurrencyamount.appendRow();
                tableCurrencyamount.setValue("ITEMNO_ACC", String.format("%010d", new Long(count)));
                tableCurrencyamount.setValue("CURRENCY", factura.getMtrMoneda().getDescBrv());
                tableCurrencyamount.setValue("EXCH_RATE", tasaAuxiliar);
                //tableCurrencyamount.setValue("AMT_DOCCUR", montoTotal.multiply(auxigv).setScale(2, BigDecimal.ROUND_HALF_UP));
                tableCurrencyamount.setValue("AMT_DOCCUR", factura.getMontoIgv());
                tableCurrencyamount.setValue("AMT_BASE", montoTotal.setScale(2, BigDecimal.ROUND_HALF_EVEN));

                //count++;
                tableCurrencyamount.appendRow();
                tableCurrencyamount.setValue("ITEMNO_ACC", String.format("%010d", new Long(countAuxPayable)));
                tableCurrencyamount.setValue("CURRENCY", factura.getMtrMoneda().getDescBrv());
                tableCurrencyamount.setValue("EXCH_RATE", tasaAuxiliar);
                //BigDecimal montoNegativo = montoTotal.add(montoTotal.multiply(auxigv)).setScale(2, BigDecimal.ROUND_HALF_UP);
                BigDecimal montoNegativo = montoTotal.add(factura.getMontoIgv());
                montoNegativo = montoNegativo.add(montoTotalOtros);
                //montoNegativo = auxiliar.subtract(montoNegativo).setScale(2, BigDecimal.ROUND_HALF_UP);
                montoNegativo = auxiliar.subtract(montoNegativo);
                montoNegativoAux = montoNegativo.setScale(2, BigDecimal.ROUND_HALF_EVEN);
                tableCurrencyamount.setValue("AMT_DOCCUR", montoNegativoAux);
            } else {
                //count++;
                tableCurrencyamount.appendRow();
                tableCurrencyamount.setValue("ITEMNO_ACC", String.format("%010d", new Long(countAuxPayable)));
                tableCurrencyamount.setValue("CURRENCY", factura.getMtrMoneda().getDescBrv());
                tableCurrencyamount.setValue("EXCH_RATE", tasaAuxiliar);
                montoTotal = montoTotal.add(montoTotalOtros);
                BigDecimal montoNegativo = auxiliar.subtract(montoTotal);
                montoNegativoAux = montoNegativo.setScale(2, BigDecimal.ROUND_HALF_EVEN);
                tableCurrencyamount.setValue("AMT_DOCCUR", montoNegativoAux);
                //tableCurrencyamount.setValue("AMT_BASE", montoTotal);
            }

            //adicional
            log.error("generaContablizacionComprobante_getMtrDetraccion " + factura.getMtrDetraccion());
            if (factura.getMtrDetraccion() != null) {
                tableAccountwt.appendRow();
                tableAccountwt.setValue("ITEMNO_ACC", String.format("%010d", new Long(countAuxPayable)));
                tableAccountwt.setValue("WT_TYPE", "DE");
                tableAccountwt.setValue("WT_CODE", factura.getMtrDetraccion().getCodigo());
                tableAccountwt.setValue("BAS_AMT_TC", montoNegativoAux.multiply(new BigDecimal("-1")));
            }

            if (factura.getMtrDetraccion() != null) {
                tableExtension.appendRow();
                String strMonto = montoNegativoAux.multiply(new BigDecimal("-1")).toString();
                //montoNegativoAux = montoNegativoAux.
                String field = String.format("%06d", countAuxPayable) + "DE" + factura.getMtrDetraccion().getCodigo();
                tableExtension.setValue("FIELD1", field);
                tableExtension.setValue("FIELD2", strMonto);
            }

            //Ejecutar Funcionx
            stfcConnection.execute(destination);

            //Recuperar Datos de SAP
            //JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoParameterList exports = stfcConnection.getExportParameterList();
            JCoParameterList tables = stfcConnection.getTableParameterList();
            JCoTable tableReturn = tables.getTable("RETURN");



            /*for (int i = 0; i < tableReturn.getNumRows(); i++) {
                tableReturn.setRow(i);                ;
                listaMensajeSap.add(new MensajeSap(tableReturn.getString("TYPE"), tableReturn.getString("NUMBER"), tableReturn.getString("MESSAGE")));
            }*/

            //=====================================================================
            outPut.setNumeroDocumento(exports.getString("E_BELNR"));
            outPut.setEjercicio(exports.getString("E_GJAHR"));
            log.error("generaContablizacionComprobante_8::: " + lista);
            List<MensajeSap> listaError = new ArrayList<MensajeSap>();
            String msgTextoError = "";
            boolean flagOk = true;
            String breakLine = System.lineSeparator();
            if (tableReturn != null && tableReturn.getNumRows() > 0) {
                for (int i = 0; i < tableReturn.getNumRows(); i++) {
                    tableReturn.setRow(i);
                    FacMensajeSap mensaje = new FacMensajeSap();
                    mensaje.setFacFactura(factura);
                    //mensaje.set
                    mensaje.setTipoMensaje(tableReturn.getString("TYPE"));
                    //mensaje.set
                    mensaje.setTextoMensajeSap(tableReturn.getString("MESSAGE"));
                    FacMensajeSap mensajeSpOut = this.facMensajeSapDeltaRepository.save(mensaje);

                    MensajeHistorialSap msg = new MensajeHistorialSap(mensajeSpOut.getId(), tableReturn.getString("TYPE"), tableReturn.getString("NUMBER"), tableReturn.getString("MESSAGE"));
                    lista.add(msg);
                    if (tableReturn.getString("TYPE").equalsIgnoreCase("E")) {
                        msgTextoError = msgTextoError + " " + tableReturn.getString("MESSAGE") + breakLine;
                        flagOk = false;
                        listaError.add(new MensajeSap(tableReturn.getString("TYPE"), tableReturn.getString("NUMBER"), tableReturn.getString("MESSAGE")));
                    }

                }
            }
            log.error("generaContablizacionComprobante_9::: " + lista);


            if (lista != null && lista.size() > 0 && flagOk) {

                //factura.setFechaAprobacion(DateUtils.obtenerFechaHoraActual());
                //factura.setNumeroFacturaSap(exports.getString("E_BELNR"));
                //factura.setAnioFacturaSap(exports.getString("E_GJAHR"));
                //this.facFacturaDeltaRepository.save(factura);


            } else if (!flagOk) {
                FacHistorial facHistorial = new FacHistorial();

                MtrEstado mtrEstado = this.mtrEstadoDeltaRepository.
                        getByCodigoAgrupadoAndCodigoEstado(
                                Constants.CODIGO_AGRUPADO_FACTURA,
                                EstadoFacturaEnum.RECHAZADO_CUPA.getEstado()
                        );

                facHistorial.setDescripcion(msgTextoError.trim());
                facHistorial.setMtrEstado(mtrEstado);
                facHistorial.setFechaHistorial(DateUtils.obtenerFechaHoraActual());
                //facHistorial.setMtrEstado();
                facHistorial.setFacFactura(factura);
                facHistorial.setUsuarioHistorial("SAP");
                FacHistorial out = this.facHistorialDeltaRepository.save(facHistorial);
                for (MensajeSap ele : listaError) {
                    FacMensajeSap mensajex = new FacMensajeSap();
                    mensajex.setFacFactura(factura);
                    //mensaje.set
                    mensajex.setTipoMensaje(ele.getType());
                    mensajex.setTextoMensajeSap(ele.getTexto());
                    mensajex.setFacHistorial(out);
                    FacMensajeSap mensajeSpOut = this.facMensajeSapDeltaRepository.save(mensajex);
                    //dfd
                }
            }
            log.error("Fin ::: generaContablizacionComprobante_10");
            //=====================================================================


        } catch (AbapException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            //lista.add(new MensajeSap("E", error, error));
            log.error("generaContablizacionComprobante_11 " + error);
            throw new Exception(Constants.ERROR_ABAP);
        } catch (JCoException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            //lista.add(new MensajeSap("E", error, error));
            log.error("generaContablizacionComprobante_____12 " + error);
            throw new Exception(Constants.ERROR_JCO_JAVA);
        }
        outPut.setListaMensaje(lista);
        return outPut;

    }

}

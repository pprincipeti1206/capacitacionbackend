/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntitydeltaDTOService.java.e.vm
 */
package com.incloud.hcp.service.delta.impl;

import com.incloud.hcp.common.excel.ExcelDefault;
import com.incloud.hcp.domain.CerNotaPedido;
import com.incloud.hcp.domain.CerNotaPedidoDetalle;
import com.incloud.hcp.enums.NotaPedidoTipoPosicionEnum;
import com.incloud.hcp.service.delta.AppParametriaDeltaService;
import com.incloud.hcp.service.delta.CerNotaPedidoDetalleDeltaService;
import com.incloud.hcp.service.dto.CerNotaPedidoDetalleDto;
import com.incloud.hcp.service.dto.CertificadoNotaPedidoDetalleCantidadEntregaPrecioDto;
import com.incloud.hcp.service.impl.CerNotaPedidoDetalleServiceImpl;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.utils.Constants;
import com.incloud.hcp.utils.DateUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.streaming.SXSSFSheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.awt.*;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * A simple DTO Facility for CerNotaPedidoDetalle.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public class CerNotaPedidoDetalleDeltaServiceImpl extends CerNotaPedidoDetalleServiceImpl implements CerNotaPedidoDetalleDeltaService {

    protected final String NAME_SHEET_DETALLE = "NOTA PEDIDO";
    protected final String CONFIG_TITLE_DETALLE = "com/incloud/hcp/excel/CerNotaPedidoDetalle01Excel.xml";

    @Autowired
    private AppParametriaDeltaService appParametriaDeltaService;

    /**************************/
    /* Metodos Personalizados */
    /**************************/

    public List<CerNotaPedidoDetalleDto> findByDetalle(Integer cerNotaPedidoId) throws Exception {
        List<CerNotaPedidoDetalle> cerNotaPedidoDetallePosicionList = this.cerNotaPedidoDetalleDeltaRepository.
                findByDetalleSoloPosiciones(cerNotaPedidoId);
        List<CerNotaPedidoDetalleDto> cerNotaPedidoDetalleFinal = new ArrayList<CerNotaPedidoDetalleDto>();

        if (cerNotaPedidoDetallePosicionList != null && cerNotaPedidoDetallePosicionList.size() > 0) {
            for (CerNotaPedidoDetalle bean : cerNotaPedidoDetallePosicionList) {
                CerNotaPedidoDetalleDto beanPosicionDto = new CerNotaPedidoDetalleDto();
                beanPosicionDto.setTipoPosicion(NotaPedidoTipoPosicionEnum.POSICION.getEstado());
                beanPosicionDto.setDetalle(bean);
                cerNotaPedidoDetalleFinal.add(beanPosicionDto);
                List<CerNotaPedidoDetalle> subPosicionList = this.cerNotaPedidoDetalleDeltaRepository.
                        findByDetalleSubPosicion(cerNotaPedidoId, bean.getId());
                if (subPosicionList != null && subPosicionList.size() > 0) {
                    for (CerNotaPedidoDetalle beanSubposicion : subPosicionList) {
                        CerNotaPedidoDetalleDto beanSubPosicionDto = new CerNotaPedidoDetalleDto();
                        beanSubPosicionDto.setTipoPosicion(NotaPedidoTipoPosicionEnum.SUBPOSICION.getEstado());
                        beanSubPosicionDto.setDetalle(beanSubposicion);
                        cerNotaPedidoDetalleFinal.add(beanSubPosicionDto);
                    }
                }
            }
        }
        return cerNotaPedidoDetalleFinal;
    }

    @Transactional(readOnly = true)
    public SXSSFWorkbook downloadExcelporCerNotaPedidoId(Integer cerNotaPedidoId) throws Exception{
        Optional<CerNotaPedido> optionalCerNota = this.cerNotaPedidoDeltaRepository.findById(cerNotaPedidoId);
        if (!optionalCerNota.isPresent()) {
            throw new Exception("No se encontró Nota de Pedido con ID: " + cerNotaPedidoId);
        }
        CerNotaPedido cerNotaPedido = optionalCerNota.get();

        List<CerNotaPedidoDetalleDto> result = this.findByDetalle(cerNotaPedidoId);
        if (!Optional.ofNullable(result).isPresent()) {
            return null;
        }

        SXSSFWorkbook book = new SXSSFWorkbook(100);
        XSSFWorkbook xbook = book.getXSSFWorkbook();
        SXSSFSheet sheet = book.createSheet();

        int numberOfSheets = book.getNumberOfSheets();
        book.setSheetName(numberOfSheets - 1, this.devuelveNombreSheet());


        XSSFCellStyle cellStyle01 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 1), new Color(226, 239, 218), false, (short) 10);
        XSSFCellStyle cellStyle02 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 192), new Color(255, 255, 255), false, (short) 10);
        List<CellStyle> cellStyleList01 = ExcelDefault.generarCellStyle(xbook, cellStyle01);
        List<CellStyle> cellStyleList02 = ExcelDefault.generarCellStyle(xbook, cellStyle02);
        List<CellStyle> cellStyleList = cellStyleList01;

        int lastRowCabecera = sheet.getLastRowNum();
        int i = lastRowCabecera < 0 ? 0 : lastRowCabecera;
        Row dataRowCabecera = sheet.createRow(i + 1);
        ExcelDefault.setValueCell("Proveedor: ", dataRowCabecera.createCell(0), "S", cellStyleList02);
        ExcelDefault.setValueCell(cerNotaPedido.getMtrProveedor().getRazonSocial(), dataRowCabecera.createCell(2), "S", cellStyleList02);

        lastRowCabecera = sheet.getLastRowNum();
        i = lastRowCabecera < 0 ? 0 : lastRowCabecera;
        dataRowCabecera = sheet.createRow(i + 1);
        ExcelDefault.setValueCell("RUC: ", dataRowCabecera.createCell(0), "S", cellStyleList02);
        ExcelDefault.setValueCell(cerNotaPedido.getMtrProveedor().getRuc(), dataRowCabecera.createCell(2), "S", cellStyleList02);

        lastRowCabecera = sheet.getLastRowNum();
        i = lastRowCabecera < 0 ? 0 : lastRowCabecera;
        dataRowCabecera = sheet.createRow(i + 1);
        ExcelDefault.setValueCell("Nota Pedido: ", dataRowCabecera.createCell(0), "S", cellStyleList02);
        ExcelDefault.setValueCell(cerNotaPedido.getCodigoNotaPedidoSap(), dataRowCabecera.createCell(2), "S", cellStyleList02);

        lastRowCabecera = sheet.getLastRowNum();
        i = lastRowCabecera < 0 ? 0 : lastRowCabecera;
        dataRowCabecera = sheet.createRow(i + 1);
        ExcelDefault.setValueCell("Concepto: ", dataRowCabecera.createCell(0), "S", cellStyleList02);
        if (Optional.ofNullable(cerNotaPedido.getConcepto()).isPresent()) {
            ExcelDefault.setValueCell(cerNotaPedido.getConcepto(), dataRowCabecera.createCell(2), "S", cellStyleList02);
        }

        lastRowCabecera = sheet.getLastRowNum();
        i = lastRowCabecera < 0 ? 0 : lastRowCabecera;
        dataRowCabecera = sheet.createRow(i + 1);
        ExcelDefault.setValueCell("Fecha Documento: ", dataRowCabecera.createCell(0), "S", cellStyleList02);
        ExcelDefault.setValueCell(cerNotaPedido.getFechaDocumento(), dataRowCabecera.createCell(2), "D", cellStyleList02);

        lastRowCabecera = sheet.getLastRowNum();
        i = lastRowCabecera < 0 ? 0 : lastRowCabecera;
        dataRowCabecera = sheet.createRow(i + 1);
        ExcelDefault.setValueCell("Sociedad: ", dataRowCabecera.createCell(0), "S", cellStyleList02);
        if (Optional.ofNullable(cerNotaPedido.getMtrSociedad()).isPresent()) {
            ExcelDefault.setValueCell(cerNotaPedido.getMtrSociedad().getDescripcion(), dataRowCabecera.createCell(2), "S", cellStyleList02);
        }
        else {
            ExcelDefault.setValueCell("", dataRowCabecera.createCell(2), "S", cellStyleList02);
        }

        lastRowCabecera = sheet.getLastRowNum();
        i = lastRowCabecera < 0 ? 0 : lastRowCabecera;
        dataRowCabecera = sheet.createRow(i + 1);
        ExcelDefault.setValueCell("Moneda: ", dataRowCabecera.createCell(0), "S", cellStyleList02);
        if (Optional.ofNullable(cerNotaPedido.getMtrMoneda()).isPresent()) {
            ExcelDefault.setValueCell(cerNotaPedido.getMtrMoneda().getMonedaDescrip(), dataRowCabecera.createCell(2), "S", cellStyleList02);
        }
        else {
            ExcelDefault.setValueCell("", dataRowCabecera.createCell(2), "S", cellStyleList02);
        }

        lastRowCabecera = sheet.getLastRowNum();
        i = lastRowCabecera < 0 ? 0 : lastRowCabecera;
        dataRowCabecera = sheet.createRow(i + 1);
        ExcelDefault.setValueCell("Fecha Límite para la carga de Certificados: ", dataRowCabecera.createCell(0), "S", cellStyleList02);
        if (Optional.ofNullable(cerNotaPedido.getFechaFinVigencia()).isPresent()) {
            ExcelDefault.setValueCell(cerNotaPedido.getFechaFinVigencia(), dataRowCabecera.createCell(2), "D", cellStyleList02);
        }
        else {
            ExcelDefault.setValueCell("", dataRowCabecera.createCell(2), "S", cellStyleList02);
        }

        lastRowCabecera = sheet.getLastRowNum();
        i = lastRowCabecera < 0 ? 0 : lastRowCabecera;
        dataRowCabecera = sheet.createRow(i + 1);
        ExcelDefault.setValueCell("Monto Total Estimado en Nuevos Soles: ", dataRowCabecera.createCell(0), "S", cellStyleList02);
        if (Optional.ofNullable(cerNotaPedido.getMonto()).isPresent()) {
            ExcelDefault.setValueCell(cerNotaPedido.getMonto(), dataRowCabecera.createCell(2), "N2", cellStyleList02);
        }
        else {
            ExcelDefault.setValueCell("", dataRowCabecera.createCell(2), "S", cellStyleList02);
        }

        lastRowCabecera = sheet.getLastRowNum();
        i = lastRowCabecera < 0 ? 0 : lastRowCabecera;
        dataRowCabecera = sheet.createRow(i + 1);
        ExcelDefault.setValueCell("Condición de Pago: ", dataRowCabecera.createCell(0), "S", cellStyleList02);
        if (Optional.ofNullable(cerNotaPedido.getMtrCondicionPago()).isPresent()) {
            ExcelDefault.setValueCell(cerNotaPedido.getMtrCondicionPago().getDescripcion(), dataRowCabecera.createCell(2), "S", cellStyleList02);
        }
        else {
            ExcelDefault.setValueCell("", dataRowCabecera.createCell(2), "S", cellStyleList02);
        }

        lastRowCabecera = sheet.getLastRowNum();
        i = lastRowCabecera < 0 ? 0 : lastRowCabecera;
        dataRowCabecera = sheet.createRow(i + 1);
        ExcelDefault.setValueCell("Periodo de Validez: ", dataRowCabecera.createCell(0), "S", cellStyleList02);
        if (Optional.ofNullable(cerNotaPedido.getFechaInicio()).isPresent() && Optional.ofNullable(cerNotaPedido.getFechaFin()).isPresent()) {
            ExcelDefault.setValueCell(
                    DateUtils.convertDateToString("dd/MM/yyyy",cerNotaPedido.getFechaInicio()) + " - " + DateUtils.convertDateToString("dd/MM/yyyy",cerNotaPedido.getFechaFin()) ,
                    dataRowCabecera.createCell(2), "S", cellStyleList02);
        }
        else {
            ExcelDefault.setValueCell("", dataRowCabecera.createCell(2), "S", cellStyleList02);
        }

        lastRowCabecera = sheet.getLastRowNum();
        i = lastRowCabecera < 0 ? 0 : lastRowCabecera;
        dataRowCabecera = sheet.createRow(i + 1);
        ExcelDefault.setValueCell("Plazo: ", dataRowCabecera.createCell(0), "S", cellStyleList02);
        if (Optional.ofNullable(cerNotaPedido.getPlazo()).isPresent()) {
            ExcelDefault.setValueCell(cerNotaPedido.getPlazo(), dataRowCabecera.createCell(2), "I", cellStyleList02);
        }
        else {
            ExcelDefault.setValueCell("", dataRowCabecera.createCell(2), "S", cellStyleList02);
        }

        lastRowCabecera = sheet.getLastRowNum();
        i = lastRowCabecera < 0 ? 0 : lastRowCabecera;
        dataRowCabecera = sheet.createRow(i + 1);
        ExcelDefault.setValueCell("Lugar de Presentación: ", dataRowCabecera.createCell(0), "S", cellStyleList02);
        ExcelDefault.setValueCell("Calle Uni S/N Final Av. Industrial / Lurín, Lima 16  / Telef. 51-1-617-7888", dataRowCabecera.createCell(2), "S", cellStyleList02);

        lastRowCabecera = sheet.getLastRowNum();
        i = lastRowCabecera < 0 ? 0 : lastRowCabecera;
        dataRowCabecera = sheet.createRow(i + 1);
        ExcelDefault.setValueCell("Pago de facturas y entrega de retenciones: ", dataRowCabecera.createCell(0), "S", cellStyleList02);
        ExcelDefault.setValueCell("Días: Viernes Horario: 9 a 12pm y 2:30 a 4pm", dataRowCabecera.createCell(2), "S", cellStyleList02);

        lastRowCabecera = sheet.getLastRowNum();
        i = lastRowCabecera < 0 ? 0 : lastRowCabecera;
        dataRowCabecera = sheet.createRow(i + 1);
        ExcelDefault.setValueCell("Consultas Telefónicas: ", dataRowCabecera.createCell(0), "S", cellStyleList02);
        ExcelDefault.setValueCell("Teléfono: 617-7767 Días: Jueves y Viernes Horario: 9 a 12pm y 2:30 a 4pm", dataRowCabecera.createCell(2), "S", cellStyleList02);

        lastRowCabecera = sheet.getLastRowNum();
        i = lastRowCabecera < 0 ? 0 : lastRowCabecera;
        dataRowCabecera = sheet.createRow(i + 1);
        ExcelDefault.setValueCell("Recepción de Facturas: ", dataRowCabecera.createCell(0), "S", cellStyleList02);
        ExcelDefault.setValueCell("Días: Lunes a Jueves Horario: 9 a 12pm y 2:30 a 4pm", dataRowCabecera.createCell(2), "S", cellStyleList02);


        int nroColumnas = ExcelDefault.createTitleAndWidth(
                18,
                xbook,
                sheet,
                this.CONFIG_TITLE_DETALLE,
                 "",
                null);
        sheet.untrackAllColumnsForAutoSizing();

        boolean filaImpar = true;
        for (CerNotaPedidoDetalleDto beanResult : result) {
            CerNotaPedidoDetalle bean = beanResult.getDetalle();
            int lastRow = sheet.getLastRowNum();
            i = lastRow < 0 ? 0 : lastRow;
            Row dataRow = sheet.createRow(i + 1);
            int contador = 0;
            if (beanResult.getTipoPosicion().equals(NotaPedidoTipoPosicionEnum.POSICION.getEstado())) {
                cellStyleList = cellStyleList01;
            } else {
                cellStyleList = cellStyleList02;
            }
            filaImpar = !filaImpar;

            ExcelDefault.setValueCell(cerNotaPedido.getMtrSociedad().getDescripcion(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;

            ExcelDefault.setValueCell(cerNotaPedido.getMtrProveedor().getRuc(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(cerNotaPedido.getMtrProveedor().getRazonSocial(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(cerNotaPedido.getUserCompra() != null ? cerNotaPedido.getUserCompra() : "", dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getPosicionSap()!= null ? bean.getPosicionSap() : "", dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            if (Optional.ofNullable(bean.getMtrBienServicio()).isPresent()) {
                ExcelDefault.setValueCell(bean.getMtrBienServicio().getDescripcion(), dataRow.createCell(contador), "S", cellStyleList);
                contador++;
                ExcelDefault.setValueCell(bean.getMtrBienServicio().getMtrUnidadMedida().getCodigoSap(), dataRow.createCell(contador), "S", cellStyleList);
                contador++;
            }
            else {
                ExcelDefault.setValueCell(bean.getTextoItem() != null ? bean.getTextoItem() : "", dataRow.createCell(contador), "S", cellStyleList);
                contador++;
                ExcelDefault.setValueCell(bean.getUnidadTextoItem() != null ? bean.getUnidadTextoItem() : "", dataRow.createCell(contador), "S", cellStyleList);
                contador++;
            }

            ExcelDefault.setValueCell(bean.getCerCuentaMayor() != null ? bean.getCerCuentaMayor() : "", dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getPrecioUnitario(), dataRow.createCell(contador), "N", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getCantidadRequerida(), dataRow.createCell(contador), "N", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(bean.getCantidadEntregada(), dataRow.createCell(contador), "N", cellStyleList);
            contador++;

            BigDecimal entregada = new BigDecimal(0.00);
            if (Optional.ofNullable(bean.getCantidadEntregada()).isPresent()) {
                entregada = bean.getCantidadEntregada();
            }
            BigDecimal pendiente = new BigDecimal(bean.getCantidadRequerida().floatValue() -  entregada.floatValue());
            ExcelDefault.setValueCell(pendiente, dataRow.createCell(contador), "N", cellStyleList);
            contador++;

            BigDecimal total = new BigDecimal(bean.getCantidadRequerida().floatValue() * bean.getPrecioUnitario().floatValue());
            ExcelDefault.setValueCell(total, dataRow.createCell(contador), "N", cellStyleList);
            contador++;
            if (Optional.ofNullable(bean.getMtrCentro()).isPresent())
                ExcelDefault.setValueCell(bean.getMtrCentro().getDescripcion(), dataRow.createCell(contador), "S", cellStyleList);
            else
                ExcelDefault.setValueCell("", dataRow.createCell(contador), "S", cellStyleList);

            contador++;
            if (Optional.ofNullable(bean.getMtrAlmacen()).isPresent())
                ExcelDefault.setValueCell(bean.getMtrAlmacen().getDescripcion(), dataRow.createCell(contador), "S", cellStyleList);
            else
                ExcelDefault.setValueCell("  ", dataRow.createCell(contador), "S", cellStyleList);
            contador++;

            if (Optional.ofNullable(bean.getFechaEntrega()).isPresent()) {
                ExcelDefault.setValueCell(bean.getFechaEntrega(), dataRow.createCell(contador), "D", cellStyleList);
            }
            else {
                ExcelDefault.setValueCell("", dataRow.createCell(contador), "S", cellStyleList);
            }
            contador++;

        }
        return book;
    }

    /*
     *Actualiza Cantidad de Entrega y Precio
     * */
    public CerNotaPedidoDetalle actualizaCantidadEntregaPrecio(CertificadoNotaPedidoDetalleCantidadEntregaPrecioDto certificadoNotaPedidoDetalleCantidadEntregaPrecio) throws Exception{
        if (this.appParametriaDeltaService.devuelveApagarCertificado()) {
            throw new Exception(Constants.MENSAJE_SISTEMA_APAGADO);
        }

        CerNotaPedidoDetalle cerNotaPedidodDetalle = this.cerNotaPedidoDetalleDeltaRepository.getOne(certificadoNotaPedidoDetalleCantidadEntregaPrecio.getCerNotaPedidoDetalleID());
        cerNotaPedidodDetalle.setCantidadEntregada(certificadoNotaPedidoDetalleCantidadEntregaPrecio.getCantidadEntrega());
        cerNotaPedidodDetalle.setPrecioUnitario(certificadoNotaPedidoDetalleCantidadEntregaPrecio.getPrecio());
        return this.cerNotaPedidoDetalleDeltaRepository.save(cerNotaPedidodDetalle);
    }


    /***********************/
    /* Metodos de Busqueda */
    /***********************/

    protected List<CerNotaPedidoDetalle> setAfterFindJpa(List<CerNotaPedidoDetalle> result) {
        if (result != null && result.size() > 0) {
            List<CerNotaPedidoDetalle> resultFinal = new ArrayList<>();
            for (CerNotaPedidoDetalle beanDetalle : result) {
                if (Optional.ofNullable(beanDetalle.getIndEliminado()).isPresent()) {
                    if (beanDetalle.getIndEliminado().equals(Constants.X)) {
                        continue;
                    }
                }
                resultFinal.add(beanDetalle);
            }
            return resultFinal;
        }
        return result;
    }


    protected Sort setFindAll(Sort sort) {
        sort = Sort.by(
                new Sort.Order(Sort.Direction.DESC, "cerNotaPedido.id")
        );
        return sort;
    }

    protected Sort setFind(CerNotaPedidoDetalle req, ExampleMatcher matcher, Example<CerNotaPedidoDetalle> example, Sort sort) {
        sort = Sort.by(
                new Sort.Order(Sort.Direction.DESC, "cerNotaPedido.id")
        );
        return sort;
    }

    protected void setFindPaginated(PageRequestByExample<CerNotaPedidoDetalle> req, ExampleMatcher matcher, Example<CerNotaPedidoDetalle> example) {
        return;
    }

    /****************/
    /* METODOS CRUD */
    /****************/

    protected String setValidacionesPrevias(CerNotaPedidoDetalle bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected CerNotaPedidoDetalle setCreate(CerNotaPedidoDetalle bean) throws Exception {
        return bean;
    }

    protected void setSave(CerNotaPedidoDetalle dto) throws Exception {
        return;
    }

    protected void setDelete(Integer id) throws Exception {

    }

    protected void setDeleteAll() throws Exception {

    }

    /************************/
    /* METODOS CRUD Masivos */
    /************************/

    protected CerNotaPedidoDetalle setUploadExcel(Cell currentCell, CerNotaPedidoDetalle cerNotaPedidoDetalle, int contador) throws Exception {
        cerNotaPedidoDetalle = super.setUploadExcel(currentCell, cerNotaPedidoDetalle, contador);
        return cerNotaPedidoDetalle;
    }

    protected String setSaveMasivo(CerNotaPedidoDetalle dto) throws Exception {
        return "";
    }

    protected List<CerNotaPedidoDetalle> setBeforeDeleteMasivo(List<CerNotaPedidoDetalle> listaDto) throws Exception {
        return listaDto;
    }

    protected void setAfterDeleteMasivo() throws Exception {
        return;
    }

    /*****************************/
    /* Metodos que generan Excel */
    /*****************************/

    protected void setDownloadExcelItem(CerNotaPedidoDetalle bean, HSSFRow dataRow) {

    }

    protected void setDownloadExcel(HSSFSheet sheet) {

    }

    /*****************/
    /* Otros Metodos */
    /*****************/



}

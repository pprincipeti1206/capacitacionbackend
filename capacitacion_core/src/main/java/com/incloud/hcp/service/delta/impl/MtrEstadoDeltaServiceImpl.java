/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntitydeltaDTOService.java.e.vm
 */
package com.incloud.hcp.service.delta.impl;

import com.incloud.hcp.common.enums.AppParametriaModuloEnum;
import com.incloud.hcp.domain.AppParametria;
import com.incloud.hcp.domain.MtrEstado;
import com.incloud.hcp.service.delta.MtrEstadoDeltaService;
import com.incloud.hcp.service.impl.MtrEstadoServiceImpl;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.utils.Constants;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.ss.usermodel.Cell;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

/**
 * A simple DTO Facility for MtrEstado.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public class MtrEstadoDeltaServiceImpl extends MtrEstadoServiceImpl implements MtrEstadoDeltaService {

    /**************************/
    /* Metodos Personalizados */
    /**************************/

    public List<MtrEstado> findEstadoFacturaRegistrado() throws Exception {
        List<MtrEstado> mtrEstadoList = getMtrEstadosParametria(
                AppParametriaModuloEnum.ESTADO_FACTURA_REGISTRADO.getEstado(),
                "Debe ingresar parametria de los Estados de Factura REGISTRADO (FAREGISTRADO)"
        );
        return mtrEstadoList;
    }

    public List<MtrEstado> findEstadoFacturaPublicado() throws Exception {
        List<MtrEstado> mtrEstadoList = getMtrEstadosParametria(
                AppParametriaModuloEnum.ESTADO_FACTURA_PUBLICADO.getEstado(),
                "Debe ingresar parametria de los Estados de Factura PUBLICADO (FAPUBLICADO)"
        );
        return mtrEstadoList;
    }

    public List<MtrEstado> findEstadoFacturaCupa() throws Exception {
        List<MtrEstado> mtrEstadoList = getMtrEstadosParametria(
                AppParametriaModuloEnum.ESTADO_FACTURA_CUPA.getEstado(),
                "Debe ingresar parametria de los Estados de Factura CUPA (FACUPA)"
        );
        return mtrEstadoList;
    }

    private List<MtrEstado> getMtrEstadosParametria(String tipoEstado, String errorDescripcion) throws Exception {
        List<AppParametria> appParametriaList = this.appParametriaDeltaRepository.findByModuloAndStatus(
                tipoEstado,
                Constants.UNO
        );
        if (appParametriaList == null || appParametriaList.size() <= 0) {
            throw new Exception(errorDescripcion);
        }
        List<MtrEstado> mtrEstadoList = new ArrayList<MtrEstado>();
        if (appParametriaList != null && appParametriaList.size() > 0) {
            for (AppParametria appParametria : appParametriaList) {
                String valor = appParametria.getValue2();
                MtrEstado mtrEstadoBean = this.mtrEstadoDeltaRepository.getByCodigoAgrupadoAndCodigoEstado(
                        Constants.CODIGO_AGRUPADO_FACTURA,
                        valor
                );
                mtrEstadoList.add(mtrEstadoBean);
            }
        }
        return mtrEstadoList;
    }



    /***********************/
    /* Metodos de Busqueda */
    /***********************/

    protected Sort setFindAll(Sort sort) {
        sort = Sort.by(
                new Sort.Order(Sort.Direction.ASC, "codigoAgrupado"),
                new Sort.Order(Sort.Direction.ASC, "codigoEstado"),
                new Sort.Order(Sort.Direction.ASC, "descripcion")
        );
        return sort;
    }

    protected Sort setFind(MtrEstado req, ExampleMatcher matcher, Example<MtrEstado> example, Sort sort) {
        sort = Sort.by(
                new Sort.Order(Sort.Direction.ASC, "codigoAgrupado"),
                new Sort.Order(Sort.Direction.ASC, "codigoEstado"),
                new Sort.Order(Sort.Direction.ASC, "descripcion")
        );
        return sort;
    }

    protected void setFindPaginated(PageRequestByExample<MtrEstado> req, ExampleMatcher matcher, Example<MtrEstado> example) {
        return;
    }

    /****************/
    /* METODOS CRUD */
    /****************/

    protected String setValidacionesPrevias(MtrEstado bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected MtrEstado setCreate(MtrEstado bean) throws Exception {
        return bean;
    }

    protected void setSave(MtrEstado dto) throws Exception {
        return;
    }

    protected void setDelete(Integer id) throws Exception {

    }

    protected void setDeleteAll() throws Exception {

    }

    /************************/
    /* METODOS CRUD Masivos */
    /************************/

    protected MtrEstado setUploadExcel(Cell currentCell, MtrEstado mtrEstado, int contador) throws Exception {
        mtrEstado = super.setUploadExcel(currentCell, mtrEstado, contador);
        return mtrEstado;
    }

    protected String setSaveMasivo(MtrEstado dto) throws Exception {
        return "";
    }

    protected List<MtrEstado> setBeforeDeleteMasivo(List<MtrEstado> listaDto) throws Exception {
        return listaDto;
    }

    protected void setAfterDeleteMasivo() throws Exception {
        return;
    }

    /*****************************/
    /* Metodos que generan Excel */
    /*****************************/

    protected void setDownloadExcelItem(MtrEstado bean, HSSFRow dataRow) {

    }

    protected void setDownloadExcel(HSSFSheet sheet) {

    }

    /*****************/
    /* Otros Metodos */
    /*****************/

}

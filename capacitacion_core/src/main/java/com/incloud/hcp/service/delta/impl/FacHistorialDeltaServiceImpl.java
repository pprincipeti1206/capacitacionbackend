/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 *
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntitydeltaDTOService.java.e.vm
 */
package com.incloud.hcp.service.delta.impl;

import com.incloud.hcp._security.UserSession;
import com.incloud.hcp.domain.FacFactura;
import com.incloud.hcp.domain.FacHistorial;
import com.incloud.hcp.domain.MtrEstado;
import com.incloud.hcp.domain.response.FacHistorialResponse;
import com.incloud.hcp.service.delta.FacHistorialDeltaService;
import com.incloud.hcp.service.dto.FacturaHistorialDto;
import com.incloud.hcp.service.impl.FacHistorialServiceImpl;
import com.incloud.hcp.service.support.PageRequestByExample;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.ss.usermodel.Cell;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.util.List;
import java.util.Optional;

/**
 * A simple DTO Facility for FacHistorial.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public class FacHistorialDeltaServiceImpl extends FacHistorialServiceImpl implements FacHistorialDeltaService {

    /**************************/
    /* Metodos Personalizados */
    /**************************/

    public FacHistorial addHistorial(FacturaHistorialDto facturaHistorialDto, UserSession user) throws Exception {
        FacHistorial facHistorial = new FacHistorial();
        FacFactura facFactura = this.facFacturaDeltaRepository.getOne(facturaHistorialDto.getCerFacturaId());
        if (!Optional.ofNullable(facFactura).isPresent()) {
            throw new Exception("No se encontró Factura con el ID: "+ facturaHistorialDto.getCerFacturaId()) ;
        }
//        FacEstadoCupa facEstadoCupa = this.facEstadoCupaDeltaRepository.getOne(1);
//        if (!Optional.ofNullable(facEstadoCupa).isPresent()) {
//            throw new Exception("No se encontró Factura Estado Cupa con el ID: 1") ;
//        }
//        facHistorial.setFacFactura(facFactura);
//        facHistorial.setFacEstadoCupa(facEstadoCupa);
//        facHistorial.setDescripcion(facturaHistorialDto.getDescripcion());
//        facHistorial.setUsuarioHistorial(user.getDisplayName());//Debe optenerlo de la session
//        facHistorial.setFechaHistorial(DateUtils.obtenerFechaHoraActual());
//
//        facHistorial = this.facHistorialDeltaRepository.save(facHistorial);
        return facHistorial;
    }

    /***********************/
    /* Metodos de Busqueda */
    /***********************/

    protected Sort setFindAll(Sort sort) {
        sort = Sort.by(
                new Sort.Order(Sort.Direction.ASC, "fechaHistorial")
        );
        return sort;
    }

    protected Sort setFind(FacHistorial req, ExampleMatcher matcher, Example<FacHistorial> example, Sort sort) {
        sort = Sort.by(
                new Sort.Order(Sort.Direction.ASC, "fechaHistorial")
        );
        return sort;
    }

    protected void setFindPaginated(PageRequestByExample<FacHistorial> req, ExampleMatcher matcher, Example<FacHistorial> example) {
        return;
    }

    protected List<Predicate> setAdicionalDeltaPredicate(List<Predicate> predicates, FacHistorialResponse bean, CriteriaBuilder cb,
                                                         CriteriaQuery<FacHistorial> query, Root<FacHistorial> root) {

        FacHistorial entity = bean.getBean();
        //Ejemplo
        /*
        if (Optional.ofNullable(entity.get<VariableManytoOne>()).isPresent()) {
            Join<FacHistorial, <ClaseManytoOne>> from<ClaseManytoOne> = countRoot.join("<variableManytoOne>", JoinType.INNER);

            if (Optional.ofNullable(entity.get<VariableManytoOne>().get<Atributo>()).isPresent()) {
                Join<FacHistorial, <ClaseManytoOne>> from<ClaseManytoOne> = countRoot.join("<variableManytoOne>", JoinType.INNER);
                Predicate thirdCondition = cb.equal(from<ClaseManytoOne>.get("<Atributo>"), entity.get<ClaseManytoOne>().get<Atributo>());
                predicates.add(thirdCondition);
            }

        }
        query.orderBy(cb.desc(root.get("<campo entity>")));
        */
        return predicates;
    }

    protected Root<FacHistorial> setAdicionalDeltaTotalPredicate(FacHistorialResponse bean, Root<FacHistorial> countRoot) {
        FacHistorial entity = bean.getBean();
        //Ejemplo
        /*
        if (Optional.ofNullable(entity.get<VariableManytoOne>()).isPresent()) {
            if (Optional.ofNullable(entity.get<VariableManytoOne>()).isPresent()) {
                Join<FacHistorial, <ClaseManytoOne>> from<ClaseManytoOne> = countRoot.join("<variableManytoOne>", JoinType.INNER);
            }
        }
        */
        return countRoot;
    }

    /****************/
    /* METODOS CRUD */
    /****************/

    protected String setValidacionesPrevias(FacHistorial bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected FacHistorial setCreate(FacHistorial bean) throws Exception {
        return bean;
    }

    protected void setSave(FacHistorial dto) throws Exception {
        return;
    }

    protected void setDelete(Integer id) throws Exception {

    }

    protected void setDeleteAll() throws Exception {

    }

    /************************/
    /* METODOS CRUD Masivos */
    /************************/

    protected FacHistorial setUploadExcel(Cell currentCell, FacHistorial facHistorial, int contador) throws Exception {
        facHistorial = super.setUploadExcel(currentCell, facHistorial, contador);
        return facHistorial;
    }

    protected String setSaveMasivo(FacHistorial dto) throws Exception {
        return "";
    }

    protected List<FacHistorial> setBeforeDeleteMasivo(List<FacHistorial> listaDto) throws Exception {
        return listaDto;
    }

    protected void setAfterDeleteMasivo() throws Exception {
        return;
    }

    /*****************************/
    /* Metodos que generan Excel */
    /*****************************/

    protected void setDownloadExcelItem(FacHistorial bean, HSSFRow dataRow) {

    }

    protected void setDownloadExcel(HSSFSheet sheet) {

    }

    /*****************/
    /* Otros Metodos */
    /*****************/

    protected String setGraphDescripcionByMtrEstado(MtrEstado mtrEstado) {
        return mtrEstado.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrEstado() {
        return "MtrEstado";
    }

    protected String setGraphBarChartTituloByMtrEstado() {
        return "MtrEstado";
    }

    protected String setGraphDescripcionByFacFactura(FacFactura facFactura) {
        return facFactura.getId().toString();
    }

    protected String setGraphPieChartTituloByFacFactura() {
        return "FacFactura";
    }

    protected String setGraphBarChartTituloByFacFactura() {
        return "FacFactura";
    }

}

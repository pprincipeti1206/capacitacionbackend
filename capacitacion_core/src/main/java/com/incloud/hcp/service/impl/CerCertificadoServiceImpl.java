/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.incloud.hcp.service.impl;

import com.incloud.hcp.common.enums.AppParametriaLabelEnum;
import com.incloud.hcp.common.enums.AppParametriaModuloEnum;
import com.incloud.hcp.common.excel.ExcelDefault;
import com.incloud.hcp.common.graph.GraphBarChart;
import com.incloud.hcp.common.graph.GraphBean;
import com.incloud.hcp.common.graph.GraphDataset;
import com.incloud.hcp.common.graph.GraphPieChart;
import com.incloud.hcp.domain.*;
import com.incloud.hcp.domain.response.CerCertificadoResponse;
import com.incloud.hcp.exception.ServiceException;
import com.incloud.hcp.repository.delta.*;
import com.incloud.hcp.service.CerCertificadoService;
import com.incloud.hcp.service._framework.bean.BeanCargaMasivoDTO;
import com.incloud.hcp.service._framework.bean.BeanListaMasivoDTO;
import com.incloud.hcp.service._framework.impl.JPACustomServiceImpl;
import com.incloud.hcp.service.delta.*;
import com.incloud.hcp.service.requireNew.CerCertificadoRequireNewService;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.utils.Constants;
import com.incloud.hcp.utils.DateUtils;
import com.incloud.hcp.utils.PredicateUtils;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

/**
 * A simple DTO Facility for CerCertificado.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public abstract class CerCertificadoServiceImpl extends JPACustomServiceImpl<CerCertificadoResponse, CerCertificado, Integer> implements CerCertificadoService {

    protected final String NAME_SHEET = "CerCertificado";
    protected final String CONFIG_TITLE = "com/incloud/hcp/excel/CerCertificadoExcel.xml";
    private final Integer REGISTROS_COLOR = 10;

    @Autowired
    protected AppParametriaDeltaRepository appParametriaDeltaRepository;

    @Autowired
    protected CerCertificadoDeltaRepository cerCertificadoDeltaRepository;

    @Autowired
    protected CerCertificadoRequireNewService cerCertificadoRequireNewService;

    @Autowired
    protected CerNotaPedidoDeltaService cerNotaPedidoDeltaService;

    @Autowired
    protected CerNotaPedidoDeltaRepository cerNotaPedidoDeltaRepository;

    @Autowired
    protected MtrProveedorDeltaService mtrProveedorDeltaService;

    @Autowired
    protected MtrProveedorDeltaRepository mtrProveedorDeltaRepository;

    @Autowired
    protected MtrSociedadDeltaService mtrSociedadDeltaService;

    @Autowired
    protected MtrSociedadDeltaRepository mtrSociedadDeltaRepository;

    @Autowired
    protected MtrMonedaDeltaService mtrMonedaDeltaService;

    @Autowired
    protected MtrMonedaDeltaRepository mtrMonedaDeltaRepository;

    @Autowired
    protected MtrClaseDocumentoDeltaService mtrClaseDocumentoDeltaService;

    @Autowired
    protected MtrClaseDocumentoDeltaRepository mtrClaseDocumentoDeltaRepository;

    @Autowired
    protected MtrEstadoDeltaService mtrEstadoDeltaService;

    @Autowired
    protected MtrEstadoDeltaRepository mtrEstadoDeltaRepository;

    @Autowired
    protected MtrCentroAlmacenDeltaService mtrCentroAlmacenDeltaService;

    @Autowired
    protected MtrCentroAlmacenDeltaRepository mtrCentroAlmacenDeltaRepository;

    /*****************************/
    /* Metodos de Busqueda       */
    /*****************************/

    protected final ExampleMatcher setAbstractFind(ExampleMatcher matcher) {
        matcher = ExampleMatcher.matching() //
                .withMatcher(CerCertificado_.codigoCertificado.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerCertificado_.concepto.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerCertificado_.descuentoh.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerCertificado_.grupoCompras.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerCertificado_.hojaServicio.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerCertificado_.lugarPrestServ.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerCertificado_.notasRechazo.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerCertificado_.observacion.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerCertificado_.respoExterno.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerCertificado_.solicitante.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerCertificado_.indTieneFactura.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerCertificado_.indCreacionAutomatica.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerCertificado_.nroGuiaRemision.getName(), match -> match.ignoreCase().startsWith());
        return matcher;
    }

    protected abstract Sort setFindAll(Sort sort);

    protected abstract Sort setFind(CerCertificado req, ExampleMatcher matcher, Example<CerCertificado> example, Sort sort);

    protected abstract void setFindPaginated(PageRequestByExample<CerCertificado> req, ExampleMatcher matcher, Example<CerCertificado> example);

    protected final CerCertificado setObtenerBeanResponse(CerCertificadoResponse bean) {
        return bean.getBean();
    }

    protected final Class<CerCertificado> setObtenerClassBean() {
        return CerCertificado.class;
    }

    protected List<Predicate> setAbstractPredicate(CerCertificadoResponse bean, CriteriaBuilder cb, Root<CerCertificado> root) {
        List<Predicate> predicates = new ArrayList<>();
        CerCertificado entity = bean.getBean();
        /* Obtener condiciones */
        PredicateUtils.addPredicates(predicates, bean.getIdCondicion(), "id", entity.getId(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getCodigoCertificadoCondicion(), "codigoCertificado", entity.getCodigoCertificado(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getConceptoCondicion(), "concepto", entity.getConcepto(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getDescuentohCondicion(), "descuentoh", entity.getDescuentoh(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getFechaAprobacionCondicion(), "fechaAprobacion", entity.getFechaAprobacion(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getFechaContabDocumentCondicion(), "fechaContabDocument", entity.getFechaContabDocument(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getFechaDesdeCondicion(), "fechaDesde", entity.getFechaDesde(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getFechaHastaCondicion(), "fechaHasta", entity.getFechaHasta(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getGrupoComprasCondicion(), "grupoCompras", entity.getGrupoCompras(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getHojaServicioCondicion(), "hojaServicio", entity.getHojaServicio(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getLugarPrestServCondicion(), "lugarPrestServ", entity.getLugarPrestServ(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getMontoCondicion(), "monto", entity.getMonto(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getMontoTotalCondicion(), "montoTotal", entity.getMontoTotal(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getMontoTotalAdjustadoCondicion(), "montoTotalAdjustado", entity.getMontoTotalAdjustado(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getNotasRechazoCondicion(), "notasRechazo", entity.getNotasRechazo(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getObservacionCondicion(), "observacion", entity.getObservacion(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getOcurrenciaCondicion(), "ocurrencia", entity.getOcurrencia(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getRespoExternoCondicion(), "respoExterno", entity.getRespoExterno(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getSolicitanteCondicion(), "solicitante", entity.getSolicitante(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getIndTieneFacturaCondicion(), "indTieneFactura", entity.getIndTieneFactura(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getIndCreacionAutomaticaCondicion(), "indCreacionAutomatica", entity.getIndCreacionAutomatica(), cb,
                root);
        PredicateUtils.addPredicates(predicates, bean.getFechaContabilizacionCondicion(), "fechaContabilizacion", entity.getFechaContabilizacion(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getNroGuiaRemisionCondicion(), "nroGuiaRemision", entity.getNroGuiaRemision(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getCerNotaPedidoCondicion(), "cerNotaPedido", entity.getCerNotaPedido(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrProveedorCondicion(), "mtrProveedor", entity.getMtrProveedor(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrSociedadCondicion(), "mtrSociedad", entity.getMtrSociedad(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrMonedaCondicion(), "mtrMoneda", entity.getMtrMoneda(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrClaseDocumentoCondicion(), "mtrClaseDocumento", entity.getMtrClaseDocumento(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrEstadoCondicion(), "mtrEstado", entity.getMtrEstado(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrCentroCondicion(), "mtrCentro", entity.getMtrCentro(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrAlmacenCondicion(), "mtrAlmacen", entity.getMtrAlmacen(), cb, root);
        /* Obtener valores de Lista */
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "id", bean.getIdList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "codigoCertificado", bean.getCodigoCertificadoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "concepto", bean.getConceptoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "descuentoh", bean.getDescuentohList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "fechaAprobacion", bean.getFechaAprobacionList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "fechaContabDocument", bean.getFechaContabDocumentList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "fechaDesde", bean.getFechaDesdeList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "fechaHasta", bean.getFechaHastaList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "grupoCompras", bean.getGrupoComprasList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "hojaServicio", bean.getHojaServicioList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "lugarPrestServ", bean.getLugarPrestServList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "monto", bean.getMontoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "montoTotal", bean.getMontoTotalList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "montoTotalAdjustado", bean.getMontoTotalAdjustadoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "notasRechazo", bean.getNotasRechazoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "observacion", bean.getObservacionList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "ocurrencia", bean.getOcurrenciaList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "respoExterno", bean.getRespoExternoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "solicitante", bean.getSolicitanteList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "indTieneFactura", bean.getIndTieneFacturaList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "indCreacionAutomatica", bean.getIndCreacionAutomaticaList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "fechaContabilizacion", bean.getFechaContabilizacionList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "nroGuiaRemision", bean.getNroGuiaRemisionList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "cerNotaPedido", bean.getCerNotaPedidoList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrProveedor", bean.getMtrProveedorList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrSociedad", bean.getMtrSociedadList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrMoneda", bean.getMtrMonedaList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrClaseDocumento", bean.getMtrClaseDocumentoList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrEstado", bean.getMtrEstadoList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrCentro", bean.getMtrCentroList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrAlmacen", bean.getMtrAlmacenList(), cb, root);
        return predicates;
    }

    /****************/
    /* METODOS CRUD */
    /****************/

    protected final String validacionesPrevias(CerCertificado bean) throws Exception {
        String mensaje = "";
        String msg = this.setValidacionesPrevias(bean);
        if (StringUtils.isNotBlank(msg)) {
            mensaje += "* " + msg + "<br/>";
        }
        return mensaje;
    }

    protected String setValidacionesPrevias(CerCertificado bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected String validacionesPreviasCreate(CerCertificado bean) throws Exception {
        String msg = null;
        CerCertificado validar = null;
        return msg;
    }

    protected String validacionesPreviasSave(CerCertificado bean) throws Exception {
        String msg = null;
        CerCertificado validar = null;
        return msg;
    }

    protected CerCertificado completarDatosBean(CerCertificado bean) throws Exception {
        BigDecimal data = new BigDecimal(0.00);
        if (Optional.ofNullable(bean.getMonto()).isPresent()) {
            bean.setMonto(bean.getMonto().setScale(2, BigDecimal.ROUND_HALF_UP));
        }
        if (Optional.ofNullable(bean.getMontoTotal()).isPresent()) {
            bean.setMontoTotal(bean.getMontoTotal().setScale(2, BigDecimal.ROUND_HALF_UP));
        }
        if (Optional.ofNullable(bean.getMontoTotalAdjustado()).isPresent()) {
            bean.setMontoTotalAdjustado(bean.getMontoTotalAdjustado().setScale(2, BigDecimal.ROUND_HALF_UP));
        }
        bean = this.setCompletarDatosBean(bean);
        return bean;
    }

    protected CerCertificado setCompletarDatosBean(CerCertificado bean) throws Exception {
        return bean;
    }

    protected final CerCertificado setAbstractCreate(CerCertificado dto) throws Exception {
        CerCertificado bean = new CerCertificado();
        bean = (CerCertificado) BeanUtils.cloneBean(dto);
        return bean;
    }

    /************************/
    /* METODOS CRUD Masivos */
    /************************/

    protected CerCertificado setUploadExcel(Cell currentCell, CerCertificado cerCertificado, int contador) throws Exception {
        Double valorDouble = new Double(0);
        BigDecimal valorDecimal = new BigDecimal(0);
        Boolean valorBoolean = new Boolean(true);
        String valorCadena = "";
        switch (contador) {
        case 1:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 30) {
                    throw new ServiceException("Valor Campo codigoCertificado contiene mas de 30 caracter(es)");
                }
                cerCertificado.setCodigoCertificado(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo codigoCertificado está en formato incorrecto");
            }
            break;
        case 2:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 4000) {
                    throw new ServiceException("Valor Campo concepto contiene mas de 4000 caracter(es)");
                }
                cerCertificado.setConcepto(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo concepto está en formato incorrecto");
            }
            break;
        case 3:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 100) {
                    throw new ServiceException("Valor Campo descuentoh contiene mas de 100 caracter(es)");
                }
                cerCertificado.setDescuentoh(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo descuentoh está en formato incorrecto");
            }
            break;
        case 4:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                cerCertificado.setFechaAprobacion(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo fechaAprobacion está en formato incorrecto");
            }
            break;
        case 5:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                cerCertificado.setFechaContabDocument(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo fechaContabDocument está en formato incorrecto");
            }
            break;
        case 6:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                cerCertificado.setFechaDesde(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo fechaDesde está en formato incorrecto");
            }
            break;
        case 7:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                cerCertificado.setFechaHasta(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo fechaHasta está en formato incorrecto");
            }
            break;
        case 8:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 100) {
                    throw new ServiceException("Valor Campo grupoCompras contiene mas de 100 caracter(es)");
                }
                cerCertificado.setGrupoCompras(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo grupoCompras está en formato incorrecto");
            }
            break;
        case 9:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 20) {
                    throw new ServiceException("Valor Campo hojaServicio contiene mas de 20 caracter(es)");
                }
                cerCertificado.setHojaServicio(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo hojaServicio está en formato incorrecto");
            }
            break;
        case 10:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 20) {
                    throw new ServiceException("Valor Campo lugarPrestServ contiene mas de 20 caracter(es)");
                }
                cerCertificado.setLugarPrestServ(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo lugarPrestServ está en formato incorrecto");
            }
            break;
        case 11:
            try {
                valorDecimal = new BigDecimal(currentCell.getNumericCellValue());
                cerCertificado.setMonto(valorDecimal);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo monto está en formato incorrecto");
            }
            break;
        case 12:
            try {
                valorDecimal = new BigDecimal(currentCell.getNumericCellValue());
                cerCertificado.setMontoTotal(valorDecimal);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo montoTotal está en formato incorrecto");
            }
            break;
        case 13:
            try {
                valorDecimal = new BigDecimal(currentCell.getNumericCellValue());
                cerCertificado.setMontoTotalAdjustado(valorDecimal);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo montoTotalAdjustado está en formato incorrecto");
            }
            break;
        case 14:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 20) {
                    throw new ServiceException("Valor Campo notasRechazo contiene mas de 20 caracter(es)");
                }
                cerCertificado.setNotasRechazo(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo notasRechazo está en formato incorrecto");
            }
            break;
        case 15:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 255) {
                    throw new ServiceException("Valor Campo observacion contiene mas de 255 caracter(es)");
                }
                cerCertificado.setObservacion(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo observacion está en formato incorrecto");
            }
            break;
        case 16:
            try {
                valorDouble = new Double(currentCell.getNumericCellValue());
                cerCertificado.setOcurrencia(valorDouble.intValue());
            } catch (Exception e) {
                throw new ServiceException("Valor Campo ocurrencia está en formato incorrecto");
            }
            break;
        case 17:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 40) {
                    throw new ServiceException("Valor Campo respoExterno contiene mas de 40 caracter(es)");
                }
                cerCertificado.setRespoExterno(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo respoExterno está en formato incorrecto");
            }
            break;
        case 18:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 100) {
                    throw new ServiceException("Valor Campo solicitante contiene mas de 100 caracter(es)");
                }
                cerCertificado.setSolicitante(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo solicitante está en formato incorrecto");
            }
            break;
        case 19:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 1) {
                    throw new ServiceException("Valor Campo indTieneFactura contiene mas de 1 caracter(es)");
                }
                cerCertificado.setIndTieneFactura(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo indTieneFactura está en formato incorrecto");
            }
            break;
        case 20:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 1) {
                    throw new ServiceException("Valor Campo indCreacionAutomatica contiene mas de 1 caracter(es)");
                }
                cerCertificado.setIndCreacionAutomatica(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo indCreacionAutomatica está en formato incorrecto");
            }
            break;
        case 21:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                cerCertificado.setFechaContabilizacion(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo fechaContabilizacion está en formato incorrecto");
            }
            break;
        case 22:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 25) {
                    throw new ServiceException("Valor Campo nroGuiaRemision contiene mas de 25 caracter(es)");
                }
                cerCertificado.setNroGuiaRemision(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo nroGuiaRemision está en formato incorrecto");
            }
            break;
        default:
            break;
        }
        return cerCertificado;
    }

    protected AppParametria setObtenerRegistroConfiguracionUploadExcel() {
        AppParametria appParametriaData = this.appParametriaDeltaRepository.getByModuloAndLabelAndStatus(AppParametriaModuloEnum.CARGA_EXCEL.getEstado(),
                AppParametriaLabelEnum.INICIO_REGISTRO_DATA.getEstado(), Constants.ESTADO_ACTIVO);
        return appParametriaData;
    }

    protected CerCertificado setInicializarBeanUpdateExcel() {
        CerCertificado bean = new CerCertificado();
        bean.setId(null);
        return bean;
    }

    protected final Integer setObtenerId(CerCertificado bean) {
        return bean.getId();
    }

    /************************/
    /* Instancia de Bean    */
    /************************/

    protected final CerCertificado createInstance() {
        CerCertificado cerCertificado = new CerCertificado();
        return cerCertificado;
    }

    protected final BeanCargaMasivoDTO<CerCertificado> createInstanceMasivoDTO() {
        BeanCargaMasivoDTO<CerCertificado> beanCargaMasivoDTO = new BeanCargaMasivoDTO<CerCertificado>();
        return beanCargaMasivoDTO;

    }

    protected final BeanListaMasivoDTO<BeanCargaMasivoDTO<CerCertificado>> createInstanceListaMasivoDTO() {
        BeanListaMasivoDTO<BeanCargaMasivoDTO<CerCertificado>> beanCargaMasivoDTOBeanListaMasivoDTO = new BeanListaMasivoDTO<BeanCargaMasivoDTO<CerCertificado>>();
        return beanCargaMasivoDTOBeanListaMasivoDTO;
    }

    /*****************************/
    /* Metodos que generan Excel */
    /*****************************/

    protected String devuelveNombreSheet() {
        return this.NAME_SHEET;
    }

    protected String devuelveListaHeaderExcelXML() {
        return this.CONFIG_TITLE;
    }

    protected int setAbstractDownloadExcel(CerCertificado bean, HSSFRow dataRow) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getCodigoCertificado(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getConcepto(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getDescuentoh(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getFechaAprobacion(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getFechaContabDocument(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getFechaDesde(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getFechaHasta(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getGrupoCompras(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getHojaServicio(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getLugarPrestServ(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getMonto(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getMontoTotal(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getMontoTotalAdjustado(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getNotasRechazo(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getObservacion(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getOcurrencia(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getRespoExterno(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getSolicitante(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getIndTieneFactura(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getIndCreacionAutomatica(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getFechaContabilizacion(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getNroGuiaRemision(), dataRow.createCell(contador));
        contador++;
        return contador;
    }

    protected int setAbstractDownloadExcelSXLSX(CerCertificado bean, Row dataRow, List<CellStyle> cellStyleList) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getCodigoCertificado(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getConcepto(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getDescuentoh(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getFechaAprobacion(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getFechaContabDocument(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getFechaDesde(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getFechaHasta(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getGrupoCompras(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getHojaServicio(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getLugarPrestServ(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getMonto(), dataRow.createCell(contador), "N", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getMontoTotal(), dataRow.createCell(contador), "N", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getMontoTotalAdjustado(), dataRow.createCell(contador), "N", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getNotasRechazo(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getObservacion(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getOcurrencia(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getRespoExterno(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getSolicitante(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getIndTieneFactura(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getIndCreacionAutomatica(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getFechaContabilizacion(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getNroGuiaRemision(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        return contador;
    }

    protected String setAbstractGenerateInsertExcelSXLSX(CerCertificado bean) {
        String fechaS = "";
        String sqlInsert = "INSERT INTO cer_certificado(";
        sqlInsert = sqlInsert + "cer_certificado_id" + ", ";
        sqlInsert = sqlInsert + "codigo_certificado" + ", ";
        sqlInsert = sqlInsert + "concepto" + ", ";
        sqlInsert = sqlInsert + "descuentoh" + ", ";
        sqlInsert = sqlInsert + "fecha_aprobacion" + ", ";
        sqlInsert = sqlInsert + "fecha_contab_document" + ", ";
        sqlInsert = sqlInsert + "fecha_desde" + ", ";
        sqlInsert = sqlInsert + "fecha_hasta" + ", ";
        sqlInsert = sqlInsert + "grupo_compras" + ", ";
        sqlInsert = sqlInsert + "hoja_servicio" + ", ";
        sqlInsert = sqlInsert + "lugar_prest_serv" + ", ";
        sqlInsert = sqlInsert + "monto" + ", ";
        sqlInsert = sqlInsert + "monto_total" + ", ";
        sqlInsert = sqlInsert + "monto_total_adjustado" + ", ";
        sqlInsert = sqlInsert + "notas_rechazo" + ", ";
        sqlInsert = sqlInsert + "observacion" + ", ";
        sqlInsert = sqlInsert + "ocurrencia" + ", ";
        sqlInsert = sqlInsert + "respo_externo" + ", ";
        sqlInsert = sqlInsert + "solicitante" + ", ";
        sqlInsert = sqlInsert + "ind_tiene_factura" + ", ";
        sqlInsert = sqlInsert + "ind_creacion_automatica" + ", ";
        sqlInsert = sqlInsert + "fecha_contabilizacion" + ", ";
        sqlInsert = sqlInsert + "nro_guia_remision" + ", ";
        sqlInsert = sqlInsert + "mtr_proveedor_id" + ", ";
        sqlInsert = sqlInsert + "cer_nota_pedido_id" + ", ";
        sqlInsert = sqlInsert + "mtr_sociedad_id" + ", ";
        sqlInsert = sqlInsert + "mtr_estado_id" + ", ";
        sqlInsert = sqlInsert + "mtr_moneda_id" + ", ";
        sqlInsert = sqlInsert + "mtr_clase_documento_id" + ", ";
        sqlInsert = sqlInsert + "mtr_centro_id" + ", ";
        sqlInsert = sqlInsert + "mtr_almacen_id" + ")";
        sqlInsert = sqlInsert + " VALUES (";
        sqlInsert = sqlInsert + bean.getId() + ", ";
        if (StringUtils.isBlank(bean.getCodigoCertificado())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getCodigoCertificado() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getConcepto())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getConcepto() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getDescuentoh())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getDescuentoh() + "'" + ", ";
        }
        if (bean.getFechaAprobacion() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaAprobacion());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        if (bean.getFechaContabDocument() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaContabDocument());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        if (bean.getFechaDesde() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaDesde());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        if (bean.getFechaHasta() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaHasta());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        if (StringUtils.isBlank(bean.getGrupoCompras())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getGrupoCompras() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getHojaServicio())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getHojaServicio() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getLugarPrestServ())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getLugarPrestServ() + "'" + ", ";
        }
        sqlInsert = sqlInsert + bean.getMonto() + ", ";
        sqlInsert = sqlInsert + bean.getMontoTotal() + ", ";
        sqlInsert = sqlInsert + bean.getMontoTotalAdjustado() + ", ";
        if (StringUtils.isBlank(bean.getNotasRechazo())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getNotasRechazo() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getObservacion())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getObservacion() + "'" + ", ";
        }
        sqlInsert = sqlInsert + bean.getOcurrencia() + ", ";
        if (StringUtils.isBlank(bean.getRespoExterno())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getRespoExterno() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getSolicitante())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getSolicitante() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getIndTieneFactura())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getIndTieneFactura() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getIndCreacionAutomatica())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getIndCreacionAutomatica() + "'" + ", ";
        }
        if (bean.getFechaContabilizacion() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaContabilizacion());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        if (StringUtils.isBlank(bean.getNroGuiaRemision())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getNroGuiaRemision() + "'" + ", ";
        }
        sqlInsert = sqlInsert + bean.getCerNotaPedido().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrProveedor().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrSociedad().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrMoneda().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrClaseDocumento().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrEstado().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrCentro().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrAlmacen().getId();
        sqlInsert = sqlInsert + " );";
        return sqlInsert;
    }

    /*****************/
    /* Otros Metodos */
    /*****************/

    public Long countByCerNotaPedido(CerNotaPedido cerNotaPedido) {
        return this.cerCertificadoDeltaRepository.countByCerNotaPedido(cerNotaPedido);
    }

    public GraphBean graphByCerNotaPedido() {
        List<CerNotaPedido> lista = this.cerNotaPedidoDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (CerNotaPedido bean : lista) {
            Long valor = this.cerCertificadoDeltaRepository.countByCerNotaPedido(bean);
            String descripcion = this.setGraphDescripcionByCerNotaPedido(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByCerNotaPedido();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByCerNotaPedido();
        contador = 0;
        contadorColor = 0;
        for (CerNotaPedido bean : lista) {
            Long valor = this.cerCertificadoDeltaRepository.countByCerNotaPedido(bean);
            String descripcion = this.setGraphDescripcionByCerNotaPedido(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByCerNotaPedido(CerNotaPedido cerNotaPedido) {
        return cerNotaPedido.getId().toString();
    }

    protected String setGraphPieChartTituloByCerNotaPedido() {
        return "CerNotaPedido";
    }

    protected String setGraphBarChartTituloByCerNotaPedido() {
        return "CerNotaPedido";
    }

    public Long countByMtrProveedor(MtrProveedor mtrProveedor) {
        return this.cerCertificadoDeltaRepository.countByMtrProveedor(mtrProveedor);
    }

    public GraphBean graphByMtrProveedor() {
        List<MtrProveedor> lista = this.mtrProveedorDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrProveedor bean : lista) {
            Long valor = this.cerCertificadoDeltaRepository.countByMtrProveedor(bean);
            String descripcion = this.setGraphDescripcionByMtrProveedor(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrProveedor();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrProveedor();
        contador = 0;
        contadorColor = 0;
        for (MtrProveedor bean : lista) {
            Long valor = this.cerCertificadoDeltaRepository.countByMtrProveedor(bean);
            String descripcion = this.setGraphDescripcionByMtrProveedor(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrProveedor(MtrProveedor mtrProveedor) {
        return mtrProveedor.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrProveedor() {
        return "MtrProveedor";
    }

    protected String setGraphBarChartTituloByMtrProveedor() {
        return "MtrProveedor";
    }

    public Long countByMtrSociedad(MtrSociedad mtrSociedad) {
        return this.cerCertificadoDeltaRepository.countByMtrSociedad(mtrSociedad);
    }

    public GraphBean graphByMtrSociedad() {
        List<MtrSociedad> lista = this.mtrSociedadDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrSociedad bean : lista) {
            Long valor = this.cerCertificadoDeltaRepository.countByMtrSociedad(bean);
            String descripcion = this.setGraphDescripcionByMtrSociedad(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrSociedad();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrSociedad();
        contador = 0;
        contadorColor = 0;
        for (MtrSociedad bean : lista) {
            Long valor = this.cerCertificadoDeltaRepository.countByMtrSociedad(bean);
            String descripcion = this.setGraphDescripcionByMtrSociedad(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrSociedad(MtrSociedad mtrSociedad) {
        return mtrSociedad.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrSociedad() {
        return "MtrSociedad";
    }

    protected String setGraphBarChartTituloByMtrSociedad() {
        return "MtrSociedad";
    }

    public Long countByMtrMoneda(MtrMoneda mtrMoneda) {
        return this.cerCertificadoDeltaRepository.countByMtrMoneda(mtrMoneda);
    }

    public GraphBean graphByMtrMoneda() {
        List<MtrMoneda> lista = this.mtrMonedaDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrMoneda bean : lista) {
            Long valor = this.cerCertificadoDeltaRepository.countByMtrMoneda(bean);
            String descripcion = this.setGraphDescripcionByMtrMoneda(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrMoneda();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrMoneda();
        contador = 0;
        contadorColor = 0;
        for (MtrMoneda bean : lista) {
            Long valor = this.cerCertificadoDeltaRepository.countByMtrMoneda(bean);
            String descripcion = this.setGraphDescripcionByMtrMoneda(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrMoneda(MtrMoneda mtrMoneda) {
        return mtrMoneda.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrMoneda() {
        return "MtrMoneda";
    }

    protected String setGraphBarChartTituloByMtrMoneda() {
        return "MtrMoneda";
    }

    public Long countByMtrClaseDocumento(MtrClaseDocumento mtrClaseDocumento) {
        return this.cerCertificadoDeltaRepository.countByMtrClaseDocumento(mtrClaseDocumento);
    }

    public GraphBean graphByMtrClaseDocumento() {
        List<MtrClaseDocumento> lista = this.mtrClaseDocumentoDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrClaseDocumento bean : lista) {
            Long valor = this.cerCertificadoDeltaRepository.countByMtrClaseDocumento(bean);
            String descripcion = this.setGraphDescripcionByMtrClaseDocumento(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrClaseDocumento();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrClaseDocumento();
        contador = 0;
        contadorColor = 0;
        for (MtrClaseDocumento bean : lista) {
            Long valor = this.cerCertificadoDeltaRepository.countByMtrClaseDocumento(bean);
            String descripcion = this.setGraphDescripcionByMtrClaseDocumento(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrClaseDocumento(MtrClaseDocumento mtrClaseDocumento) {
        return mtrClaseDocumento.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrClaseDocumento() {
        return "MtrClaseDocumento";
    }

    protected String setGraphBarChartTituloByMtrClaseDocumento() {
        return "MtrClaseDocumento";
    }

    public Long countByMtrEstado(MtrEstado mtrEstado) {
        return this.cerCertificadoDeltaRepository.countByMtrEstado(mtrEstado);
    }

    public GraphBean graphByMtrEstado() {
        List<MtrEstado> lista = this.mtrEstadoDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrEstado bean : lista) {
            Long valor = this.cerCertificadoDeltaRepository.countByMtrEstado(bean);
            String descripcion = this.setGraphDescripcionByMtrEstado(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrEstado();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrEstado();
        contador = 0;
        contadorColor = 0;
        for (MtrEstado bean : lista) {
            Long valor = this.cerCertificadoDeltaRepository.countByMtrEstado(bean);
            String descripcion = this.setGraphDescripcionByMtrEstado(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrEstado(MtrEstado mtrEstado) {
        return mtrEstado.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrEstado() {
        return "MtrEstado";
    }

    protected String setGraphBarChartTituloByMtrEstado() {
        return "MtrEstado";
    }



}

/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntitydeltaDTOService.java.e.vm
 */
package com.incloud.hcp.service.delta.impl;

import com.incloud.hcp._security.UserSession;
import com.incloud.hcp.domain.*;
import com.incloud.hcp.repository.delta.*;
import com.incloud.hcp.service.delta.CerFirmaDeltaService;
import com.incloud.hcp.service.dto.CerFirmaCertificadoSalidaDto;
import com.incloud.hcp.service.dto.CerFirmaEntradaDto;
import com.incloud.hcp.service.impl.CerFirmaServiceImpl;
import com.incloud.hcp.service.support.PageRequestByExample;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.ss.usermodel.Cell;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * A simple DTO Facility for CerFirma.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public class CerFirmaDeltaServiceImpl extends CerFirmaServiceImpl implements CerFirmaDeltaService {

    @Autowired
    private MtrAprobadorDeltaRepository mtrAprobadorDeltaRepository;

    @Autowired
    private MtrEstadoDeltaRepository mtrEstadoDeltaRepository;

    @Autowired
    private MtrTipoFirmaDeltaRepository mtrTipoFirmaDeltaRepository;

    @Autowired
    private CerCertificadoDeltaRepository cerCertificadoDeltaRepository;

    @Autowired
    private CerCertificadoFirmaDeltaRepository cerCertificadoFirmaDeltaRepository;

    /**************************/
    /* Metodos Personalizados */
    /**************************/

    public List<CerFirma> findByPorAprobador(CerFirmaEntradaDto cerFirmaEntradaDto) throws Exception {
        UserSession userSession = cerFirmaEntradaDto.getUserSession();
        List<MtrAprobador> mtrAprobadorList = this.mtrAprobadorDeltaRepository.findByCodigoIdp(userSession.getId());
        if (mtrAprobadorList == null || mtrAprobadorList.size() <= 0) {
            throw new Exception("No se encontró Aprobador con Código IDP: " + userSession.getId());
        }
        MtrAprobador mtrAprobador = mtrAprobadorList.get(0);
        log.error("Ingresando findByPorAprobador mtrAprobador :" + mtrAprobador.toString());

        MtrEstado mtrEstado = this.mtrEstadoDeltaRepository.getByCodigoAgrupadoAndCodigoEstado(
                cerFirmaEntradaDto.getCodigoAgrupadoEstado(),
                cerFirmaEntradaDto.getCodigoEstado());
        if (!Optional.ofNullable(mtrEstado).isPresent()) {
            throw new Exception(
                    "No se encontró Estado con Código Agrupado: " +
                            cerFirmaEntradaDto.getCodigoAgrupadoEstado() +
                            " y Código Estado: " + cerFirmaEntradaDto.getCodigoEstado()
            );
        }
        log.error("Ingresando findByPorAprobador mtrEstado :" + mtrEstado.toString());

        MtrTipoFirma mtrTipoFirma = this.mtrTipoFirmaDeltaRepository.
                getByCodigoTipoFirma(cerFirmaEntradaDto.getCodigoTipoFirma());
        if (!Optional.ofNullable(mtrTipoFirma).isPresent()) {
            throw new Exception("No se ingresó Tipo de Firma con Código: " + cerFirmaEntradaDto.getCodigoTipoFirma());
        }
        log.error("Ingresando findByPorAprobador mtrTipoFirma :" + mtrTipoFirma.toString());

        List<CerCertificado> cerCertificadoList = this.cerCertificadoDeltaRepository.findByMtrEstado(mtrEstado);
        List<CerFirma> cerFirmaList = new ArrayList<CerFirma>();
        if (cerCertificadoList != null & cerCertificadoList.size() > 0) {
            List<CerNotaPedido> cerNotaPedidoList = new ArrayList<CerNotaPedido>();

            for(CerCertificado bean: cerCertificadoList) {
                cerNotaPedidoList.add(bean.getCerNotaPedido());
            }
            log.error("Ingresando findByPorAprobador cerCertificadoList :" + cerCertificadoList.size());
            cerFirmaList = this.cerFirmaDeltaRepository.
                    findByCerNotaPedidoInAndMtrAprobadorAndMtrTipoFirma(
                            cerNotaPedidoList,
                            mtrAprobador,
                            mtrTipoFirma);
        }
        return cerFirmaList;
    }

    public List<CerFirmaCertificadoSalidaDto> findByPorAprobadorCertificado(CerFirmaEntradaDto cerFirmaEntradaDto) throws Exception {
        UserSession userSession = cerFirmaEntradaDto.getUserSession();
        List<MtrAprobador> mtrAprobadorList = this.mtrAprobadorDeltaRepository.findByCodigoIdp(userSession.getId());
        if (mtrAprobadorList == null || mtrAprobadorList.size() <= 0) {
            throw new Exception("No se encontró Aprobador con Código IDP: " + userSession.getId());
        }
        MtrAprobador mtrAprobador = mtrAprobadorList.get(0);
        log.error("Ingresando findByPorAprobador mtrAprobador :" + mtrAprobador.toString());

        MtrEstado mtrEstado = this.mtrEstadoDeltaRepository.getByCodigoAgrupadoAndCodigoEstado(
                cerFirmaEntradaDto.getCodigoAgrupadoEstado(),
                cerFirmaEntradaDto.getCodigoEstado());
        if (!Optional.ofNullable(mtrEstado).isPresent()) {
            throw new Exception(
                    "No se encontró Estado con Código Agrupado: " +
                            cerFirmaEntradaDto.getCodigoAgrupadoEstado() +
                            " y Código Estado: " + cerFirmaEntradaDto.getCodigoEstado()
            );
        }
        log.error("Ingresando findByPorAprobador mtrEstado :" + mtrEstado.toString());

        MtrTipoFirma mtrTipoFirma = this.mtrTipoFirmaDeltaRepository.
                getByCodigoTipoFirma(cerFirmaEntradaDto.getCodigoTipoFirma());
        if (!Optional.ofNullable(mtrTipoFirma).isPresent()) {
            throw new Exception("No se ingresó Tipo de Firma con Código: " + cerFirmaEntradaDto.getCodigoTipoFirma());
        }
        log.error("Ingresando findByPorAprobador mtrTipoFirma :" + mtrTipoFirma.toString());

        List<CerFirmaCertificadoSalidaDto> cerFirmaCertificadoSalidaDtoList = new ArrayList<CerFirmaCertificadoSalidaDto>();
        List<CerFirma> cerFirmaList = this.cerFirmaDeltaRepository.findByMtrAprobadorAndMtrTipoFirmaVigentes(
                mtrAprobador.getId(),
                mtrTipoFirma.getId()
        );
        if (cerFirmaList != null & cerFirmaList.size() > 0) {
            for (CerFirma bean : cerFirmaList) {
                CerNotaPedido cerNotaPedido = bean.getCerNotaPedido();
                List<CerCertificado> cerCertificadoList = this.cerCertificadoDeltaRepository.findByNotaPedidoEstado(
                        cerNotaPedido.getId(),
                        mtrEstado.getId()
                );
                if (cerCertificadoList != null & cerCertificadoList.size() > 0) {
                    for (CerCertificado beanCertificado : cerCertificadoList) {
                        CerFirmaCertificadoSalidaDto beanSalidaDto = new CerFirmaCertificadoSalidaDto();
                        beanSalidaDto.setCerCertificado(beanCertificado);
                        beanSalidaDto.setCerFirma(bean);
                        cerFirmaCertificadoSalidaDtoList.add(beanSalidaDto);
                    }
                }
            }
        }
        return cerFirmaCertificadoSalidaDtoList;
    }

    /***********************/
    /* Metodos de Busqueda */
    /***********************/

    protected Sort setFindAll(Sort sort) {
        sort = Sort.by(new Sort.Order(Sort.Direction.ASC, "ebeln"));
        return sort;
    }

    protected Sort setFind(CerFirma req, ExampleMatcher matcher, Example<CerFirma> example, Sort sort) {
        sort = Sort.by(new Sort.Order(Sort.Direction.ASC, "ebeln"));
        return sort;
    }

    protected void setFindPaginated(PageRequestByExample<CerFirma> req, ExampleMatcher matcher, Example<CerFirma> example) {
        return;
    }

    /****************/
    /* METODOS CRUD */
    /****************/

    protected String setValidacionesPrevias(CerFirma bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected CerFirma setCreate(CerFirma bean) throws Exception {
        return bean;
    }

    protected void setSave(CerFirma dto) throws Exception {
        return;
    }

    protected void setDelete(Integer id) throws Exception {

    }

    protected void setDeleteAll() throws Exception {

    }

    /************************/
    /* METODOS CRUD Masivos */
    /************************/

    protected CerFirma setUploadExcel(Cell currentCell, CerFirma cerFirma, int contador) throws Exception {
        cerFirma = super.setUploadExcel(currentCell, cerFirma, contador);
        return cerFirma;
    }

    protected String setSaveMasivo(CerFirma dto) throws Exception {
        return "";
    }

    protected List<CerFirma> setBeforeDeleteMasivo(List<CerFirma> listaDto) throws Exception {
        return listaDto;
    }

    protected void setAfterDeleteMasivo() throws Exception {
        return;
    }

    /*****************************/
    /* Metodos que generan Excel */
    /*****************************/

    protected void setDownloadExcelItem(CerFirma bean, HSSFRow dataRow) {

    }

    protected void setDownloadExcel(HSSFSheet sheet) {

    }

    /*****************/
    /* Otros Metodos */
    /*****************/

    protected String setGraphDescripcionByCerNotaPedido(CerNotaPedido cerNotaPedido) {
        return cerNotaPedido.getId().toString();
    }

    protected String setGraphPieChartTituloByCerNotaPedido() {
        return "CerNotaPedido";
    }

    protected String setGraphBarChartTituloByCerNotaPedido() {
        return "CerNotaPedido";
    }

    protected String setGraphDescripcionByMtrAprobador(MtrAprobador mtrAprobador) {
        return mtrAprobador.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrAprobador() {
        return "MtrAprobador";
    }

    protected String setGraphBarChartTituloByMtrAprobador() {
        return "MtrAprobador";
    }

    protected String setGraphDescripcionByMtrTipoFirma(MtrTipoFirma mtrTipoFirma) {
        return mtrTipoFirma.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrTipoFirma() {
        return "MtrTipoFirma";
    }

    protected String setGraphBarChartTituloByMtrTipoFirma() {
        return "MtrTipoFirma";
    }

}

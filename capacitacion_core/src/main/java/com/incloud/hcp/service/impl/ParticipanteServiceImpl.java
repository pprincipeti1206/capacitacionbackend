/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.incloud.hcp.service.impl;

import com.incloud.hcp.common.excel.ExcelDefault;
import com.incloud.hcp.domain.Participante;
import com.incloud.hcp.domain.Participante_;
import com.incloud.hcp.domain.response.ParticipanteResponse;
import com.incloud.hcp.exception.ServiceException;
import com.incloud.hcp.repository.delta.AppParametriaDeltaRepository;
import com.incloud.hcp.repository.delta.ParticipanteDeltaRepository;
import com.incloud.hcp.service.ParticipanteService;
import com.incloud.hcp.service._framework.bean.BeanCargaMasivoDTO;
import com.incloud.hcp.service._framework.bean.BeanListaMasivoDTO;
import com.incloud.hcp.service._framework.impl.JPACustomServiceImpl;
import com.incloud.hcp.service.requireNew.ParticipanteRequireNewService;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.utils.PredicateUtils;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * A simple DTO Facility for Participante.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public abstract class ParticipanteServiceImpl extends JPACustomServiceImpl<ParticipanteResponse, Participante, Integer> implements ParticipanteService {

    protected final String NAME_SHEET = "Participante";
    protected final String CONFIG_TITLE = "com/incloud/hcp/excel/ParticipanteExcel.xml";
    private final Integer REGISTROS_COLOR = 10;

    @Autowired
    protected AppParametriaDeltaRepository appParametriaDeltaRepository;

    @Autowired
    protected ParticipanteDeltaRepository participanteDeltaRepository;

    @Autowired
    protected ParticipanteRequireNewService participanteRequireNewService;

    /*****************************/
    /* Metodos de Busqueda       */
    /*****************************/

    protected final ExampleMatcher setAbstractFind(ExampleMatcher matcher) {
        matcher = ExampleMatcher.matching() //
                .withMatcher(Participante_.nombre.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(Participante_.apellido.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(Participante_.sexo.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(Participante_.profesion.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(Participante_.rol.getName(), match -> match.ignoreCase().startsWith());
        return matcher;
    }

    protected abstract Sort setFindAll(Sort sort);

    protected abstract Sort setFind(Participante req, ExampleMatcher matcher, Example<Participante> example, Sort sort);

    protected abstract void setFindPaginated(PageRequestByExample<Participante> req, ExampleMatcher matcher, Example<Participante> example);

    protected final Participante setObtenerBeanResponse(ParticipanteResponse bean) {
        return bean.getBean();
    }

    protected final Class<Participante> setObtenerClassBean() {
        return Participante.class;
    }

    protected List<Predicate> setAbstractPredicate(ParticipanteResponse bean, CriteriaBuilder cb, Root<Participante> root) {
        List<Predicate> predicates = new ArrayList<>();
        Participante entity = bean.getBean();
        /* Obtener condiciones */
        PredicateUtils.addPredicates(predicates, bean.getIdCondicion(), "id", entity.getId(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getNombreCondicion(), "nombre", entity.getNombre(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getApellidoCondicion(), "apellido", entity.getApellido(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getSexoCondicion(), "sexo", entity.getSexo(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getEdadCondicion(), "edad", entity.getEdad(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getProfesionCondicion(), "profesion", entity.getProfesion(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getRolCondicion(), "rol", entity.getRol(), cb, root);
        /* Obtener valores de Lista */
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "id", bean.getIdList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "nombre", bean.getNombreList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "apellido", bean.getApellidoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "sexo", bean.getSexoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "edad", bean.getEdadList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "profesion", bean.getProfesionList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "rol", bean.getRolList(), cb, root);
        return predicates;
    }

    /****************/
    /* METODOS CRUD */
    /****************/

    protected final String validacionesPrevias(Participante bean) throws Exception {
        String mensaje = "";
        if (!Optional.of(bean.getNombre()).isPresent()) {
            String msg = this.messageSource.getMessage("message.participante.nombre.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getApellido()).isPresent()) {
            String msg = this.messageSource.getMessage("message.participante.apellido.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getSexo()).isPresent()) {
            String msg = this.messageSource.getMessage("message.participante.sexo.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getEdad()).isPresent()) {
            String msg = this.messageSource.getMessage("message.participante.edad.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getRol()).isPresent()) {
            String msg = this.messageSource.getMessage("message.participante.rol.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        String msg = this.setValidacionesPrevias(bean);
        if (StringUtils.isNotBlank(msg)) {
            mensaje += "* " + msg + "<br/>";
        }
        return mensaje;
    }

    protected String setValidacionesPrevias(Participante bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected String validacionesPreviasCreate(Participante bean) throws Exception {
        String msg = null;
        Participante validar = null;
        return msg;
    }

    protected String validacionesPreviasSave(Participante bean) throws Exception {
        String msg = null;
        Participante validar = null;
        return msg;
    }

    protected Participante completarDatosBean(Participante bean) throws Exception {
        BigDecimal data = new BigDecimal(0.00);
        bean = this.setCompletarDatosBean(bean);
        return bean;
    }

    protected Participante setCompletarDatosBean(Participante bean) throws Exception {
        return bean;
    }

    protected final Participante setAbstractCreate(Participante dto) throws Exception {
        Participante bean = new Participante();
        bean = (Participante) BeanUtils.cloneBean(dto);
        return bean;
    }

    /************************/
    /* METODOS CRUD Masivos */
    /************************/

    protected Participante setUploadExcel(Cell currentCell, Participante participante, int contador) throws Exception {
        Double valorDouble = new Double(0);
        BigDecimal valorDecimal = new BigDecimal(0);
        Boolean valorBoolean = new Boolean(true);
        String valorCadena = "";
        switch (contador) {
        case 1:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 50) {
                    throw new ServiceException("Valor Campo nombre contiene mas de 50 caracter(es)");
                }
                participante.setNombre(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo nombre estÃ¡ en formato incorrecto");
            }
            break;
        case 2:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 150) {
                    throw new ServiceException("Valor Campo apellido contiene mas de 150 caracter(es)");
                }
                participante.setApellido(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo apellido estÃ¡ en formato incorrecto");
            }
            break;
        case 3:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 1) {
                    throw new ServiceException("Valor Campo sexo contiene mas de 1 caracter(es)");
                }
                participante.setSexo(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo sexo estÃ¡ en formato incorrecto");
            }
            break;
        case 4:
            try {
                valorDouble = new Double(currentCell.getNumericCellValue());
                participante.setEdad(valorDouble.intValue());
            } catch (Exception e) {
                throw new ServiceException("Valor Campo edad estÃ¡ en formato incorrecto");
            }
            break;
        case 5:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 50) {
                    throw new ServiceException("Valor Campo profesion contiene mas de 50 caracter(es)");
                }
                participante.setProfesion(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo profesion estÃ¡ en formato incorrecto");
            }
            break;
        case 6:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 1) {
                    throw new ServiceException("Valor Campo rol contiene mas de 1 caracter(es)");
                }
                participante.setRol(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo rol estÃ¡ en formato incorrecto");
            }
            break;
        default:
            break;
        }
        return participante;
    }



    protected Participante setInicializarBeanUpdateExcel() {
        Participante bean = new Participante();
        bean.setId(null);
        return bean;
    }

    protected final Integer setObtenerId(Participante bean) {
        return bean.getId();
    }

    /************************/
    /* Instancia de Bean    */
    /************************/

    protected final Participante createInstance() {
        Participante participante = new Participante();
        return participante;
    }

    protected final BeanCargaMasivoDTO<Participante> createInstanceMasivoDTO() {
        BeanCargaMasivoDTO<Participante> beanCargaMasivoDTO = new BeanCargaMasivoDTO<Participante>();
        return beanCargaMasivoDTO;

    }

    protected final BeanListaMasivoDTO<BeanCargaMasivoDTO<Participante>> createInstanceListaMasivoDTO() {
        BeanListaMasivoDTO<BeanCargaMasivoDTO<Participante>> beanCargaMasivoDTOBeanListaMasivoDTO = new BeanListaMasivoDTO<BeanCargaMasivoDTO<Participante>>();
        return beanCargaMasivoDTOBeanListaMasivoDTO;
    }

    /*****************************/
    /* Metodos que generan Excel */
    /*****************************/

    protected String devuelveNombreSheet() {
        return this.NAME_SHEET;
    }

    protected String devuelveListaHeaderExcelXML() {
        return this.CONFIG_TITLE;
    }

    protected int setAbstractDownloadExcel(Participante bean, HSSFRow dataRow) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getNombre(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getApellido(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getSexo(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getEdad(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getProfesion(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getRol(), dataRow.createCell(contador));
        contador++;
        return contador;
    }

    protected int setAbstractDownloadExcelSXLSX(Participante bean, Row dataRow, List<CellStyle> cellStyleList) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getNombre(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getApellido(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getSexo(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getEdad(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getProfesion(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getRol(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        return contador;
    }

    protected String setAbstractGenerateInsertExcelSXLSX(Participante bean) {
        String fechaS = "";
        String sqlInsert = "INSERT INTO PARTICIPANTE(";
        sqlInsert = sqlInsert + "PARTICIPANTE_ID" + ", ";
        sqlInsert = sqlInsert + "NOMBRE" + ", ";
        sqlInsert = sqlInsert + "APELLIDO" + ", ";
        sqlInsert = sqlInsert + "SEXO" + ", ";
        sqlInsert = sqlInsert + "EDAD" + ", ";
        sqlInsert = sqlInsert + "PROFESION" + ", ";
        sqlInsert = sqlInsert + "ROL" + ")";
        sqlInsert = sqlInsert + " VALUES (";
        sqlInsert = sqlInsert + bean.getId() + ", ";
        if (StringUtils.isBlank(bean.getNombre())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getNombre() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getApellido())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getApellido() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getSexo())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getSexo() + "'" + ", ";
        }
        sqlInsert = sqlInsert + bean.getEdad() + ", ";
        if (StringUtils.isBlank(bean.getProfesion())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getProfesion() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getRol())) {
            sqlInsert = sqlInsert + "null";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getRol() + "'";
        }
        sqlInsert = sqlInsert + " );";
        return sqlInsert;
    }

    /*****************/
    /* Otros Metodos */
    /*****************/

}

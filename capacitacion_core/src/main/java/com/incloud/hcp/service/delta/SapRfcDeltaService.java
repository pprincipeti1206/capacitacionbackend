/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntitydeltaDTO.java.e.vm
 */
package com.incloud.hcp.service.delta;

import com.incloud.hcp.bean.custom.*;
import com.incloud.hcp.domain.CerCertificado;
import com.incloud.hcp.domain.FacFactura;
import com.incloud.hcp.domain.FacImputacion;
import com.incloud.hcp.service.SapRfcService;

import java.util.Date;
import java.util.List;

/**
 * Simple Interface for AppParametria.
 */
public interface SapRfcDeltaService extends SapRfcService {
   ContabilizacionComprobanteOutput generaContablizacionComprobante (ContabilizacionInput input, FacFactura bean, List<FacImputacion> beanListaImputacion, String docStatus) throws Exception;
   List<TipoCambioBean> listaTipoCambio(Date fecha);
   List<DescargaServicioSap> listaDescarga(List<RangeSap> rangeDoc, List<RangeSap> rangeFecha);
   List<DescargaServicioSap> listaDescargaDetalle(List<RangeSap> rangeDoc, List<RangeSap> rangeFecha);
   List<RemitoOutSap> creacionHes(List<RemitoInSap> listaIn);
   List<RemitoOutSap> crearHes(List<RemitoInSap> listaIn) throws Exception;
   List<MensajeSap> validarPresupuesto (CerCertificado certificado) throws Exception;
   List<MensajeSap> validarPresupuestoFacturacion (
           FacFactura facFactura,
           List<FacImputacion> facImputacionList) throws Exception;
   List<TextClaseDocSap> listaClaseDocumentos();
   List<CentroSap> listaCentroSap(String bukrs);
   List<CentroAlmacenSap> listaCentroAlmacen(String sociedad);
    List<MensajeSap> integrarUnidadMedida();
   List<MensajeSap> integrarGrupoArticulos(String piMatkl);
   List<MensajeSap> integrarServicios(String fechaInicial, String fechaFinal);
   List<MensajeSap> integrarMateriales(String fechaInicial, String fechaFinal);
   List<MensajeSap> integrarProveedor(String fechaInicial, String fechaFinal, String lifnr);
   MensajeSap integrarAprobadores();
   List<DescargaServicioSap> integraTextosPedido(List<RangeSap> rangeDoc, List<RangeSap> rangeFecha);

   List<MensajeSap> integrarCuentaImputacion(Integer rangoMenor, Integer rangoMayor, String tipoImputacion, String codigoSap);

   List<MensajeSap> integrarCuentaMayor(Integer rangoMenor, Integer rangoMayor, String codigoSap);
   MensajeSap integrarNotaPedido(List<RangeSap> rangeDoc, List<RangeSap> rangeFecha, String enviarCorreo) throws Exception;

   PreRegistroOutput preRegistroFactura(PreRegistroInput registro) throws Exception;
   List<ComprobantePagoSap> obtenerComprobantesPago(List<IndicadorFiscalSap> listaIndicadorFiscalSap, List<RangeSap> listaFechaRegistro, List<RangeSap> listaClaseDocumento);
   List<ComprobantePagoSap> obtenerComprobantesPagoV2(List<RangeSap> listaSociedad, List<RangeSap> listaClaseDocumento, List<RangeSap> listaFechaRegistro);
   ContabilizacionPreliminarOutput contabilizarDocumentoPreliminar(String nroDocumento, String sociedad, String annio, String flagConta, String flagAnula) throws Exception;;
}

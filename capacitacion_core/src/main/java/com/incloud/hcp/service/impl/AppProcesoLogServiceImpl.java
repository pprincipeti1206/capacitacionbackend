/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.incloud.hcp.service.impl;

import com.incloud.hcp.common.enums.AppParametriaLabelEnum;
import com.incloud.hcp.common.enums.AppParametriaModuloEnum;
import com.incloud.hcp.common.excel.ExcelDefault;
import com.incloud.hcp.domain.AppParametria;
import com.incloud.hcp.domain.AppProcesoLog;
import com.incloud.hcp.domain.AppProcesoLog_;
import com.incloud.hcp.domain.response.AppProcesoLogResponse;
import com.incloud.hcp.exception.ServiceException;
import com.incloud.hcp.repository.delta.AppParametriaDeltaRepository;
import com.incloud.hcp.repository.delta.AppProcesoLogDeltaRepository;
import com.incloud.hcp.service.AppProcesoLogService;
import com.incloud.hcp.service._framework.bean.BeanCargaMasivoDTO;
import com.incloud.hcp.service._framework.bean.BeanListaMasivoDTO;
import com.incloud.hcp.service._framework.impl.JPACustomServiceImpl;
import com.incloud.hcp.service.requireNew.AppProcesoLogRequireNewService;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.utils.Constants;
import com.incloud.hcp.utils.DateUtils;
import com.incloud.hcp.utils.PredicateUtils;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * A simple DTO Facility for AppProcesoLog.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public abstract class AppProcesoLogServiceImpl extends JPACustomServiceImpl<AppProcesoLogResponse, AppProcesoLog, Integer> implements AppProcesoLogService {

    protected final String NAME_SHEET = "AppProcesoLog";
    protected final String CONFIG_TITLE = "com/incloud/hcp/excel/AppProcesoLogExcel.xml";
    private final Integer REGISTROS_COLOR = 10;

    @Autowired
    protected AppParametriaDeltaRepository appParametriaDeltaRepository;

    @Autowired
    protected AppProcesoLogDeltaRepository appProcesoLogDeltaRepository;

    @Autowired
    protected AppProcesoLogRequireNewService appProcesoLogRequireNewService;

    /*****************************/
    /* Metodos de Busqueda       */
    /*****************************/

    protected final ExampleMatcher setAbstractFind(ExampleMatcher matcher) {
        matcher = ExampleMatcher.matching() //
                .withMatcher(AppProcesoLog_.estadoEjecucion.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(AppProcesoLog_.descripcionEstadoEjecucion.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(AppProcesoLog_.modulo.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(AppProcesoLog_.claseProgramacion.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(AppProcesoLog_.metodoProgramacion.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(AppProcesoLog_.parametroEntrada.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(AppProcesoLog_.resultadoSalida.getName(), match -> match.ignoreCase().startsWith());
        return matcher;
    }

    protected abstract Sort setFindAll(Sort sort);

    protected abstract Sort setFind(AppProcesoLog req, ExampleMatcher matcher, Example<AppProcesoLog> example, Sort sort);

    protected abstract void setFindPaginated(PageRequestByExample<AppProcesoLog> req, ExampleMatcher matcher, Example<AppProcesoLog> example);

    protected final AppProcesoLog setObtenerBeanResponse(AppProcesoLogResponse bean) {
        return bean.getBean();
    }

    protected final Class<AppProcesoLog> setObtenerClassBean() {
        return AppProcesoLog.class;
    }

    protected List<Predicate> setAbstractPredicate(AppProcesoLogResponse bean, CriteriaBuilder cb, Root<AppProcesoLog> root) {
        List<Predicate> predicates = new ArrayList<>();
        AppProcesoLog entity = bean.getBean();
        /* Obtener condiciones */
        PredicateUtils.addPredicates(predicates, bean.getIdCondicion(), "id", entity.getId(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getFechaInicioEjecucionCondicion(), "fechaInicioEjecucion", entity.getFechaInicioEjecucion(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getFechaFinEjecucionCondicion(), "fechaFinEjecucion", entity.getFechaFinEjecucion(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getEstadoEjecucionCondicion(), "estadoEjecucion", entity.getEstadoEjecucion(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getDescripcionEstadoEjecucionCondicion(), "descripcionEstadoEjecucion",
                entity.getDescripcionEstadoEjecucion(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getModuloCondicion(), "modulo", entity.getModulo(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getClaseProgramacionCondicion(), "claseProgramacion", entity.getClaseProgramacion(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getMetodoProgramacionCondicion(), "metodoProgramacion", entity.getMetodoProgramacion(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getParametroEntradaCondicion(), "parametroEntrada", entity.getParametroEntrada(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getResultadoSalidaCondicion(), "resultadoSalida", entity.getResultadoSalida(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getDuracionMsCondicion(), "duracionMs", entity.getDuracionMs(), cb, root);
        /* Obtener valores de Lista */
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "id", bean.getIdList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "fechaInicioEjecucion", bean.getFechaInicioEjecucionList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "fechaFinEjecucion", bean.getFechaFinEjecucionList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "estadoEjecucion", bean.getEstadoEjecucionList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "descripcionEstadoEjecucion", bean.getDescripcionEstadoEjecucionList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "modulo", bean.getModuloList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "claseProgramacion", bean.getClaseProgramacionList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "metodoProgramacion", bean.getMetodoProgramacionList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "parametroEntrada", bean.getParametroEntradaList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "resultadoSalida", bean.getResultadoSalidaList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "duracionMs", bean.getDuracionMsList(), cb, root);
        return predicates;
    }

    /****************/
    /* METODOS CRUD */
    /****************/

    protected final String validacionesPrevias(AppProcesoLog bean) throws Exception {
        String mensaje = "";
        String msg = this.setValidacionesPrevias(bean);
        if (StringUtils.isNotBlank(msg)) {
            mensaje += "* " + msg + "<br/>";
        }
        return mensaje;
    }

    protected String setValidacionesPrevias(AppProcesoLog bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected String validacionesPreviasCreate(AppProcesoLog bean) throws Exception {
        String msg = null;
        AppProcesoLog validar = null;
        return msg;
    }

    protected String validacionesPreviasSave(AppProcesoLog bean) throws Exception {
        String msg = null;
        AppProcesoLog validar = null;
        return msg;
    }

    protected AppProcesoLog completarDatosBean(AppProcesoLog bean) throws Exception {
        BigDecimal data = new BigDecimal(0.00);
        bean = this.setCompletarDatosBean(bean);
        return bean;
    }

    protected AppProcesoLog setCompletarDatosBean(AppProcesoLog bean) throws Exception {
        return bean;
    }

    protected final AppProcesoLog setAbstractCreate(AppProcesoLog dto) throws Exception {
        AppProcesoLog bean = new AppProcesoLog();
        bean = (AppProcesoLog) BeanUtils.cloneBean(dto);
        return bean;
    }

    /************************/
    /* METODOS CRUD Masivos */
    /************************/

    protected AppProcesoLog setUploadExcel(Cell currentCell, AppProcesoLog appProcesoLog, int contador) throws Exception {
        Double valorDouble = new Double(0);
        BigDecimal valorDecimal = new BigDecimal(0);
        Boolean valorBoolean = new Boolean(true);
        String valorCadena = "";
        switch (contador) {
        case 1:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                appProcesoLog.setFechaInicioEjecucion(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo fechaInicioEjecucion está en formato incorrecto");
            }
            break;
        case 2:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                appProcesoLog.setFechaFinEjecucion(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo fechaFinEjecucion está en formato incorrecto");
            }
            break;
        case 3:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 1) {
                    throw new ServiceException("Valor Campo estadoEjecucion contiene mas de 1 caracter(es)");
                }
                appProcesoLog.setEstadoEjecucion(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo estadoEjecucion está en formato incorrecto");
            }
            break;
        case 4:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 4000) {
                    throw new ServiceException("Valor Campo descripcionEstadoEjecucion contiene mas de 4000 caracter(es)");
                }
                appProcesoLog.setDescripcionEstadoEjecucion(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo descripcionEstadoEjecucion está en formato incorrecto");
            }
            break;
        case 5:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 40) {
                    throw new ServiceException("Valor Campo modulo contiene mas de 40 caracter(es)");
                }
                appProcesoLog.setModulo(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo modulo está en formato incorrecto");
            }
            break;
        case 6:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 100) {
                    throw new ServiceException("Valor Campo claseProgramacion contiene mas de 100 caracter(es)");
                }
                appProcesoLog.setClaseProgramacion(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo claseProgramacion está en formato incorrecto");
            }
            break;
        case 7:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 100) {
                    throw new ServiceException("Valor Campo metodoProgramacion contiene mas de 100 caracter(es)");
                }
                appProcesoLog.setMetodoProgramacion(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo metodoProgramacion está en formato incorrecto");
            }
            break;
        case 8:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 4000) {
                    throw new ServiceException("Valor Campo parametroEntrada contiene mas de 4000 caracter(es)");
                }
                appProcesoLog.setParametroEntrada(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo parametroEntrada está en formato incorrecto");
            }
            break;
        case 9:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 4000) {
                    throw new ServiceException("Valor Campo resultadoSalida contiene mas de 4000 caracter(es)");
                }
                appProcesoLog.setResultadoSalida(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo resultadoSalida está en formato incorrecto");
            }
            break;
        case 10:
            try {
                valorDouble = new Double(currentCell.getNumericCellValue());
                appProcesoLog.setDuracionMs(valorDouble.intValue());
            } catch (Exception e) {
                throw new ServiceException("Valor Campo duracionMs está en formato incorrecto");
            }
            break;
        default:
            break;
        }
        return appProcesoLog;
    }

    protected AppParametria setObtenerRegistroConfiguracionUploadExcel() {
        AppParametria appParametriaData = this.appParametriaDeltaRepository.getByModuloAndLabelAndStatus(AppParametriaModuloEnum.CARGA_EXCEL.getEstado(),
                AppParametriaLabelEnum.INICIO_REGISTRO_DATA.getEstado(), Constants.ESTADO_ACTIVO);
        return appParametriaData;
    }

    protected AppProcesoLog setInicializarBeanUpdateExcel() {
        AppProcesoLog bean = new AppProcesoLog();
        bean.setId(null);
        return bean;
    }

    protected final Integer setObtenerId(AppProcesoLog bean) {
        return bean.getId();
    }

    /************************/
    /* Instancia de Bean    */
    /************************/

    protected final AppProcesoLog createInstance() {
        AppProcesoLog appProcesoLog = new AppProcesoLog();
        return appProcesoLog;
    }

    protected final BeanCargaMasivoDTO<AppProcesoLog> createInstanceMasivoDTO() {
        BeanCargaMasivoDTO<AppProcesoLog> beanCargaMasivoDTO = new BeanCargaMasivoDTO<AppProcesoLog>();
        return beanCargaMasivoDTO;

    }

    protected final BeanListaMasivoDTO<BeanCargaMasivoDTO<AppProcesoLog>> createInstanceListaMasivoDTO() {
        BeanListaMasivoDTO<BeanCargaMasivoDTO<AppProcesoLog>> beanCargaMasivoDTOBeanListaMasivoDTO = new BeanListaMasivoDTO<BeanCargaMasivoDTO<AppProcesoLog>>();
        return beanCargaMasivoDTOBeanListaMasivoDTO;
    }

    /*****************************/
    /* Metodos que generan Excel */
    /*****************************/

    protected String devuelveNombreSheet() {
        return this.NAME_SHEET;
    }

    protected String devuelveListaHeaderExcelXML() {
        return this.CONFIG_TITLE;
    }

    protected int setAbstractDownloadExcel(AppProcesoLog bean, HSSFRow dataRow) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getFechaInicioEjecucion(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getFechaFinEjecucion(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getEstadoEjecucion(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getDescripcionEstadoEjecucion(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getModulo(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getClaseProgramacion(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getMetodoProgramacion(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getParametroEntrada(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getResultadoSalida(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getDuracionMs(), dataRow.createCell(contador));
        contador++;
        return contador;
    }

    protected int setAbstractDownloadExcelSXLSX(AppProcesoLog bean, Row dataRow, List<CellStyle> cellStyleList) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getFechaInicioEjecucion(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getFechaFinEjecucion(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getEstadoEjecucion(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getDescripcionEstadoEjecucion(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getModulo(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getClaseProgramacion(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getMetodoProgramacion(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getParametroEntrada(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getResultadoSalida(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getDuracionMs(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        return contador;
    }

    protected String setAbstractGenerateInsertExcelSXLSX(AppProcesoLog bean) {
        String fechaS = "";
        String sqlInsert = "INSERT INTO app_proceso_log(";
        sqlInsert = sqlInsert + "app_proceso_log_id" + ", ";
        sqlInsert = sqlInsert + "fecha_inicio_ejecucion" + ", ";
        sqlInsert = sqlInsert + "fecha_fin_ejecucion" + ", ";
        sqlInsert = sqlInsert + "estado_ejecucion" + ", ";
        sqlInsert = sqlInsert + "descripcion_estado_ejecucion" + ", ";
        sqlInsert = sqlInsert + "modulo" + ", ";
        sqlInsert = sqlInsert + "clase_programacion" + ", ";
        sqlInsert = sqlInsert + "metodo_programacion" + ", ";
        sqlInsert = sqlInsert + "parametro_entrada" + ", ";
        sqlInsert = sqlInsert + "resultado_salida" + ", ";
        sqlInsert = sqlInsert + "duracion_ms" + ")";
        sqlInsert = sqlInsert + " VALUES (";
        sqlInsert = sqlInsert + bean.getId() + ", ";
        if (bean.getFechaInicioEjecucion() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaInicioEjecucion());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        if (bean.getFechaFinEjecucion() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaFinEjecucion());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        if (StringUtils.isBlank(bean.getEstadoEjecucion())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getEstadoEjecucion() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getDescripcionEstadoEjecucion())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getDescripcionEstadoEjecucion() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getModulo())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getModulo() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getClaseProgramacion())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getClaseProgramacion() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getMetodoProgramacion())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getMetodoProgramacion() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getParametroEntrada())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getParametroEntrada() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getResultadoSalida())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getResultadoSalida() + "'" + ", ";
        }
        sqlInsert = sqlInsert + bean.getDuracionMs();
        sqlInsert = sqlInsert + " );";
        return sqlInsert;
    }

    /*****************/
    /* Otros Metodos */
    /*****************/

}

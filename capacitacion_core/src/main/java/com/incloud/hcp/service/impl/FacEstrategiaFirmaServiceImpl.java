/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.incloud.hcp.service.impl;

import com.incloud.hcp.common.enums.AppParametriaLabelEnum;
import com.incloud.hcp.common.enums.AppParametriaModuloEnum;
import com.incloud.hcp.common.excel.ExcelDefault;
import com.incloud.hcp.common.graph.GraphBarChart;
import com.incloud.hcp.common.graph.GraphBean;
import com.incloud.hcp.common.graph.GraphDataset;
import com.incloud.hcp.common.graph.GraphPieChart;
import com.incloud.hcp.domain.*;
import com.incloud.hcp.domain.response.FacEstrategiaFirmaResponse;
import com.incloud.hcp.exception.ServiceException;
import com.incloud.hcp.repository.delta.*;
import com.incloud.hcp.service.FacEstrategiaFirmaService;
import com.incloud.hcp.service._framework.bean.BeanCargaMasivoDTO;
import com.incloud.hcp.service._framework.bean.BeanListaMasivoDTO;
import com.incloud.hcp.service._framework.impl.JPACustomServiceImpl;
import com.incloud.hcp.service.delta.*;
import com.incloud.hcp.service.requireNew.FacEstrategiaFirmaRequireNewService;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.utils.Constants;
import com.incloud.hcp.utils.DateUtils;
import com.incloud.hcp.utils.PredicateUtils;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

/**
 * A simple DTO Facility for FacEstrategiaFirma.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public abstract class FacEstrategiaFirmaServiceImpl extends JPACustomServiceImpl<FacEstrategiaFirmaResponse, FacEstrategiaFirma, Integer>
        implements FacEstrategiaFirmaService {

    protected final String NAME_SHEET = "FacEstrategiaFirma";
    protected final String CONFIG_TITLE = "com/incloud/hcp/excel/FacEstrategiaFirmaExcel.xml";
    private final Integer REGISTROS_COLOR = 10;

    @Autowired
    protected AppParametriaDeltaRepository appParametriaDeltaRepository;

    @Autowired
    protected FacEstrategiaFirmaDeltaRepository facEstrategiaFirmaDeltaRepository;

    @Autowired
    protected FacEstrategiaFirmaRequireNewService facEstrategiaFirmaRequireNewService;

    @Autowired
    protected MtrUsuarioFacturacionDeltaService mtrUsuarioFacturacionDeltaService;

    @Autowired
    protected MtrUsuarioFacturacionDeltaRepository mtrUsuarioFacturacionDeltaRepository;

    @Autowired
    protected MtrEstrategiaFacturacionFirmaDeltaService mtrEstrategiaFacturacionFirmaDeltaService;

    @Autowired
    protected MtrEstrategiaFacturacionFirmaDeltaRepository mtrEstrategiaFacturacionFirmaDeltaRepository;

    @Autowired
    protected FacEstrategiaIteracionDeltaService facEstrategiaIteracionDeltaService;

    @Autowired
    protected FacEstrategiaIteracionDeltaRepository facEstrategiaIteracionDeltaRepository;

    @Autowired
    protected MtrSectorDeltaService mtrSectorDeltaService;

    @Autowired
    protected MtrSectorDeltaRepository mtrSectorDeltaRepository;

    @Autowired
    protected MtrTipoGerenciaDeltaService mtrTipoGerenciaDeltaService;

    @Autowired
    protected MtrTipoGerenciaDeltaRepository mtrTipoGerenciaDeltaRepository;

    /*****************************/
    /* Metodos de Busqueda       */
    /*****************************/

    protected final ExampleMatcher setAbstractFind(ExampleMatcher matcher) {
        matcher = ExampleMatcher.matching() //
                .withMatcher(FacEstrategiaFirma_.indAprobacionRechazo.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(FacEstrategiaFirma_.activo.getName(), match -> match.ignoreCase().startsWith());
        return matcher;
    }

    protected abstract Sort setFindAll(Sort sort);

    protected abstract Sort setFind(FacEstrategiaFirma req, ExampleMatcher matcher, Example<FacEstrategiaFirma> example, Sort sort);

    protected abstract void setFindPaginated(PageRequestByExample<FacEstrategiaFirma> req, ExampleMatcher matcher, Example<FacEstrategiaFirma> example);

    protected final FacEstrategiaFirma setObtenerBeanResponse(FacEstrategiaFirmaResponse bean) {
        return bean.getBean();
    }

    protected final Class<FacEstrategiaFirma> setObtenerClassBean() {
        return FacEstrategiaFirma.class;
    }

    protected List<Predicate> setAbstractPredicate(FacEstrategiaFirmaResponse bean, CriteriaBuilder cb, Root<FacEstrategiaFirma> root) {
        List<Predicate> predicates = new ArrayList<>();
        FacEstrategiaFirma entity = bean.getBean();
        /* Obtener condiciones */
        PredicateUtils.addPredicates(predicates, bean.getIdCondicion(), "id", entity.getId(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getOrdenEjecucionCondicion(), "ordenEjecucion", entity.getOrdenEjecucion(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getIndAprobacionRechazoCondicion(), "indAprobacionRechazo", entity.getIndAprobacionRechazo(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getActivoCondicion(), "activo", entity.getActivo(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getFechaAprobacionCondicion(), "fechaAprobacion", entity.getFechaAprobacion(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrUsuarioFacturacionCondicion(), "mtrUsuarioFacturacion", entity.getMtrUsuarioFacturacion(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrEstrategiaFacturacionFirmaCondicion(), "mtrEstrategiaFacturacionFirma", entity.getMtrEstrategiaFacturacionFirma(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getFacEstrategiaIteracionCondicion(), "facEstrategiaIteracion", entity.getFacEstrategiaIteracion(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrSectorCondicion(), "mtrSector", entity.getMtrSector(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrTipoGerenciaCondicion(), "mtrTipoGerencia", entity.getMtrTipoGerencia(), cb, root);
        /* Obtener valores de Lista */
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "id", bean.getIdList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "ordenEjecucion", bean.getOrdenEjecucionList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "indAprobacionRechazo", bean.getIndAprobacionRechazoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "activo", bean.getActivoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "fechaAprobacion", bean.getFechaAprobacionList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrUsuarioFacturacion", bean.getMtrUsuarioFacturacionList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrEstrategiaFacturacionFirma", bean.getMtrEstrategiaFacturacionFirmaList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "facEstrategiaIteracion", bean.getFacEstrategiaIteracionList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrSector", bean.getMtrSectorList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrTipoGerencia", bean.getMtrTipoGerenciaList(), cb, root);
        return predicates;
    }

    /****************/
    /* METODOS CRUD */
    /****************/

    protected final String validacionesPrevias(FacEstrategiaFirma bean) throws Exception {
        String mensaje = "";
        if (!Optional.of(bean.getOrdenEjecucion()).isPresent()) {
            String msg = this.messageSource.getMessage("message.facEstrategiaFirma.ordenEjecucion.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getActivo()).isPresent()) {
            String msg = this.messageSource.getMessage("message.facEstrategiaFirma.activo.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        String msg = this.setValidacionesPrevias(bean);
        if (StringUtils.isNotBlank(msg)) {
            mensaje += "* " + msg + "<br/>";
        }
        return mensaje;
    }

    protected String setValidacionesPrevias(FacEstrategiaFirma bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected String validacionesPreviasCreate(FacEstrategiaFirma bean) throws Exception {
        String msg = null;
        FacEstrategiaFirma validar = null;
        return msg;
    }

    protected String validacionesPreviasSave(FacEstrategiaFirma bean) throws Exception {
        String msg = null;
        FacEstrategiaFirma validar = null;
        return msg;
    }

    protected FacEstrategiaFirma completarDatosBean(FacEstrategiaFirma bean) throws Exception {
        BigDecimal data = new BigDecimal(0.00);
        bean = this.setCompletarDatosBean(bean);
        return bean;
    }

    protected FacEstrategiaFirma setCompletarDatosBean(FacEstrategiaFirma bean) throws Exception {
        return bean;
    }

    protected final FacEstrategiaFirma setAbstractCreate(FacEstrategiaFirma dto) throws Exception {
        FacEstrategiaFirma bean = new FacEstrategiaFirma();
        bean = (FacEstrategiaFirma) BeanUtils.cloneBean(dto);
        return bean;
    }

    /************************/
    /* METODOS CRUD Masivos */
    /************************/

    protected FacEstrategiaFirma setUploadExcel(Cell currentCell, FacEstrategiaFirma facEstrategiaFirma, int contador) throws Exception {
        Double valorDouble = new Double(0);
        BigDecimal valorDecimal = new BigDecimal(0);
        Boolean valorBoolean = new Boolean(true);
        String valorCadena = "";
        switch (contador) {
        case 1:
            try {
                valorDouble = new Double(currentCell.getNumericCellValue());
                facEstrategiaFirma.setOrdenEjecucion(valorDouble.intValue());
            } catch (Exception e) {
                throw new ServiceException("Valor Campo ordenEjecucion está en formato incorrecto");
            }
            break;
        case 2:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 1) {
                    throw new ServiceException("Valor Campo indAprobacionRechazo contiene mas de 1 caracter(es)");
                }
                facEstrategiaFirma.setIndAprobacionRechazo(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo indAprobacionRechazo está en formato incorrecto");
            }
            break;
        case 3:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 1) {
                    throw new ServiceException("Valor Campo activo contiene mas de 1 caracter(es)");
                }
                facEstrategiaFirma.setActivo(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo activo está en formato incorrecto");
            }
            break;
        case 4:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                facEstrategiaFirma.setFechaAprobacion(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo fechaAprobacion está en formato incorrecto");
            }
            break;
        default:
            break;
        }
        return facEstrategiaFirma;
    }

    protected AppParametria setObtenerRegistroConfiguracionUploadExcel() {
        AppParametria appParametriaData = this.appParametriaDeltaRepository.getByModuloAndLabelAndStatus(AppParametriaModuloEnum.CARGA_EXCEL.getEstado(),
                AppParametriaLabelEnum.INICIO_REGISTRO_DATA.getEstado(), Constants.ESTADO_ACTIVO);
        return appParametriaData;
    }

    protected FacEstrategiaFirma setInicializarBeanUpdateExcel() {
        FacEstrategiaFirma bean = new FacEstrategiaFirma();
        bean.setId(null);
        return bean;
    }

    protected final Integer setObtenerId(FacEstrategiaFirma bean) {
        return bean.getId();
    }

    /************************/
    /* Instancia de Bean    */
    /************************/

    protected final FacEstrategiaFirma createInstance() {
        FacEstrategiaFirma facEstrategiaFirma = new FacEstrategiaFirma();
        return facEstrategiaFirma;
    }

    protected final BeanCargaMasivoDTO<FacEstrategiaFirma> createInstanceMasivoDTO() {
        BeanCargaMasivoDTO<FacEstrategiaFirma> beanCargaMasivoDTO = new BeanCargaMasivoDTO<FacEstrategiaFirma>();
        return beanCargaMasivoDTO;

    }

    protected final BeanListaMasivoDTO<BeanCargaMasivoDTO<FacEstrategiaFirma>> createInstanceListaMasivoDTO() {
        BeanListaMasivoDTO<BeanCargaMasivoDTO<FacEstrategiaFirma>> beanCargaMasivoDTOBeanListaMasivoDTO = new BeanListaMasivoDTO<BeanCargaMasivoDTO<FacEstrategiaFirma>>();
        return beanCargaMasivoDTOBeanListaMasivoDTO;
    }

    /*****************************/
    /* Metodos que generan Excel */
    /*****************************/

    protected String devuelveNombreSheet() {
        return this.NAME_SHEET;
    }

    protected String devuelveListaHeaderExcelXML() {
        return this.CONFIG_TITLE;
    }

    protected int setAbstractDownloadExcel(FacEstrategiaFirma bean, HSSFRow dataRow) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getOrdenEjecucion(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getIndAprobacionRechazo(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getActivo(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getFechaAprobacion(), dataRow.createCell(contador));
        contador++;
        return contador;
    }

    protected int setAbstractDownloadExcelSXLSX(FacEstrategiaFirma bean, Row dataRow, List<CellStyle> cellStyleList) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getOrdenEjecucion(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getIndAprobacionRechazo(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getActivo(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getFechaAprobacion(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        return contador;
    }

    protected String setAbstractGenerateInsertExcelSXLSX(FacEstrategiaFirma bean) {
        String fechaS = "";
        String sqlInsert = "INSERT INTO fac_estrategia_firma(";
        sqlInsert = sqlInsert + "fac_estrategia_firma_id" + ", ";
        sqlInsert = sqlInsert + "orden_ejecucion" + ", ";
        sqlInsert = sqlInsert + "ind_aprobacion_rechazo" + ", ";
        sqlInsert = sqlInsert + "activo" + ", ";
        sqlInsert = sqlInsert + "fecha_aprobacion" + ", ";
        sqlInsert = sqlInsert + "fac_estrategia_iteracion_id" + ", ";
        sqlInsert = sqlInsert + "mtr_estrategia_facturacion_firma_id" + ", ";
        sqlInsert = sqlInsert + "mtr_sector_id" + ", ";
        sqlInsert = sqlInsert + "mtr_usuario_facturacion_id" + ", ";
        sqlInsert = sqlInsert + "mtr_tipo_gerencia_id" + ")";
        sqlInsert = sqlInsert + " VALUES (";
        sqlInsert = sqlInsert + bean.getId() + ", ";
        sqlInsert = sqlInsert + bean.getOrdenEjecucion() + ", ";
        if (StringUtils.isBlank(bean.getIndAprobacionRechazo())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getIndAprobacionRechazo() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getActivo())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getActivo() + "'" + ", ";
        }
        if (bean.getFechaAprobacion() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaAprobacion());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        sqlInsert = sqlInsert + bean.getMtrUsuarioFacturacion().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrEstrategiaFacturacionFirma().getId() + ", ";
        sqlInsert = sqlInsert + bean.getFacEstrategiaIteracion().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrSector().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrTipoGerencia().getId();
        sqlInsert = sqlInsert + " );";
        return sqlInsert;
    }

    /*****************/
    /* Otros Metodos */
    /*****************/

    public Long countByMtrUsuarioFacturacion(MtrUsuarioFacturacion mtrUsuarioFacturacion) {
        return this.facEstrategiaFirmaDeltaRepository.countByMtrUsuarioFacturacion(mtrUsuarioFacturacion);
    }

    public GraphBean graphByMtrUsuarioFacturacion() {
        List<MtrUsuarioFacturacion> lista = this.mtrUsuarioFacturacionDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrUsuarioFacturacion bean : lista) {
            Long valor = this.facEstrategiaFirmaDeltaRepository.countByMtrUsuarioFacturacion(bean);
            String descripcion = this.setGraphDescripcionByMtrUsuarioFacturacion(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrUsuarioFacturacion();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrUsuarioFacturacion();
        contador = 0;
        contadorColor = 0;
        for (MtrUsuarioFacturacion bean : lista) {
            Long valor = this.facEstrategiaFirmaDeltaRepository.countByMtrUsuarioFacturacion(bean);
            String descripcion = this.setGraphDescripcionByMtrUsuarioFacturacion(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrUsuarioFacturacion(MtrUsuarioFacturacion mtrUsuarioFacturacion) {
        return mtrUsuarioFacturacion.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrUsuarioFacturacion() {
        return "MtrUsuarioFacturacion";
    }

    protected String setGraphBarChartTituloByMtrUsuarioFacturacion() {
        return "MtrUsuarioFacturacion";
    }

    public Long countByMtrEstrategiaFacturacionFirma(MtrEstrategiaFacturacionFirma mtrEstrategiaFacturacionFirma) {
        return this.facEstrategiaFirmaDeltaRepository.countByMtrEstrategiaFacturacionFirma(mtrEstrategiaFacturacionFirma);
    }

    public GraphBean graphByMtrEstrategiaFacturacionFirma() {
        List<MtrEstrategiaFacturacionFirma> lista = this.mtrEstrategiaFacturacionFirmaDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrEstrategiaFacturacionFirma bean : lista) {
            Long valor = this.facEstrategiaFirmaDeltaRepository.countByMtrEstrategiaFacturacionFirma(bean);
            String descripcion = this.setGraphDescripcionByMtrEstrategiaFacturacionFirma(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrEstrategiaFacturacionFirma();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrEstrategiaFacturacionFirma();
        contador = 0;
        contadorColor = 0;
        for (MtrEstrategiaFacturacionFirma bean : lista) {
            Long valor = this.facEstrategiaFirmaDeltaRepository.countByMtrEstrategiaFacturacionFirma(bean);
            String descripcion = this.setGraphDescripcionByMtrEstrategiaFacturacionFirma(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrEstrategiaFacturacionFirma(MtrEstrategiaFacturacionFirma mtrEstrategiaFacturacionFirma) {
        return mtrEstrategiaFacturacionFirma.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrEstrategiaFacturacionFirma() {
        return "MtrEstrategiaFacturacionFirma";
    }

    protected String setGraphBarChartTituloByMtrEstrategiaFacturacionFirma() {
        return "MtrEstrategiaFacturacionFirma";
    }

    public Long countByFacEstrategiaIteracion(FacEstrategiaIteracion facEstrategiaIteracion) {
        return this.facEstrategiaFirmaDeltaRepository.countByFacEstrategiaIteracion(facEstrategiaIteracion);
    }

    public GraphBean graphByFacEstrategiaIteracion() {
        List<FacEstrategiaIteracion> lista = this.facEstrategiaIteracionDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (FacEstrategiaIteracion bean : lista) {
            Long valor = this.facEstrategiaFirmaDeltaRepository.countByFacEstrategiaIteracion(bean);
            String descripcion = this.setGraphDescripcionByFacEstrategiaIteracion(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByFacEstrategiaIteracion();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByFacEstrategiaIteracion();
        contador = 0;
        contadorColor = 0;
        for (FacEstrategiaIteracion bean : lista) {
            Long valor = this.facEstrategiaFirmaDeltaRepository.countByFacEstrategiaIteracion(bean);
            String descripcion = this.setGraphDescripcionByFacEstrategiaIteracion(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByFacEstrategiaIteracion(FacEstrategiaIteracion facEstrategiaIteracion) {
        return facEstrategiaIteracion.getId().toString();
    }

    protected String setGraphPieChartTituloByFacEstrategiaIteracion() {
        return "FacEstrategiaIteracion";
    }

    protected String setGraphBarChartTituloByFacEstrategiaIteracion() {
        return "FacEstrategiaIteracion";
    }

    public Long countByMtrSector(MtrSector mtrSector) {
        return this.facEstrategiaFirmaDeltaRepository.countByMtrSector(mtrSector);
    }

    public GraphBean graphByMtrSector() {
        List<MtrSector> lista = this.mtrSectorDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrSector bean : lista) {
            Long valor = this.facEstrategiaFirmaDeltaRepository.countByMtrSector(bean);
            String descripcion = this.setGraphDescripcionByMtrSector(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrSector();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrSector();
        contador = 0;
        contadorColor = 0;
        for (MtrSector bean : lista) {
            Long valor = this.facEstrategiaFirmaDeltaRepository.countByMtrSector(bean);
            String descripcion = this.setGraphDescripcionByMtrSector(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrSector(MtrSector mtrSector) {
        return mtrSector.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrSector() {
        return "MtrSector";
    }

    protected String setGraphBarChartTituloByMtrSector() {
        return "MtrSector";
    }

    public Long countByMtrTipoGerencia(MtrTipoGerencia mtrTipoGerencia) {
        return this.facEstrategiaFirmaDeltaRepository.countByMtrTipoGerencia(mtrTipoGerencia);
    }

    public GraphBean graphByMtrTipoGerencia() {
        List<MtrTipoGerencia> lista = this.mtrTipoGerenciaDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrTipoGerencia bean : lista) {
            Long valor = this.facEstrategiaFirmaDeltaRepository.countByMtrTipoGerencia(bean);
            String descripcion = this.setGraphDescripcionByMtrTipoGerencia(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrTipoGerencia();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrTipoGerencia();
        contador = 0;
        contadorColor = 0;
        for (MtrTipoGerencia bean : lista) {
            Long valor = this.facEstrategiaFirmaDeltaRepository.countByMtrTipoGerencia(bean);
            String descripcion = this.setGraphDescripcionByMtrTipoGerencia(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrTipoGerencia(MtrTipoGerencia mtrTipoGerencia) {
        return mtrTipoGerencia.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrTipoGerencia() {
        return "MtrTipoGerencia";
    }

    protected String setGraphBarChartTituloByMtrTipoGerencia() {
        return "MtrTipoGerencia";
    }

}

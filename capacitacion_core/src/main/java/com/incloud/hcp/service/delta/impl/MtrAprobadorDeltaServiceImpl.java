/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntitydeltaDTOService.java.e.vm
 */
package com.incloud.hcp.service.delta.impl;

import com.incloud.hcp.bean.custom.FiltroAprobadorCustom;
import com.incloud.hcp.bean.custom.MensajeSap;
import com.incloud.hcp.bean.custom.MtrAprobadorCustom;
import com.incloud.hcp.bean.custom.ReemplazoAprobadorCustom;
import com.incloud.hcp.domain.CerFirma;
import com.incloud.hcp.domain.MtrAprobador;
import com.incloud.hcp.mapper.MtrAprobadorMapper;
import com.incloud.hcp.repository.delta.*;
import com.incloud.hcp.service.delta.MtrAprobadorDeltaService;
import com.incloud.hcp.service.impl.MtrAprobadorServiceImpl;
import com.incloud.hcp.service.support.PageRequestByExample;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.ss.usermodel.Cell;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Optional;

/**
 * A simple DTO Facility for MtrAprobador.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public class MtrAprobadorDeltaServiceImpl extends MtrAprobadorServiceImpl implements MtrAprobadorDeltaService {

    @Autowired
    protected CerHistorialDeltaRepository cerHistorialDeltaRepository;

    @Autowired
    protected MtrAprobadorDeltaRepository mtrAprobadorDeltaRepository;

    @Autowired
    protected MtrAprobadorMapper mMtrAprobadorMapper;

    @Autowired
    protected CerFirmaDeltaRepository cerFirmaDeltaRepository;

    @Autowired
    protected MtrReemplazoAprobadorDeltaRepository mtrReemplazoAprobadorDeltaRepository;

    @Autowired
    protected CerCertificadoFirmaDeltaRepository cerCertificadoFirmaDeltaRepository;



    /**************************/
    /* Metodos Personalizados */
    /**************************/
    @Override
    public List<MtrAprobadorCustom> listaAprobador (FiltroAprobadorCustom input) throws Exception {
        //List<MtrAprobador> listaAprobador = this.mtrAprobadorDeltaRepository.findAll();
        List<MtrAprobador>  listaAprobadorAux = this.mMtrAprobadorMapper.listaAprobadores(input.getNombre(), input.getApellido(), input.getCodigoIdp(), input.getIdLogin(), input.getEmail());
        List<MtrAprobador>  listaAprobador = new ArrayList<MtrAprobador>();
        for(MtrAprobador ele : listaAprobadorAux) {
            //this.cerFirmaDeltaRepository.findByAprobador
            List<CerFirma> listaFirma = this.cerFirmaDeltaRepository.findByAprobadorTitular(ele.getId());
            if(listaFirma != null && listaFirma.size() > 0) {
                listaAprobador.add(ele);
            }

        }
        List<MtrAprobadorCustom> lista = new ArrayList<MtrAprobadorCustom>();

       if(listaAprobador != null && listaAprobador.size() > 0) {
           for(MtrAprobador ele : listaAprobador) {
               MtrAprobadorCustom mtr = new MtrAprobadorCustom();
               List<CerFirma> listaFirma = this.cerFirmaDeltaRepository.findByAprobadorReemplazado(ele.getId());
               List<MtrAprobador> listaReemplazo = new ArrayList<MtrAprobador>();
               if(listaFirma != null && listaFirma.size() > 0) {
                   for (CerFirma cf : listaFirma) {
                       listaReemplazo.add(cf.getMtrAprobador());
                   }
               }
               LinkedHashSet<MtrAprobador> hashSet = new LinkedHashSet<>(listaReemplazo);
               ArrayList<MtrAprobador> listWithoutDuplicates = new ArrayList<MtrAprobador>(hashSet);

               mtr.setAprobador(ele);
               mtr.setLista(listWithoutDuplicates);
               lista.add(mtr);

           }
       }

       return lista;
    }

    @Override
    public List<MensajeSap> grabarReemplazo (ReemplazoAprobadorCustom input) throws Exception {
        List<MensajeSap> lista = new ArrayList<MensajeSap>();
        Optional<MtrAprobador> aprobadorOpt = this.mtrAprobadorDeltaRepository.findById(input.getIdAprobador());
        if(!aprobadorOpt.isPresent()) {
            throw new Exception("No existe aprobador con id " + input.getIdAprobador());
        }
        MtrAprobador aprobador = aprobadorOpt.get();
        //Eliminar certificado Firma asociados
        List<CerFirma> listaFirmaAux = this.cerFirmaDeltaRepository.findByAprobadorReemplazado(input.getIdAprobador());
        log.error("grabarReemplazo :: listaFirmaAux " + listaFirmaAux.toString());
        if(listaFirmaAux != null && listaFirmaAux.size() > 0) {
            for (CerFirma cf : listaFirmaAux) {
                //listaReemplazo.add(cf.getMtrAprobador());
                log.error("grabarReemplazo :: eliminando " + cf.getId());
                this.cerCertificadoFirmaDeltaRepository.deleteByFirmaId(cf.getId());
            }
        }
        //Fin Eliminar

        //Eliminar reemplazos
        this.cerFirmaDeltaRepository.deleteByReemplazo(input.getIdAprobador());
        //Obtener Lista de firmas donde el aprobador es el titular
        List<CerFirma> listaFirma = this.cerFirmaDeltaRepository.findByAprobadorTitular(input.getIdAprobador());
        log.error("grabarReemplazo :: " + listaFirma.toString());
        if(listaFirma != null && listaFirma.size() > 0) {
            for (CerFirma cf : listaFirma) {
                log.error("grabarReemplazo :: input.getListaReemplazo() " + input.getListaReemplazo());
                if(input.getListaReemplazo() != null && input.getListaReemplazo().size() > 0) {
                    for(Integer idReemplazo : input.getListaReemplazo()) {
                        Optional<MtrAprobador> aprobadorOptRemplazo = this.mtrAprobadorDeltaRepository.findById(idReemplazo);
                        log.error("grabarReemplazo :: aprobadorOptRemplazo  " + aprobadorOptRemplazo);
                        if(aprobadorOptRemplazo.isPresent()) {
                            List<CerFirma> listax = this.cerFirmaDeltaRepository.findByUniqueIndex(cf.getMtrTipoFirma().getId(), aprobadorOptRemplazo.get().getId(), cf.getCerNotaPedido().getId() );
                            if(listax == null || listax.size() == 0) {
                                log.error("grabarReemplazo :: 2  ");
                                CerFirma nuevaFirma = new CerFirma();
                                nuevaFirma.setEbeln(cf.getEbeln());
                                nuevaFirma.setCerNotaPedido(cf.getCerNotaPedido());
                                nuevaFirma.setMtrAprobador(aprobadorOptRemplazo.get());
                                nuevaFirma.setMtrTipoFirma(cf.getMtrTipoFirma());
                                nuevaFirma.setMtrReemplazo(aprobador);
                                this.cerFirmaDeltaRepository.save(nuevaFirma);
                            }
                        }
                    }
                }


            }
        }

        lista.add(new MensajeSap("S", "", "Los datos se grabaron correctamente"));
        return lista;
    }
    /***********************/
    /* Metodos de Busqueda */
    /***********************/

    protected Sort setFindAll(Sort sort) {
        sort = Sort.by(
                new Sort.Order(Sort.Direction.ASC, "aprobadorSap")
        );
        return sort;
    }

    protected Sort setFind(MtrAprobador req, ExampleMatcher matcher, Example<MtrAprobador> example, Sort sort) {
        sort = Sort.by(
                new Sort.Order(Sort.Direction.ASC, "aprobadorSap")
        );
        return sort;
    }

    protected void setFindPaginated(PageRequestByExample<MtrAprobador> req, ExampleMatcher matcher, Example<MtrAprobador> example) {
        return;
    }

    /****************/
    /* METODOS CRUD */
    /****************/

    protected String setValidacionesPrevias(MtrAprobador bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected MtrAprobador setCreate(MtrAprobador bean) throws Exception {
        return bean;
    }

    protected void setSave(MtrAprobador dto) throws Exception {
        return;
    }

    protected void setDelete(Integer id) throws Exception {

    }

    protected void setDeleteAll() throws Exception {

    }

    /************************/
    /* METODOS CRUD Masivos */
    /************************/

    protected MtrAprobador setUploadExcel(Cell currentCell, MtrAprobador mtrAprobador, int contador) throws Exception {
        mtrAprobador = super.setUploadExcel(currentCell, mtrAprobador, contador);
        return mtrAprobador;
    }

    protected String setSaveMasivo(MtrAprobador dto) throws Exception {
        return "";
    }

    protected List<MtrAprobador> setBeforeDeleteMasivo(List<MtrAprobador> listaDto) throws Exception {
        return listaDto;
    }

    protected void setAfterDeleteMasivo() throws Exception {
        return;
    }

    /*****************************/
    /* Metodos que generan Excel */
    /*****************************/

    protected void setDownloadExcelItem(MtrAprobador bean, HSSFRow dataRow) {

    }

    protected void setDownloadExcel(HSSFSheet sheet) {

    }

    /*****************/
    /* Otros Metodos */
    /*****************/

}

/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntitydeltaDTOService.java.e.vm
 */
package com.incloud.hcp.service.delta.impl;

import com.incloud.hcp.domain.*;
import com.incloud.hcp.domain.response.MtrRangoMontoEstrategiaResponse;
import com.incloud.hcp.repository.delta.MtrMonedaDeltaRepository;
import com.incloud.hcp.repository.delta.MtrTasaCambioDeltaRepository;
import com.incloud.hcp.service.delta.MtrRangoMontoEstrategiaDeltaService;
import com.incloud.hcp.service.dto.MtrTasaCambioDto;
import com.incloud.hcp.service.impl.MtrRangoMontoEstrategiaServiceImpl;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.utils.Constants;
import com.incloud.hcp.utils.DateUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.ss.usermodel.Cell;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import java.util.Optional;

/**
 * A simple DTO Facility for MtrRangoMontoEstrategia.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public class MtrRangoMontoEstrategiaDeltaServiceImpl extends MtrRangoMontoEstrategiaServiceImpl implements MtrRangoMontoEstrategiaDeltaService {

    private static int NRO_DIAS_MAXIMO_ATRAS_TASA_CAMBIO = 30;

    @Autowired
    private MtrMonedaDeltaRepository mtrMonedaDeltaRepository;

    @Autowired
    private MtrTasaCambioDeltaRepository mtrTasaCambioDeltaRepository;

    /**************************/
    /* Metodos Personalizados */
    /**************************/


    public MtrRangoMontoEstrategia obtenerRegistroRango(
            FacFactura facFactura,
            BigDecimal monto,
            MtrTasaCambioDto mtrTasaCambioDto,
            MtrTipoContrato mtrTipoContrato) throws Exception{
        BigDecimal newMonto =new BigDecimal(monto.floatValue());
        MtrRangoMontoEstrategia mtrRangoMontoEstrategia = new MtrRangoMontoEstrategia();
        MtrMoneda mtrMoneda = this.mtrMonedaDeltaRepository.getOne(facFactura.getMtrMoneda().getId());
        MtrMoneda mtrMonedaDestino = this.mtrMonedaDeltaRepository.getByDescBrv(Constants.SIMBOLO_MONEDA_USD);
        if (mtrMoneda.getSigla().equals(Constants.SIMBOLO_MONEDA_USD)) {
            MtrTasaCambio mtrTasaCambio = new MtrTasaCambio();
            mtrTasaCambio.setValor(new BigDecimal(1.0));
            mtrTasaCambioDto.setMtrTasaCambio(mtrTasaCambio);
        }
        else {
            //Date fechaActual = DateUtils.obtenerFechaActual();
            Date fechaActual = facFactura.getFechaCreacion();
            MtrMoneda mtrMonedaOrigen = this.mtrMonedaDeltaRepository.getByDescBrv(Constants.SIGLA_PERU_MONEDA_ALTERNATIVO);

            MtrTasaCambio mtrTasaCambio = null;
            for (int i= 0; i < NRO_DIAS_MAXIMO_ATRAS_TASA_CAMBIO; i++) {
                mtrTasaCambio = this.mtrTasaCambioDeltaRepository.
                        getByFechaTasaAndMtrMonedaOrigenAndMtrMonedaDestino(
                                fechaActual,
                                mtrMonedaOrigen,
                                mtrMonedaDestino
                        );
                if (Optional.ofNullable(mtrTasaCambio).isPresent()) {
                    i = NRO_DIAS_MAXIMO_ATRAS_TASA_CAMBIO;
                }
                else {
                    fechaActual = DateUtils.sumarRestarDias(fechaActual, -1);
                }
            }
            if (!Optional.ofNullable(mtrTasaCambio).isPresent()) {
                String lineaSeparador = System.lineSeparator();
                throw new Exception("No existe tasa de cambio para el dia de la fecha Creación Factura: " + facFactura.getFechaCreacion() +
                        lineaSeparador +
                        " ni tampoco en el rango de fechas hasta 30 dias antes");
            }

            newMonto = new BigDecimal(monto.floatValue() / mtrTasaCambio.getValor().floatValue())
                    .setScale(0, BigDecimal.ROUND_HALF_UP);
            mtrTasaCambioDto.setMtrTasaCambio(mtrTasaCambio);
        }

        Integer rangoMonto = new Integer(newMonto.intValue());
        mtrTasaCambioDto.setMontoObtenido(rangoMonto);

        List<MtrRangoMontoEstrategia> mtrRangoMontoEstrategiaList = this.mtrRangoMontoEstrategiaDeltaRepository.
                obtenerListaRangoMinimoMaximo(mtrMonedaDestino.getId(), mtrTipoContrato.getId(), rangoMonto);
        if (mtrRangoMontoEstrategiaList != null && mtrRangoMontoEstrategiaList.size() > 0) {
            if (mtrRangoMontoEstrategiaList.size() > 1) {
                throw new Exception("Se encontraron mas de un Rango de Montos de Estrategías para el monto de: " +
                        mtrMoneda.getSigla() + " " + monto);
            }
            return mtrRangoMontoEstrategiaList.get(0);
        }
        mtrRangoMontoEstrategiaList = this.mtrRangoMontoEstrategiaDeltaRepository.
                obtenerListaRangoMinimoSinMaximo(mtrMonedaDestino.getId(), mtrTipoContrato.getId(), rangoMonto);
        if (mtrRangoMontoEstrategiaList != null && mtrRangoMontoEstrategiaList.size() > 0) {
            if (mtrRangoMontoEstrategiaList.size() > 1) {
                throw new Exception("Se encontraron mas de un Rango de Montos de Estrategías para el monto de: " +
                        mtrMoneda.getSigla() + " " + monto);
            }
            return mtrRangoMontoEstrategiaList.get(0);
        }
        return null;
    }

    /***********************/
    /* Metodos de Busqueda */
    /***********************/

    protected Sort setFindAll(Sort sort) {
        sort = Sort.by(new Sort.Order(Sort.Direction.ASC, "descripcion"));
        return sort;
    }

    protected Sort setFind(MtrRangoMontoEstrategia req, ExampleMatcher matcher, Example<MtrRangoMontoEstrategia> example, Sort sort) {
        sort = Sort.by(new Sort.Order(Sort.Direction.ASC, "descripcion"));
        return sort;
    }

    protected void setFindPaginated(PageRequestByExample<MtrRangoMontoEstrategia> req, ExampleMatcher matcher, Example<MtrRangoMontoEstrategia> example) {
        return;
    }

    protected List<Predicate> setAdicionalDeltaPredicate(List<Predicate> predicates, MtrRangoMontoEstrategiaResponse bean, CriteriaBuilder cb,
            CriteriaQuery<MtrRangoMontoEstrategia> query, Root<MtrRangoMontoEstrategia> root) throws Exception {

        MtrRangoMontoEstrategia entity = bean.getBean();
        //Ejemplo
        /*
        if (Optional.ofNullable(entity.get<VariableManytoOne>()).isPresent()) {
            Join<MtrRangoMontoEstrategia, <ClaseManytoOne>> from<ClaseManytoOne> = countRoot.join("<variableManytoOne>", JoinType.INNER);
        
            if (Optional.ofNullable(entity.get<VariableManytoOne>().get<Atributo>()).isPresent()) {
                Join<MtrRangoMontoEstrategia, <ClaseManytoOne>> from<ClaseManytoOne> = countRoot.join("<variableManytoOne>", JoinType.INNER);
                Predicate thirdCondition = cb.equal(from<ClaseManytoOne>.get("<Atributo>"), entity.get<ClaseManytoOne>().get<Atributo>());
                predicates.add(thirdCondition);
            }
            
        }
        query.orderBy(cb.desc(root.get("<campo entity>")));
        */
        return predicates;
    }

    protected Root<MtrRangoMontoEstrategia> setAdicionalDeltaTotalPredicate(MtrRangoMontoEstrategiaResponse bean, Root<MtrRangoMontoEstrategia> countRoot)
            throws Exception {
        MtrRangoMontoEstrategia entity = bean.getBean();
        //Ejemplo
        /*
        if (Optional.ofNullable(entity.get<VariableManytoOne>()).isPresent()) {
            if (Optional.ofNullable(entity.get<VariableManytoOne>()).isPresent()) {
                Join<MtrRangoMontoEstrategia, <ClaseManytoOne>> from<ClaseManytoOne> = countRoot.join("<variableManytoOne>", JoinType.INNER);
            }
        }
        */
        return countRoot;
    }

    /****************/
    /* METODOS CRUD */
    /****************/

    protected String setValidacionesPrevias(MtrRangoMontoEstrategia bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected MtrRangoMontoEstrategia setCreate(MtrRangoMontoEstrategia bean) throws Exception {
        return bean;
    }

    protected void setSave(MtrRangoMontoEstrategia dto) throws Exception {
        return;
    }

    protected void setDelete(Integer id) throws Exception {

    }

    protected void setDeleteAll() throws Exception {

    }

    /************************/
    /* METODOS CRUD Masivos */
    /************************/

    protected MtrRangoMontoEstrategia setUploadExcel(Cell currentCell, MtrRangoMontoEstrategia mtrRangoMontoEstrategia, int contador) throws Exception {
        mtrRangoMontoEstrategia = super.setUploadExcel(currentCell, mtrRangoMontoEstrategia, contador);
        return mtrRangoMontoEstrategia;
    }

    protected String setSaveMasivo(MtrRangoMontoEstrategia dto) throws Exception {
        return "";
    }

    protected List<MtrRangoMontoEstrategia> setBeforeDeleteMasivo(List<MtrRangoMontoEstrategia> listaDto) throws Exception {
        return listaDto;
    }

    protected void setAfterDeleteMasivo() throws Exception {
        return;
    }

    /*****************************/
    /* Metodos que generan Excel */
    /*****************************/

    protected void setDownloadExcelItem(MtrRangoMontoEstrategia bean, HSSFRow dataRow) {

    }

    protected void setDownloadExcel(HSSFSheet sheet) {

    }

    /*****************/
    /* Otros Metodos */
    /*****************/

    protected String setGraphDescripcionByMtrMoneda(MtrMoneda mtrMoneda) {
        return mtrMoneda.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrMoneda() {
        return "MtrMoneda";
    }

    protected String setGraphBarChartTituloByMtrMoneda() {
        return "MtrMoneda";
    }

}

/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.incloud.hcp.service.impl;

import com.incloud.hcp.common.enums.AppParametriaLabelEnum;
import com.incloud.hcp.common.enums.AppParametriaModuloEnum;
import com.incloud.hcp.common.excel.ExcelDefault;
import com.incloud.hcp.common.graph.GraphBarChart;
import com.incloud.hcp.common.graph.GraphBean;
import com.incloud.hcp.common.graph.GraphDataset;
import com.incloud.hcp.common.graph.GraphPieChart;
import com.incloud.hcp.domain.*;
import com.incloud.hcp.domain.response.FacFacturaResponse;
import com.incloud.hcp.exception.ServiceException;
import com.incloud.hcp.repository.delta.*;
import com.incloud.hcp.service.FacFacturaService;
import com.incloud.hcp.service._framework.bean.BeanCargaMasivoDTO;
import com.incloud.hcp.service._framework.bean.BeanListaMasivoDTO;
import com.incloud.hcp.service._framework.impl.JPACustomServiceImpl;
import com.incloud.hcp.service.delta.*;
import com.incloud.hcp.service.requireNew.FacFacturaRequireNewService;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.utils.Constants;
import com.incloud.hcp.utils.DateUtils;
import com.incloud.hcp.utils.PredicateUtils;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

/**
 * A simple DTO Facility for FacFactura.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public abstract class FacFacturaServiceImpl extends JPACustomServiceImpl<FacFacturaResponse, FacFactura, Integer> implements FacFacturaService {

    protected final String NAME_SHEET = "FacFactura";
    protected final String CONFIG_TITLE = "com/incloud/hcp/excel/FacFacturaExcel.xml";
    private final Integer REGISTROS_COLOR = 10;

    @Autowired
    protected AppParametriaDeltaRepository appParametriaDeltaRepository;

    @Autowired
    protected FacFacturaDeltaRepository facFacturaDeltaRepository;

    @Autowired
    protected FacFacturaRequireNewService facFacturaRequireNewService;

    @Autowired
    protected MtrEstadoDeltaService mtrEstadoDeltaService;

    @Autowired
    protected MtrEstadoDeltaRepository mtrEstadoDeltaRepository;

    @Autowired
    protected MtrMonedaDeltaService mtrMonedaDeltaService;

    @Autowired
    protected MtrMonedaDeltaRepository mtrMonedaDeltaRepository;

    @Autowired
    protected MtrDetraccionDeltaService mtrDetraccionDeltaService;

    @Autowired
    protected MtrDetraccionDeltaRepository mtrDetraccionDeltaRepository;

    @Autowired
    protected MtrProveedorDeltaService mtrProveedorDeltaService;

    @Autowired
    protected MtrProveedorDeltaRepository mtrProveedorDeltaRepository;

    @Autowired
    protected MtrSociedadDeltaService mtrSociedadDeltaService;

    @Autowired
    protected MtrSociedadDeltaRepository mtrSociedadDeltaRepository;

    /*****************************/
    /* Metodos de Busqueda       */
    /*****************************/

    protected final ExampleMatcher setAbstractFind(ExampleMatcher matcher) {
        matcher = ExampleMatcher.matching() //
                .withMatcher(FacFactura_.serieFactura.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(FacFactura_.numeroFactura.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(FacFactura_.tipoFactura.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(FacFactura_.tipoComprobanteFactura.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(FacFactura_.glosa.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(FacFactura_.existeContrato.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(FacFactura_.estadoRetornoSunat.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(FacFactura_.detalleServicio.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(FacFactura_.indicadorConCertificado.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(FacFactura_.concepto.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(FacFactura_.codigoCorrelativoAdjunto.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(FacFactura_.estado.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(FacFactura_.indAprobacionRechazoFinal.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(FacFactura_.indEstadoAdjunto.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(FacFactura_.documentoPagoSap.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(FacFactura_.numeroFacturaSap.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(FacFactura_.anioFacturaSap.getName(), match -> match.ignoreCase().startsWith());
        return matcher;
    }

    protected abstract Sort setFindAll(Sort sort);

    protected abstract Sort setFind(FacFactura req, ExampleMatcher matcher, Example<FacFactura> example, Sort sort);

    protected abstract void setFindPaginated(PageRequestByExample<FacFactura> req, ExampleMatcher matcher, Example<FacFactura> example);

    protected final FacFactura setObtenerBeanResponse(FacFacturaResponse bean) {
        return bean.getBean();
    }

    protected final Class<FacFactura> setObtenerClassBean() {
        return FacFactura.class;
    }

    protected List<Predicate> setAbstractPredicate(FacFacturaResponse bean, CriteriaBuilder cb, Root<FacFactura> root) {
        List<Predicate> predicates = new ArrayList<>();
        FacFactura entity = bean.getBean();
        /* Obtener condiciones */
        PredicateUtils.addPredicates(predicates, bean.getIdCondicion(), "id", entity.getId(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getSerieFacturaCondicion(), "serieFactura", entity.getSerieFactura(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getNumeroFacturaCondicion(), "numeroFactura", entity.getNumeroFactura(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getTipoFacturaCondicion(), "tipoFactura", entity.getTipoFactura(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getTipoComprobanteFacturaCondicion(), "tipoComprobanteFactura", entity.getTipoComprobanteFactura(), cb,
                root);
        PredicateUtils.addPredicates(predicates, bean.getMontoCondicion(), "monto", entity.getMonto(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getMontoOtrosCargosCondicion(), "montoOtrosCargos", entity.getMontoOtrosCargos(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getMontoIgvCondicion(), "montoIgv", entity.getMontoIgv(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getMontoFinalCondicion(), "montoFinal", entity.getMontoFinal(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getGlosaCondicion(), "glosa", entity.getGlosa(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getFechaFacturaCondicion(), "fechaFactura", entity.getFechaFactura(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getFechaEmisionCondicion(), "fechaEmision", entity.getFechaEmision(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getFechaCreacionCondicion(), "fechaCreacion", entity.getFechaCreacion(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getExisteContratoCondicion(), "existeContrato", entity.getExisteContrato(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getEstadoRetornoSunatCondicion(), "estadoRetornoSunat", entity.getEstadoRetornoSunat(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getDetalleServicioCondicion(), "detalleServicio", entity.getDetalleServicio(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getIndicadorConCertificadoCondicion(), "indicadorConCertificado", entity.getIndicadorConCertificado(), cb,
                root);
        PredicateUtils.addPredicates(predicates, bean.getConceptoCondicion(), "concepto", entity.getConcepto(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getCodigoCorrelativoAdjuntoCondicion(), "codigoCorrelativoAdjunto", entity.getCodigoCorrelativoAdjunto(),
                cb, root);
        PredicateUtils.addPredicates(predicates, bean.getEstadoCondicion(), "estado", entity.getEstado(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getFechaEstimadaPagoCondicion(), "fechaEstimadaPago", entity.getFechaEstimadaPago(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getFechaPagoCondicion(), "fechaPago", entity.getFechaPago(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getFechaAprobacionCondicion(), "fechaAprobacion", entity.getFechaAprobacion(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getNroIteracionCondicion(), "nroIteracion", entity.getNroIteracion(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getFechaPosibleVencimientoCondicion(), "fechaPosibleVencimiento", entity.getFechaPosibleVencimiento(), cb,
                root);
        PredicateUtils.addPredicates(predicates, bean.getIndAprobacionRechazoFinalCondicion(), "indAprobacionRechazoFinal",
                entity.getIndAprobacionRechazoFinal(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getIndEstadoAdjuntoCondicion(), "indEstadoAdjunto", entity.getIndEstadoAdjunto(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getDocumentoPagoSapCondicion(), "documentoPagoSap", entity.getDocumentoPagoSap(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getNumeroFacturaSapCondicion(), "numeroFacturaSap", entity.getNumeroFacturaSap(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getAnioFacturaSapCondicion(), "anioFacturaSap", entity.getAnioFacturaSap(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrEstadoCondicion(), "mtrEstado", entity.getMtrEstado(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrMonedaCondicion(), "mtrMoneda", entity.getMtrMoneda(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrDetraccionCondicion(), "mtrDetraccion", entity.getMtrDetraccion(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrProveedorCondicion(), "mtrProveedor", entity.getMtrProveedor(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrSociedadCondicion(), "mtrSociedad", entity.getMtrSociedad(), cb, root);
        /* Obtener valores de Lista */
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "id", bean.getIdList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "serieFactura", bean.getSerieFacturaList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "numeroFactura", bean.getNumeroFacturaList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "tipoFactura", bean.getTipoFacturaList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "tipoComprobanteFactura", bean.getTipoComprobanteFacturaList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "monto", bean.getMontoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "montoOtrosCargos", bean.getMontoOtrosCargosList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "montoIgv", bean.getMontoIgvList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "montoFinal", bean.getMontoFinalList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "glosa", bean.getGlosaList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "fechaFactura", bean.getFechaFacturaList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "fechaEmision", bean.getFechaEmisionList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "fechaCreacion", bean.getFechaCreacionList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "existeContrato", bean.getExisteContratoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "estadoRetornoSunat", bean.getEstadoRetornoSunatList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "detalleServicio", bean.getDetalleServicioList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "indicadorConCertificado", bean.getIndicadorConCertificadoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "concepto", bean.getConceptoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "codigoCorrelativoAdjunto", bean.getCodigoCorrelativoAdjuntoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "estado", bean.getEstadoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "fechaEstimadaPago", bean.getFechaEstimadaPagoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "fechaPago", bean.getFechaPagoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "fechaAprobacion", bean.getFechaAprobacionList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "nroIteracion", bean.getNroIteracionList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "fechaPosibleVencimiento", bean.getFechaPosibleVencimientoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "indAprobacionRechazoFinal", bean.getIndAprobacionRechazoFinalList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "indEstadoAdjunto", bean.getIndEstadoAdjuntoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "documentoPagoSap", bean.getDocumentoPagoSapList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "numeroFacturaSap", bean.getNumeroFacturaSapList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "anioFacturaSap", bean.getAnioFacturaSapList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrEstado", bean.getMtrEstadoList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrMoneda", bean.getMtrMonedaList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrDetraccion", bean.getMtrDetraccionList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrProveedor", bean.getMtrProveedorList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrSociedad", bean.getMtrSociedadList(), cb, root);
        return predicates;
    }

    /****************/
    /* METODOS CRUD */
    /****************/

    protected final String validacionesPrevias(FacFactura bean) throws Exception {
        String mensaje = "";
        if (!Optional.of(bean.getSerieFactura()).isPresent()) {
            String msg = this.messageSource.getMessage("message.facFactura.serieFactura.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getNumeroFactura()).isPresent()) {
            String msg = this.messageSource.getMessage("message.facFactura.numeroFactura.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getTipoFactura()).isPresent()) {
            String msg = this.messageSource.getMessage("message.facFactura.tipoFactura.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getTipoComprobanteFactura()).isPresent()) {
            String msg = this.messageSource.getMessage("message.facFactura.tipoComprobanteFactura.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getMonto()).isPresent()) {
            String msg = this.messageSource.getMessage("message.facFactura.monto.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getMontoIgv()).isPresent()) {
            String msg = this.messageSource.getMessage("message.facFactura.montoIgv.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getMontoFinal()).isPresent()) {
            String msg = this.messageSource.getMessage("message.facFactura.montoFinal.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getFechaCreacion()).isPresent()) {
            String msg = this.messageSource.getMessage("message.facFactura.fechaCreacion.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getNroIteracion()).isPresent()) {
            String msg = this.messageSource.getMessage("message.facFactura.nroIteracion.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        String msg = this.setValidacionesPrevias(bean);
        if (StringUtils.isNotBlank(msg)) {
            mensaje += "* " + msg + "<br/>";
        }
        return mensaje;
    }

    protected String setValidacionesPrevias(FacFactura bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected String validacionesPreviasCreate(FacFactura bean) throws Exception {
        String msg = null;
        FacFactura validar = null;
        return msg;
    }

    protected String validacionesPreviasSave(FacFactura bean) throws Exception {
        String msg = null;
        FacFactura validar = null;
        return msg;
    }

    protected FacFactura completarDatosBean(FacFactura bean) throws Exception {
        BigDecimal data = new BigDecimal(0.00);
        if (Optional.ofNullable(bean.getMonto()).isPresent()) {
            bean.setMonto(bean.getMonto().setScale(2, BigDecimal.ROUND_HALF_UP));
        }
        if (Optional.ofNullable(bean.getMontoOtrosCargos()).isPresent()) {
            bean.setMontoOtrosCargos(bean.getMontoOtrosCargos().setScale(2, BigDecimal.ROUND_HALF_UP));
        }
        if (Optional.ofNullable(bean.getMontoIgv()).isPresent()) {
            bean.setMontoIgv(bean.getMontoIgv().setScale(2, BigDecimal.ROUND_HALF_UP));
        }
        if (Optional.ofNullable(bean.getMontoFinal()).isPresent()) {
            bean.setMontoFinal(bean.getMontoFinal().setScale(2, BigDecimal.ROUND_HALF_UP));
        }
        bean = this.setCompletarDatosBean(bean);
        return bean;
    }

    protected FacFactura setCompletarDatosBean(FacFactura bean) throws Exception {
        return bean;
    }

    protected final FacFactura setAbstractCreate(FacFactura dto) throws Exception {
        FacFactura bean = new FacFactura();
        bean = (FacFactura) BeanUtils.cloneBean(dto);
        return bean;
    }

    /************************/
    /* METODOS CRUD Masivos */
    /************************/

    protected FacFactura setUploadExcel(Cell currentCell, FacFactura facFactura, int contador) throws Exception {
        Double valorDouble = new Double(0);
        BigDecimal valorDecimal = new BigDecimal(0);
        Boolean valorBoolean = new Boolean(true);
        String valorCadena = "";
        switch (contador) {
        case 1:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 10) {
                    throw new ServiceException("Valor Campo serieFactura contiene mas de 10 caracter(es)");
                }
                facFactura.setSerieFactura(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo serieFactura está en formato incorrecto");
            }
            break;
        case 2:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 30) {
                    throw new ServiceException("Valor Campo numeroFactura contiene mas de 30 caracter(es)");
                }
                facFactura.setNumeroFactura(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo numeroFactura está en formato incorrecto");
            }
            break;
        case 3:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 1) {
                    throw new ServiceException("Valor Campo tipoFactura contiene mas de 1 caracter(es)");
                }
                facFactura.setTipoFactura(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo tipoFactura está en formato incorrecto");
            }
            break;
        case 4:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 2) {
                    throw new ServiceException("Valor Campo tipoComprobanteFactura contiene mas de 2 caracter(es)");
                }
                facFactura.setTipoComprobanteFactura(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo tipoComprobanteFactura está en formato incorrecto");
            }
            break;
        case 5:
            try {
                valorDecimal = new BigDecimal(currentCell.getNumericCellValue());
                facFactura.setMonto(valorDecimal);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo monto está en formato incorrecto");
            }
            break;
        case 6:
            try {
                valorDecimal = new BigDecimal(currentCell.getNumericCellValue());
                facFactura.setMontoOtrosCargos(valorDecimal);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo montoOtrosCargos está en formato incorrecto");
            }
            break;
        case 7:
            try {
                valorDecimal = new BigDecimal(currentCell.getNumericCellValue());
                facFactura.setMontoIgv(valorDecimal);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo montoIgv está en formato incorrecto");
            }
            break;
        case 8:
            try {
                valorDecimal = new BigDecimal(currentCell.getNumericCellValue());
                facFactura.setMontoFinal(valorDecimal);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo montoFinal está en formato incorrecto");
            }
            break;
        case 9:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 255) {
                    throw new ServiceException("Valor Campo glosa contiene mas de 255 caracter(es)");
                }
                facFactura.setGlosa(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo glosa está en formato incorrecto");
            }
            break;
        case 10:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                facFactura.setFechaFactura(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo fechaFactura está en formato incorrecto");
            }
            break;
        case 11:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                facFactura.setFechaEmision(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo fechaEmision está en formato incorrecto");
            }
            break;
        case 12:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                facFactura.setFechaCreacion(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo fechaCreacion está en formato incorrecto");
            }
            break;
        case 13:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 1) {
                    throw new ServiceException("Valor Campo existeContrato contiene mas de 1 caracter(es)");
                }
                facFactura.setExisteContrato(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo existeContrato está en formato incorrecto");
            }
            break;
        case 14:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 1) {
                    throw new ServiceException("Valor Campo estadoRetornoSunat contiene mas de 1 caracter(es)");
                }
                facFactura.setEstadoRetornoSunat(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo estadoRetornoSunat está en formato incorrecto");
            }
            break;
        case 15:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 255) {
                    throw new ServiceException("Valor Campo detalleServicio contiene mas de 255 caracter(es)");
                }
                facFactura.setDetalleServicio(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo detalleServicio está en formato incorrecto");
            }
            break;
        case 16:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 1) {
                    throw new ServiceException("Valor Campo indicadorConCertificado contiene mas de 1 caracter(es)");
                }
                facFactura.setIndicadorConCertificado(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo indicadorConCertificado está en formato incorrecto");
            }
            break;
        case 17:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 255) {
                    throw new ServiceException("Valor Campo concepto contiene mas de 255 caracter(es)");
                }
                facFactura.setConcepto(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo concepto está en formato incorrecto");
            }
            break;
        case 18:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 20) {
                    throw new ServiceException("Valor Campo codigoCorrelativoAdjunto contiene mas de 20 caracter(es)");
                }
                facFactura.setCodigoCorrelativoAdjunto(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo codigoCorrelativoAdjunto está en formato incorrecto");
            }
            break;
        case 19:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 1) {
                    throw new ServiceException("Valor Campo estado contiene mas de 1 caracter(es)");
                }
                facFactura.setEstado(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo estado está en formato incorrecto");
            }
            break;
        case 20:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                facFactura.setFechaEstimadaPago(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo fechaEstimadaPago está en formato incorrecto");
            }
            break;
        case 21:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                facFactura.setFechaPago(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo fechaPago está en formato incorrecto");
            }
            break;
        case 22:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                facFactura.setFechaAprobacion(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo fechaAprobacion está en formato incorrecto");
            }
            break;
        case 23:
            try {
                valorDouble = new Double(currentCell.getNumericCellValue());
                facFactura.setNroIteracion(valorDouble.intValue());
            } catch (Exception e) {
                throw new ServiceException("Valor Campo nroIteracion está en formato incorrecto");
            }
            break;
        case 24:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                facFactura.setFechaPosibleVencimiento(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo fechaPosibleVencimiento está en formato incorrecto");
            }
            break;
        case 25:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 1) {
                    throw new ServiceException("Valor Campo indAprobacionRechazoFinal contiene mas de 1 caracter(es)");
                }
                facFactura.setIndAprobacionRechazoFinal(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo indAprobacionRechazoFinal está en formato incorrecto");
            }
            break;
        case 26:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 1) {
                    throw new ServiceException("Valor Campo indEstadoAdjunto contiene mas de 1 caracter(es)");
                }
                facFactura.setIndEstadoAdjunto(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo indEstadoAdjunto está en formato incorrecto");
            }
            break;
        case 27:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 20) {
                    throw new ServiceException("Valor Campo documentoPagoSap contiene mas de 20 caracter(es)");
                }
                facFactura.setDocumentoPagoSap(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo documentoPagoSap está en formato incorrecto");
            }
            break;
        case 28:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 20) {
                    throw new ServiceException("Valor Campo numeroFacturaSap contiene mas de 20 caracter(es)");
                }
                facFactura.setNumeroFacturaSap(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo numeroFacturaSap está en formato incorrecto");
            }
            break;
        case 29:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 10) {
                    throw new ServiceException("Valor Campo anioFacturaSap contiene mas de 10 caracter(es)");
                }
                facFactura.setAnioFacturaSap(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo anioFacturaSap está en formato incorrecto");
            }
            break;
        default:
            break;
        }
        return facFactura;
    }

    protected AppParametria setObtenerRegistroConfiguracionUploadExcel() {
        AppParametria appParametriaData = this.appParametriaDeltaRepository.getByModuloAndLabelAndStatus(AppParametriaModuloEnum.CARGA_EXCEL.getEstado(),
                AppParametriaLabelEnum.INICIO_REGISTRO_DATA.getEstado(), Constants.ESTADO_ACTIVO);
        return appParametriaData;
    }

    protected FacFactura setInicializarBeanUpdateExcel() {
        FacFactura bean = new FacFactura();
        bean.setId(null);
        return bean;
    }

    protected final Integer setObtenerId(FacFactura bean) {
        return bean.getId();
    }

    /************************/
    /* Instancia de Bean    */
    /************************/

    protected final FacFactura createInstance() {
        FacFactura facFactura = new FacFactura();
        return facFactura;
    }

    protected final BeanCargaMasivoDTO<FacFactura> createInstanceMasivoDTO() {
        BeanCargaMasivoDTO<FacFactura> beanCargaMasivoDTO = new BeanCargaMasivoDTO<FacFactura>();
        return beanCargaMasivoDTO;

    }

    protected final BeanListaMasivoDTO<BeanCargaMasivoDTO<FacFactura>> createInstanceListaMasivoDTO() {
        BeanListaMasivoDTO<BeanCargaMasivoDTO<FacFactura>> beanCargaMasivoDTOBeanListaMasivoDTO = new BeanListaMasivoDTO<BeanCargaMasivoDTO<FacFactura>>();
        return beanCargaMasivoDTOBeanListaMasivoDTO;
    }

    /*****************************/
    /* Metodos que generan Excel */
    /*****************************/

    protected String devuelveNombreSheet() {
        return this.NAME_SHEET;
    }

    protected String devuelveListaHeaderExcelXML() {
        return this.CONFIG_TITLE;
    }

    protected int setAbstractDownloadExcel(FacFactura bean, HSSFRow dataRow) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getSerieFactura(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getNumeroFactura(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getTipoFactura(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getTipoComprobanteFactura(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getMonto(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getMontoOtrosCargos(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getMontoIgv(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getMontoFinal(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getGlosa(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getFechaFactura(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getFechaEmision(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getFechaCreacion(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getExisteContrato(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getEstadoRetornoSunat(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getDetalleServicio(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getIndicadorConCertificado(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getConcepto(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getCodigoCorrelativoAdjunto(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getEstado(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getFechaEstimadaPago(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getFechaPago(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getFechaAprobacion(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getNroIteracion(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getFechaPosibleVencimiento(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getIndAprobacionRechazoFinal(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getIndEstadoAdjunto(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getDocumentoPagoSap(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getNumeroFacturaSap(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getAnioFacturaSap(), dataRow.createCell(contador));
        contador++;
        return contador;
    }

    protected int setAbstractDownloadExcelSXLSX(FacFactura bean, Row dataRow, List<CellStyle> cellStyleList) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getSerieFactura(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getNumeroFactura(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getTipoFactura(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getTipoComprobanteFactura(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getMonto(), dataRow.createCell(contador), "N", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getMontoOtrosCargos(), dataRow.createCell(contador), "N", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getMontoIgv(), dataRow.createCell(contador), "N", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getMontoFinal(), dataRow.createCell(contador), "N", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getGlosa(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getFechaFactura(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getFechaEmision(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getFechaCreacion(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getExisteContrato(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getEstadoRetornoSunat(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getDetalleServicio(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getIndicadorConCertificado(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getConcepto(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getCodigoCorrelativoAdjunto(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getEstado(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getFechaEstimadaPago(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getFechaPago(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getFechaAprobacion(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getNroIteracion(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getFechaPosibleVencimiento(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getIndAprobacionRechazoFinal(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getIndEstadoAdjunto(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getDocumentoPagoSap(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getNumeroFacturaSap(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getAnioFacturaSap(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        return contador;
    }

    protected String setAbstractGenerateInsertExcelSXLSX(FacFactura bean) {
        String fechaS = "";
        String sqlInsert = "INSERT INTO fac_factura(";
        sqlInsert = sqlInsert + "fac_factura_id" + ", ";
        sqlInsert = sqlInsert + "serie_factura" + ", ";
        sqlInsert = sqlInsert + "numero_factura" + ", ";
        sqlInsert = sqlInsert + "tipo_factura" + ", ";
        sqlInsert = sqlInsert + "tipo_comprobante_factura" + ", ";
        sqlInsert = sqlInsert + "monto" + ", ";
        sqlInsert = sqlInsert + "monto_otros_cargos" + ", ";
        sqlInsert = sqlInsert + "monto_igv" + ", ";
        sqlInsert = sqlInsert + "monto_final" + ", ";
        sqlInsert = sqlInsert + "glosa" + ", ";
        sqlInsert = sqlInsert + "fecha_factura" + ", ";
        sqlInsert = sqlInsert + "fecha_emision" + ", ";
        sqlInsert = sqlInsert + "fecha_creacion" + ", ";
        sqlInsert = sqlInsert + "existe_contrato" + ", ";
        sqlInsert = sqlInsert + "estado_retorno_sunat" + ", ";
        sqlInsert = sqlInsert + "detalle_servicio" + ", ";
        sqlInsert = sqlInsert + "indicador_con_certificado" + ", ";
        sqlInsert = sqlInsert + "concepto" + ", ";
        sqlInsert = sqlInsert + "codigo_correlativo_adjunto" + ", ";
        sqlInsert = sqlInsert + "estado" + ", ";
        sqlInsert = sqlInsert + "fecha_estimada_pago" + ", ";
        sqlInsert = sqlInsert + "fecha_pago" + ", ";
        sqlInsert = sqlInsert + "fecha_aprobacion" + ", ";
        sqlInsert = sqlInsert + "nro_iteracion" + ", ";
        sqlInsert = sqlInsert + "fecha_posible_vencimiento" + ", ";
        sqlInsert = sqlInsert + "ind_aprobacion_rechazo_final" + ", ";
        sqlInsert = sqlInsert + "ind_estado_adjunto" + ", ";
        sqlInsert = sqlInsert + "documento_pago_sap" + ", ";
        sqlInsert = sqlInsert + "numero_factura_sap" + ", ";
        sqlInsert = sqlInsert + "anio_factura_sap" + ", ";
        sqlInsert = sqlInsert + "mtr_estado_id" + ", ";
        sqlInsert = sqlInsert + "mtr_proveedor_id" + ", ";
        sqlInsert = sqlInsert + "mtr_moneda_id" + ", ";
        sqlInsert = sqlInsert + "mtr_detraccion_id" + ", ";
        sqlInsert = sqlInsert + "mtr_sociedad_id" + ")";
        sqlInsert = sqlInsert + " VALUES (";
        sqlInsert = sqlInsert + bean.getId() + ", ";
        if (StringUtils.isBlank(bean.getSerieFactura())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getSerieFactura() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getNumeroFactura())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getNumeroFactura() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getTipoFactura())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getTipoFactura() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getTipoComprobanteFactura())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getTipoComprobanteFactura() + "'" + ", ";
        }
        sqlInsert = sqlInsert + bean.getMonto() + ", ";
        sqlInsert = sqlInsert + bean.getMontoOtrosCargos() + ", ";
        sqlInsert = sqlInsert + bean.getMontoIgv() + ", ";
        sqlInsert = sqlInsert + bean.getMontoFinal() + ", ";
        if (StringUtils.isBlank(bean.getGlosa())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getGlosa() + "'" + ", ";
        }
        if (bean.getFechaFactura() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaFactura());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        if (bean.getFechaEmision() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaEmision());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        if (bean.getFechaCreacion() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaCreacion());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        if (StringUtils.isBlank(bean.getExisteContrato())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getExisteContrato() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getEstadoRetornoSunat())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getEstadoRetornoSunat() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getDetalleServicio())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getDetalleServicio() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getIndicadorConCertificado())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getIndicadorConCertificado() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getConcepto())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getConcepto() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getCodigoCorrelativoAdjunto())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getCodigoCorrelativoAdjunto() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getEstado())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getEstado() + "'" + ", ";
        }
        if (bean.getFechaEstimadaPago() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaEstimadaPago());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        if (bean.getFechaPago() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaPago());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        if (bean.getFechaAprobacion() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaAprobacion());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        sqlInsert = sqlInsert + bean.getNroIteracion() + ", ";
        if (bean.getFechaPosibleVencimiento() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaPosibleVencimiento());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        if (StringUtils.isBlank(bean.getIndAprobacionRechazoFinal())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getIndAprobacionRechazoFinal() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getIndEstadoAdjunto())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getIndEstadoAdjunto() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getDocumentoPagoSap())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getDocumentoPagoSap() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getNumeroFacturaSap())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getNumeroFacturaSap() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getAnioFacturaSap())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getAnioFacturaSap() + "'" + ", ";
        }
        sqlInsert = sqlInsert + bean.getMtrEstado().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrMoneda().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrDetraccion().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrProveedor().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrSociedad().getId();
        sqlInsert = sqlInsert + " );";
        return sqlInsert;
    }

    /*****************/
    /* Otros Metodos */
    /*****************/

    public Long countByMtrEstado(MtrEstado mtrEstado) {
        return this.facFacturaDeltaRepository.countByMtrEstado(mtrEstado);
    }

    public GraphBean graphByMtrEstado() {
        List<MtrEstado> lista = this.mtrEstadoDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrEstado bean : lista) {
            Long valor = this.facFacturaDeltaRepository.countByMtrEstado(bean);
            String descripcion = this.setGraphDescripcionByMtrEstado(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrEstado();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrEstado();
        contador = 0;
        contadorColor = 0;
        for (MtrEstado bean : lista) {
            Long valor = this.facFacturaDeltaRepository.countByMtrEstado(bean);
            String descripcion = this.setGraphDescripcionByMtrEstado(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrEstado(MtrEstado mtrEstado) {
        return mtrEstado.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrEstado() {
        return "MtrEstado";
    }

    protected String setGraphBarChartTituloByMtrEstado() {
        return "MtrEstado";
    }

    public Long countByMtrMoneda(MtrMoneda mtrMoneda) {
        return this.facFacturaDeltaRepository.countByMtrMoneda(mtrMoneda);
    }

    public GraphBean graphByMtrMoneda() {
        List<MtrMoneda> lista = this.mtrMonedaDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrMoneda bean : lista) {
            Long valor = this.facFacturaDeltaRepository.countByMtrMoneda(bean);
            String descripcion = this.setGraphDescripcionByMtrMoneda(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrMoneda();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrMoneda();
        contador = 0;
        contadorColor = 0;
        for (MtrMoneda bean : lista) {
            Long valor = this.facFacturaDeltaRepository.countByMtrMoneda(bean);
            String descripcion = this.setGraphDescripcionByMtrMoneda(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrMoneda(MtrMoneda mtrMoneda) {
        return mtrMoneda.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrMoneda() {
        return "MtrMoneda";
    }

    protected String setGraphBarChartTituloByMtrMoneda() {
        return "MtrMoneda";
    }

    public Long countByMtrDetraccion(MtrDetraccion mtrDetraccion) {
        return this.facFacturaDeltaRepository.countByMtrDetraccion(mtrDetraccion);
    }

    public GraphBean graphByMtrDetraccion() {
        List<MtrDetraccion> lista = this.mtrDetraccionDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrDetraccion bean : lista) {
            Long valor = this.facFacturaDeltaRepository.countByMtrDetraccion(bean);
            String descripcion = this.setGraphDescripcionByMtrDetraccion(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrDetraccion();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrDetraccion();
        contador = 0;
        contadorColor = 0;
        for (MtrDetraccion bean : lista) {
            Long valor = this.facFacturaDeltaRepository.countByMtrDetraccion(bean);
            String descripcion = this.setGraphDescripcionByMtrDetraccion(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrDetraccion(MtrDetraccion mtrDetraccion) {
        return mtrDetraccion.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrDetraccion() {
        return "MtrDetraccion";
    }

    protected String setGraphBarChartTituloByMtrDetraccion() {
        return "MtrDetraccion";
    }

    public Long countByMtrProveedor(MtrProveedor mtrProveedor) {
        return this.facFacturaDeltaRepository.countByMtrProveedor(mtrProveedor);
    }

    public GraphBean graphByMtrProveedor() {
        List<MtrProveedor> lista = this.mtrProveedorDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrProveedor bean : lista) {
            Long valor = this.facFacturaDeltaRepository.countByMtrProveedor(bean);
            String descripcion = this.setGraphDescripcionByMtrProveedor(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrProveedor();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrProveedor();
        contador = 0;
        contadorColor = 0;
        for (MtrProveedor bean : lista) {
            Long valor = this.facFacturaDeltaRepository.countByMtrProveedor(bean);
            String descripcion = this.setGraphDescripcionByMtrProveedor(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrProveedor(MtrProveedor mtrProveedor) {
        return mtrProveedor.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrProveedor() {
        return "MtrProveedor";
    }

    protected String setGraphBarChartTituloByMtrProveedor() {
        return "MtrProveedor";
    }

    public Long countByMtrSociedad(MtrSociedad mtrSociedad) {
        return this.facFacturaDeltaRepository.countByMtrSociedad(mtrSociedad);
    }

    public GraphBean graphByMtrSociedad() {
        List<MtrSociedad> lista = this.mtrSociedadDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrSociedad bean : lista) {
            Long valor = this.facFacturaDeltaRepository.countByMtrSociedad(bean);
            String descripcion = this.setGraphDescripcionByMtrSociedad(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrSociedad();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrSociedad();
        contador = 0;
        contadorColor = 0;
        for (MtrSociedad bean : lista) {
            Long valor = this.facFacturaDeltaRepository.countByMtrSociedad(bean);
            String descripcion = this.setGraphDescripcionByMtrSociedad(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrSociedad(MtrSociedad mtrSociedad) {
        return mtrSociedad.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrSociedad() {
        return "MtrSociedad";
    }

    protected String setGraphBarChartTituloByMtrSociedad() {
        return "MtrSociedad";
    }

}

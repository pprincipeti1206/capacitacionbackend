/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.incloud.hcp.service.impl;

import com.incloud.hcp.common.enums.AppParametriaLabelEnum;
import com.incloud.hcp.common.enums.AppParametriaModuloEnum;
import com.incloud.hcp.common.excel.ExcelDefault;
import com.incloud.hcp.common.graph.GraphBarChart;
import com.incloud.hcp.common.graph.GraphBean;
import com.incloud.hcp.common.graph.GraphDataset;
import com.incloud.hcp.common.graph.GraphPieChart;
import com.incloud.hcp.domain.*;
import com.incloud.hcp.domain.response.CerNotaPedidoDetalleResponse;
import com.incloud.hcp.exception.ServiceException;
import com.incloud.hcp.repository.delta.*;
import com.incloud.hcp.service.CerNotaPedidoDetalleService;
import com.incloud.hcp.service._framework.bean.BeanCargaMasivoDTO;
import com.incloud.hcp.service._framework.bean.BeanListaMasivoDTO;
import com.incloud.hcp.service._framework.impl.JPACustomServiceImpl;
import com.incloud.hcp.service.delta.*;
import com.incloud.hcp.service.requireNew.CerNotaPedidoDetalleRequireNewService;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.utils.Constants;
import com.incloud.hcp.utils.DateUtils;
import com.incloud.hcp.utils.PredicateUtils;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

/**
 * A simple DTO Facility for CerNotaPedidoDetalle.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public abstract class CerNotaPedidoDetalleServiceImpl extends JPACustomServiceImpl<CerNotaPedidoDetalleResponse, CerNotaPedidoDetalle, Integer>
        implements CerNotaPedidoDetalleService {

    protected final String NAME_SHEET = "CerNotaPedidoDetalle";
    protected final String CONFIG_TITLE = "com/incloud/hcp/excel/CerNotaPedidoDetalleExcel.xml";
    private final Integer REGISTROS_COLOR = 10;

    @Autowired
    protected AppParametriaDeltaRepository appParametriaDeltaRepository;

    @Autowired
    protected CerNotaPedidoDetalleDeltaRepository cerNotaPedidoDetalleDeltaRepository;

    @Autowired
    protected CerNotaPedidoDetalleRequireNewService cerNotaPedidoDetalleRequireNewService;

    @Autowired
    protected MtrCuentaImputacionDeltaService mtrCuentaImputacionDeltaService;

    @Autowired
    protected MtrCuentaImputacionDeltaRepository mtrCuentaImputacionDeltaRepository;

    @Autowired
    protected MtrBienServicioDeltaService mtrBienServicioDeltaService;

    @Autowired
    protected MtrBienServicioDeltaRepository mtrBienServicioDeltaRepository;

    @Autowired
    protected CerNotaPedidoDeltaService cerNotaPedidoDeltaService;

    @Autowired
    protected CerNotaPedidoDeltaRepository cerNotaPedidoDeltaRepository;

    @Autowired
    protected MtrCentroAlmacenDeltaService mtrCentroAlmacenDeltaService;

    @Autowired
    protected MtrCentroAlmacenDeltaRepository mtrCentroAlmacenDeltaRepository;

    @Autowired
    protected MtrUnidadMedidaDeltaService mtrUnidadMedidaDeltaService;

    @Autowired
    protected MtrUnidadMedidaDeltaRepository mtrUnidadMedidaDeltaRepository;

    @Autowired
    protected MtrCuentaMayorDeltaService mtrCuentaMayorDeltaService;

    @Autowired
    protected MtrCuentaMayorDeltaRepository mtrCuentaMayorDeltaRepository;

    /*****************************/
    /* Metodos de Busqueda       */
    /*****************************/

    protected final ExampleMatcher setAbstractFind(ExampleMatcher matcher) {
        matcher = ExampleMatcher.matching() //
                .withMatcher(CerNotaPedidoDetalle_.posicionSap.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerNotaPedidoDetalle_.cerCuentaMayor.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerNotaPedidoDetalle_.auxiliar.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerNotaPedidoDetalle_.ebeln.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerNotaPedidoDetalle_.extrow.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerNotaPedidoDetalle_.textoItem.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerNotaPedidoDetalle_.unidadTextoItem.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerNotaPedidoDetalle_.introw.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CerNotaPedidoDetalle_.plazoEntrega.getName(), match -> match.ignoreCase().startsWith());
        return matcher;
    }

    protected abstract Sort setFindAll(Sort sort);

    protected abstract Sort setFind(CerNotaPedidoDetalle req, ExampleMatcher matcher, Example<CerNotaPedidoDetalle> example, Sort sort);

    protected abstract void setFindPaginated(PageRequestByExample<CerNotaPedidoDetalle> req, ExampleMatcher matcher, Example<CerNotaPedidoDetalle> example);

    protected final CerNotaPedidoDetalle setObtenerBeanResponse(CerNotaPedidoDetalleResponse bean) {
        return bean.getBean();
    }

    protected final Class<CerNotaPedidoDetalle> setObtenerClassBean() {
        return CerNotaPedidoDetalle.class;
    }

    protected List<Predicate> setAbstractPredicate(CerNotaPedidoDetalleResponse bean, CriteriaBuilder cb, Root<CerNotaPedidoDetalle> root) {
        List<Predicate> predicates = new ArrayList<>();
        CerNotaPedidoDetalle entity = bean.getBean();
        /* Obtener condiciones */
        PredicateUtils.addPredicates(predicates, bean.getIdCondicion(), "id", entity.getId(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getPosicionSapCondicion(), "posicionSap", entity.getPosicionSap(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getPrecioUnitarioCondicion(), "precioUnitario", entity.getPrecioUnitario(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getCantidadRequeridaCondicion(), "cantidadRequerida", entity.getCantidadRequerida(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getCantidadEntregadaCondicion(), "cantidadEntregada", entity.getCantidadEntregada(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getCerCuentaMayorCondicion(), "cerCuentaMayor", entity.getCerCuentaMayor(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getFechaEntregaCondicion(), "fechaEntrega", entity.getFechaEntrega(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getIdPadreCondicion(), "idPadre", entity.getIdPadre(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getAuxiliarCondicion(), "auxiliar", entity.getAuxiliar(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getEbelnCondicion(), "ebeln", entity.getEbeln(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getExtrowCondicion(), "extrow", entity.getExtrow(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getTextoItemCondicion(), "textoItem", entity.getTextoItem(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getUnidadTextoItemCondicion(), "unidadTextoItem", entity.getUnidadTextoItem(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getIntrowCondicion(), "introw", entity.getIntrow(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getPlazoEntregaCondicion(), "plazoEntrega", entity.getPlazoEntrega(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getNuevaFechaEntregaCondicion(), "nuevaFechaEntrega", entity.getNuevaFechaEntrega(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrCuentaImputacionCondicion(), "mtrCuentaImputacion", entity.getMtrCuentaImputacion(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrBienServicioCondicion(), "mtrBienServicio", entity.getMtrBienServicio(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getCerNotaPedidoCondicion(), "cerNotaPedido", entity.getCerNotaPedido(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrCentroCondicion(), "mtrCentro", entity.getMtrCentro(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrAlmacenCondicion(), "mtrAlmacen", entity.getMtrAlmacen(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrUnidadMedidaCondicion(), "mtrUnidadMedida", entity.getMtrUnidadMedida(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrCuentaMayorCondicion(), "mtrCuentaMayor", entity.getMtrCuentaMayor(), cb, root);
        /* Obtener valores de Lista */
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "id", bean.getIdList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "posicionSap", bean.getPosicionSapList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "precioUnitario", bean.getPrecioUnitarioList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "cantidadRequerida", bean.getCantidadRequeridaList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "cantidadEntregada", bean.getCantidadEntregadaList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "cerCuentaMayor", bean.getCerCuentaMayorList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "fechaEntrega", bean.getFechaEntregaList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "idPadre", bean.getIdPadreList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "auxiliar", bean.getAuxiliarList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "ebeln", bean.getEbelnList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "extrow", bean.getExtrowList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "textoItem", bean.getTextoItemList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "unidadTextoItem", bean.getUnidadTextoItemList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "introw", bean.getIntrowList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "plazoEntrega", bean.getPlazoEntregaList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "nuevaFechaEntrega", bean.getNuevaFechaEntregaList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrCuentaImputacion", bean.getMtrCuentaImputacionList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrBienServicio", bean.getMtrBienServicioList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "cerNotaPedido", bean.getCerNotaPedidoList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrCentro", bean.getMtrCentroList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrAlmacen", bean.getMtrAlmacenList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrUnidadMedida", bean.getMtrUnidadMedidaList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrCuentaMayor", bean.getMtrCuentaMayorList(), cb, root);
        return predicates;
    }

    /****************/
    /* METODOS CRUD */
    /****************/

    protected final String validacionesPrevias(CerNotaPedidoDetalle bean) throws Exception {
        String mensaje = "";
        if (!Optional.of(bean.getPosicionSap()).isPresent()) {
            String msg = this.messageSource.getMessage("message.cerNotaPedidoDetalle.posicionSap.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getPrecioUnitario()).isPresent()) {
            String msg = this.messageSource.getMessage("message.cerNotaPedidoDetalle.precioUnitario.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getCantidadRequerida()).isPresent()) {
            String msg = this.messageSource.getMessage("message.cerNotaPedidoDetalle.cantidadRequerida.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        String msg = this.setValidacionesPrevias(bean);
        if (StringUtils.isNotBlank(msg)) {
            mensaje += "* " + msg + "<br/>";
        }
        return mensaje;
    }

    protected String setValidacionesPrevias(CerNotaPedidoDetalle bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected String validacionesPreviasCreate(CerNotaPedidoDetalle bean) throws Exception {
        String msg = null;
        CerNotaPedidoDetalle validar = null;
        return msg;
    }

    protected String validacionesPreviasSave(CerNotaPedidoDetalle bean) throws Exception {
        String msg = null;
        CerNotaPedidoDetalle validar = null;
        return msg;
    }

    protected CerNotaPedidoDetalle completarDatosBean(CerNotaPedidoDetalle bean) throws Exception {
        BigDecimal data = new BigDecimal(0.00);
        if (Optional.ofNullable(bean.getPrecioUnitario()).isPresent()) {
            bean.setPrecioUnitario(bean.getPrecioUnitario().setScale(2, BigDecimal.ROUND_HALF_UP));
        }
        if (Optional.ofNullable(bean.getCantidadRequerida()).isPresent()) {
            bean.setCantidadRequerida(bean.getCantidadRequerida().setScale(4, BigDecimal.ROUND_HALF_UP));
        }
        if (Optional.ofNullable(bean.getCantidadEntregada()).isPresent()) {
            bean.setCantidadEntregada(bean.getCantidadEntregada().setScale(4, BigDecimal.ROUND_HALF_UP));
        }
        bean = this.setCompletarDatosBean(bean);
        return bean;
    }

    protected CerNotaPedidoDetalle setCompletarDatosBean(CerNotaPedidoDetalle bean) throws Exception {
        return bean;
    }

    protected final CerNotaPedidoDetalle setAbstractCreate(CerNotaPedidoDetalle dto) throws Exception {
        CerNotaPedidoDetalle bean = new CerNotaPedidoDetalle();
        bean = (CerNotaPedidoDetalle) BeanUtils.cloneBean(dto);
        return bean;
    }

    /************************/
    /* METODOS CRUD Masivos */
    /************************/

    protected CerNotaPedidoDetalle setUploadExcel(Cell currentCell, CerNotaPedidoDetalle cerNotaPedidoDetalle, int contador) throws Exception {
        Double valorDouble = new Double(0);
        BigDecimal valorDecimal = new BigDecimal(0);
        Boolean valorBoolean = new Boolean(true);
        String valorCadena = "";
        switch (contador) {
        case 1:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 20) {
                    throw new ServiceException("Valor Campo posicionSap contiene mas de 20 caracter(es)");
                }
                cerNotaPedidoDetalle.setPosicionSap(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo posicionSap está en formato incorrecto");
            }
            break;
        case 2:
            try {
                valorDecimal = new BigDecimal(currentCell.getNumericCellValue());
                cerNotaPedidoDetalle.setPrecioUnitario(valorDecimal);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo precioUnitario está en formato incorrecto");
            }
            break;
        case 3:
            try {
                valorDecimal = new BigDecimal(currentCell.getNumericCellValue());
                cerNotaPedidoDetalle.setCantidadRequerida(valorDecimal);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo cantidadRequerida está en formato incorrecto");
            }
            break;
        case 4:
            try {
                valorDecimal = new BigDecimal(currentCell.getNumericCellValue());
                cerNotaPedidoDetalle.setCantidadEntregada(valorDecimal);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo cantidadEntregada está en formato incorrecto");
            }
            break;
        case 5:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 100) {
                    throw new ServiceException("Valor Campo cerCuentaMayor contiene mas de 100 caracter(es)");
                }
                cerNotaPedidoDetalle.setCerCuentaMayor(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo cerCuentaMayor está en formato incorrecto");
            }
            break;
        case 6:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                cerNotaPedidoDetalle.setFechaEntrega(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo fechaEntrega está en formato incorrecto");
            }
            break;
        case 7:
            try {
                valorDouble = new Double(currentCell.getNumericCellValue());
                cerNotaPedidoDetalle.setIdPadre(valorDouble.intValue());
            } catch (Exception e) {
                throw new ServiceException("Valor Campo idPadre está en formato incorrecto");
            }
            break;
        case 8:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 100) {
                    throw new ServiceException("Valor Campo auxiliar contiene mas de 100 caracter(es)");
                }
                cerNotaPedidoDetalle.setAuxiliar(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo auxiliar está en formato incorrecto");
            }
            break;
        case 9:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 20) {
                    throw new ServiceException("Valor Campo ebeln contiene mas de 20 caracter(es)");
                }
                cerNotaPedidoDetalle.setEbeln(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo ebeln está en formato incorrecto");
            }
            break;
        case 10:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 10) {
                    throw new ServiceException("Valor Campo extrow contiene mas de 10 caracter(es)");
                }
                cerNotaPedidoDetalle.setExtrow(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo extrow está en formato incorrecto");
            }
            break;
        case 11:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 100) {
                    throw new ServiceException("Valor Campo textoItem contiene mas de 100 caracter(es)");
                }
                cerNotaPedidoDetalle.setTextoItem(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo textoItem está en formato incorrecto");
            }
            break;
        case 12:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 10) {
                    throw new ServiceException("Valor Campo unidadTextoItem contiene mas de 10 caracter(es)");
                }
                cerNotaPedidoDetalle.setUnidadTextoItem(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo unidadTextoItem está en formato incorrecto");
            }
            break;
        case 13:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 10) {
                    throw new ServiceException("Valor Campo introw contiene mas de 10 caracter(es)");
                }
                cerNotaPedidoDetalle.setIntrow(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo introw está en formato incorrecto");
            }
            break;
        case 14:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 3) {
                    throw new ServiceException("Valor Campo plazoEntrega contiene mas de 3 caracter(es)");
                }
                cerNotaPedidoDetalle.setPlazoEntrega(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo plazoEntrega está en formato incorrecto");
            }
            break;
        case 15:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                cerNotaPedidoDetalle.setNuevaFechaEntrega(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo nuevaFechaEntrega está en formato incorrecto");
            }
            break;
        default:
            break;
        }
        return cerNotaPedidoDetalle;
    }

    protected AppParametria setObtenerRegistroConfiguracionUploadExcel() {
        AppParametria appParametriaData = this.appParametriaDeltaRepository.getByModuloAndLabelAndStatus(AppParametriaModuloEnum.CARGA_EXCEL.getEstado(),
                AppParametriaLabelEnum.INICIO_REGISTRO_DATA.getEstado(), Constants.ESTADO_ACTIVO);
        return appParametriaData;
    }

    protected CerNotaPedidoDetalle setInicializarBeanUpdateExcel() {
        CerNotaPedidoDetalle bean = new CerNotaPedidoDetalle();
        bean.setId(null);
        return bean;
    }

    protected final Integer setObtenerId(CerNotaPedidoDetalle bean) {
        return bean.getId();
    }

    /************************/
    /* Instancia de Bean    */
    /************************/

    protected final CerNotaPedidoDetalle createInstance() {
        CerNotaPedidoDetalle cerNotaPedidoDetalle = new CerNotaPedidoDetalle();
        return cerNotaPedidoDetalle;
    }

    protected final BeanCargaMasivoDTO<CerNotaPedidoDetalle> createInstanceMasivoDTO() {
        BeanCargaMasivoDTO<CerNotaPedidoDetalle> beanCargaMasivoDTO = new BeanCargaMasivoDTO<CerNotaPedidoDetalle>();
        return beanCargaMasivoDTO;

    }

    protected final BeanListaMasivoDTO<BeanCargaMasivoDTO<CerNotaPedidoDetalle>> createInstanceListaMasivoDTO() {
        BeanListaMasivoDTO<BeanCargaMasivoDTO<CerNotaPedidoDetalle>> beanCargaMasivoDTOBeanListaMasivoDTO = new BeanListaMasivoDTO<BeanCargaMasivoDTO<CerNotaPedidoDetalle>>();
        return beanCargaMasivoDTOBeanListaMasivoDTO;
    }

    /*****************************/
    /* Metodos que generan Excel */
    /*****************************/

    protected String devuelveNombreSheet() {
        return this.NAME_SHEET;
    }

    protected String devuelveListaHeaderExcelXML() {
        return this.CONFIG_TITLE;
    }

    protected int setAbstractDownloadExcel(CerNotaPedidoDetalle bean, HSSFRow dataRow) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getPosicionSap(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getPrecioUnitario(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getCantidadRequerida(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getCantidadEntregada(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getCerCuentaMayor(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getFechaEntrega(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getIdPadre(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getAuxiliar(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getEbeln(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getExtrow(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getTextoItem(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getUnidadTextoItem(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getIntrow(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getPlazoEntrega(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getNuevaFechaEntrega(), dataRow.createCell(contador));
        contador++;
        return contador;
    }

    protected int setAbstractDownloadExcelSXLSX(CerNotaPedidoDetalle bean, Row dataRow, List<CellStyle> cellStyleList) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getPosicionSap(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getPrecioUnitario(), dataRow.createCell(contador), "N", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getCantidadRequerida(), dataRow.createCell(contador), "N", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getCantidadEntregada(), dataRow.createCell(contador), "N", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getCerCuentaMayor(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getFechaEntrega(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getIdPadre(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getAuxiliar(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getEbeln(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getExtrow(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getTextoItem(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getUnidadTextoItem(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getIntrow(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getPlazoEntrega(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getNuevaFechaEntrega(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        return contador;
    }

    protected String setAbstractGenerateInsertExcelSXLSX(CerNotaPedidoDetalle bean) {
        String fechaS = "";
        String sqlInsert = "INSERT INTO cer_nota_pedido_detalle(";
        sqlInsert = sqlInsert + "cer_nota_pedido_detalle_id" + ", ";
        sqlInsert = sqlInsert + "posicion_sap" + ", ";
        sqlInsert = sqlInsert + "precio_unitario" + ", ";
        sqlInsert = sqlInsert + "cantidad_requerida" + ", ";
        sqlInsert = sqlInsert + "cantidad_entregada" + ", ";
        sqlInsert = sqlInsert + "cer_cuenta_mayor" + ", ";
        sqlInsert = sqlInsert + "fecha_entrega" + ", ";
        sqlInsert = sqlInsert + "id_padre" + ", ";
        sqlInsert = sqlInsert + "auxiliar" + ", ";
        sqlInsert = sqlInsert + "ebeln" + ", ";
        sqlInsert = sqlInsert + "extrow" + ", ";
        sqlInsert = sqlInsert + "texto_item" + ", ";
        sqlInsert = sqlInsert + "unidad_texto_item" + ", ";
        sqlInsert = sqlInsert + "introw" + ", ";
        sqlInsert = sqlInsert + "plazo_entrega" + ", ";
        sqlInsert = sqlInsert + "nueva_fecha_entrega" + ", ";
        sqlInsert = sqlInsert + "cer_nota_pedido_id" + ", ";
        sqlInsert = sqlInsert + "mtr_bien_servicio_id" + ", ";
        sqlInsert = sqlInsert + "mtr_centro_id" + ", ";
        sqlInsert = sqlInsert + "mtr_almacen_id" + ", ";
        sqlInsert = sqlInsert + "mtr_cuenta_imputacion_id" + ", ";
        sqlInsert = sqlInsert + "mtr_cuenta_mayor_id" + ", ";
        sqlInsert = sqlInsert + "mtr_unidad_medida_id" + ")";
        sqlInsert = sqlInsert + " VALUES (";
        sqlInsert = sqlInsert + bean.getId() + ", ";
        if (StringUtils.isBlank(bean.getPosicionSap())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getPosicionSap() + "'" + ", ";
        }
        sqlInsert = sqlInsert + bean.getPrecioUnitario() + ", ";
        sqlInsert = sqlInsert + bean.getCantidadRequerida() + ", ";
        sqlInsert = sqlInsert + bean.getCantidadEntregada() + ", ";
        if (StringUtils.isBlank(bean.getCerCuentaMayor())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getCerCuentaMayor() + "'" + ", ";
        }
        if (bean.getFechaEntrega() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaEntrega());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        sqlInsert = sqlInsert + bean.getIdPadre() + ", ";
        if (StringUtils.isBlank(bean.getAuxiliar())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getAuxiliar() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getEbeln())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getEbeln() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getExtrow())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getExtrow() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getTextoItem())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getTextoItem() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getUnidadTextoItem())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getUnidadTextoItem() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getIntrow())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getIntrow() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getPlazoEntrega())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getPlazoEntrega() + "'" + ", ";
        }
        if (bean.getNuevaFechaEntrega() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getNuevaFechaEntrega());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        sqlInsert = sqlInsert + bean.getMtrCuentaImputacion().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrBienServicio().getId() + ", ";
        sqlInsert = sqlInsert + bean.getCerNotaPedido().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrCentro().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrAlmacen().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrUnidadMedida().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrCuentaMayor().getId();
        sqlInsert = sqlInsert + " );";
        return sqlInsert;
    }

    /*****************/
    /* Otros Metodos */
    /*****************/

    public Long countByMtrCuentaImputacion(MtrCuentaImputacion mtrCuentaImputacion) {
        return this.cerNotaPedidoDetalleDeltaRepository.countByMtrCuentaImputacion(mtrCuentaImputacion);
    }

    public GraphBean graphByMtrCuentaImputacion() {
        List<MtrCuentaImputacion> lista = this.mtrCuentaImputacionDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrCuentaImputacion bean : lista) {
            Long valor = this.cerNotaPedidoDetalleDeltaRepository.countByMtrCuentaImputacion(bean);
            String descripcion = this.setGraphDescripcionByMtrCuentaImputacion(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrCuentaImputacion();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrCuentaImputacion();
        contador = 0;
        contadorColor = 0;
        for (MtrCuentaImputacion bean : lista) {
            Long valor = this.cerNotaPedidoDetalleDeltaRepository.countByMtrCuentaImputacion(bean);
            String descripcion = this.setGraphDescripcionByMtrCuentaImputacion(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrCuentaImputacion(MtrCuentaImputacion mtrCuentaImputacion) {
        return mtrCuentaImputacion.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrCuentaImputacion() {
        return "MtrCuentaImputacion";
    }

    protected String setGraphBarChartTituloByMtrCuentaImputacion() {
        return "MtrCuentaImputacion";
    }

    public Long countByMtrBienServicio(MtrBienServicio mtrBienServicio) {
        return this.cerNotaPedidoDetalleDeltaRepository.countByMtrBienServicio(mtrBienServicio);
    }

    public GraphBean graphByMtrBienServicio() {
        List<MtrBienServicio> lista = this.mtrBienServicioDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrBienServicio bean : lista) {
            Long valor = this.cerNotaPedidoDetalleDeltaRepository.countByMtrBienServicio(bean);
            String descripcion = this.setGraphDescripcionByMtrBienServicio(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrBienServicio();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrBienServicio();
        contador = 0;
        contadorColor = 0;
        for (MtrBienServicio bean : lista) {
            Long valor = this.cerNotaPedidoDetalleDeltaRepository.countByMtrBienServicio(bean);
            String descripcion = this.setGraphDescripcionByMtrBienServicio(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrBienServicio(MtrBienServicio mtrBienServicio) {
        return mtrBienServicio.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrBienServicio() {
        return "MtrBienServicio";
    }

    protected String setGraphBarChartTituloByMtrBienServicio() {
        return "MtrBienServicio";
    }

    public Long countByCerNotaPedido(CerNotaPedido cerNotaPedido) {
        return this.cerNotaPedidoDetalleDeltaRepository.countByCerNotaPedido(cerNotaPedido);
    }

    public GraphBean graphByCerNotaPedido() {
        List<CerNotaPedido> lista = this.cerNotaPedidoDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (CerNotaPedido bean : lista) {
            Long valor = this.cerNotaPedidoDetalleDeltaRepository.countByCerNotaPedido(bean);
            String descripcion = this.setGraphDescripcionByCerNotaPedido(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByCerNotaPedido();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByCerNotaPedido();
        contador = 0;
        contadorColor = 0;
        for (CerNotaPedido bean : lista) {
            Long valor = this.cerNotaPedidoDetalleDeltaRepository.countByCerNotaPedido(bean);
            String descripcion = this.setGraphDescripcionByCerNotaPedido(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByCerNotaPedido(CerNotaPedido cerNotaPedido) {
        return cerNotaPedido.getId().toString();
    }

    protected String setGraphPieChartTituloByCerNotaPedido() {
        return "CerNotaPedido";
    }

    protected String setGraphBarChartTituloByCerNotaPedido() {
        return "CerNotaPedido";
    }


    public Long countByMtrUnidadMedida(MtrUnidadMedida mtrUnidadMedida) {
        return this.cerNotaPedidoDetalleDeltaRepository.countByMtrUnidadMedida(mtrUnidadMedida);
    }

    public GraphBean graphByMtrUnidadMedida() {
        List<MtrUnidadMedida> lista = this.mtrUnidadMedidaDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrUnidadMedida bean : lista) {
            Long valor = this.cerNotaPedidoDetalleDeltaRepository.countByMtrUnidadMedida(bean);
            String descripcion = this.setGraphDescripcionByMtrUnidadMedida(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrUnidadMedida();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrUnidadMedida();
        contador = 0;
        contadorColor = 0;
        for (MtrUnidadMedida bean : lista) {
            Long valor = this.cerNotaPedidoDetalleDeltaRepository.countByMtrUnidadMedida(bean);
            String descripcion = this.setGraphDescripcionByMtrUnidadMedida(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrUnidadMedida(MtrUnidadMedida mtrUnidadMedida) {
        return mtrUnidadMedida.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrUnidadMedida() {
        return "MtrUnidadMedida";
    }

    protected String setGraphBarChartTituloByMtrUnidadMedida() {
        return "MtrUnidadMedida";
    }

    public Long countByMtrCuentaMayor(MtrCuentaMayor mtrCuentaMayor) {
        return this.cerNotaPedidoDetalleDeltaRepository.countByMtrCuentaMayor(mtrCuentaMayor);
    }

    public GraphBean graphByMtrCuentaMayor() {
        List<MtrCuentaMayor> lista = this.mtrCuentaMayorDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrCuentaMayor bean : lista) {
            Long valor = this.cerNotaPedidoDetalleDeltaRepository.countByMtrCuentaMayor(bean);
            String descripcion = this.setGraphDescripcionByMtrCuentaMayor(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrCuentaMayor();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrCuentaMayor();
        contador = 0;
        contadorColor = 0;
        for (MtrCuentaMayor bean : lista) {
            Long valor = this.cerNotaPedidoDetalleDeltaRepository.countByMtrCuentaMayor(bean);
            String descripcion = this.setGraphDescripcionByMtrCuentaMayor(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrCuentaMayor(MtrCuentaMayor mtrCuentaMayor) {
        return mtrCuentaMayor.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrCuentaMayor() {
        return "MtrCuentaMayor";
    }

    protected String setGraphBarChartTituloByMtrCuentaMayor() {
        return "MtrCuentaMayor";
    }

}

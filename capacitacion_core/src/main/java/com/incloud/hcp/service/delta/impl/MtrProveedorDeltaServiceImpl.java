/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntitydeltaDTOService.java.e.vm
 */
package com.incloud.hcp.service.delta.impl;

import com.incloud.hcp._security.SystemLoggedUser;
import com.incloud.hcp._security.UserSession;
import com.incloud.hcp.domain.MtrProveedor;
import com.incloud.hcp.mapper.MtrProveedorMapper;
import com.incloud.hcp.service.delta.MtrProveedorDeltaService;
import com.incloud.hcp.service.impl.MtrProveedorServiceImpl;
import com.incloud.hcp.service.support.PageRequestByExample;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;

/**
 * A simple DTO Facility for MtrProveedor.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public class MtrProveedorDeltaServiceImpl extends MtrProveedorServiceImpl implements MtrProveedorDeltaService {

    @Autowired
    private SystemLoggedUser systemLoggedUser;

    @Autowired
    private MtrProveedorMapper mtrProveedorMapper;

    /**************************/
    /* Metodos Personalizados */
    /**************************/
    public MtrProveedor devuelveProveedorLogueado() throws Exception {
        UserSession userSession = this.systemLoggedUser.getUserSession();
        String idp = userSession.getId();
        MtrProveedor mtrProveedor = this.mtrProveedorDeltaRepository.findByCodigoIdp(idp);
        if (!Optional.ofNullable(mtrProveedor).isPresent()) {
            throw new Exception("No existe Proveedor asociado al IDP con CÃ³digo: " + idp);
        }
        return mtrProveedor;
    }

    @Override
    public List<MtrProveedor> listaCreacionProveedor(InputStream in) throws Exception {
        log.error("listaCreacionProveedor :: Inicio : " );
        List<MtrProveedor> listaAux = this.mtrProveedorMapper.listaCreacionProveedor();
        List<MtrProveedor> lista = new ArrayList<MtrProveedor>();
        try {
            Workbook workbook = new XSSFWorkbook(in);
            Sheet datatypeSheet = workbook.getSheetAt(0);
            Iterator<Row> iterator = datatypeSheet.iterator();
            int countRow = 0;
            int countCell = 0;


            java.text.SimpleDateFormat formatHana = new java.text.SimpleDateFormat("yyyy/MM/dd");

            while (iterator.hasNext()) {
                log.error("listaCreacionProveedor :: Inicio_1 : " );
                Row currentRow = iterator.next();
                if (countRow > 0) {
                    Iterator<Cell> cellIterator = currentRow.iterator();

                    String ruc = "";
                    String email = "";
                    countCell = 0;

                    while (cellIterator.hasNext()) {

                        Cell currentCell = cellIterator.next();
                        countCell++;
                        if (countCell == 1) {//lifnr
                            //codigoCertificado = currentCell.getStringCellValue();
                            if (currentCell.getCellType() == CellType.STRING) {
                                ruc = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                ruc = currentCell.getNumericCellValue() + "";
                            }

                        } else if (countCell == 2) {//email
                            //concepto = currentCell.getNumericCellValue();
                            if (currentCell.getCellType() == CellType.STRING) {
                                email = currentCell.getStringCellValue();
                            } else if (currentCell.getCellType() == CellType.NUMERIC) {
                                email = currentCell.getNumericCellValue() + "";
                            }

                        }
                    }
                    log.error("listaCreacionProveedor :: numero fila : " +  countRow + " ruc: " + ruc  + " email: " + email );
                    //Validar Valores
                    boolean flagOk = true;
                    //Validar Obligatorios
                    if(!StringUtils.isBlank(ruc)) {
                       // lifnr = String.format("%010d", new Long(lifnr));
                        String finalRuc = ruc.trim();
                        Optional<MtrProveedor> optionalProveedor = listaAux.stream()
                                .filter(x -> finalRuc.equalsIgnoreCase(x.getRuc().trim()))
                                .findFirst();

                        if(optionalProveedor.isPresent()) {
                            optionalProveedor.get().setEmailContacto(email);
                            lista.add(optionalProveedor.get());
                        }

                        log.error("listaCreacionProveedor :: 4 : " );
                    }
                    log.error("listaCreacionProveedor :: 3 : " );

                    //Valores Numericos  formateado (SAP) Nota de pedido , proveedor
                    //Numerico Descuento - Monto - Monto total


                }
                countRow++;
            }
        } catch (UnsupportedEncodingException e) {
            log.error("listaCreacionProveedor :: UnsupportedEncodingException Error Carga masiva excel : " + e.toString());
            e.printStackTrace();
        } catch (IOException e) {
            log.error("listaCreacionProveedor :: IOException Error Carga masiva excel : " + e.toString());
            e.printStackTrace();

        }
        log.error("listaCreacionProveedor :: Fin : " );

        return lista;
    }
    /***********************/
    /* Metodos de Busqueda */
    /***********************/

    protected Sort setFindAll(Sort sort) {
        sort = Sort.by(
                new Sort.Order(Sort.Direction.ASC, "razonSocial")
        );
        return sort;
    }

    protected Sort setFind(MtrProveedor req, ExampleMatcher matcher, Example<MtrProveedor> example, Sort sort) {
        sort = Sort.by(
                new Sort.Order(Sort.Direction.ASC, "razonSocial")
        );
        return sort;
    }

    protected void setFindPaginated(PageRequestByExample<MtrProveedor> req, ExampleMatcher matcher, Example<MtrProveedor> example) {
        return;
    }

    /****************/
    /* METODOS CRUD */
    /****************/

    protected String setValidacionesPrevias(MtrProveedor bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected MtrProveedor setCreate(MtrProveedor bean) throws Exception {
        return bean;
    }

    protected void setSave(MtrProveedor dto) throws Exception {
        return;
    }

    protected void setDelete(Integer id) throws Exception {

    }

    protected void setDeleteAll() throws Exception {

    }

    /************************/
    /* METODOS CRUD Masivos */
    /************************/

    protected MtrProveedor setUploadExcel(Cell currentCell, MtrProveedor mtrProveedor, int contador) throws Exception {
        mtrProveedor = super.setUploadExcel(currentCell, mtrProveedor, contador);
        return mtrProveedor;
    }

    protected String setSaveMasivo(MtrProveedor dto) throws Exception {
        return "";
    }

    protected List<MtrProveedor> setBeforeDeleteMasivo(List<MtrProveedor> listaDto) throws Exception {
        return listaDto;
    }

    protected void setAfterDeleteMasivo() throws Exception {
        return;
    }

    /*****************************/
    /* Metodos que generan Excel */
    /*****************************/

    protected void setDownloadExcelItem(MtrProveedor bean, HSSFRow dataRow) {

    }

    protected void setDownloadExcel(HSSFSheet sheet) {

    }

    /*****************/
    /* Otros Metodos */
    /*****************/

}

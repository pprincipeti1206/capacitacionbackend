/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntitydeltaDTOService.java.e.vm
 */
package com.incloud.hcp.service.delta.impl;

import com.incloud.hcp.domain.MtrInformacionNoticia;
import com.incloud.hcp.domain.MtrTipoInformacionNoticia;
import com.incloud.hcp.domain.response.MtrTipoInformacionNoticiaResponse;
import com.incloud.hcp.repository.delta.MtrInformacionNoticiaDeltaRepository;
import com.incloud.hcp.service.delta.MtrTipoInformacionNoticiaDeltaService;
import com.incloud.hcp.service.impl.MtrTipoInformacionNoticiaServiceImpl;
import com.incloud.hcp.service.support.PageRequestByExample;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.ss.usermodel.Cell;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * A simple DTO Facility for MtrTipoInformacionNoticia.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public class MtrTipoInformacionNoticiaDeltaServiceImpl extends MtrTipoInformacionNoticiaServiceImpl implements MtrTipoInformacionNoticiaDeltaService {

    @Autowired
    private MtrInformacionNoticiaDeltaRepository mtrInformacionNoticiaDeltaRepository;


    /**************************/
    /* Metodos Personalizados */
    /**************************/

    @Override
    public ResponseEntity<Map> grabar(MtrTipoInformacionNoticia tipoInformacionNoticia) {
        ResponseEntity response;
        Map map = new HashMap<>();
        try {
            List<MtrTipoInformacionNoticia> tipos = mtrTipoInformacionNoticiaDeltaRepository.findByDescripcionIgnoreCase(tipoInformacionNoticia.getDescripcion());
            if(tipos != null && tipos.size() > 0){
                map.put("message", "La descripción se encuentra registrada");
                response = new ResponseEntity<Map>(map, HttpStatus.OK);
            } else {
                map.put("data", mtrTipoInformacionNoticiaDeltaRepository.save(tipoInformacionNoticia));
                response = new ResponseEntity(map, HttpStatus.OK);
            }
        } catch (Exception e){
            map.put("message",e.getMessage());
            response = new ResponseEntity(map, HttpStatus.NOT_FOUND);
        }
        return response;
    }

    @Override
    public ResponseEntity<Map> update(MtrTipoInformacionNoticia tipoInformacionNoticia) {
        ResponseEntity response;
        Map map = new HashMap<>();
        try {
            List list = mtrTipoInformacionNoticiaDeltaRepository.findAll();
            if(this.existe(list, tipoInformacionNoticia)){
                map.put("message", "La descripción se encuentra registrada");
                response = new ResponseEntity<Map>(map, HttpStatus.OK);
            } else {
                map.put("data", mtrTipoInformacionNoticiaDeltaRepository.save(tipoInformacionNoticia));
                response = new ResponseEntity(map, HttpStatus.OK);
            }
        } catch (Exception e){
            map.put("message",e.getMessage());
            response = new ResponseEntity(map, HttpStatus.NOT_FOUND);
        }
        return response;
    }

    @Override
    public ResponseEntity<Map> delete(MtrTipoInformacionNoticia tipoInformacionNoticia) {
        ResponseEntity response;
        Map map = new HashMap<>();
        try {
            List<MtrInformacionNoticia> infos = mtrInformacionNoticiaDeltaRepository.
                    findByMtrTipoInformacionNoticia(tipoInformacionNoticia);
            if(infos != null && infos.size() > 0){
                map.put("message", "El tipo de Información no se puede eliminar");
                response = new ResponseEntity<Map>(map, HttpStatus.OK);
            } else {
                mtrTipoInformacionNoticiaDeltaRepository.delete(tipoInformacionNoticia);
                map.put("data", tipoInformacionNoticia);
                response = new ResponseEntity(map, HttpStatus.OK);
            }
        } catch (Exception e){
            map.put("message",e.getMessage());
            response = new ResponseEntity(map, HttpStatus.NOT_FOUND);
        }
        return response;
    }

    @Override
    public List<MtrTipoInformacionNoticia> getAll() {
        return mtrTipoInformacionNoticiaDeltaRepository.findAll();
    }

    @Override
    public void actualizarCarpetaIdTipoInformacionById(Integer id, String carpetaId) {
        mtrTipoInformacionNoticiaDeltaRepository.actualizarCarpetaIdById(id, carpetaId);
    }

    private boolean existe(List<MtrTipoInformacionNoticia> list, MtrTipoInformacionNoticia tipo){
        if (list != null && list.size()>0){
            for (MtrTipoInformacionNoticia l: list){
                if (tipo.getId() != l.getId()
                        && tipo.getDescripcion().equalsIgnoreCase(l.getDescripcion())){
                    return true;
                }
            }
        }
        return false;
    }


    /***********************/
    /* Metodos de Busqueda */
    /***********************/

    protected Sort setFindAll(Sort sort) {
        sort = Sort.by(new Sort.Order(Sort.Direction.ASC, "descripcion"));
        return sort;
    }

    protected Sort setFind(MtrTipoInformacionNoticia req, ExampleMatcher matcher, Example<MtrTipoInformacionNoticia> example, Sort sort) {
        sort = Sort.by(new Sort.Order(Sort.Direction.ASC, "descripcion"));
        return sort;
    }

    protected void setFindPaginated(PageRequestByExample<MtrTipoInformacionNoticia> req, ExampleMatcher matcher, Example<MtrTipoInformacionNoticia> example) {
        return;
    }

    protected List<Predicate> setAdicionalDeltaPredicate(List<Predicate> predicates, MtrTipoInformacionNoticiaResponse bean, CriteriaBuilder cb,
            CriteriaQuery<MtrTipoInformacionNoticia> query, Root<MtrTipoInformacionNoticia> root) throws Exception {

        MtrTipoInformacionNoticia entity = bean.getBean();
        //Ejemplo
        /*
        if (Optional.ofNullable(entity.get<VariableManytoOne>()).isPresent()) {
            Join<MtrTipoInformacionNoticia, <ClaseManytoOne>> from<ClaseManytoOne> = countRoot.join("<variableManytoOne>", JoinType.INNER);
        
            if (Optional.ofNullable(entity.get<VariableManytoOne>().get<Atributo>()).isPresent()) {
                Join<MtrTipoInformacionNoticia, <ClaseManytoOne>> from<ClaseManytoOne> = countRoot.join("<variableManytoOne>", JoinType.INNER);
                Predicate thirdCondition = cb.equal(from<ClaseManytoOne>.get("<Atributo>"), entity.get<ClaseManytoOne>().get<Atributo>());
                predicates.add(thirdCondition);
            }
            
        }
        query.orderBy(cb.desc(root.get("<campo entity>")));
        */
        return predicates;
    }

    protected Root<MtrTipoInformacionNoticia> setAdicionalDeltaTotalPredicate(MtrTipoInformacionNoticiaResponse bean, Root<MtrTipoInformacionNoticia> countRoot)
            throws Exception {
        MtrTipoInformacionNoticia entity = bean.getBean();
        //Ejemplo
        /*
        if (Optional.ofNullable(entity.get<VariableManytoOne>()).isPresent()) {
            if (Optional.ofNullable(entity.get<VariableManytoOne>()).isPresent()) {
                Join<MtrTipoInformacionNoticia, <ClaseManytoOne>> from<ClaseManytoOne> = countRoot.join("<variableManytoOne>", JoinType.INNER);
            }
        }
        */
        return countRoot;
    }

    /****************/
    /* METODOS CRUD */
    /****************/

    protected String setValidacionesPrevias(MtrTipoInformacionNoticia bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected MtrTipoInformacionNoticia setCreate(MtrTipoInformacionNoticia bean) throws Exception {
        return bean;
    }

    protected void setSave(MtrTipoInformacionNoticia dto) throws Exception {
        return;
    }

    protected void setDelete(Integer id) throws Exception {

    }

    protected void setDeleteAll() throws Exception {

    }

    /************************/
    /* METODOS CRUD Masivos */
    /************************/

    protected MtrTipoInformacionNoticia setUploadExcel(Cell currentCell, MtrTipoInformacionNoticia mtrTipoInformacionNoticia, int contador) throws Exception {
        mtrTipoInformacionNoticia = super.setUploadExcel(currentCell, mtrTipoInformacionNoticia, contador);
        return mtrTipoInformacionNoticia;
    }

    protected String setSaveMasivo(MtrTipoInformacionNoticia dto) throws Exception {
        return "";
    }

    protected List<MtrTipoInformacionNoticia> setBeforeDeleteMasivo(List<MtrTipoInformacionNoticia> listaDto) throws Exception {
        return listaDto;
    }

    protected void setAfterDeleteMasivo() throws Exception {
        return;
    }

    /*****************************/
    /* Metodos que generan Excel */
    /*****************************/

    protected void setDownloadExcelItem(MtrTipoInformacionNoticia bean, HSSFRow dataRow) {

    }

    protected void setDownloadExcel(HSSFSheet sheet) {

    }

    /*****************/
    /* Otros Metodos */
    /*****************/

}

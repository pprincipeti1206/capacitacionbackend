/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntityrequirenewDTOService.java.e.vm
 */
package com.incloud.hcp.service.requireNew.impl;

import com.incloud.hcp.domain.*;
import com.incloud.hcp.mapper.CerCertificadoDetalleSapMapper;
import com.incloud.hcp.mapper.CerFirmaMapper;
import com.incloud.hcp.mapper.CerHistorialMapper;
import com.incloud.hcp.repository.delta.CerHistorialDetalleSapDeltaRepository;
import com.incloud.hcp.service._framework.impl.JPACustomRequiredNewServiceImpl;
import com.incloud.hcp.service.delta.CerCertificadoDetalleDeltaService;
import com.incloud.hcp.service.dto.CerCertificadoDetalleDto;
import com.incloud.hcp.service.requireNew.CerCertificadoRequireNewService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.concurrent.CompletableFuture;

@Service
@Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)
public class CerCertificadoRequireNewServiceImpl extends JPACustomRequiredNewServiceImpl<CerCertificado, Integer> implements CerCertificadoRequireNewService {



    @Autowired
    private CerHistorialMapper cerHistorialMapper;

    @Autowired
    private CerCertificadoDetalleDeltaService cerCertificadoDetalleDeltaService;

    @Autowired
    private CerFirmaMapper cerFirmaMapper;

    @Autowired
    private CerHistorialDetalleSapDeltaRepository cerHistorialDetalleSapDeltaRepository;

    @Autowired
    private CerCertificadoDetalleSapMapper cerCertificadoDetalleSapMapper;

    @Async
    @Transactional(readOnly = true)
    public CompletableFuture<List<CerCertificadoDetalleDto>>
        getCerCertificadoDetalleDtoListComplete(CerCertificado cerCertificado) throws Exception {
        List<CerCertificadoDetalleDto> result = this.cerCertificadoDetalleDeltaService.findByDetalle(cerCertificado);
        return CompletableFuture.completedFuture(result);
    }

    @Async
    @Transactional(readOnly = true)
    public CompletableFuture<List<CerFirma>>
        getCerFirmasComplete(CerCertificado cerCertificado) throws Exception {
        CerNotaPedido cerNotaPedido = cerCertificado.getCerNotaPedido();
        CerFirma cerFirma = new CerFirma();
        cerFirma.setCerNotaPedido(cerNotaPedido);
        List<CerFirma> result = this.cerFirmaMapper.getLista(cerFirma);
        return CompletableFuture.completedFuture(result);
    }

    @Async
    @Transactional(readOnly = true)
    public CompletableFuture<List<CerCertificadoDetalleSap>>
        getCerCertificadoDetalleSapListComplete(Integer idCertificado) throws Exception {
        //Obteniendo documentos sap
        List<CerCertificadoDetalleSap> result = this.cerCertificadoDetalleSapMapper.findByIdCertificado(idCertificado);
        return CompletableFuture.completedFuture(result);
    }

    @Async
    @Transactional(readOnly = true)
    public CompletableFuture<List<CerHistorial>>
        getCerHistorialListConglomeradoComplete(CerCertificado cerCertificadoBuscar) throws Exception{
        //Historial
        CerHistorial cerHistorial = new CerHistorial();
        cerHistorial.setCerCertificado(cerCertificadoBuscar);
        List<CerHistorial> result = this.cerHistorialMapper.getLista(cerHistorial);
        return CompletableFuture.completedFuture(result);
    }
}

/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/rest/EntitydeltaResource.java.e.vm
 */
package com.incloud.hcp.rest.delta;

import com.incloud.hcp.domain.CerCertificadoDetalle;
import com.incloud.hcp.repository.delta.CerCertificadoDetalleDeltaRepository;
import com.incloud.hcp.rest.CerCertificadoDetalleRest;
import com.incloud.hcp.service.dto.CerCertificadoDetalleDto;
import io.swagger.annotations.ApiOperation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;

@RestController
@RequestMapping("/api/cerCertificadoDetalle")
public class CerCertificadoDetalleDeltaRest extends CerCertificadoDetalleRest {

    private final Logger log = LoggerFactory.getLogger(CerCertificadoDetalleDeltaRest.class);
    @Autowired
    protected CerCertificadoDetalleDeltaRepository cerCertificadoDetalleDeltaRepository;

    @ApiOperation(value = "Devuelve listado de Detalle Certficado ordenado por las posiciones y subposiciones de la Nota de Pedido", produces = "application/json")
    @GetMapping(value = "/_findByDetalle/{cerCertificadoId}", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<CerCertificadoDetalleDto>> findByDetalle(
            @PathVariable Integer cerCertificadoId
    ) throws URISyntaxException {
        log.debug("Ingresando findByDetalle: " + cerCertificadoId);
        try {
            return Optional.ofNullable(this.cerCertificadoDetalleDeltaService.findByDetalle(cerCertificadoId))
                    .map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(e);
            }
            HttpHeaders headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
            //Inicio
        }
    }


    @ApiOperation(value = "Devuelve listado de Detalle Certficado ordenado por las posiciones y subposiciones por certificado", produces = "application/json")
    @GetMapping(value = "/_findByDetalleByCertificadoId/{cerCertificadoId}", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<CerCertificadoDetalle>> _findByDetalleByCertificadoId(
            @PathVariable Integer cerCertificadoId
    ) throws URISyntaxException {
        log.debug("Ingresando _findByDetalleByCertificadoId: " + cerCertificadoId);
        try {
            this.cerCertificadoDetalleDeltaService.findByDetalle(cerCertificadoId);
            return Optional.ofNullable(this.cerCertificadoDetalleDeltaRepository.obtenerListaDetallePorCertificadoId(cerCertificadoId))
                    .map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(e);
            }
            HttpHeaders headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
            //Inicio
        }
    }


    @ApiOperation(value = "Listado Criterio Certificado Detalle", produces = "application/json")
    @RequestMapping(value = "/listCriterioCertificadoDetalle", method = RequestMethod.POST, headers = "Accept=application/json")
    ResponseEntity<List<CerCertificadoDetalle>> ListCriterioCertificadoDetalle(@RequestBody CerCertificadoDetalle cerCertificadoDetalle)
            throws Exception {
        return Optional.of(new ResponseEntity<List<CerCertificadoDetalle>>(
                this.cerCertificadoDetalleDeltaService .find(cerCertificadoDetalle),
                HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
    }

}

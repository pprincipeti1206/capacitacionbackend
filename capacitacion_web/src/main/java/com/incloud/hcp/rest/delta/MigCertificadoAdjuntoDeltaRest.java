/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/rest/EntitydeltaResource.java.e.vm
 */
package com.incloud.hcp.rest.delta;

import com.incloud.hcp.cmis.CmisFile;
import com.incloud.hcp.domain.MigCertificado;
import com.incloud.hcp.domain.MigCertificadoAdjunto;
import com.incloud.hcp.domain.MigLogError;
import com.incloud.hcp.exception.ServiceException;
import com.incloud.hcp.mapper.MigCertificadoAdjuntoMapper;
import com.incloud.hcp.repository.delta.MigCertificadoAdjuntoDeltaRepository;
import com.incloud.hcp.repository.delta.MigCertificadoDeltaRepository;
import com.incloud.hcp.repository.delta.MigLogErrorDeltaRepository;
import com.incloud.hcp.rest.MigCertificadoAdjuntoRest;
import com.incloud.hcp.service._framework.cmis.CmisService;
import com.incloud.hcp.util.Utils;
import com.incloud.hcp.utils.DateUtils;
import com.incloud.hcp.utils.ZipUtils;
import io.swagger.annotations.ApiOperation;
import org.apache.axis.encoding.Base64;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.activation.MimetypesFileTypeMap;
import java.io.File;
import java.io.InputStream;
import java.math.BigDecimal;
import java.net.*;
import java.nio.charset.Charset;
import java.util.*;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;

@RestController
@RequestMapping("/api/migCertificadoAdjunto")
public class MigCertificadoAdjuntoDeltaRest extends MigCertificadoAdjuntoRest {

    @Autowired
    protected MessageSource messageSource;

    @Autowired
    private CmisService cmisService;

    @Autowired
    private MigCertificadoDeltaRepository migCertificadoDeltaRepository;

    @Autowired
    private MigCertificadoAdjuntoDeltaRepository migCertificadoAdjuntoDeltaRepository;

    @Autowired
    private MigLogErrorDeltaRepository migLogErrorDeltaRepository;

    @Autowired
    private MigCertificadoAdjuntoMapper migCertificadoAdjuntoMapper;

    @ApiOperation(value = "Devuelve lista de Mig Certificado Adjunto", produces = "application/json")
    @GetMapping(value = "/devuelveListaMenorIgual/{id}", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<MigCertificadoAdjunto>> devuelveListaMenorIgual(
            @PathVariable("id") Integer id
    ) throws URISyntaxException {
        log.debug("Ingresando devuelveListaMenorIgual");
        try {
            List<MigCertificadoAdjunto> lista = this.migCertificadoAdjuntoDeltaRepository.findByIdBefore(id);
            return Optional.ofNullable(lista).map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        }
        catch (Exception e) {
            String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
            throw new RuntimeException(error);
        }
    }

    @ApiOperation(value = "Migracion de Data Adjuntos")
    @GetMapping(value = "/migrarAdjuntos/{idDesde}/{idHasta}/{ruta}")
    public ResponseEntity<Resource> migrarAdjuntos(
            @PathVariable("idDesde") Integer idDesde,
            @PathVariable("idHasta") Integer idHasta,
            @PathVariable("ruta") String ruta

    ) throws Exception {
        log.debug("Ingresando migrarAdjuntos");

        MigCertificadoAdjunto migCertificadoAdjunto = new MigCertificadoAdjunto();
        migCertificadoAdjunto.setIdDesde(idDesde);
        migCertificadoAdjunto.setIdHasta(idHasta);
        List<MigCertificadoAdjunto> lista = this.migCertificadoAdjuntoMapper.findDesdeHasta(migCertificadoAdjunto);
        if (lista != null && lista.size() > 0) {
            List<File> fileList = new ArrayList<>();
            Authenticator.setDefault(new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(
                            "EXTRANET\\ytgvoi",
                            "C4mi$ea;".toCharArray() ) ;
                }
            });
            String credentials = "EXTRANET\\ytgvoi" + ":" + "C4mi$ea;";
            String basicAuth = "Basic " + Base64.encode( credentials.getBytes() );

            for (MigCertificadoAdjunto bean : lista) {
                String url = bean.getName();
                URL urlFila = new URL(url);
                HttpURLConnection connection = (HttpURLConnection) urlFila.openConnection();

                connection.setRequestProperty( "Authorization", basicAuth );
                connection.setRequestMethod( "GET" );
                InputStream stream = connection.getInputStream();
                byte[] bytes = FileCopyUtils.copyToByteArray(stream);
                String rutaCompleta = bean.getId().toString() + "_" + bean.getNombreArchivo();
                File file = new File(rutaCompleta);

                // convert byte[] to File
                FileUtils.writeByteArrayToFile(file, bytes);
                fileList.add(file);
            }

            String nombreFileZip = ruta + ".zip";
            File fileZip = new File(nombreFileZip);
            File[] files = FileUtils.convertFileCollectionToFileArray(fileList);

            fileZip = ZipUtils.zipFiles(files, fileZip);

            byte[] bytes = FileCopyUtils.copyToByteArray(fileZip);
            ByteArrayResource byteArrayResource = new ByteArrayResource(bytes);
            long length = bytes.length;

            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.add("Cache-Control", "no-cache, no-store, must-revalidate");
            httpHeaders.add("Pragma", "no-cache");
            httpHeaders.add("Expires", "0");
            httpHeaders.setContentLength(length);
            httpHeaders.setContentDispositionFormData("attachment", nombreFileZip);

            log.error("Ingresando migrarAdjuntos FIN OK");
            return ResponseEntity.ok()
                    .headers(httpHeaders)
                    .contentLength(length)
                    .contentType(MediaType.APPLICATION_OCTET_STREAM)
                    .body(byteArrayResource);
        }

        throw new ServiceException("No se ha encontrado archivo...");
    }

    @PostMapping(value = "/uploadZip", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<String> uploadZip(@RequestParam("file") MultipartFile file) throws Exception {

        String result = "OK";
        File fileZip = new File("prueba.zip");
        file.transferTo(fileZip);


        ZipFile zipFile = new ZipFile(fileZip);
        Enumeration entries = zipFile.entries();

        while (entries.hasMoreElements()) {
            ZipEntry entry = (ZipEntry) entries.nextElement();

            if (!entry.isDirectory()) {
                String unzipPath = entry.getName();
                String type = new MimetypesFileTypeMap().getContentType(new File(unzipPath));
                String[] nombreArchivos = StringUtils.split(unzipPath,'_');
                MigCertificadoAdjunto migCertificadoAdjunto = new MigCertificadoAdjunto();

                InputStream inputStream = zipFile.getInputStream(entry);
                unzipPath = nombreArchivos[0] + "_" +nombreArchivos[1];

                Integer migCertificadoAdjuntoId = new Integer(nombreArchivos[0]);
                migCertificadoAdjunto.setId(migCertificadoAdjuntoId);
                migCertificadoAdjunto = this.migCertificadoAdjuntoMapper.obtenerCertificadoCmis(migCertificadoAdjunto);

                if (Optional.ofNullable(migCertificadoAdjunto).isPresent()) {
                    migCertificadoAdjunto = this.generarAdjunto(
                            inputStream,
                            unzipPath,
                            entry.getSize(),
                            type,
                            migCertificadoAdjunto
                    );
                    this.migCertificadoAdjuntoMapper.updateBean(migCertificadoAdjunto);

                }
                inputStream.close();
            }
        }
        zipFile.close();
        log.error("uploadZip - FIN");
        return Optional.of(result).map(l -> new ResponseEntity<>(l, HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));

    }

    @PostMapping(value = "/uploadZipCp437", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<String> uploadZipCp437(@RequestParam("file") MultipartFile file) throws Exception {

        String result = "OK";
        File fileZip = new File("prueba.zip");
        file.transferTo(fileZip);


        ZipFile zipFile = new ZipFile(fileZip, Charset.forName("Cp437"));
        Enumeration entries = zipFile.entries();

        while (entries.hasMoreElements()) {
            ZipEntry entry = (ZipEntry) entries.nextElement();

            if (!entry.isDirectory()) {
                String unzipPath = entry.getName();
                String type = new MimetypesFileTypeMap().getContentType(new File(unzipPath));
                String[] nombreArchivos = StringUtils.split(unzipPath,'_');
                MigCertificadoAdjunto migCertificadoAdjunto = new MigCertificadoAdjunto();

                InputStream inputStream = zipFile.getInputStream(entry);
                unzipPath = nombreArchivos[0] + "_" +nombreArchivos[1];

                Integer migCertificadoAdjuntoId = new Integer(nombreArchivos[0]);
                migCertificadoAdjunto.setId(migCertificadoAdjuntoId);
                migCertificadoAdjunto = this.migCertificadoAdjuntoMapper.obtenerCertificadoCmis(migCertificadoAdjunto);

                if (Optional.ofNullable(migCertificadoAdjunto).isPresent()) {
                    migCertificadoAdjunto = this.generarAdjunto(
                            inputStream,
                            unzipPath,
                            entry.getSize(),
                            type,
                            migCertificadoAdjunto
                    );
                    this.migCertificadoAdjuntoMapper.updateBean(migCertificadoAdjunto);

                }
                inputStream.close();
            }
        }
        zipFile.close();
        log.error("uploadZip - FIN");
        return Optional.of(result).map(l -> new ResponseEntity<>(l, HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));

    }


    private MigCertificadoAdjunto generarAdjunto(
            InputStream stream,
            String nameFile,
            Long sizeFile,
            String typeFile,
            MigCertificadoAdjunto migCertificadoAdjunto) throws Exception {
        String TEMP_DIRECTORY = "MIG_ADJUNTO" ;
        String folderId = cmisService.createFolder(TEMP_DIRECTORY);
        //log.debug("generarAdjunto 01 ---> folderId  [" + folderId + " ]");

        CmisFile cmisFile = cmisService.createOrReplaceDocumentoStream(folderId,
                nameFile,
                sizeFile,
                typeFile,
                stream);

        //log.error("generarAdjunto 02 ---> cmisFile  [" + cmisFile.toString() + "]");
        migCertificadoAdjunto.setScpCarpetaId(folderId);
        migCertificadoAdjunto.setScpArchivoId(cmisFile.getId());
        migCertificadoAdjunto.setScpArchivoNombre(cmisFile.getName());
        migCertificadoAdjunto.setScpArchivoNombreFinal(nameFile);
        migCertificadoAdjunto.setScpRutaCatalogo(cmisFile.getUrl());
        migCertificadoAdjunto.setScpArchivoTipo(cmisFile.getType());
        migCertificadoAdjunto.setScpSize(cmisFile.getSize());
        migCertificadoAdjunto.setEsOK("OK");
//        log.error("generarAdjunto 03 [" + cmisFile.getName() + " , " +
//                file.getSize() + " temp directory " + TEMP_DIRECTORY + " ]");
        return migCertificadoAdjunto;
    }


    @ApiOperation(value = "Inserta registros de MigCertificado en base a un Excel de Carga", produces = "application/json")
    @PostMapping(value = "/uploadExcelMigracion", produces = APPLICATION_JSON_VALUE)
    public String uploadExcelMigracion(@RequestParam("file") MultipartFile file) {
        log.debug(this.NOMBRE_CLASE + " - Ingresando uploadExcel");
        try {
            InputStream in = file.getInputStream();
            log.debug("Ingresando uploadExcelMigracion");
            int inicioRegistroData = 2;

            Date fechaActual = DateUtils.obtenerFechaHoraActual();
            String tablaMigrar = "MIG_CERTIFICADO_ADJUNTO";
            int contadorExcel = 0;

            Workbook workbook = new XSSFWorkbook(in);
            try {
                Sheet datatypeSheet = workbook.getSheetAt(0);
                Iterator<Row> iterator = datatypeSheet.iterator();
                int contadorRegistro = 1;
                while (iterator.hasNext()) {
                    if (contadorRegistro < inicioRegistroData) {
                        contadorRegistro++;
                        Row currentRow = iterator.next();
                        continue;
                    }
                    try {
                        MigCertificadoAdjunto bean = new MigCertificadoAdjunto();
                        Row currentRow = iterator.next();
                        Iterator<Cell> cellIterator = currentRow.iterator();
                        boolean error = false;
                        contadorExcel = currentRow.getRowNum() + 1;

                        while (cellIterator.hasNext()) {
                            Cell currentCell = cellIterator.next();
                            bean = this.setUploadExcelMigracion(currentCell, bean, currentCell.getColumnIndex() + 1);
                        }
                        String mensaje = this.validacionesPreviasMigracion(bean);
                        if (StringUtils.isNotBlank(mensaje)) {
                            MigLogError migLogError = new MigLogError();
                            migLogError.setTabla(tablaMigrar);
                            migLogError.setIdRegistro(contadorExcel);
                            migLogError.setFechaCreacion(fechaActual);
                            migLogError.setError("Validaciones: " + mensaje);
                            this.migLogErrorDeltaRepository.save(migLogError);
                        } else {
                            //log.error("Ingresando bean detalle: " + bean.toString());
                            bean = this.migCertificadoAdjuntoDeltaRepository.save(bean);
                        }
                    }
                    catch (Exception e) {
                        //log.error("Ingresando e: ");
                        //e.printStackTrace();
                        MigLogError migLogError = new MigLogError();
                        migLogError.setTabla(tablaMigrar);
                        migLogError.setIdRegistro(contadorExcel);
                        migLogError.setFechaCreacion(fechaActual);
                        //migLogError.setError("Exception e: " + e.getMessage());
                        this.migLogErrorDeltaRepository.save(migLogError);
                    }

                }
            } catch (Exception exw) {
                //log.error("Ingresando exw: ");
                //exw.printStackTrace();
                MigLogError migLogError = new MigLogError();
                migLogError.setTabla(tablaMigrar);
                migLogError.setIdRegistro(contadorExcel);
                migLogError.setFechaCreacion(fechaActual);
                //migLogError.setError("Exception ewt: " + exw.getMessage());
                this.migLogErrorDeltaRepository.save(migLogError);

            } finally {
                workbook.close();
            }


            return "OK";
        } catch (Exception e) {
            e.printStackTrace();
            String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
            throw new RuntimeException(error);
        }
    }


    private MigCertificadoAdjunto setUploadExcelMigracion(
            Cell currentCell,
            MigCertificadoAdjunto migCertificadoAdjunto,
            int contador) throws Exception {

        Double valorDouble = new Double(0);
        BigDecimal valorDecimal = new BigDecimal(0);
        Integer valorInteger = new Integer(0);
        Boolean valorBoolean = new Boolean(true);
        String valorCadena = "";
        switch (contador) {
            case 1:
                try {
                    valorCadena = currentCell.getStringCellValue();
                    String parthyperlink=currentCell.getHyperlink().getAddress();
                    migCertificadoAdjunto.setName(parthyperlink);
                } catch (Exception e) {
                    throw new ServiceException("Valor Campo Name está en formato incorrecto");
                }
                break;
            case 2:
                try {
                    valorCadena = currentCell.getStringCellValue();
                    migCertificadoAdjunto.setModified(valorCadena);
                } catch (Exception ex) {
                    Date fecha = DateUtils.obtenerFechaHoraActual();
                    migCertificadoAdjunto.setModified(fecha.toString());
                    //throw new ServiceException("Valor Campo Modified está en formato incorrecto");
                }
                break;
            case 3:
                try {
                    valorCadena = currentCell.getStringCellValue();
                    migCertificadoAdjunto.setModifiedBy(valorCadena);
                } catch (Exception e) {
                    throw new ServiceException("Valor Campo ModifiedBy está en formato incorrecto");
                }
                break;
            case 4:
                try {
                    valorCadena = currentCell.getStringCellValue();
                    migCertificadoAdjunto.setIdentidad(valorCadena);
                } catch (Exception e) {
                    throw new ServiceException("Valor Campo Identidad está en formato incorrecto");
                }
                break;
            case 5:
                try {
                    valorDouble = currentCell.getNumericCellValue();
                    valorInteger = new Integer(valorDouble.intValue());
                    MigCertificado migCertificado = this.migCertificadoDeltaRepository.getOne(valorInteger);
                    migCertificadoAdjunto.setMigCertificado(migCertificado);
                } catch (Exception e) {
                    try {
                        valorCadena = currentCell.getStringCellValue();
                        valorInteger = new Integer(valorCadena);
                        MigCertificado migCertificado = this.migCertificadoDeltaRepository.getOne(valorInteger);
                        migCertificadoAdjunto.setMigCertificado(migCertificado);
                    }
                    catch (Exception ex) {
                        throw new ServiceException("Valor Campo MigCertificado está en formato incorrecto");
                    }
                }
                break;
            case 6:
                try {
                    valorCadena = currentCell.getStringCellValue();
                    migCertificadoAdjunto.setNombreArchivo(valorCadena);
                } catch (Exception e) {
                    throw new ServiceException("Valor Campo NombreArchivo está en formato incorrecto");
                }
                break;
            case 7:
                try {
                    valorCadena = currentCell.getStringCellValue();
                    migCertificadoAdjunto.setUsuarioFirma(valorCadena);
                } catch (Exception e) {
                    throw new ServiceException("Valor Campo UsuarioFirma está en formato incorrecto");
                }
                break;
            case 8:
                try {
                    valorCadena = currentCell.getStringCellValue();
                    migCertificadoAdjunto.setUsuarioVendedor(valorCadena);
                } catch (Exception e) {
                    throw new ServiceException("Valor Campo UsuarioVendedor está en formato incorrecto");
                }
                break;
            case 9:
                try {
                    valorCadena = currentCell.getStringCellValue();
                    migCertificadoAdjunto.setItemType(valorCadena);
                } catch (Exception e) {
                    throw new ServiceException("Valor Campo ItemType está en formato incorrecto");
                }
                break;

            default:
                break;
        }
        return migCertificadoAdjunto;
    }

    private String validacionesPreviasMigracion(MigCertificadoAdjunto bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

}

/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 *
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/rest/EntitydeltaResource.java.e.vm
 */
package com.incloud.hcp.rest.delta;

import com.incloud.hcp.common.BindingErrorsResponse;
import com.incloud.hcp.domain.*;
import com.incloud.hcp.domain.response.CerNotaPedidoResponse;
import com.incloud.hcp.enums.EstadoNotaPedidoEnum;
import com.incloud.hcp.rest.CerNotaPedidoRest;
import com.incloud.hcp.service.delta.AppParametriaDeltaService;
import com.incloud.hcp.service.dto.*;
import com.incloud.hcp.service.support.PageResponse;
import com.incloud.hcp.util.Utils;
import com.incloud.hcp.utils.Constants;
import com.incloud.hcp.utils.DateUtils;
import io.swagger.annotations.ApiOperation;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.net.URISyntaxException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;

@RestController
@RequestMapping("/api/cerNotaPedido")
public class CerNotaPedidoDeltaRest extends CerNotaPedidoRest {

    private final Logger log = LoggerFactory.getLogger(CerNotaPedidoDeltaRest.class);

    @Autowired
    private AppParametriaDeltaService appParametriaDeltaService;

    @ApiOperation(value = "Graba adjunto de Nota de pedido en la carpeta Temporal", produces = "application/json")
    @PostMapping(value = "/_agregarAdjuntoTemporal", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<CerNotaPedidoAdjunto> agregarAdjuntoTemporal(@RequestParam("file") MultipartFile file) throws Exception {
        HttpHeaders headers = new HttpHeaders();
        log.debug("Agregando agregarAdjuntoTemporal  [" + file.getName() + " , " +
                file.getSize() + " ]");
        try {
            CerNotaPedidoAdjunto result = this.cerNotaPedidoDeltaService.agregarAdjuntoTemporal(file);
            return Optional.ofNullable(result)
                    .map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        }
        catch (Exception e) {
            if (this.devuelveRuntimeException) {
                String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
                throw new RuntimeException(error);
            }
            headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    @ApiOperation(value = "Elimina Archivo Adjunto de Nota de Pedido", produces = "application/json")
    @PostMapping(value = "/_deleteAdjunto/{archivoId}", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<String> deleteAdjunto(@PathVariable("archivoId") String archivoId)
            throws Exception {
        HttpHeaders headers = new HttpHeaders();
        log.debug("Agregando deleteAdjunto: " + archivoId);
        try {
            String result = this.cerNotaPedidoDeltaService.deleteAdjunto(archivoId);
            return Optional.ofNullable(result)
                    .map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        }
        catch (Exception e) {
            if (this.devuelveRuntimeException) {
                String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
                throw new RuntimeException(error);
            }
            headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }


    @ApiOperation(value = "Guarda lista de adjuntos de Notas de Pedido", produces = "application/json")
    @PostMapping(value = "/_grabarListaAdjunto", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<CerNotaPedidoGrabarAdjuntoDto> grabarListaAdjunto(
            @RequestBody @Valid CerNotaPedidoGrabarAdjuntoDto beanAdjuntos) {
        HttpHeaders headers = new HttpHeaders();
        try {
            CerNotaPedidoGrabarAdjuntoDto result = this.cerNotaPedidoDeltaService.grabarListaAdjunto(beanAdjuntos);
            return Optional.of(result)
                    .map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
                throw new RuntimeException(error);
            }
            headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }


    @ApiOperation(value = "Devuelve Nota Pedido con su detalle y adjuntos", produces = "application/json")
    @GetMapping(value = "/_devuelveNotaPedido/{cerNotaPedidoId}", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<CerNotaPedidoDto> devuelveNotaPedido(@PathVariable Integer cerNotaPedidoId) throws URISyntaxException {
        HttpHeaders headers = new HttpHeaders();
        log.debug("Ingresando devuelveNotaPedido by: " + cerNotaPedidoId) ;
        try {
            CerNotaPedidoDto result = this.cerNotaPedidoDeltaService.devuelveNotaPedido(cerNotaPedidoId);
            return Optional.ofNullable(result)
                    .map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        }
        catch (Exception e) {
            if (this.devuelveRuntimeException) {
                String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
                throw new RuntimeException(error);
            }
            headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }


    @ApiOperation(value = "Devuelve monto pendiente de la Nota Pedido ", produces = "application/json")
    @GetMapping(value = "/_validarMontoPendiente/{cerNotaPedidoId}", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<CerNotaPedidoValidarMontoDto> validarMontoPendiente(
            @PathVariable Integer cerNotaPedidoId
    ) throws URISyntaxException {
        HttpHeaders headers = new HttpHeaders();
        log.debug("Ingresando validarMontoPendiente by: " + cerNotaPedidoId) ;
        try {
            CerNotaPedidoValidarMontoDto result = this.cerNotaPedidoDeltaService.validarMontoPendiente(cerNotaPedidoId);
            return Optional.ofNullable(result)
                    .map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        }
        catch (Exception e) {
            if (this.devuelveRuntimeException) {
                String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
                throw new RuntimeException(error);
            }
            headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }



    @ApiOperation(value = "Devuelve lista de Notas de Pedido a utilizar en la Creacion de Certificados ", produces = "application/json")
    @PostMapping(value = "/findListaCrearCertificado", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<CerNotaPedido>> findListaCrearCertificado() throws URISyntaxException {
        HttpHeaders headers = new HttpHeaders();
        log.debug("Ingresando findListaCrearCertificado by:") ;
        try {
            List<CerNotaPedido> result = this.cerNotaPedidoDeltaService.findListaCrearCertificado();
            return Optional.ofNullable(result)
                    .map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        }
        catch (Exception e) {
            if (this.devuelveRuntimeException) {
                String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
                throw new RuntimeException(error);
            }
            headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }


    @ApiOperation(value = "Genera Excel XLSX de registros por Nota de Pedido", produces = "application/vnd.ms-excel")
    @GetMapping(value = "/_downloadExcelporFiltro/{nroPedido}/{ruc}/{razonSocial}/{userCompra}/{mtrSociedadId}/{fechaInicio}/{fechaFin}/{fechaDocumentoIni}/{fechaDocumentoFin}/{fechaFinVigenciaIni}/{fechaFinVigenciaFin}/{mtrEstadoId}/{mtrAprobacionId}", produces = { MediaType.APPLICATION_OCTET_STREAM_VALUE })
    public ResponseEntity<?> downloadCompleteExcelSXLSX(
            @PathVariable String nroPedido,
            @PathVariable String ruc,
            @PathVariable String razonSocial,
            @PathVariable String userCompra,
            @PathVariable Integer mtrSociedadId,
            @PathVariable String fechaInicio,
            @PathVariable String fechaFin,
            @PathVariable String fechaDocumentoIni,
            @PathVariable String fechaDocumentoFin,
            @PathVariable String fechaFinVigenciaIni,
            @PathVariable String fechaFinVigenciaFin,
            @PathVariable Integer mtrEstadoId,
            @PathVariable Integer mtrAprobacionId,
            HttpServletResponse response) {

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd_hh_mm_ss");
        String nombreArchivo = this.setObtenerNombreArchivoExcel();
        String excelFileName = nombreArchivo + "_" + formatter.format(LocalDateTime.now()) + ".xlsx";

        try {
            CerNotaPedido cerNotaPedido = new CerNotaPedido();
            if  (StringUtils.isNotBlank(nroPedido)) {
                cerNotaPedido.setCodigoNotaPedidoSap(nroPedido);
            }
            if  (StringUtils.isNotBlank(ruc) || StringUtils.isNotBlank(razonSocial)) {
                MtrProveedor mtrProveedor = new MtrProveedor();
                if  (StringUtils.isNotBlank(ruc)) {
                    mtrProveedor.setRuc(ruc);
                }
                if  (StringUtils.isNotBlank(razonSocial)) {
                    mtrProveedor.setRazonSocial(razonSocial);
                }
                cerNotaPedido.setMtrProveedor(mtrProveedor);
            }
            if  (StringUtils.isNotBlank(userCompra)) {
                cerNotaPedido.setUserCompra(userCompra);
            }
            if  (mtrSociedadId != 0) {
                MtrSociedad mtrSociedad = new MtrSociedad();
                mtrSociedad.setId(mtrSociedadId);
                cerNotaPedido.setMtrSociedad(mtrSociedad);
            }
            if  (mtrAprobacionId != 0) {
                cerNotaPedido.setMtrAprobadorId(mtrAprobacionId);
            }
            if  (StringUtils.isNotBlank(fechaInicio)) {
                Date fecha = DateUtils.convertStringToDate("yyyyMMdd", fechaInicio);
                String sFecha = DateUtils.convertDateToString("dd/MM/yyyy", fecha);
                Date dFechaInicio = DateUtils.convertStringToDate("dd/MM/yyyy", sFecha);
                cerNotaPedido.setFechaInicio(dFechaInicio);
            }
            if  (StringUtils.isNotBlank(fechaFin)) {
                Date fecha = DateUtils.convertStringToDate("yyyyMMdd", fechaFin);
                String sFecha = DateUtils.convertDateToString("dd/MM/yyyy", fecha);
                Date dFechaFin = DateUtils.convertStringToDate("dd/MM/yyyy", sFecha);
                cerNotaPedido.setFechaFin(dFechaFin);
            }
            if  (StringUtils.isNotBlank(fechaDocumentoIni)) {
                Date fecha = DateUtils.convertStringToDate("yyyyMMdd", fechaDocumentoIni);
                String sFecha = DateUtils.convertDateToString("dd/MM/yyyy", fecha);
                cerNotaPedido.setFechaDocumentoIni(sFecha);
            }
            if  (StringUtils.isNotBlank(fechaDocumentoFin)) {
                Date fecha = DateUtils.convertStringToDate("yyyyMMdd", fechaDocumentoFin);
                String sFecha = DateUtils.convertDateToString("dd/MM/yyyy", fecha);
                cerNotaPedido.setFechaDocumentoFin(sFecha);
            }
            if  (StringUtils.isNotBlank(fechaFinVigenciaIni)) {
                Date fecha = DateUtils.convertStringToDate("yyyyMMdd", fechaFinVigenciaIni);
                String sFecha = DateUtils.convertDateToString("dd/MM/yyyy", fecha);
                cerNotaPedido.setFechaFinVigenciaIni(sFecha);
            }
            if  (StringUtils.isNotBlank(fechaFinVigenciaFin)) {
                Date fecha = DateUtils.convertStringToDate("yyyyMMdd", fechaFinVigenciaFin);
                String sFecha = DateUtils.convertDateToString("dd/MM/yyyy", fecha);
                cerNotaPedido.setFechaFinVigenciaFin(sFecha);
            }
            if  (mtrEstadoId != 0) {
                MtrEstado mtrEstado = new MtrEstado();
                mtrEstado.setId(mtrEstadoId);
                cerNotaPedido.setMtrEstado(mtrEstado);
            }

            SXSSFWorkbook book = this.cerNotaPedidoDeltaService.downloadExcelporFiltro(cerNotaPedido);
            ByteArrayOutputStream outByteStream;
            byte[] outArray;
            outByteStream = new ByteArrayOutputStream();
            book.write(outByteStream);
            outArray = outByteStream.toByteArray();
            response.setContentLength(outArray.length);
            response.setHeader("Expires:", "0"); // eliminates browser caching
            response.setHeader("Content-Disposition", "attachment; filename=" + excelFileName);
            OutputStream outStream = response.getOutputStream();
            outStream.write(outArray);

            book.dispose();
            book.close();

            outStream.flush();

        } catch (Exception e) {
            String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
            e.printStackTrace();
            throw new RuntimeException(error);
        }

        return new ResponseEntity<>(HttpStatus.OK);
    }


    @ApiOperation(value = "Listado Nota de Pedido y Detalle", produces = "application/json")
    @GetMapping(value = "/listNotaPedidoAndDetails/{nroPedido}", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<CertificadoNotaPedidoDetalleDto>> listNotaPedidoAndDetails(@PathVariable String nroPedido) throws URISyntaxException {
        return Optional.of(new ResponseEntity<List<CertificadoNotaPedidoDetalleDto>>(
                this.cerNotaPedidoDeltaService.listNotaPedidoAndDetails(nroPedido),
                HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
    }



    @ApiOperation(value = "Modifica el Estado del Acuse de Recibo", produces = "application/json")
    @RequestMapping(value = "/actualizaEstado", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<CerNotaPedido> actualizaEstado(@RequestBody EstadoNotaPedidoDto estadoNotaPedidoDto) throws Exception {

        HttpHeaders headers = new HttpHeaders();
        log.debug("Ingresando actualizaEstado: " + estadoNotaPedidoDto.toString());
        try {
            CerNotaPedido result = cerNotaPedidoDeltaService.actualizaEstado(estadoNotaPedidoDto);
            this.cerNotaPedidoDeltaService.enviarMailActualizarEstado(estadoNotaPedidoDto);
            log.debug("Cambiando Estado Nota de Pedido : {}", result);
            return Optional.of(result)
                    .map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
                throw new RuntimeException(error);
            }
            headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }

    }

    /**
     * Update entity
     */
    @ApiOperation(value = "Aprueba Nota de Pedido", produces = "application/json")
    @PostMapping(value = "/aprobar", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<CerNotaPedido> aprobarNotaPedidoJson(
            @RequestBody EstadoNotaPedidoDto estadoNotaPedidoDto) throws URISyntaxException {
        HttpHeaders headers = new HttpHeaders();

        log.debug("Ingresando aprobarNotaPedido: " + estadoNotaPedidoDto.toString());
        try {
            if (this.appParametriaDeltaService.devuelveApagarCertificado()) {
                throw new Exception(Constants.MENSAJE_SISTEMA_APAGADO);
            }
            if (StringUtils.isBlank(estadoNotaPedidoDto.getDescripcion())) {
                estadoNotaPedidoDto.setDescripcion("")  ;
            }

            CerNotaPedidoIntermedioAprobarDto result = this.cerNotaPedidoDeltaService.
                    aprobarNotaPedido(estadoNotaPedidoDto.getNotaPedidoID());
            MtrEstado mtrEstado = result.getCerNotaPedido().getMtrEstado();
            estadoNotaPedidoDto.setEstado(mtrEstado);
            this.cerNotaPedidoDeltaService.enviarMailActualizarEstado(estadoNotaPedidoDto);
            this.cerNotaPedidoDeltaService.enviarEmailAprobarAprobadores(result);
            return Optional.of(result.getCerNotaPedido())
                    .map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
                throw new RuntimeException(error);
            }
            headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    /**
     * Update entity
     */
    @ApiOperation(value = "Aprueba Nota de Pedido (Administrador)", produces = "application/json")
    @PostMapping(value = "/aprobarAdmin", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<CerNotaPedido> aprobarNotaPedidoAdmin(
            @RequestBody EstadoNotaPedidoDto estadoNotaPedidoDto) throws URISyntaxException {
        HttpHeaders headers = new HttpHeaders();

        log.debug("Ingresando aprobarNotaPedido: " + estadoNotaPedidoDto.toString());
        try {
            if (this.appParametriaDeltaService.devuelveApagarCertificado()) {
                throw new Exception(Constants.MENSAJE_SISTEMA_APAGADO);
            }
            if (StringUtils.isBlank(estadoNotaPedidoDto.getDescripcion())) {
                estadoNotaPedidoDto.setDescripcion("")  ;
            }

            CerNotaPedidoIntermedioAprobarDto result = this.cerNotaPedidoDeltaService.
                    aprobarNotaPedido(estadoNotaPedidoDto.getNotaPedidoID());
            MtrEstado mtrEstado = result.getCerNotaPedido().getMtrEstado();
            estadoNotaPedidoDto.setEstado(mtrEstado);
            //this.cerNotaPedidoDeltaService.enviarMailActualizarEstado(estadoNotaPedidoDto);
            this.cerNotaPedidoDeltaService.enviarEmailAprobarAprobadores(result);
            return Optional.of(result.getCerNotaPedido())
                    .map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
                throw new RuntimeException(error);
            }
            headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    /**
     * Update entity
     */
    @ApiOperation(value = "Aprueba Nota de Pedido", produces = "application/json")
    @PostMapping(value = "/aprobar/{notaPedidoId}/{descripcionConcepto}", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<CerNotaPedido> aprobarNotaPedido(
            @PathVariable Integer notaPedidoId,
            @PathVariable String descripcionConcepto) throws URISyntaxException {
        HttpHeaders headers = new HttpHeaders();

        log.debug("Ingresando aprobarNotaPedido: " + notaPedidoId);
        try {
            if (this.appParametriaDeltaService.devuelveApagarCertificado()) {
                throw new Exception(Constants.MENSAJE_SISTEMA_APAGADO);
            }
            if (StringUtils.isBlank(descripcionConcepto)) {
                descripcionConcepto = "";
            }

            CerNotaPedidoIntermedioAprobarDto result = this.cerNotaPedidoDeltaService.aprobarNotaPedido(notaPedidoId);
            EstadoNotaPedidoDto estadoNotaPedidoDto = new EstadoNotaPedidoDto();
            MtrEstado mtrEstado = result.getCerNotaPedido().getMtrEstado();
            estadoNotaPedidoDto.setNotaPedidoID(notaPedidoId);
            estadoNotaPedidoDto.setEstado(mtrEstado);
            estadoNotaPedidoDto.setDescripcion(descripcionConcepto);
            this.cerNotaPedidoDeltaService.enviarMailActualizarEstado(estadoNotaPedidoDto);
            this.cerNotaPedidoDeltaService.enviarEmailAprobarAprobadores(result);
            return Optional.of(result.getCerNotaPedido())
                    .map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
                throw new RuntimeException(error);
            }
            headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    @ApiOperation(value = "Rechaza Nota de Pedido", produces = "application/json")
    @PostMapping(value = "/rechazar", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<CerNotaPedido> rechazarNotaPedido(@RequestBody EstadoNotaPedidoDto estadoNotaPedidoDto) throws URISyntaxException {
        HttpHeaders headers = new HttpHeaders();
        log.debug("Ingresando rechazarNotaPedido: " + estadoNotaPedidoDto.toString());
        try {
            MtrEstado estado = new MtrEstado();
            estado.setCodigoAgrupado(Constants.CODIGO_AGRUPADO_NOTA_PEDIDO);
            estado.setCodigoEstado(EstadoNotaPedidoEnum.RECHAZADA.getEstado());
            estadoNotaPedidoDto.setEstado(estado);
            if (StringUtils.isBlank(estadoNotaPedidoDto.getDescripcion())) {
                estadoNotaPedidoDto.setDescripcion("");
            }

            CerNotaPedido result = cerNotaPedidoDeltaService.actualizaEstado(estadoNotaPedidoDto);
            this.cerNotaPedidoDeltaService.enviarMailActualizarEstado(estadoNotaPedidoDto);
            this.cerNotaPedidoDeltaService.enviarEmailRechazarAprobadores(estadoNotaPedidoDto);
            return Optional.of(result)
                    .map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
                throw new RuntimeException(error);
            }
            headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }


    @ApiOperation(value = "Devuelve lista de registros de tipo CerNotaPedido en base al Proveedor ingresados en forma Paginada", produces = "application/json")
    @PostMapping(value = "/_findCondicionProveedorPaginated", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<PageResponse<CerNotaPedido>> findCondicionProveedorPaginated(
            @RequestBody CerNotaPedidoResponse bean, BindingResult bindingResult) throws URISyntaxException {
        BindingErrorsResponse errors = new BindingErrorsResponse();
        HttpHeaders headers = new HttpHeaders();
        if (bindingResult.hasErrors()) {
            String errorDevuelve = this.devuelveErrorHeaders(bindingResult, errors);
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(errorDevuelve);
            }
            headers.add("errors", errorDevuelve);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
        if (!Optional.ofNullable(bean.getPageRequest()).isPresent()) {
            String errorDevuelve = "Debe ingresar Bean de Paginación (PageRequest)";
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(errorDevuelve);
            }
            headers.add("errors", errorDevuelve);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
        PageRequest pageRequest = bean.getPageRequest().toPageRequest();
        log.debug("Ingresando findCondicionProveedorPaginated by:" + bean.toString());
        try {
            PageResponse<CerNotaPedido> result = this.cerNotaPedidoDeltaService.findCondicionProveedorPaginated(bean, pageRequest);
            return Optional.ofNullable(result).map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
                throw new RuntimeException(error);
            }
            headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }


    @ApiOperation(value = "Devuelve lista de registros de tipo CerNotaPedido en base al Proveedor y en base a los parámetros ingresados", produces = "application/json")
    @PostMapping(value = "/findProveedor", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<CerNotaPedido>> findProveedor(@RequestBody CerNotaPedido bean, BindingResult bindingResult) throws URISyntaxException {
        BindingErrorsResponse errors = new BindingErrorsResponse();
        HttpHeaders headers = new HttpHeaders();
        if (bindingResult.hasErrors()) {
            String errorDevuelve = this.devuelveErrorHeaders(bindingResult, errors);
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(errorDevuelve);
            }
            headers.add("errors", errorDevuelve);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
        log.debug("Ingresando findProveedor by:" + bean.toString());
        try {
            return Optional.ofNullable(this.cerNotaPedidoDeltaService.findProveedor(bean))
                    .map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        }
        catch (Exception e) {
            if (this.devuelveRuntimeException) {
                String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
                throw new RuntimeException(error);
            }
            headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }




}

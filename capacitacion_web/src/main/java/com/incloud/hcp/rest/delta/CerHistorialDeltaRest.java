/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/rest/EntitydeltaResource.java.e.vm
 */
package com.incloud.hcp.rest.delta;

import com.incloud.hcp.bean.custom.HistorialCustom;
import com.incloud.hcp.common.BindingErrorsResponse;
import com.incloud.hcp.domain.CerHistorial;
import com.incloud.hcp.rest.CerHistorialRest;
import com.incloud.hcp.service.delta.CerHistorialDeltaService;
import com.incloud.hcp.service.dto.CertificadoHistorialDto;
import com.incloud.hcp.util.Utils;
import io.swagger.annotations.ApiOperation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/cerHistorial")
public class CerHistorialDeltaRest extends CerHistorialRest {

    private final Logger log = LoggerFactory.getLogger(CerHistorialDeltaRest.class);

    @Autowired
    protected CerHistorialDeltaService cerHistorialDeltaService;

    @ApiOperation(value = "Listado Criterio Historial", produces = "application/json")
    @RequestMapping(value = "/listCriterioHistorial", method = RequestMethod.POST, headers = "Accept=application/json")
    ResponseEntity<List<CerHistorial>> ListCriterioHistorial(@RequestBody CerHistorial historial)
            throws Exception {
        return Optional.of(new ResponseEntity<List<CerHistorial>>(
                this.cerHistorialDeltaService.find(historial),
                HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
    }

    @ApiOperation(value = "Agregar un nuevo registro en historial", produces = "application/json")
    @RequestMapping(value = "/CertificadoHistorial", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<CerHistorial> CertificadoHistorial(@RequestBody CertificadoHistorialDto certificadoHistorialDto,
                                                             BindingResult bindingResult) throws URISyntaxException {

        BindingErrorsResponse errors = new BindingErrorsResponse();
        HttpHeaders headers = new HttpHeaders();
        if (bindingResult.hasErrors()) {
            log.error("Ingresando grabar registro historial: " + certificadoHistorialDto.toString());
            errors.addAllErrors(bindingResult);
            throw new RuntimeException(errors.toJSON());
        }

        try {
            CerHistorial result = cerHistorialDeltaService.saveCertificadoHistorial(certificadoHistorialDto);
            log.debug("Agregando un nuevo historial : {}", result);
            return ResponseEntity.ok().body(result);
        } catch (Exception e) {
            String error = Utils.obtieneMensajeErrorException(e);
            throw new RuntimeException(error);
        }

    }



    @ApiOperation(value = "Obtiene Historial de atenciones e Historial SAP", produces = "application/json")
    @RequestMapping(value = "/historialTotal/{cerCertificadoId}", method = RequestMethod.GET, headers = "Accept=application/json")
    public ResponseEntity<List<HistorialCustom>> getDetailsMaterial(@PathVariable Integer cerCertificadoId)   {

        return Optional.of(this.cerHistorialDeltaService.listaHistorial(cerCertificadoId))
                .map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
    }

}

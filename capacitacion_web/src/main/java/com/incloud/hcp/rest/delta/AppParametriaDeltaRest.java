/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/rest/EntitydeltaResource.java.e.vm
 */
package com.incloud.hcp.rest.delta;

import com.incloud.hcp.domain.AppParametria;
import com.incloud.hcp.rest.AppParametriaRest;
import com.incloud.hcp.service.delta.AppParametriaDeltaService;
import com.incloud.hcp.service.dto.MtrHistorialAprobarSalidaDto;
import com.incloud.hcp.util.Utils;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URISyntaxException;
import java.util.Optional;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;

@RestController
@RequestMapping("/api/appParametria")
public class AppParametriaDeltaRest extends AppParametriaRest {

    @Autowired
    protected AppParametriaDeltaService appParametriaDeltaService;

    /**
     * Devuelve si esta apagado o no Certificado
     */
    @ApiOperation(value = "Devuelve si esta apagado o no Certificado", produces = "application/json")
    @GetMapping(value = "/devuelveApagarCertificado", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<Boolean> devuelveApagarCertificado() throws URISyntaxException {
        log.debug("Ingresando devuelveApagarCertificado: " );
        try {
            Boolean result = this.appParametriaDeltaService
                    .devuelveApagarCertificado();
            return Optional.ofNullable(result).map(bean -> new ResponseEntity<>(bean, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
                throw new RuntimeException(error);
            }
            HttpHeaders headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    @ApiOperation(value = "Devuelve Historial si esta apagado o no Certificado", produces = "application/json")
    @GetMapping(value = "/devuelveHistorialApagarCertificado", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<MtrHistorialAprobarSalidaDto> devuelveHistorialApagarCertificado() throws URISyntaxException {
        log.debug("Ingresando devuelveApagarCertificado: " );
        try {
            MtrHistorialAprobarSalidaDto result = this.appParametriaDeltaService
                    .devuelveHistorialAprobar();
            return Optional.ofNullable(result).map(bean -> new ResponseEntity<>(bean, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
                throw new RuntimeException(error);
            }
            HttpHeaders headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }


    @ApiOperation(value = "Graba apagado Certificado", produces = "application/json")
    @PostMapping(value = "/grabarApagarCertificado/{estadoApagado}", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<AppParametria> grabarApagarCertificado(@PathVariable Boolean estadoApagado) throws URISyntaxException {
        log.debug("Ingresando grabarApagarCertificado: " );
        try {
            AppParametria result = this.appParametriaDeltaService
                    .grabarApagarCertificado(estadoApagado);
            return Optional.ofNullable(result).map(bean -> new ResponseEntity<>(bean, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
                throw new RuntimeException(error);
            }
            HttpHeaders headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

}

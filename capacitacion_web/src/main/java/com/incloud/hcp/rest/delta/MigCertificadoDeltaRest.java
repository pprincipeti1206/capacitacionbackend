/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 *
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/rest/EntitydeltaResource.java.e.vm
 */
package com.incloud.hcp.rest.delta;

import com.incloud.hcp.domain.MigCertificado;
import com.incloud.hcp.domain.MigLogError;
import com.incloud.hcp.exception.ServiceException;
import com.incloud.hcp.repository.delta.MigLogErrorDeltaRepository;
import com.incloud.hcp.rest.MigCertificadoRest;
import com.incloud.hcp.util.Utils;
import com.incloud.hcp.utils.DateUtils;
import io.swagger.annotations.ApiOperation;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import java.io.InputStream;
import java.math.BigDecimal;
import java.util.Date;
import java.util.Iterator;
import java.util.Optional;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;

@RestController
@RequestMapping("/api/migCertificado")
public class MigCertificadoDeltaRest extends MigCertificadoRest {

    @Autowired
    protected MessageSource messageSource;

    @Autowired
    private MigLogErrorDeltaRepository migLogErrorDeltaRepository;

    @ApiOperation(value = "Inserta registros de MigCertificado en base a un Excel de Carga", produces = "application/json")
    @PostMapping(value = "/_uploadExcelMigracion", produces = APPLICATION_JSON_VALUE)
    public String uploadExcelMigracion(@RequestParam("file") MultipartFile file) {
        log.debug(this.NOMBRE_CLASE + " - Ingresando uploadExcelMigracion");
        try {
            InputStream in = file.getInputStream();
            log.debug("Ingresando uploadExcelMigracion");
            int inicioRegistroData = 2;

            Date fechaActual = DateUtils.obtenerFechaHoraActual();
            String tablaMigrar = "MIG_CERTIFICADO";
            int contadorExcel = 0;

            Workbook workbook = new XSSFWorkbook(in);
            try {
                Sheet datatypeSheet = workbook.getSheetAt(0);
                Iterator<Row> iterator = datatypeSheet.iterator();
                int contadorRegistro = 1;
                while (iterator.hasNext()) {
                    if (contadorRegistro < inicioRegistroData) {
                        contadorRegistro++;
                        Row currentRow = iterator.next();
                        continue;
                    }
                    try {
                        MigCertificado bean = new MigCertificado();
                        Row currentRow = iterator.next();
                        Iterator<Cell> cellIterator = currentRow.iterator();
                        boolean error = false;
                        contadorExcel = currentRow.getRowNum() + 1;

                        while (cellIterator.hasNext()) {
                            Cell currentCell = cellIterator.next();
                            bean = this.setUploadExcelMigracion(currentCell, bean, currentCell.getColumnIndex() + 1);
                        }
                        String mensaje = this.validacionesPreviasMigracion(bean);
                        if (StringUtils.isNotBlank(mensaje)) {
                            log.error("Error mensaje: " + mensaje);
                            MigLogError migLogError = new MigLogError();
                            migLogError.setTabla(tablaMigrar);
                            migLogError.setIdRegistro(contadorExcel);
                            migLogError.setFechaCreacion(fechaActual);
                            migLogError.setError("Validaciones: " + mensaje);
                            this.migLogErrorDeltaRepository.save(migLogError);
                        } else {
                            bean = this.migCertificadoDeltaRepository.save(bean);
                        }
                    }
                    catch (Exception e) {
                        MigLogError migLogError = new MigLogError();
                        migLogError.setTabla(tablaMigrar);
                        migLogError.setIdRegistro(contadorExcel);
                        migLogError.setFechaCreacion(fechaActual);
                        migLogError.setError("Exception e: " + e.getMessage());
                        this.migLogErrorDeltaRepository.save(migLogError);

                    }

                }
            } catch (Exception exw) {
                MigLogError migLogError = new MigLogError();
                migLogError.setTabla(tablaMigrar);
                migLogError.setIdRegistro(contadorExcel);
                migLogError.setFechaCreacion(fechaActual);
                migLogError.setError("Exception exw: " + exw.getMessage());
                this.migLogErrorDeltaRepository.save(migLogError);

            } finally {
                workbook.close();
            }


            return "OK";
        } catch (Exception e) {
            String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
            throw new RuntimeException(error);
        }
    }


    private MigCertificado setUploadExcelMigracion(Cell currentCell, MigCertificado migCertificado, int contador) throws Exception {
        Double valorDouble = new Double(0);
        Integer valorInteger = new Integer(0);
        BigDecimal valorDecimal = new BigDecimal(0);
        Boolean valorBoolean = new Boolean(true);
        String valorCadena = "";
        switch (contador) {
            case 1:
                try {
                    valorDouble = currentCell.getNumericCellValue();
                    valorInteger = new Integer(valorDouble.intValue());
                    migCertificado.setId(valorInteger);
                } catch (Exception e) {
                    throw new ServiceException("Valor Campo Id está en formato incorrecto");
                }
                break;
            case 2:
                try {
                    valorCadena = currentCell.getStringCellValue();
                    if (valorCadena.length() > 10) {
                        throw new ServiceException("Valor Campo nroPedido contiene mas de 10 caracter(es)");
                    }
                    migCertificado.setNroPedido(valorCadena);
                } catch (Exception e) {
                    throw new ServiceException("Valor Campo nroPedido está en formato incorrecto");
                }
                break;
            case 3:
                try {
                    valorCadena = currentCell.getStringCellValue();
                    if (valorCadena.length() > 40) {
                        throw new ServiceException("Valor Campo codigoCertificado contiene mas de 40 caracter(es)");
                    }
                    migCertificado.setCodigoCertificado(valorCadena);
                } catch (Exception e) {
                    throw new ServiceException("Valor Campo codigoCertificado está en formato incorrecto");
                }
                break;
            case 4:
                try {
                    valorCadena = currentCell.getStringCellValue();
                    if (valorCadena.length() > 400) {
                        throw new ServiceException("Valor Campo concepto contiene mas de 400 caracter(es)");
                    }
                    migCertificado.setConcepto(valorCadena);
                } catch (Exception e) {
                    throw new ServiceException("Valor Campo concepto está en formato incorrecto");
                }
                break;
            case 5:
                try {
                    valorCadena = currentCell.getStringCellValue();
                    Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yy", valorCadena);
                    migCertificado.setFechaDesde(valorFechaD);
                } catch (Exception ex) {
                    throw new ServiceException("Valor Campo fechaDesde está en formato incorrecto");
                }
                break;
            case 6:
                try {
                    valorCadena = currentCell.getStringCellValue();
                    Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yy", valorCadena);
                    migCertificado.setFechaHasta(valorFechaD);
                } catch (Exception ex) {
                    throw new ServiceException("Valor Campo fechaHasta está en formato incorrecto");
                }
                break;
            case 7:
                try {
                    valorDecimal = new BigDecimal(currentCell.getNumericCellValue());
                    valorDecimal = valorDecimal.setScale(2, BigDecimal.ROUND_HALF_UP);
                    migCertificado.setMontoTotal(valorDecimal);
                } catch (Exception e) {
                    throw new ServiceException("Valor Campo montoTotal está en formato incorrecto");
                }
                break;
            case 8:
                try {
                    valorDecimal = new BigDecimal(currentCell.getNumericCellValue());
                    valorDecimal = valorDecimal.setScale(2, BigDecimal.ROUND_HALF_UP);
                    migCertificado.setMontoTotalAjustado(valorDecimal);
                } catch (Exception e) {
                    valorDecimal = new BigDecimal(0.0);
                    //throw new ServiceException("Valor Campo montoTotalAjustado está en formato incorrecto");
                }
                break;
            case 9:
                try {
                    valorCadena = currentCell.getStringCellValue();
                    if (valorCadena.length() > 2000) {
                        throw new ServiceException("Valor Campo hojaServicio contiene mas de 2000 caracter(es)");
                    }
                    migCertificado.setHojaServicio(valorCadena);
                } catch (Exception e) {
                    throw new ServiceException("Valor Campo hojaServicio está en formato incorrecto");
                }
                break;
            case 10:
                try {
                    valorCadena = currentCell.getStringCellValue();
                    if (valorCadena.length() > 10) {
                        throw new ServiceException("Valor Campo userFirmaA contiene mas de 10 caracter(es)");
                    }
                    migCertificado.setUserFirmaA(valorCadena);
                } catch (Exception e) {
                    throw new ServiceException("Valor Campo userFirmaA está en formato incorrecto");
                }
                break;
            case 11:
                try {
                    valorCadena = currentCell.getStringCellValue();
                    if (valorCadena.length() > 10) {
                        throw new ServiceException("Valor Campo userFirmaB contiene mas de 10 caracter(es)");
                    }
                    migCertificado.setUserFirmaB(valorCadena);
                } catch (Exception e) {
                    throw new ServiceException("Valor Campo userFirmaB está en formato incorrecto");
                }
                break;
            case 12:
                try {
                    valorCadena = currentCell.getStringCellValue();
                    if (valorCadena.length() > 500) {
                        throw new ServiceException("Valor Campo solicitante contiene mas de 500 caracter(es)");
                    }
                    migCertificado.setSolicitante(valorCadena);
                } catch (Exception e) {
                    throw new ServiceException("Valor Campo solicitante está en formato incorrecto");
                }
                break;
            case 13:
                try {
                    valorCadena = currentCell.getStringCellValue();
                    if (valorCadena.length() > 10) {
                        throw new ServiceException("Valor Campo sociedad contiene mas de 10 caracter(es)");
                    }
                    migCertificado.setSociedad(valorCadena);
                } catch (Exception e) {
                    throw new ServiceException("Valor Campo sociedad está en formato incorrecto");
                }
                break;
            case 14:
                try {
                    valorCadena = currentCell.getStringCellValue();
                    if (valorCadena.length() > 20) {
                        throw new ServiceException("Valor Campo moneda contiene mas de 20 caracter(es)");
                    }
                    migCertificado.setMoneda(valorCadena);
                } catch (Exception e) {
                    throw new ServiceException("Valor Campo moneda está en formato incorrecto");
                }
                break;
            case 15:
                try {
                    valorCadena = currentCell.getStringCellValue();
                    if (valorCadena.length() > 300) {
                        throw new ServiceException("Valor Campo proveedor contiene mas de 300 caracter(es)");
                    }
                    migCertificado.setProveedor(valorCadena);
                } catch (Exception e) {
                    throw new ServiceException("Valor Campo proveedor está en formato incorrecto");
                }
                break;
            default:
                break;
        }
        return migCertificado;
    }

    private String validacionesPreviasMigracion(MigCertificado bean) throws Exception {
        String mensaje = "";
        if (!Optional.of(bean.getNroPedido()).isPresent()) {
            String msg = "message.migCertificado.nroPedido.requerido";
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getCodigoCertificado()).isPresent()) {
            String msg = "message.migCertificado.codigoCertificado.requerido";
            mensaje += "* " + msg + "<br/>";
        }

        if (!Optional.of(bean.getFechaDesde()).isPresent()) {
            String msg = "message.migCertificado.fechaDesde.requerido";
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getFechaHasta()).isPresent()) {
            String msg = "message.migCertificado.fechaHasta.requerido";
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getMontoTotal()).isPresent()) {
            String msg = "message.migCertificado.montoTotal.requerido";
            mensaje += "* " + msg + "<br/>";
        }

        if (!Optional.of(bean.getSociedad()).isPresent()) {
            String msg = "message.migCertificado.sociedad.requerido";
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getMoneda()).isPresent()) {
            String msg = "message.migCertificado.moneda.requerido";
            mensaje += "* " + msg + "<br/>";
        }
        if (!Optional.of(bean.getProveedor()).isPresent()) {
            String msg = "message.migCertificado.proveedor.requerido";
            mensaje += "* " + msg + "<br/>";
        }

        return mensaje;
    }

}

/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/rest/EntitydeltaResource.java.e.vm
 */
package com.incloud.hcp.rest.delta;

import com.incloud.hcp.domain.MtrUsuarioFacturacion;
import com.incloud.hcp.rest.MtrUsuarioFacturacionRest;
import io.swagger.annotations.ApiOperation;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;

@RestController
@RequestMapping("/api/mtrUsuarioFacturacion")
public class MtrUsuarioFacturacionDeltaRest extends MtrUsuarioFacturacionRest {

    @ApiOperation(value = "Busca registro Usuarios Cupa", produces = "application/json")
    @GetMapping(value = "/_devuelveUsuarioCupa", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<MtrUsuarioFacturacion>> devuelveUsuarioCupa() throws URISyntaxException {
        log.debug(this.NOMBRE_CLASE + " - Ingresando _devuelveUsuarioCupa: ");
        try {
            return Optional.ofNullable(this.mtrUsuarioFacturacionDeltaRepository.devuelveUsuarioCupa())
                    .map(bean -> new ResponseEntity<>(bean, HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(e);
            }
            HttpHeaders headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    @ApiOperation(value = "Busca registro Usuarios Cupa en base a la Sociedad", produces = "application/json")
    @GetMapping(value = "/_devuelveUsuarioCupaSociedad/{mtrSociedadId}", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<MtrUsuarioFacturacion>> devuelveUsuarioCupaSociedad(@PathVariable Integer mtrSociedadId) throws URISyntaxException {
        log.debug(this.NOMBRE_CLASE + " - Ingresando _devuelveUsuarioCupaSociedad: " + mtrSociedadId);
        try {
            return Optional.ofNullable(this.mtrUsuarioFacturacionDeltaRepository.devuelveUsuarioCupaSociedad(mtrSociedadId))
                    .map(bean -> new ResponseEntity<>(bean, HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(e);
            }
            HttpHeaders headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    @ApiOperation(value = "Busca registro Usuarios Cupa en base al Sector", produces = "application/json")
    @GetMapping(value = "/_devuelveUsuarioCupaSector/{mtrSectorId}", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<MtrUsuarioFacturacion>> devuelveUsuarioCupaSector(@PathVariable Integer mtrSectorId) throws URISyntaxException {
        log.debug(this.NOMBRE_CLASE + " - Ingresando _devuelveUsuarioCupaSector: " + mtrSectorId);
        try {
            return Optional.ofNullable(this.mtrUsuarioFacturacionDeltaRepository.devuelveUsuarioCupaSector(mtrSectorId))
                    .map(bean -> new ResponseEntity<>(bean, HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(e);
            }
            HttpHeaders headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }


    @ApiOperation(value = "Busca registro Usuarios PreAprobador0", produces = "application/json")
    @GetMapping(value = "/_devuelveUsuarioPreAprobador0", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<MtrUsuarioFacturacion>> devuelveUsuarioPreAprobador0() throws URISyntaxException {
        log.debug(this.NOMBRE_CLASE + " - Ingresando _devuelveUsuarioPreAprobador0: ");
        try {
            return Optional.ofNullable(this.mtrUsuarioFacturacionDeltaRepository.devuelveUsuarioPreAprobador0())
                    .map(bean -> new ResponseEntity<>(bean, HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(e);
            }
            HttpHeaders headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    @ApiOperation(value = "Busca registro Usuarios PreAprobador0 en base a la Sociedad", produces = "application/json")
    @GetMapping(value = "/_devuelveUsuarioPreAprobador0Sociedad/{mtrSociedadId}", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<MtrUsuarioFacturacion>> devuelveUsuarioPreAprobador0Sociedad(@PathVariable Integer mtrSociedadId) throws URISyntaxException {
        log.debug(this.NOMBRE_CLASE + " - Ingresando _devuelveUsuarioPreAprobador0Sociedad: " + mtrSociedadId);
        try {
            return Optional.ofNullable(this.mtrUsuarioFacturacionDeltaRepository.devuelveUsuarioPreAprobador0Sociedad(mtrSociedadId))
                    .map(bean -> new ResponseEntity<>(bean, HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(e);
            }
            HttpHeaders headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    @ApiOperation(value = "Busca registro Usuarios PreAprobador0 en base al Sector", produces = "application/json")
    @GetMapping(value = "/_devuelveUsuarioPreAprobador0Sector/{mtrSectorId}", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<MtrUsuarioFacturacion>> devuelveUsuarioPreAprobador0Sector(@PathVariable Integer mtrSectorId) throws URISyntaxException {
        log.debug(this.NOMBRE_CLASE + " - Ingresando _devuelveUsuarioPreAprobador0Sector: " + mtrSectorId);
        try {
            return Optional.ofNullable(this.mtrUsuarioFacturacionDeltaRepository.devuelveUsuarioPreAprobador0Sector(mtrSectorId))
                    .map(bean -> new ResponseEntity<>(bean, HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(e);
            }
            HttpHeaders headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

}

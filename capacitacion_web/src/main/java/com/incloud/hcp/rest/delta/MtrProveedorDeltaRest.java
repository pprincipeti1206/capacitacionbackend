/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/rest/EntitydeltaResource.java.e.vm
 */
package com.incloud.hcp.rest.delta;

import com.incloud.hcp.domain.MtrProveedor;
import com.incloud.hcp.rest.MtrProveedorRest;
import com.incloud.hcp.service.delta.MtrProveedorDeltaService;
import com.incloud.hcp.util.Utils;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.InputStream;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;

@RestController
@RequestMapping("/api/mtrProveedor")
public class MtrProveedorDeltaRest extends MtrProveedorRest {

    @Autowired
    private MtrProveedorDeltaService mtrProveedorDeltaService;

    /**
     * Find by por Id
     */
    @ApiOperation(value = "Devuelve proveedor logueado", produces = "application/json")
    @GetMapping(value = "/_devuelveProveedorLogueado", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<MtrProveedor> devuelveProveedorLogueado() throws URISyntaxException {
        log.debug(this.NOMBRE_CLASE + " - Ingresando devuelveProveedorLogueado: ");
        try {
            return Optional.ofNullable(this.mtrProveedorDeltaService.devuelveProveedorLogueado()).map(bean -> new ResponseEntity<>(bean, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                String error = Utils.obtieneMensajeErrorExceptionDepurado(e);
                throw new RuntimeException(error);
            }
            HttpHeaders headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    @ApiOperation(value = "Cargar Proveedor desde el excel", produces = "application/json")
    @PostMapping(value = "/obtenerProveedorParaCreacion", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<MtrProveedor>> obtenerProveedorParaCreacion(@RequestParam("file") MultipartFile file) {
        log.error(  " - Ingresando obtenerProveedorParaCreacion: ");
        try {
            InputStream in = file.getInputStream();
            List<MtrProveedor> result = this.mtrProveedorDeltaService.listaCreacionProveedor(in);
            log.error(  " - Ingresando obtenerProveedorParaCreacion_2: ");
            return Optional.of(result).map(l -> new ResponseEntity<>(l, HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));

        } catch (Exception e) {
            throw new RuntimeException(e.getMessage());
        }
    }

}

/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/rest/EntityResource.java.e.vm
 */
package com.incloud.hcp.rest;

import com.incloud.hcp.common.BindingErrorsResponse;
import com.incloud.hcp.common.graph.GraphBean;
import com.incloud.hcp.domain.MtrCuentaMayor;
import com.incloud.hcp.domain.MtrSociedad;
import com.incloud.hcp.domain.MtrTipoImputacion;
import com.incloud.hcp.domain.response.MtrCuentaMayorResponse;
import com.incloud.hcp.repository.delta.MtrCuentaMayorDeltaRepository;
import com.incloud.hcp.rest._framework.JPACustomRest;
import com.incloud.hcp.service.delta.MtrCuentaMayorDeltaService;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;

import javax.validation.Valid;
import java.net.URISyntaxException;
import java.util.Optional;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;

public abstract class MtrCuentaMayorRest extends JPACustomRest<MtrCuentaMayorResponse, MtrCuentaMayor, Integer> {

    @Autowired
    protected MtrCuentaMayorDeltaService mtrCuentaMayorDeltaService;

    @Autowired
    protected MtrCuentaMayorDeltaRepository mtrCuentaMayorDeltaRepository;

    protected String setObtenerNombreArchivoExcel() {
        return "MtrCuentaMayor";
    }

    /************************/
    /* Instancia de Bean    */
    /************************/
    protected final MtrCuentaMayor createInstance() {
        MtrCuentaMayor mtrCuentaMayor = new MtrCuentaMayor();
        return mtrCuentaMayor;
    }

    /*****************/
    /* Otros Metodos */
    /*****************/

    /**
    * Contador de registros para el atributo mtrTipoImputacion.
    */
    @ApiOperation(value = "Contador de registros para el atributo mtrTipoImputacion", produces = "application/json")
    @PostMapping(value = "/countByMtrTipoImputacion", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<Long> countByMtrTipoImputacion(@RequestBody @Valid MtrTipoImputacion mtrTipoImputacion, BindingResult bindingResult)
            throws URISyntaxException {
        BindingErrorsResponse errors = new BindingErrorsResponse();
        HttpHeaders headers = new HttpHeaders();
        if (bindingResult.hasErrors()) {
            errors.addAllErrors(bindingResult);
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(errors.toJSON());
            }
            headers.add("errors", errors.toJSON());
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
        log.debug("Ingresando countByMtrTipoImputacion");
        try {
            return Optional.ofNullable(this.mtrCuentaMayorDeltaService.countByMtrTipoImputacion(mtrTipoImputacion))
                    .map(l -> new ResponseEntity<>(l, HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(e);
            }
            headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    /**
    * Genera Grafico de registros para el atributo mtrTipoImputacion.
    */
    @ApiOperation(value = "Genera Grafico de registros para el atributo mtrTipoImputacion", produces = "application/json")
    @GetMapping(value = "/graphByMtrTipoImputacion", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<GraphBean> graphByMtrTipoImputacion() throws URISyntaxException {
        log.debug("Ingresando graphByMtrTipoImputacion");
        try {
            return Optional.ofNullable(this.mtrCuentaMayorDeltaService.graphByMtrTipoImputacion()).map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(e);
            }
            HttpHeaders headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    /**
    * Contador de registros para el atributo mtrSociedad.
    */
    @ApiOperation(value = "Contador de registros para el atributo mtrSociedad", produces = "application/json")
    @PostMapping(value = "/countByMtrSociedad", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<Long> countByMtrSociedad(@RequestBody @Valid MtrSociedad mtrSociedad, BindingResult bindingResult) throws URISyntaxException {
        BindingErrorsResponse errors = new BindingErrorsResponse();
        HttpHeaders headers = new HttpHeaders();
        if (bindingResult.hasErrors()) {
            errors.addAllErrors(bindingResult);
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(errors.toJSON());
            }
            headers.add("errors", errors.toJSON());
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
        log.debug("Ingresando countByMtrSociedad");
        try {
            return Optional.ofNullable(this.mtrCuentaMayorDeltaService.countByMtrSociedad(mtrSociedad)).map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(e);
            }
            headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    /**
    * Genera Grafico de registros para el atributo mtrSociedad.
    */
    @ApiOperation(value = "Genera Grafico de registros para el atributo mtrSociedad", produces = "application/json")
    @GetMapping(value = "/graphByMtrSociedad", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<GraphBean> graphByMtrSociedad() throws URISyntaxException {
        log.debug("Ingresando graphByMtrSociedad");
        try {
            return Optional.ofNullable(this.mtrCuentaMayorDeltaService.graphByMtrSociedad()).map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(e);
            }
            HttpHeaders headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

}

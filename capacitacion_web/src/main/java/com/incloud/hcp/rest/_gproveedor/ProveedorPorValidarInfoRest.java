/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/rest/EntityResource.java.e.vm
 */
package com.incloud.hcp.rest._gproveedor;

import com.incloud.hcp.common.BindingErrorsResponse;
import com.incloud.hcp.common.excel.ExcelTypeEnum;
import com.incloud.hcp.domain._gproveedor.domain.ProveedorPorValidarInfo;
import com.incloud.hcp.repository._gproveedor.ProveedorPorValidarInfoRepository;
import com.incloud.hcp.rest._gproveedor._framework.AppRest;
import com.incloud.hcp.service._gproveedor.delta.ProveedorPorValidarInfoDeltaService;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.service.support.PageResponse;
import com.incloud.hcp.util.Utils;
import io.swagger.annotations.ApiOperation;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Optional;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;



public abstract class ProveedorPorValidarInfoRest extends AppRest {
    private final Logger log = LoggerFactory.getLogger(ProveedorPorValidarInfoRest.class);

    @Autowired
    protected ProveedorPorValidarInfoRepository proveedorPorValidarInfoRepository;

    @Autowired
    protected ProveedorPorValidarInfoDeltaService proveedorPorValidarInfoDeltaService;

    /**
    * Find by id ProveedorPorValidarInfo.
    */
    @ApiOperation(value = "Busca registro de tipo ProveedorPorValidarInfo en base al id enviado", produces = "application/json")
    @GetMapping(value = "/findById/{id}", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<ProveedorPorValidarInfo> findById(@PathVariable Integer id) throws URISyntaxException {
        log.debug("Find by id ProveedorPorValidarInfo : {}", id);
        try {
            return Optional.ofNullable(this.proveedorPorValidarInfoDeltaService.findOne(id).get())
                    .map(proveedorPorValidarInfo -> new ResponseEntity<>(proveedorPorValidarInfo, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
        } catch (Exception e) {
            String error = Utils.obtieneMensajeErrorException(e);
            throw new RuntimeException(error);
        }
    }

    /**
    * Find All sin paginacion ProveedorPorValidarInfo.
    */
    @ApiOperation(value = "Devuelve lista de registros de tipo ProveedorPorValidarInfo", produces = "application/json")
    @GetMapping(value = "/findAll", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<ProveedorPorValidarInfo>> findAll() throws URISyntaxException {
        log.debug("Ingresando findAll");
        try {
            return Optional.of(this.proveedorPorValidarInfoDeltaService.findAll()).map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            String error = Utils.obtieneMensajeErrorException(e);
            throw new RuntimeException(error);
        }
    }

    /**
    * Devuelve lista sin paginacion en base a los parametros ingresados en ProveedorPorValidarInfo.
    */
    @ApiOperation(value = "Devuelve lista de registros de tipo ProveedorPorValidarInfo en base a los par√°metros ingresados", produces = "application/json")
    @PostMapping(value = "/find", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<ProveedorPorValidarInfo>> find(@RequestBody ProveedorPorValidarInfo bean, BindingResult bindingResult)
            throws URISyntaxException {
        BindingErrorsResponse errors = new BindingErrorsResponse();
        HttpHeaders headers = new HttpHeaders();
        if (bindingResult.hasErrors()) {
            errors.addAllErrors(bindingResult);
            throw new RuntimeException(errors.toJSON());
        }
        log.debug("Ingresando find by ProveedorPorValidarInfo : {}", bean);
        try {
            return Optional.of(this.proveedorPorValidarInfoDeltaService.find(bean)).map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            String error = Utils.obtieneMensajeErrorException(e);
            throw new RuntimeException(error);
        }
    }

    /**
     * Find a Page of ProveedorPorValidarInfo using query by example.
     */
    @ApiOperation(value = "Devuelve lista de registros paginados de tipo ProveedorPorValidarInfo", produces = "application/json")
    @PostMapping(value = "/findPaginated", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<PageResponse<ProveedorPorValidarInfo>> findPaginated(@RequestBody PageRequestByExample<ProveedorPorValidarInfo> prbe,
                                                                               BindingResult bindingResult) throws URISyntaxException {
        BindingErrorsResponse errors = new BindingErrorsResponse();
        HttpHeaders headers = new HttpHeaders();
        if (bindingResult.hasErrors()) {
            errors.addAllErrors(bindingResult);
            throw new RuntimeException(errors.toJSON());
        }
        log.debug("Ingresando findPaginated by PageRequestByExample : {}", prbe);
        try {
            PageResponse<ProveedorPorValidarInfo> pageResponse = this.proveedorPorValidarInfoDeltaService.findPaginated(prbe);
            return new ResponseEntity<>(pageResponse, new HttpHeaders(), HttpStatus.OK);
        } catch (Exception e) {
            String error = Utils.obtieneMensajeErrorException(e);
            throw new RuntimeException(error);
        }
    }

    @ApiOperation(value = "Genera Excel XLSX de registros de tipo ProveedorPorValidarInfo", produces = "application/vnd.ms-excel")
    @GetMapping(value = "/downloadCompleteExcelXLSX", produces = { MediaType.APPLICATION_OCTET_STREAM_VALUE })
    public ResponseEntity<?> downloadCompleteExcelXLSX(HttpServletResponse response) {
        ProveedorPorValidarInfo bean = new ProveedorPorValidarInfo();
        log.debug("Ingresando downloadCompleteExcelXLSX by ProveedorPorValidarInfo : {}", bean);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd_hh_mm_ss");
        String excelFileName = "ProveedorPorValidarInfo_" + formatter.format(LocalDateTime.now()) + ".xlsx";
        SXSSFWorkbook book = this.proveedorPorValidarInfoDeltaService.downloadExcelSXLSX(bean);

        try {
            ByteArrayOutputStream outByteStream = new ByteArrayOutputStream();
            book.write(outByteStream);
            byte[] outArray = outByteStream.toByteArray();
            //response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
            response.setContentType(ExcelTypeEnum.XLSX.getExtension());
            response.setContentLength(outArray.length);
            response.setHeader("Expires:", "0"); // eliminates browser caching
            response.setHeader("Content-Disposition", "attachment; filename=" + excelFileName);
            OutputStream outStream = response.getOutputStream();
            outStream.write(outArray);
            outStream.flush();

            book.dispose();
            book.close();
        } catch (FileNotFoundException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            e.printStackTrace();
            throw new RuntimeException(error);
        } catch (IOException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            e.printStackTrace();
            throw new RuntimeException(error);
        }
        return new ResponseEntity<>(HttpStatus.OK);
    }

    @ApiOperation(value = "Genera insert Excel XLSX de registros de tipo ProveedorPorValidarInfo", produces = "application/vnd.ms-excel")
    @GetMapping(value = "/generateInsertExcelSXLSX", produces = { MediaType.APPLICATION_OCTET_STREAM_VALUE })
    public ResponseEntity<?> generateInsertExcelSXLSX(HttpServletResponse response) {
        ProveedorPorValidarInfo bean = new ProveedorPorValidarInfo();
        log.debug("Ingresando generateInsertExcelSXLSX by ProveedorPorValidarInfo : {}", bean);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd_hh_mm_ss");
        String excelFileName = "INSERT_ProveedorPorValidarInfo_" + formatter.format(LocalDateTime.now()) + ".xlsx";
        SXSSFWorkbook book = this.proveedorPorValidarInfoDeltaService.generateInsertExcelSXLSX(bean);

        try {
            ByteArrayOutputStream outByteStream = new ByteArrayOutputStream();
            book.write(outByteStream);
            byte[] outArray = outByteStream.toByteArray();
            //response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
            response.setContentType(ExcelTypeEnum.XLSX.getExtension());
            response.setContentLength(outArray.length);
            response.setHeader("Expires:", "0"); // eliminates browser caching
            response.setHeader("Content-Disposition", "attachment; filename=" + excelFileName);
            OutputStream outStream = response.getOutputStream();
            outStream.write(outArray);
            outStream.flush();

            book.dispose();
            book.close();
        } catch (FileNotFoundException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            e.printStackTrace();
            throw new RuntimeException(error);
        } catch (IOException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            e.printStackTrace();
            throw new RuntimeException(error);
        }
        return new ResponseEntity<>(HttpStatus.OK);
    }

    /**
     * Create a new ProveedorPorValidarInfo.
     */
    @ApiOperation(value = "Crea un nuevo registro de tipo ProveedorPorValidarInfo", produces = "application/json")
    @PostMapping(value = "/create", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<ProveedorPorValidarInfo> create(@RequestBody @Valid ProveedorPorValidarInfo proveedorPorValidarInfo, BindingResult bindingResult)
            throws URISyntaxException {
        BindingErrorsResponse errors = new BindingErrorsResponse();
        HttpHeaders headers = new HttpHeaders();
        if (bindingResult.hasErrors()) {
            errors.addAllErrors(bindingResult);
            throw new RuntimeException(errors.toJSON());
        }
        log.debug("Ingresando Create ProveedorPorValidarInfoRest : {}", proveedorPorValidarInfo);
        if (proveedorPorValidarInfo.isIdSet()) {
            return ResponseEntity.badRequest().header("Failure", "Cannot create ProveedorPorValidarInfo with existing ID").body(null);
        }
        try {
            ProveedorPorValidarInfo result = this.proveedorPorValidarInfoDeltaService.create(proveedorPorValidarInfo);
            return ResponseEntity.created(new URI("proveedorPorValidarInfos/" + result.getId())).body(result);
        } catch (Exception e) {
            String error = Utils.obtieneMensajeErrorException(e);
            throw new RuntimeException(error);
        }
    }

    /**
     * Update or created ProveedorPorValidarInfo.
     */
    @ApiOperation(value = "Modifica o crea registro de tipo ProveedorPorValidarInfo", produces = "application/json")
    @PostMapping(value = "/save", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<ProveedorPorValidarInfo> save(@RequestBody @Valid ProveedorPorValidarInfo proveedorPorValidarInfo, BindingResult bindingResult)
            throws URISyntaxException {
        BindingErrorsResponse errors = new BindingErrorsResponse();
        HttpHeaders headers = new HttpHeaders();
        if (bindingResult.hasErrors()) {
            errors.addAllErrors(bindingResult);
            throw new RuntimeException(errors.toJSON());
        }
        log.debug("Ingresando Update ProveedorPorValidarInfoRest : {}", proveedorPorValidarInfo);
        try {
            ProveedorPorValidarInfo result = this.proveedorPorValidarInfoDeltaService.save(proveedorPorValidarInfo);
            return Optional.of(result).map(l -> new ResponseEntity<>(l, HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            String error = Utils.obtieneMensajeErrorException(e);
            throw new RuntimeException(error);
        }
    }

    /**
     * Delete by id ProveedorPorValidarInfo.
     */
    @ApiOperation(value = "Elimina registro de tipo ProveedorPorValidarInfo", produces = "application/json")
    @DeleteMapping(value = "/{id}", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<Void> delete(@PathVariable Integer id) throws URISyntaxException {
        log.debug("Delete by id ProveedorPorValidarInfo : {}", id);
        try {
            this.proveedorPorValidarInfoDeltaService.delete(id);
            return ResponseEntity.ok().build();
        } catch (Exception x) {
            // todo: dig exception, most likely 
            String error = Utils.obtieneMensajeErrorException(x);
            throw new RuntimeException(error);
        }
    }

    /**
     * Delete ProveedorPorValidarInfo en forma total.
     */
    @ApiOperation(value = "Elimina todos los registros de tipo ProveedorPorValidarInfo", produces = "application/json")
    @DeleteMapping(value = "/deleteAll", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<?> deleteAll() throws URISyntaxException {
        log.debug("Ingresando deleteAll ProveedorPorValidarInfoRest");
        try {
            this.proveedorPorValidarInfoDeltaService.deleteAll();
            return new ResponseEntity<>(null, HttpStatus.OK);
        } catch (Exception e) {
            String error = Utils.obtieneMensajeErrorException(e);
            throw new RuntimeException(error);
        }
    }

    protected HttpHeaders devuelveErrorHeaders(Exception e) {
        String msjError = Utils.obtieneMensajeErrorException(e);
        HttpHeaders headers = new HttpHeaders();
        headers.add("errors", Utils.obtieneMensajeErrorException(e));
        return headers;
    }

}
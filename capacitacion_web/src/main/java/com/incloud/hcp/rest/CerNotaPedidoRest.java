/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/rest/EntityResource.java.e.vm
 */
package com.incloud.hcp.rest;

import com.incloud.hcp.common.BindingErrorsResponse;
import com.incloud.hcp.common.graph.GraphBean;
import com.incloud.hcp.domain.*;
import com.incloud.hcp.domain.response.CerNotaPedidoResponse;
import com.incloud.hcp.repository.delta.CerNotaPedidoDeltaRepository;
import com.incloud.hcp.rest._framework.JPACustomRest;
import com.incloud.hcp.service.delta.CerNotaPedidoDeltaService;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;

import javax.validation.Valid;
import java.net.URISyntaxException;
import java.util.Optional;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;

public abstract class CerNotaPedidoRest extends JPACustomRest<CerNotaPedidoResponse, CerNotaPedido, Integer> {

    @Autowired
    protected CerNotaPedidoDeltaService cerNotaPedidoDeltaService;

    @Autowired
    protected CerNotaPedidoDeltaRepository cerNotaPedidoDeltaRepository;

    protected String setObtenerNombreArchivoExcel() {
        return "CerNotaPedido";
    }

    /************************/
    /* Instancia de Bean    */
    /************************/
    protected final CerNotaPedido createInstance() {
        CerNotaPedido cerNotaPedido = new CerNotaPedido();
        return cerNotaPedido;
    }

    /**
     * Find by por codigoNotaPedidoSap
     */
    @ApiOperation(value = "Busca registro de tipo <T> en base a codigoNotaPedidoSap", produces = "application/json")
    @GetMapping(value = "/_getByCodigoNotaPedidoSap/{codigoNotaPedidoSap}", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<CerNotaPedido> getByCodigoNotaPedidoSap(@PathVariable String codigoNotaPedidoSap) throws URISyntaxException {
        log.debug(this.NOMBRE_CLASE + " - Ingresando getByCodigoNotaPedidoSap: " + codigoNotaPedidoSap);
        try {
            return Optional.ofNullable(this.cerNotaPedidoDeltaRepository.getByCodigoNotaPedidoSap(codigoNotaPedidoSap))
                    .map(bean -> new ResponseEntity<>(bean, HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(e);
            }
            HttpHeaders headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    /*****************/
    /* Otros Metodos */
    /*****************/

    /**
    * Contador de registros para el atributo mtrEstado.
    */
    @ApiOperation(value = "Contador de registros para el atributo mtrEstado", produces = "application/json")
    @PostMapping(value = "/countByMtrEstado", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<Long> countByMtrEstado(@RequestBody @Valid MtrEstado mtrEstado, BindingResult bindingResult) throws URISyntaxException {
        BindingErrorsResponse errors = new BindingErrorsResponse();
        HttpHeaders headers = new HttpHeaders();
        if (bindingResult.hasErrors()) {
            errors.addAllErrors(bindingResult);
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(errors.toJSON());
            }
            headers.add("errors", errors.toJSON());
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
        log.debug("Ingresando countByMtrEstado");
        try {
            return Optional.ofNullable(this.cerNotaPedidoDeltaService.countByMtrEstado(mtrEstado)).map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(e);
            }
            headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    /**
    * Genera Grafico de registros para el atributo mtrEstado.
    */
    @ApiOperation(value = "Genera Grafico de registros para el atributo mtrEstado", produces = "application/json")
    @GetMapping(value = "/graphByMtrEstado", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<GraphBean> graphByMtrEstado() throws URISyntaxException {
        log.debug("Ingresando graphByMtrEstado");
        try {
            return Optional.ofNullable(this.cerNotaPedidoDeltaService.graphByMtrEstado()).map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(e);
            }
            HttpHeaders headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    /**
    * Contador de registros para el atributo mtrOrgCompra.
    */
    @ApiOperation(value = "Contador de registros para el atributo mtrOrgCompra", produces = "application/json")
    @PostMapping(value = "/countByMtrOrgCompra", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<Long> countByMtrOrgCompra(@RequestBody @Valid MtrOrgCompra mtrOrgCompra, BindingResult bindingResult) throws URISyntaxException {
        BindingErrorsResponse errors = new BindingErrorsResponse();
        HttpHeaders headers = new HttpHeaders();
        if (bindingResult.hasErrors()) {
            errors.addAllErrors(bindingResult);
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(errors.toJSON());
            }
            headers.add("errors", errors.toJSON());
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
        log.debug("Ingresando countByMtrOrgCompra");
        try {
            return Optional.ofNullable(this.cerNotaPedidoDeltaService.countByMtrOrgCompra(mtrOrgCompra)).map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(e);
            }
            headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    /**
    * Genera Grafico de registros para el atributo mtrOrgCompra.
    */
    @ApiOperation(value = "Genera Grafico de registros para el atributo mtrOrgCompra", produces = "application/json")
    @GetMapping(value = "/graphByMtrOrgCompra", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<GraphBean> graphByMtrOrgCompra() throws URISyntaxException {
        log.debug("Ingresando graphByMtrOrgCompra");
        try {
            return Optional.ofNullable(this.cerNotaPedidoDeltaService.graphByMtrOrgCompra()).map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(e);
            }
            HttpHeaders headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    /**
    * Contador de registros para el atributo mtrSociedad.
    */
    @ApiOperation(value = "Contador de registros para el atributo mtrSociedad", produces = "application/json")
    @PostMapping(value = "/countByMtrSociedad", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<Long> countByMtrSociedad(@RequestBody @Valid MtrSociedad mtrSociedad, BindingResult bindingResult) throws URISyntaxException {
        BindingErrorsResponse errors = new BindingErrorsResponse();
        HttpHeaders headers = new HttpHeaders();
        if (bindingResult.hasErrors()) {
            errors.addAllErrors(bindingResult);
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(errors.toJSON());
            }
            headers.add("errors", errors.toJSON());
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
        log.debug("Ingresando countByMtrSociedad");
        try {
            return Optional.ofNullable(this.cerNotaPedidoDeltaService.countByMtrSociedad(mtrSociedad)).map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(e);
            }
            headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    /**
    * Genera Grafico de registros para el atributo mtrSociedad.
    */
    @ApiOperation(value = "Genera Grafico de registros para el atributo mtrSociedad", produces = "application/json")
    @GetMapping(value = "/graphByMtrSociedad", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<GraphBean> graphByMtrSociedad() throws URISyntaxException {
        log.debug("Ingresando graphByMtrSociedad");
        try {
            return Optional.ofNullable(this.cerNotaPedidoDeltaService.graphByMtrSociedad()).map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(e);
            }
            HttpHeaders headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    /**
    * Contador de registros para el atributo mtrClaseDocumento.
    */
    @ApiOperation(value = "Contador de registros para el atributo mtrClaseDocumento", produces = "application/json")
    @PostMapping(value = "/countByMtrClaseDocumento", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<Long> countByMtrClaseDocumento(@RequestBody @Valid MtrClaseDocumento mtrClaseDocumento, BindingResult bindingResult)
            throws URISyntaxException {
        BindingErrorsResponse errors = new BindingErrorsResponse();
        HttpHeaders headers = new HttpHeaders();
        if (bindingResult.hasErrors()) {
            errors.addAllErrors(bindingResult);
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(errors.toJSON());
            }
            headers.add("errors", errors.toJSON());
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
        log.debug("Ingresando countByMtrClaseDocumento");
        try {
            return Optional.ofNullable(this.cerNotaPedidoDeltaService.countByMtrClaseDocumento(mtrClaseDocumento))
                    .map(l -> new ResponseEntity<>(l, HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(e);
            }
            headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    /**
    * Genera Grafico de registros para el atributo mtrClaseDocumento.
    */
    @ApiOperation(value = "Genera Grafico de registros para el atributo mtrClaseDocumento", produces = "application/json")
    @GetMapping(value = "/graphByMtrClaseDocumento", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<GraphBean> graphByMtrClaseDocumento() throws URISyntaxException {
        log.debug("Ingresando graphByMtrClaseDocumento");
        try {
            return Optional.ofNullable(this.cerNotaPedidoDeltaService.graphByMtrClaseDocumento()).map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(e);
            }
            HttpHeaders headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    /**
    * Contador de registros para el atributo mtrMoneda.
    */
    @ApiOperation(value = "Contador de registros para el atributo mtrMoneda", produces = "application/json")
    @PostMapping(value = "/countByMtrMoneda", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<Long> countByMtrMoneda(@RequestBody @Valid MtrMoneda mtrMoneda, BindingResult bindingResult) throws URISyntaxException {
        BindingErrorsResponse errors = new BindingErrorsResponse();
        HttpHeaders headers = new HttpHeaders();
        if (bindingResult.hasErrors()) {
            errors.addAllErrors(bindingResult);
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(errors.toJSON());
            }
            headers.add("errors", errors.toJSON());
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
        log.debug("Ingresando countByMtrMoneda");
        try {
            return Optional.ofNullable(this.cerNotaPedidoDeltaService.countByMtrMoneda(mtrMoneda)).map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(e);
            }
            headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    /**
    * Genera Grafico de registros para el atributo mtrMoneda.
    */
    @ApiOperation(value = "Genera Grafico de registros para el atributo mtrMoneda", produces = "application/json")
    @GetMapping(value = "/graphByMtrMoneda", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<GraphBean> graphByMtrMoneda() throws URISyntaxException {
        log.debug("Ingresando graphByMtrMoneda");
        try {
            return Optional.ofNullable(this.cerNotaPedidoDeltaService.graphByMtrMoneda()).map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(e);
            }
            HttpHeaders headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    /**
    * Contador de registros para el atributo mtrCondicionPago.
    */
    @ApiOperation(value = "Contador de registros para el atributo mtrCondicionPago", produces = "application/json")
    @PostMapping(value = "/countByMtrCondicionPago", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<Long> countByMtrCondicionPago(@RequestBody @Valid MtrCondicionPago mtrCondicionPago, BindingResult bindingResult)
            throws URISyntaxException {
        BindingErrorsResponse errors = new BindingErrorsResponse();
        HttpHeaders headers = new HttpHeaders();
        if (bindingResult.hasErrors()) {
            errors.addAllErrors(bindingResult);
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(errors.toJSON());
            }
            headers.add("errors", errors.toJSON());
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
        log.debug("Ingresando countByMtrCondicionPago");
        try {
            return Optional.ofNullable(this.cerNotaPedidoDeltaService.countByMtrCondicionPago(mtrCondicionPago))
                    .map(l -> new ResponseEntity<>(l, HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(e);
            }
            headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    /**
    * Genera Grafico de registros para el atributo mtrCondicionPago.
    */
    @ApiOperation(value = "Genera Grafico de registros para el atributo mtrCondicionPago", produces = "application/json")
    @GetMapping(value = "/graphByMtrCondicionPago", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<GraphBean> graphByMtrCondicionPago() throws URISyntaxException {
        log.debug("Ingresando graphByMtrCondicionPago");
        try {
            return Optional.ofNullable(this.cerNotaPedidoDeltaService.graphByMtrCondicionPago()).map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(e);
            }
            HttpHeaders headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    /**
    * Contador de registros para el atributo mtrProveedor.
    */
    @ApiOperation(value = "Contador de registros para el atributo mtrProveedor", produces = "application/json")
    @PostMapping(value = "/countByMtrProveedor", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<Long> countByMtrProveedor(@RequestBody @Valid MtrProveedor mtrProveedor, BindingResult bindingResult) throws URISyntaxException {
        BindingErrorsResponse errors = new BindingErrorsResponse();
        HttpHeaders headers = new HttpHeaders();
        if (bindingResult.hasErrors()) {
            errors.addAllErrors(bindingResult);
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(errors.toJSON());
            }
            headers.add("errors", errors.toJSON());
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
        log.debug("Ingresando countByMtrProveedor");
        try {
            return Optional.ofNullable(this.cerNotaPedidoDeltaService.countByMtrProveedor(mtrProveedor)).map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(e);
            }
            headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

    /**
    * Genera Grafico de registros para el atributo mtrProveedor.
    */
    @ApiOperation(value = "Genera Grafico de registros para el atributo mtrProveedor", produces = "application/json")
    @GetMapping(value = "/graphByMtrProveedor", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<GraphBean> graphByMtrProveedor() throws URISyntaxException {
        log.debug("Ingresando graphByMtrProveedor");
        try {
            return Optional.ofNullable(this.cerNotaPedidoDeltaService.graphByMtrProveedor()).map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            if (this.devuelveRuntimeException) {
                throw new RuntimeException(e);
            }
            HttpHeaders headers = this.devuelveErrorHeaders(e);
            return new ResponseEntity<>(headers, HttpStatus.BAD_REQUEST);
        }
    }

}

/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/domain/Entity.java.e.vm
 */
package com.incloud.hcp.domain;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.google.common.base.MoreObjects;
import org.hibernate.validator.constraints.NotEmpty;

import javax.persistence.*;
import javax.validation.constraints.Digits;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.io.Serializable;
import java.util.Date;
import java.util.logging.Logger;

import static javax.persistence.GenerationType.SEQUENCE;
import static javax.persistence.TemporalType.TIMESTAMP;

@Entity
@Table(name = "mig_log_error")
//@Audited
//@AuditTable("_audi_mig_log_error")
public class MigLogError extends BaseDomain implements Identifiable<Integer>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = Logger.getLogger(MigLogError.class.getName());

    /***************************/
    /* Atributos de la Entidad */
    /***************************/

    // Raw attributes
    private Integer id;
    private String tabla;
    private Integer idRegistro;
    private Date fechaCreacion;
    private String error;

    @Override
    public String entityClassName() {
        return MigLogError.class.getSimpleName();
    }

    // -- [id] ------------------------

    @Override
    @Column(name = "mig_log_error_id", precision = 10)
    @GeneratedValue(strategy = SEQUENCE, generator = "seq_mig_log_error")
    @Id
    @SequenceGenerator(name = "seq_mig_log_error", sequenceName = "seq_mig_log_error", allocationSize = 1)
    public Integer getId() {
        return id;
    }

    @Override
    public void setId(Integer id) {
        this.id = id;
    }

    public MigLogError id(Integer id) {
        setId(id);
        return this;
    }

    @Override
    @Transient
    public boolean isIdSet() {
        return id != null;
    }
    // -- [tabla] ------------------------

    @NotEmpty(message = "{message.migLogError.tabla.requerido}")
    @Size(max = 40, message = "{message.migLogError.tabla.sizeMax} {max} {message.caracter}")
    @Column(name = "tabla", nullable = false, length = 40)
    public String getTabla() {
        return tabla;
    }

    public void setTabla(String tabla) {
        this.tabla = tabla;
    }

    public MigLogError tabla(String tabla) {
        setTabla(tabla);
        return this;
    }
    // -- [idRegistro] ------------------------

    @Digits(integer = 10, fraction = 0)
    @NotNull
    @Column(name = "id_registro", nullable = false, precision = 10)
    public Integer getIdRegistro() {
        return idRegistro;
    }

    public void setIdRegistro(Integer idRegistro) {
        this.idRegistro = idRegistro;
    }

    public MigLogError idRegistro(Integer idRegistro) {
        setIdRegistro(idRegistro);
        return this;
    }
    // -- [fechaCreacion] ------------------------

    @NotNull
    @Column(name = "fecha_creacion", nullable = false, length = 29)

    @Temporal(TIMESTAMP)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "dd/MM/yyyy")
    public Date getFechaCreacion() {
        return fechaCreacion;
    }

    public void setFechaCreacion(Date fechaCreacion) {
        this.fechaCreacion = fechaCreacion;
    }

    public MigLogError fechaCreacion(Date fechaCreacion) {
        setFechaCreacion(fechaCreacion);
        return this;
    }
    // -- [error] ------------------------

    @Size(max = 1000, message = "{message.migLogError.error.sizeMax} {max} {message.caracter}")
    @Column(name = "error", length = 1000)
    public String getError() {
        return error;
    }

    public void setError(String error) {
        this.error = error;
    }

    public MigLogError error(String error) {
        setError(error);
        return this;
    }

    /**
     * Apply the default values.
     */
    public MigLogError withDefaults() {
        return this;
    }

    /**
     * Equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof MigLogError && hashCode() == other.hashCode());
    }

    private IdentifiableHashBuilder identifiableHashBuilder = new IdentifiableHashBuilder();

    @Override
    public int hashCode() {
        return identifiableHashBuilder.hash(log, this);
    }

    /**
     * Construct a readable string representation for this MigLogError instance.
     * @see Object#toString()
     */
    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this) //
                .add("id", getId()) //
                .add("tabla", getTabla()) //
                .add("idRegistro", getIdRegistro()) //
                .add("fechaCreacion", getFechaCreacion()) //
                .add("error", getError()) //
                .toString();
    }
}
